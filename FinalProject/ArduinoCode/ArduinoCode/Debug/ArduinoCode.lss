
ArduinoCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006548  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00006548  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000047c  20000440  00006988  0002043c  2**3
                  ALLOC
  3 .stack        00002004  200008bc  00006e04  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fb03  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001994  00000000  00000000  0002ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001962  00000000  00000000  00031954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000520  00000000  00000000  000332b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000468  00000000  00000000  000337d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013e34  00000000  00000000  00033c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006831  00000000  00000000  00047a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007404e  00000000  00000000  0004e2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016dc  00000000  00000000  000c22f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 28 00 20 81 09 00 00 79 0a 00 00 79 0a 00 00     .(. ....y...y...
	...
      2c:	79 0a 00 00 00 00 00 00 00 00 00 00 79 0a 00 00     y...........y...
      3c:	dd 3a 00 00 79 0a 00 00 79 0a 00 00 79 0a 00 00     .:..y...y...y...
      4c:	79 0a 00 00 79 0a 00 00 79 0a 00 00 79 0a 00 00     y...y...y...y...
      5c:	79 0a 00 00 79 0a 00 00 79 0a 00 00 79 0a 00 00     y...y...y...y...
      6c:	79 0a 00 00 79 0a 00 00 79 0a 00 00 f9 30 00 00     y...y...y....0..
      7c:	79 0a 00 00 79 0a 00 00 79 0a 00 00 79 0a 00 00     y...y...y...y...
      8c:	79 0a 00 00 79 0a 00 00 00 00 00 00 00 00 00 00     y...y...........
      9c:	55 04 00 00 79 0a 00 00 79 0a 00 00 79 0a 00 00     U...y...y...y...
      ac:	79 0a 00 00 00 00 00 00                             y.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00006548 	.word	0x00006548

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00006548 	.word	0x00006548
     10c:	00006548 	.word	0x00006548
     110:	00000000 	.word	0x00000000

00000114 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <NVIC_EnableIRQ+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     140:	b5b0      	push	{r4, r5, r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	0002      	movs	r2, r0
     148:	6039      	str	r1, [r7, #0]
     14a:	1dfb      	adds	r3, r7, #7
     14c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     14e:	1dfb      	adds	r3, r7, #7
     150:	781b      	ldrb	r3, [r3, #0]
     152:	2b7f      	cmp	r3, #127	; 0x7f
     154:	d932      	bls.n	1bc <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     156:	4c2f      	ldr	r4, [pc, #188]	; (214 <NVIC_SetPriority+0xd4>)
     158:	1dfb      	adds	r3, r7, #7
     15a:	781b      	ldrb	r3, [r3, #0]
     15c:	001a      	movs	r2, r3
     15e:	230f      	movs	r3, #15
     160:	4013      	ands	r3, r2
     162:	3b08      	subs	r3, #8
     164:	0899      	lsrs	r1, r3, #2
     166:	4a2b      	ldr	r2, [pc, #172]	; (214 <NVIC_SetPriority+0xd4>)
     168:	1dfb      	adds	r3, r7, #7
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	0018      	movs	r0, r3
     16e:	230f      	movs	r3, #15
     170:	4003      	ands	r3, r0
     172:	3b08      	subs	r3, #8
     174:	089b      	lsrs	r3, r3, #2
     176:	3306      	adds	r3, #6
     178:	009b      	lsls	r3, r3, #2
     17a:	18d3      	adds	r3, r2, r3
     17c:	3304      	adds	r3, #4
     17e:	681b      	ldr	r3, [r3, #0]
     180:	1dfa      	adds	r2, r7, #7
     182:	7812      	ldrb	r2, [r2, #0]
     184:	0010      	movs	r0, r2
     186:	2203      	movs	r2, #3
     188:	4002      	ands	r2, r0
     18a:	00d2      	lsls	r2, r2, #3
     18c:	20ff      	movs	r0, #255	; 0xff
     18e:	4090      	lsls	r0, r2
     190:	0002      	movs	r2, r0
     192:	43d2      	mvns	r2, r2
     194:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     196:	683b      	ldr	r3, [r7, #0]
     198:	019b      	lsls	r3, r3, #6
     19a:	20ff      	movs	r0, #255	; 0xff
     19c:	4018      	ands	r0, r3
     19e:	1dfb      	adds	r3, r7, #7
     1a0:	781b      	ldrb	r3, [r3, #0]
     1a2:	001d      	movs	r5, r3
     1a4:	2303      	movs	r3, #3
     1a6:	402b      	ands	r3, r5
     1a8:	00db      	lsls	r3, r3, #3
     1aa:	4098      	lsls	r0, r3
     1ac:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1ae:	431a      	orrs	r2, r3
     1b0:	1d8b      	adds	r3, r1, #6
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	18e3      	adds	r3, r4, r3
     1b6:	3304      	adds	r3, #4
     1b8:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     1ba:	e027      	b.n	20c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1bc:	4c16      	ldr	r4, [pc, #88]	; (218 <NVIC_SetPriority+0xd8>)
     1be:	1dfb      	adds	r3, r7, #7
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	b25b      	sxtb	r3, r3
     1c4:	089b      	lsrs	r3, r3, #2
     1c6:	4914      	ldr	r1, [pc, #80]	; (218 <NVIC_SetPriority+0xd8>)
     1c8:	1dfa      	adds	r2, r7, #7
     1ca:	7812      	ldrb	r2, [r2, #0]
     1cc:	b252      	sxtb	r2, r2
     1ce:	0892      	lsrs	r2, r2, #2
     1d0:	32c0      	adds	r2, #192	; 0xc0
     1d2:	0092      	lsls	r2, r2, #2
     1d4:	5852      	ldr	r2, [r2, r1]
     1d6:	1df9      	adds	r1, r7, #7
     1d8:	7809      	ldrb	r1, [r1, #0]
     1da:	0008      	movs	r0, r1
     1dc:	2103      	movs	r1, #3
     1de:	4001      	ands	r1, r0
     1e0:	00c9      	lsls	r1, r1, #3
     1e2:	20ff      	movs	r0, #255	; 0xff
     1e4:	4088      	lsls	r0, r1
     1e6:	0001      	movs	r1, r0
     1e8:	43c9      	mvns	r1, r1
     1ea:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     1ec:	683a      	ldr	r2, [r7, #0]
     1ee:	0192      	lsls	r2, r2, #6
     1f0:	20ff      	movs	r0, #255	; 0xff
     1f2:	4010      	ands	r0, r2
     1f4:	1dfa      	adds	r2, r7, #7
     1f6:	7812      	ldrb	r2, [r2, #0]
     1f8:	0015      	movs	r5, r2
     1fa:	2203      	movs	r2, #3
     1fc:	402a      	ands	r2, r5
     1fe:	00d2      	lsls	r2, r2, #3
     200:	4090      	lsls	r0, r2
     202:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     204:	430a      	orrs	r2, r1
     206:	33c0      	adds	r3, #192	; 0xc0
     208:	009b      	lsls	r3, r3, #2
     20a:	511a      	str	r2, [r3, r4]
}
     20c:	46c0      	nop			; (mov r8, r8)
     20e:	46bd      	mov	sp, r7
     210:	b002      	add	sp, #8
     212:	bdb0      	pop	{r4, r5, r7, pc}
     214:	e000ed00 	.word	0xe000ed00
     218:	e000e100 	.word	0xe000e100

0000021c <adc_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void adc_init() {
     21c:	b580      	push	{r7, lr}
     21e:	af00      	add	r7, sp, #0
    // Enable power ADC in manager
    PM->APBCMASK.bit.ADC_ = 1;
     220:	4a3d      	ldr	r2, [pc, #244]	; (318 <adc_init+0xfc>)
     222:	6a13      	ldr	r3, [r2, #32]
     224:	2180      	movs	r1, #128	; 0x80
     226:	0249      	lsls	r1, r1, #9
     228:	430b      	orrs	r3, r1
     22a:	6213      	str	r3, [r2, #32]

    // Enable GCLK for ADC
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_ID_ADC | GCLK_CLKCTRL_CLKEN |
     22c:	4b3b      	ldr	r3, [pc, #236]	; (31c <adc_init+0x100>)
     22e:	4a3c      	ldr	r2, [pc, #240]	; (320 <adc_init+0x104>)
     230:	805a      	strh	r2, [r3, #2]
    GCLK_CLKCTRL_GEN_GCLK0);

    // =================================== //

    // Enable the ADC
    ADC->CTRLA.bit.ENABLE = 1;
     232:	4a3c      	ldr	r2, [pc, #240]	; (324 <adc_init+0x108>)
     234:	7813      	ldrb	r3, [r2, #0]
     236:	2102      	movs	r1, #2
     238:	430b      	orrs	r3, r1
     23a:	7013      	strb	r3, [r2, #0]
    while (ADC->STATUS.bit.SYNCBUSY);
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	4b39      	ldr	r3, [pc, #228]	; (324 <adc_init+0x108>)
     240:	7e5b      	ldrb	r3, [r3, #25]
     242:	061b      	lsls	r3, r3, #24
     244:	0fdb      	lsrs	r3, r3, #31
     246:	b2db      	uxtb	r3, r3
     248:	2b00      	cmp	r3, #0
     24a:	d1f8      	bne.n	23e <adc_init+0x22>

    // Set the reference
    ADC->REFCTRL.bit.REFSEL = 0x2;
     24c:	4a35      	ldr	r2, [pc, #212]	; (324 <adc_init+0x108>)
     24e:	7853      	ldrb	r3, [r2, #1]
     250:	210f      	movs	r1, #15
     252:	438b      	bics	r3, r1
     254:	1c19      	adds	r1, r3, #0
     256:	2302      	movs	r3, #2
     258:	430b      	orrs	r3, r1
     25a:	7053      	strb	r3, [r2, #1]
    while (ADC->STATUS.bit.SYNCBUSY);
     25c:	46c0      	nop			; (mov r8, r8)
     25e:	4b31      	ldr	r3, [pc, #196]	; (324 <adc_init+0x108>)
     260:	7e5b      	ldrb	r3, [r3, #25]
     262:	061b      	lsls	r3, r3, #24
     264:	0fdb      	lsrs	r3, r3, #31
     266:	b2db      	uxtb	r3, r3
     268:	2b00      	cmp	r3, #0
     26a:	d1f8      	bne.n	25e <adc_init+0x42>

    // Read INTVCC1 raw (no scaling)
    ADC->INPUTCTRL.bit.GAIN = 0x0;
     26c:	4a2d      	ldr	r2, [pc, #180]	; (324 <adc_init+0x108>)
     26e:	6913      	ldr	r3, [r2, #16]
     270:	492d      	ldr	r1, [pc, #180]	; (328 <adc_init+0x10c>)
     272:	400b      	ands	r3, r1
     274:	6113      	str	r3, [r2, #16]
    while (ADC->STATUS.bit.SYNCBUSY);
     276:	46c0      	nop			; (mov r8, r8)
     278:	4b2a      	ldr	r3, [pc, #168]	; (324 <adc_init+0x108>)
     27a:	7e5b      	ldrb	r3, [r3, #25]
     27c:	061b      	lsls	r3, r3, #24
     27e:	0fdb      	lsrs	r3, r3, #31
     280:	b2db      	uxtb	r3, r3
     282:	2b00      	cmp	r3, #0
     284:	d1f8      	bne.n	278 <adc_init+0x5c>

    // Pre-scalar 16, 12-bit resolution
    ADC->CTRLB.reg = (ADC_CTRLB_PRESCALER_DIV16 | ADC_CTRLB_RESSEL_12BIT);
     286:	4b27      	ldr	r3, [pc, #156]	; (324 <adc_init+0x108>)
     288:	2280      	movs	r2, #128	; 0x80
     28a:	0092      	lsls	r2, r2, #2
     28c:	809a      	strh	r2, [r3, #4]
    while (ADC->STATUS.bit.SYNCBUSY);
     28e:	46c0      	nop			; (mov r8, r8)
     290:	4b24      	ldr	r3, [pc, #144]	; (324 <adc_init+0x108>)
     292:	7e5b      	ldrb	r3, [r3, #25]
     294:	061b      	lsls	r3, r3, #24
     296:	0fdb      	lsrs	r3, r3, #31
     298:	b2db      	uxtb	r3, r3
     29a:	2b00      	cmp	r3, #0
     29c:	d1f8      	bne.n	290 <adc_init+0x74>

    // Set negative input to ground
    ADC->INPUTCTRL.bit.MUXNEG = 0x18;
     29e:	4a21      	ldr	r2, [pc, #132]	; (324 <adc_init+0x108>)
     2a0:	6913      	ldr	r3, [r2, #16]
     2a2:	4922      	ldr	r1, [pc, #136]	; (32c <adc_init+0x110>)
     2a4:	400b      	ands	r3, r1
     2a6:	21c0      	movs	r1, #192	; 0xc0
     2a8:	0149      	lsls	r1, r1, #5
     2aa:	430b      	orrs	r3, r1
     2ac:	6113      	str	r3, [r2, #16]
    while (ADC->STATUS.bit.SYNCBUSY);
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	4b1c      	ldr	r3, [pc, #112]	; (324 <adc_init+0x108>)
     2b2:	7e5b      	ldrb	r3, [r3, #25]
     2b4:	061b      	lsls	r3, r3, #24
     2b6:	0fdb      	lsrs	r3, r3, #31
     2b8:	b2db      	uxtb	r3, r3
     2ba:	2b00      	cmp	r3, #0
     2bc:	d1f8      	bne.n	2b0 <adc_init+0x94>

    // Enable averaging 4 samples
    ADC->AVGCTRL.reg = (ADC_AVGCTRL_SAMPLENUM_4_Val |
     2be:	4b19      	ldr	r3, [pc, #100]	; (324 <adc_init+0x108>)
     2c0:	2222      	movs	r2, #34	; 0x22
     2c2:	709a      	strb	r2, [r3, #2]
        ADC_AVGCTRL_ADJRES(2));
    while (ADC->STATUS.bit.SYNCBUSY);
     2c4:	46c0      	nop			; (mov r8, r8)
     2c6:	4b17      	ldr	r3, [pc, #92]	; (324 <adc_init+0x108>)
     2c8:	7e5b      	ldrb	r3, [r3, #25]
     2ca:	061b      	lsls	r3, r3, #24
     2cc:	0fdb      	lsrs	r3, r3, #31
     2ce:	b2db      	uxtb	r3, r3
     2d0:	2b00      	cmp	r3, #0
     2d2:	d1f8      	bne.n	2c6 <adc_init+0xaa>

    // =================================== //

    // Enable interrupt for result ready
    ADC->INTENSET.bit.RESRDY = 1;
     2d4:	4a13      	ldr	r2, [pc, #76]	; (324 <adc_init+0x108>)
     2d6:	7dd3      	ldrb	r3, [r2, #23]
     2d8:	2101      	movs	r1, #1
     2da:	430b      	orrs	r3, r1
     2dc:	75d3      	strb	r3, [r2, #23]
    while (ADC->STATUS.bit.SYNCBUSY);
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b10      	ldr	r3, [pc, #64]	; (324 <adc_init+0x108>)
     2e2:	7e5b      	ldrb	r3, [r3, #25]
     2e4:	061b      	lsls	r3, r3, #24
     2e6:	0fdb      	lsrs	r3, r3, #31
     2e8:	b2db      	uxtb	r3, r3
     2ea:	2b00      	cmp	r3, #0
     2ec:	d1f8      	bne.n	2e0 <adc_init+0xc4>

    // Enable ADC interrupts
    NVIC_SetPriority(ADC_IRQn, 3);
     2ee:	2103      	movs	r1, #3
     2f0:	2017      	movs	r0, #23
     2f2:	4b0f      	ldr	r3, [pc, #60]	; (330 <adc_init+0x114>)
     2f4:	4798      	blx	r3
    NVIC_EnableIRQ(ADC_IRQn);
     2f6:	2017      	movs	r0, #23
     2f8:	4b0e      	ldr	r3, [pc, #56]	; (334 <adc_init+0x118>)
     2fa:	4798      	blx	r3

    // Prep ADC
    _adc_read_state = ADC_READ_1;
     2fc:	4b0e      	ldr	r3, [pc, #56]	; (338 <adc_init+0x11c>)
     2fe:	2201      	movs	r2, #1
     300:	701a      	strb	r2, [r3, #0]
    _adc_callback = _adc_default = _adc_default_func;
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <adc_init+0x120>)
     304:	4a0e      	ldr	r2, [pc, #56]	; (340 <adc_init+0x124>)
     306:	601a      	str	r2, [r3, #0]
     308:	4b0c      	ldr	r3, [pc, #48]	; (33c <adc_init+0x120>)
     30a:	681a      	ldr	r2, [r3, #0]
     30c:	4b0d      	ldr	r3, [pc, #52]	; (344 <adc_init+0x128>)
     30e:	601a      	str	r2, [r3, #0]
}
     310:	46c0      	nop			; (mov r8, r8)
     312:	46bd      	mov	sp, r7
     314:	bd80      	pop	{r7, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	40000400 	.word	0x40000400
     31c:	40000c00 	.word	0x40000c00
     320:	0000401e 	.word	0x0000401e
     324:	42004000 	.word	0x42004000
     328:	f0ffffff 	.word	0xf0ffffff
     32c:	ffffe0ff 	.word	0xffffe0ff
     330:	00000141 	.word	0x00000141
     334:	00000115 	.word	0x00000115
     338:	20000478 	.word	0x20000478
     33c:	2000047c 	.word	0x2000047c
     340:	0000043d 	.word	0x0000043d
     344:	20000474 	.word	0x20000474

00000348 <adc_stop>:

//==============================================================================
void adc_stop() {
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
    // Disable the ADC
    ADC->CTRLA.bit.ENABLE = 0;
     34c:	4a0a      	ldr	r2, [pc, #40]	; (378 <adc_stop+0x30>)
     34e:	7813      	ldrb	r3, [r2, #0]
     350:	2102      	movs	r1, #2
     352:	438b      	bics	r3, r1
     354:	7013      	strb	r3, [r2, #0]
    while (ADC->STATUS.bit.SYNCBUSY);
     356:	46c0      	nop			; (mov r8, r8)
     358:	4b07      	ldr	r3, [pc, #28]	; (378 <adc_stop+0x30>)
     35a:	7e5b      	ldrb	r3, [r3, #25]
     35c:	061b      	lsls	r3, r3, #24
     35e:	0fdb      	lsrs	r3, r3, #31
     360:	b2db      	uxtb	r3, r3
     362:	2b00      	cmp	r3, #0
     364:	d1f8      	bne.n	358 <adc_stop+0x10>

    // Unregister the callback if one present
    adc_unregister(_adc_callback);
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <adc_stop+0x34>)
     368:	681b      	ldr	r3, [r3, #0]
     36a:	0018      	movs	r0, r3
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <adc_stop+0x38>)
     36e:	4798      	blx	r3
}
     370:	46c0      	nop			; (mov r8, r8)
     372:	46bd      	mov	sp, r7
     374:	bd80      	pop	{r7, pc}
     376:	46c0      	nop			; (mov r8, r8)
     378:	42004000 	.word	0x42004000
     37c:	20000474 	.word	0x20000474
     380:	00000411 	.word	0x00000411

00000384 <adc_read>:

//==============================================================================
void adc_read(uint8_t pin) {
     384:	b580      	push	{r7, lr}
     386:	b082      	sub	sp, #8
     388:	af00      	add	r7, sp, #0
     38a:	0002      	movs	r2, r0
     38c:	1dfb      	adds	r3, r7, #7
     38e:	701a      	strb	r2, [r3, #0]
    // Set positive input to source
    ADC->INPUTCTRL.bit.MUXPOS = pin;
     390:	4a12      	ldr	r2, [pc, #72]	; (3dc <adc_read+0x58>)
     392:	1dfb      	adds	r3, r7, #7
     394:	781b      	ldrb	r3, [r3, #0]
     396:	211f      	movs	r1, #31
     398:	400b      	ands	r3, r1
     39a:	b2d9      	uxtb	r1, r3
     39c:	6913      	ldr	r3, [r2, #16]
     39e:	201f      	movs	r0, #31
     3a0:	4001      	ands	r1, r0
     3a2:	201f      	movs	r0, #31
     3a4:	4383      	bics	r3, r0
     3a6:	430b      	orrs	r3, r1
     3a8:	6113      	str	r3, [r2, #16]
    while (ADC->STATUS.bit.SYNCBUSY);
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	4b0b      	ldr	r3, [pc, #44]	; (3dc <adc_read+0x58>)
     3ae:	7e5b      	ldrb	r3, [r3, #25]
     3b0:	061b      	lsls	r3, r3, #24
     3b2:	0fdb      	lsrs	r3, r3, #31
     3b4:	b2db      	uxtb	r3, r3
     3b6:	2b00      	cmp	r3, #0
     3b8:	d1f8      	bne.n	3ac <adc_read+0x28>

    // Start conversion
    ADC->SWTRIG.bit.START = 1;
     3ba:	4a08      	ldr	r2, [pc, #32]	; (3dc <adc_read+0x58>)
     3bc:	7b13      	ldrb	r3, [r2, #12]
     3be:	2102      	movs	r1, #2
     3c0:	430b      	orrs	r3, r1
     3c2:	7313      	strb	r3, [r2, #12]
    while (ADC->STATUS.bit.SYNCBUSY);
     3c4:	46c0      	nop			; (mov r8, r8)
     3c6:	4b05      	ldr	r3, [pc, #20]	; (3dc <adc_read+0x58>)
     3c8:	7e5b      	ldrb	r3, [r3, #25]
     3ca:	061b      	lsls	r3, r3, #24
     3cc:	0fdb      	lsrs	r3, r3, #31
     3ce:	b2db      	uxtb	r3, r3
     3d0:	2b00      	cmp	r3, #0
     3d2:	d1f8      	bne.n	3c6 <adc_read+0x42>
}
     3d4:	46c0      	nop			; (mov r8, r8)
     3d6:	46bd      	mov	sp, r7
     3d8:	b002      	add	sp, #8
     3da:	bd80      	pop	{r7, pc}
     3dc:	42004000 	.word	0x42004000

000003e0 <adc_register>:

//==============================================================================
uint8_t adc_register(adc_callback_t callback) {
     3e0:	b580      	push	{r7, lr}
     3e2:	b082      	sub	sp, #8
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
    if (_adc_callback == _adc_default) {
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <adc_register+0x28>)
     3ea:	681a      	ldr	r2, [r3, #0]
     3ec:	4b07      	ldr	r3, [pc, #28]	; (40c <adc_register+0x2c>)
     3ee:	681b      	ldr	r3, [r3, #0]
     3f0:	429a      	cmp	r2, r3
     3f2:	d104      	bne.n	3fe <adc_register+0x1e>
        _adc_callback = callback;
     3f4:	4b04      	ldr	r3, [pc, #16]	; (408 <adc_register+0x28>)
     3f6:	687a      	ldr	r2, [r7, #4]
     3f8:	601a      	str	r2, [r3, #0]
        return 1;
     3fa:	2301      	movs	r3, #1
     3fc:	e000      	b.n	400 <adc_register+0x20>
    }
    return 0;
     3fe:	2300      	movs	r3, #0
}
     400:	0018      	movs	r0, r3
     402:	46bd      	mov	sp, r7
     404:	b002      	add	sp, #8
     406:	bd80      	pop	{r7, pc}
     408:	20000474 	.word	0x20000474
     40c:	2000047c 	.word	0x2000047c

00000410 <adc_unregister>:

//==============================================================================
void adc_unregister(adc_callback_t callback) {
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
    if (_adc_callback == callback) {
     418:	4b06      	ldr	r3, [pc, #24]	; (434 <adc_unregister+0x24>)
     41a:	681a      	ldr	r2, [r3, #0]
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	429a      	cmp	r2, r3
     420:	d103      	bne.n	42a <adc_unregister+0x1a>
        _adc_callback = _adc_default;
     422:	4b05      	ldr	r3, [pc, #20]	; (438 <adc_unregister+0x28>)
     424:	681a      	ldr	r2, [r3, #0]
     426:	4b03      	ldr	r3, [pc, #12]	; (434 <adc_unregister+0x24>)
     428:	601a      	str	r2, [r3, #0]
    }
}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	46bd      	mov	sp, r7
     42e:	b002      	add	sp, #8
     430:	bd80      	pop	{r7, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	20000474 	.word	0x20000474
     438:	2000047c 	.word	0x2000047c

0000043c <_adc_default_func>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _adc_default_func(uint16_t data) {
     43c:	b580      	push	{r7, lr}
     43e:	b082      	sub	sp, #8
     440:	af00      	add	r7, sp, #0
     442:	0002      	movs	r2, r0
     444:	1dbb      	adds	r3, r7, #6
     446:	801a      	strh	r2, [r3, #0]
    return 0;
     448:	2300      	movs	r3, #0
}
     44a:	0018      	movs	r0, r3
     44c:	46bd      	mov	sp, r7
     44e:	b002      	add	sp, #8
     450:	bd80      	pop	{r7, pc}
	...

00000454 <ADC_Handler>:
//     | .__/ |  \  .__/
//
//------------------------------------------------------------------------------

//==============================================================================
void ADC_Handler() {
     454:	b580      	push	{r7, lr}
     456:	af00      	add	r7, sp, #0
    // First read state (will be thrown out)
    if (_adc_read_state == ADC_READ_1)
     458:	4b2d      	ldr	r3, [pc, #180]	; (510 <ADC_Handler+0xbc>)
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	2b01      	cmp	r3, #1
     45e:	d122      	bne.n	4a6 <ADC_Handler+0x52>
    {
        // Read the value to clear the ADC flag
        while (ADC->STATUS.bit.SYNCBUSY);
     460:	46c0      	nop			; (mov r8, r8)
     462:	4b2c      	ldr	r3, [pc, #176]	; (514 <ADC_Handler+0xc0>)
     464:	7e5b      	ldrb	r3, [r3, #25]
     466:	061b      	lsls	r3, r3, #24
     468:	0fdb      	lsrs	r3, r3, #31
     46a:	b2db      	uxtb	r3, r3
     46c:	2b00      	cmp	r3, #0
     46e:	d1f8      	bne.n	462 <ADC_Handler+0xe>
        ADC->RESULT.reg;
     470:	4b28      	ldr	r3, [pc, #160]	; (514 <ADC_Handler+0xc0>)
     472:	8b5b      	ldrh	r3, [r3, #26]
        while (ADC->STATUS.bit.SYNCBUSY);
     474:	46c0      	nop			; (mov r8, r8)
     476:	4b27      	ldr	r3, [pc, #156]	; (514 <ADC_Handler+0xc0>)
     478:	7e5b      	ldrb	r3, [r3, #25]
     47a:	061b      	lsls	r3, r3, #24
     47c:	0fdb      	lsrs	r3, r3, #31
     47e:	b2db      	uxtb	r3, r3
     480:	2b00      	cmp	r3, #0
     482:	d1f8      	bne.n	476 <ADC_Handler+0x22>

        // Start conversion
        ADC->SWTRIG.bit.START = 1;
     484:	4a23      	ldr	r2, [pc, #140]	; (514 <ADC_Handler+0xc0>)
     486:	7b13      	ldrb	r3, [r2, #12]
     488:	2102      	movs	r1, #2
     48a:	430b      	orrs	r3, r1
     48c:	7313      	strb	r3, [r2, #12]
        while (ADC->STATUS.bit.SYNCBUSY);
     48e:	46c0      	nop			; (mov r8, r8)
     490:	4b20      	ldr	r3, [pc, #128]	; (514 <ADC_Handler+0xc0>)
     492:	7e5b      	ldrb	r3, [r3, #25]
     494:	061b      	lsls	r3, r3, #24
     496:	0fdb      	lsrs	r3, r3, #31
     498:	b2db      	uxtb	r3, r3
     49a:	2b00      	cmp	r3, #0
     49c:	d1f8      	bne.n	490 <ADC_Handler+0x3c>

        // Update ADC status
        _adc_read_state = ADC_READ_2;
     49e:	4b1c      	ldr	r3, [pc, #112]	; (510 <ADC_Handler+0xbc>)
     4a0:	2202      	movs	r2, #2
     4a2:	701a      	strb	r2, [r3, #0]
        while (ADC->STATUS.bit.SYNCBUSY);

        // Reset ADC status
        _adc_read_state = ADC_READ_1;
    }
     4a4:	e030      	b.n	508 <ADC_Handler+0xb4>
    else if (_adc_read_state == ADC_READ_2)
     4a6:	4b1a      	ldr	r3, [pc, #104]	; (510 <ADC_Handler+0xbc>)
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	2b02      	cmp	r3, #2
     4ac:	d12c      	bne.n	508 <ADC_Handler+0xb4>
        while (ADC->STATUS.bit.SYNCBUSY);
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	4b18      	ldr	r3, [pc, #96]	; (514 <ADC_Handler+0xc0>)
     4b2:	7e5b      	ldrb	r3, [r3, #25]
     4b4:	061b      	lsls	r3, r3, #24
     4b6:	0fdb      	lsrs	r3, r3, #31
     4b8:	b2db      	uxtb	r3, r3
     4ba:	2b00      	cmp	r3, #0
     4bc:	d1f8      	bne.n	4b0 <ADC_Handler+0x5c>
        if (_adc_callback(ADC->RESULT.reg)) {
     4be:	4b16      	ldr	r3, [pc, #88]	; (518 <ADC_Handler+0xc4>)
     4c0:	681b      	ldr	r3, [r3, #0]
     4c2:	4a14      	ldr	r2, [pc, #80]	; (514 <ADC_Handler+0xc0>)
     4c4:	8b52      	ldrh	r2, [r2, #26]
     4c6:	b292      	uxth	r2, r2
     4c8:	0010      	movs	r0, r2
     4ca:	4798      	blx	r3
     4cc:	1e03      	subs	r3, r0, #0
     4ce:	d004      	beq.n	4da <ADC_Handler+0x86>
            adc_unregister(_adc_callback);
     4d0:	4b11      	ldr	r3, [pc, #68]	; (518 <ADC_Handler+0xc4>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	0018      	movs	r0, r3
     4d6:	4b11      	ldr	r3, [pc, #68]	; (51c <ADC_Handler+0xc8>)
     4d8:	4798      	blx	r3
        while (ADC->STATUS.bit.SYNCBUSY);
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	4b0d      	ldr	r3, [pc, #52]	; (514 <ADC_Handler+0xc0>)
     4de:	7e5b      	ldrb	r3, [r3, #25]
     4e0:	061b      	lsls	r3, r3, #24
     4e2:	0fdb      	lsrs	r3, r3, #31
     4e4:	b2db      	uxtb	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d1f8      	bne.n	4dc <ADC_Handler+0x88>
        ADC->SWTRIG.bit.FLUSH;
     4ea:	4b0a      	ldr	r3, [pc, #40]	; (514 <ADC_Handler+0xc0>)
     4ec:	7b1b      	ldrb	r3, [r3, #12]
     4ee:	07db      	lsls	r3, r3, #31
     4f0:	0fdb      	lsrs	r3, r3, #31
        while (ADC->STATUS.bit.SYNCBUSY);
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	4b07      	ldr	r3, [pc, #28]	; (514 <ADC_Handler+0xc0>)
     4f6:	7e5b      	ldrb	r3, [r3, #25]
     4f8:	061b      	lsls	r3, r3, #24
     4fa:	0fdb      	lsrs	r3, r3, #31
     4fc:	b2db      	uxtb	r3, r3
     4fe:	2b00      	cmp	r3, #0
     500:	d1f8      	bne.n	4f4 <ADC_Handler+0xa0>
        _adc_read_state = ADC_READ_1;
     502:	4b03      	ldr	r3, [pc, #12]	; (510 <ADC_Handler+0xbc>)
     504:	2201      	movs	r2, #1
     506:	701a      	strb	r2, [r3, #0]
     508:	46c0      	nop			; (mov r8, r8)
     50a:	46bd      	mov	sp, r7
     50c:	bd80      	pop	{r7, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	20000478 	.word	0x20000478
     514:	42004000 	.word	0x42004000
     518:	20000474 	.word	0x20000474
     51c:	00000411 	.word	0x00000411

00000520 <compute_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void compute_init(uint8_t mode) {
     520:	b580      	push	{r7, lr}
     522:	b082      	sub	sp, #8
     524:	af00      	add	r7, sp, #0
     526:	0002      	movs	r2, r0
     528:	1dfb      	adds	r3, r7, #7
     52a:	701a      	strb	r2, [r3, #0]
    _comp_mode = mode;
     52c:	4b24      	ldr	r3, [pc, #144]	; (5c0 <compute_init+0xa0>)
     52e:	1dfa      	adds	r2, r7, #7
     530:	7812      	ldrb	r2, [r2, #0]
     532:	701a      	strb	r2, [r3, #0]

    switch (mode) {
     534:	1dfb      	adds	r3, r7, #7
     536:	781b      	ldrb	r3, [r3, #0]
     538:	2b00      	cmp	r3, #0
     53a:	d002      	beq.n	542 <compute_init+0x22>
     53c:	2b01      	cmp	r3, #1
     53e:	d034      	beq.n	5aa <compute_init+0x8a>
            _comp_serial.tx = _comp_callback;
        } break;

        default: {

        } break;
     540:	e03a      	b.n	5b8 <compute_init+0x98>
            _comp_intern_sample_row = 0;
     542:	4b20      	ldr	r3, [pc, #128]	; (5c4 <compute_init+0xa4>)
     544:	2200      	movs	r2, #0
     546:	701a      	strb	r2, [r3, #0]
            _comp_intern_sample_idx = 0;
     548:	4b1f      	ldr	r3, [pc, #124]	; (5c8 <compute_init+0xa8>)
     54a:	2200      	movs	r2, #0
     54c:	701a      	strb	r2, [r3, #0]
            _comp_models[0] = _comp_model_0;
     54e:	4b1f      	ldr	r3, [pc, #124]	; (5cc <compute_init+0xac>)
     550:	4a1f      	ldr	r2, [pc, #124]	; (5d0 <compute_init+0xb0>)
     552:	601a      	str	r2, [r3, #0]
            _comp_models[1] = _comp_model_1;
     554:	4b1d      	ldr	r3, [pc, #116]	; (5cc <compute_init+0xac>)
     556:	4a1f      	ldr	r2, [pc, #124]	; (5d4 <compute_init+0xb4>)
     558:	605a      	str	r2, [r3, #4]
            _comp_models[2] = _comp_model_2;
     55a:	4b1c      	ldr	r3, [pc, #112]	; (5cc <compute_init+0xac>)
     55c:	4a1e      	ldr	r2, [pc, #120]	; (5d8 <compute_init+0xb8>)
     55e:	609a      	str	r2, [r3, #8]
            _comp_models[3] = _comp_model_3;
     560:	4b1a      	ldr	r3, [pc, #104]	; (5cc <compute_init+0xac>)
     562:	4a1e      	ldr	r2, [pc, #120]	; (5dc <compute_init+0xbc>)
     564:	60da      	str	r2, [r3, #12]
            _comp_models[4] = _comp_model_4;
     566:	4b19      	ldr	r3, [pc, #100]	; (5cc <compute_init+0xac>)
     568:	4a1d      	ldr	r2, [pc, #116]	; (5e0 <compute_init+0xc0>)
     56a:	611a      	str	r2, [r3, #16]
            _comp_models[5] = _comp_model_5;
     56c:	4b17      	ldr	r3, [pc, #92]	; (5cc <compute_init+0xac>)
     56e:	4a1d      	ldr	r2, [pc, #116]	; (5e4 <compute_init+0xc4>)
     570:	615a      	str	r2, [r3, #20]
            _comp_models[6] = _comp_model_6;
     572:	4b16      	ldr	r3, [pc, #88]	; (5cc <compute_init+0xac>)
     574:	4a1c      	ldr	r2, [pc, #112]	; (5e8 <compute_init+0xc8>)
     576:	619a      	str	r2, [r3, #24]
            _comp_models[7] = _comp_model_7;
     578:	4b14      	ldr	r3, [pc, #80]	; (5cc <compute_init+0xac>)
     57a:	4a1c      	ldr	r2, [pc, #112]	; (5ec <compute_init+0xcc>)
     57c:	61da      	str	r2, [r3, #28]
            _comp_models[8] = _comp_model_8;
     57e:	4b13      	ldr	r3, [pc, #76]	; (5cc <compute_init+0xac>)
     580:	4a1b      	ldr	r2, [pc, #108]	; (5f0 <compute_init+0xd0>)
     582:	621a      	str	r2, [r3, #32]
            _comp_models[9] = _comp_model_9;
     584:	4b11      	ldr	r3, [pc, #68]	; (5cc <compute_init+0xac>)
     586:	4a1b      	ldr	r2, [pc, #108]	; (5f4 <compute_init+0xd4>)
     588:	625a      	str	r2, [r3, #36]	; 0x24
            _comp_models[10] = _comp_model_10;
     58a:	4b10      	ldr	r3, [pc, #64]	; (5cc <compute_init+0xac>)
     58c:	4a1a      	ldr	r2, [pc, #104]	; (5f8 <compute_init+0xd8>)
     58e:	629a      	str	r2, [r3, #40]	; 0x28
            _comp_models[11] = _comp_model_11;
     590:	4b0e      	ldr	r3, [pc, #56]	; (5cc <compute_init+0xac>)
     592:	4a1a      	ldr	r2, [pc, #104]	; (5fc <compute_init+0xdc>)
     594:	62da      	str	r2, [r3, #44]	; 0x2c
            _comp_models[12] = _comp_model_12;
     596:	4b0d      	ldr	r3, [pc, #52]	; (5cc <compute_init+0xac>)
     598:	4a19      	ldr	r2, [pc, #100]	; (600 <compute_init+0xe0>)
     59a:	631a      	str	r2, [r3, #48]	; 0x30
            _comp_models[13] = _comp_model_13;
     59c:	4b0b      	ldr	r3, [pc, #44]	; (5cc <compute_init+0xac>)
     59e:	4a19      	ldr	r2, [pc, #100]	; (604 <compute_init+0xe4>)
     5a0:	635a      	str	r2, [r3, #52]	; 0x34
            _comp_models[14] = _comp_model_14;
     5a2:	4b0a      	ldr	r3, [pc, #40]	; (5cc <compute_init+0xac>)
     5a4:	4a18      	ldr	r2, [pc, #96]	; (608 <compute_init+0xe8>)
     5a6:	639a      	str	r2, [r3, #56]	; 0x38
        } break;
     5a8:	e006      	b.n	5b8 <compute_init+0x98>
            _comp_serial.rx = _comp_callback;
     5aa:	4b18      	ldr	r3, [pc, #96]	; (60c <compute_init+0xec>)
     5ac:	4a18      	ldr	r2, [pc, #96]	; (610 <compute_init+0xf0>)
     5ae:	601a      	str	r2, [r3, #0]
            _comp_serial.tx = _comp_callback;
     5b0:	4b16      	ldr	r3, [pc, #88]	; (60c <compute_init+0xec>)
     5b2:	4a17      	ldr	r2, [pc, #92]	; (610 <compute_init+0xf0>)
     5b4:	605a      	str	r2, [r3, #4]
        } break;
     5b6:	46c0      	nop			; (mov r8, r8)
    }
}
     5b8:	46c0      	nop			; (mov r8, r8)
     5ba:	46bd      	mov	sp, r7
     5bc:	b002      	add	sp, #8
     5be:	bd80      	pop	{r7, pc}
     5c0:	2000078d 	.word	0x2000078d
     5c4:	20000480 	.word	0x20000480
     5c8:	2000078c 	.word	0x2000078c
     5cc:	20000790 	.word	0x20000790
     5d0:	00000871 	.word	0x00000871
     5d4:	00000883 	.word	0x00000883
     5d8:	00000895 	.word	0x00000895
     5dc:	000008a7 	.word	0x000008a7
     5e0:	000008b9 	.word	0x000008b9
     5e4:	000008cb 	.word	0x000008cb
     5e8:	000008dd 	.word	0x000008dd
     5ec:	000008ef 	.word	0x000008ef
     5f0:	00000901 	.word	0x00000901
     5f4:	00000913 	.word	0x00000913
     5f8:	00000925 	.word	0x00000925
     5fc:	00000937 	.word	0x00000937
     600:	00000949 	.word	0x00000949
     604:	0000095b 	.word	0x0000095b
     608:	0000096d 	.word	0x0000096d
     60c:	200007cc 	.word	0x200007cc
     610:	000007f1 	.word	0x000007f1

00000614 <compute_stop>:

//==============================================================================
void compute_stop() {
     614:	b580      	push	{r7, lr}
     616:	af00      	add	r7, sp, #0
    _comp_serial.rx = 0;
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <compute_stop+0x18>)
     61a:	2200      	movs	r2, #0
     61c:	601a      	str	r2, [r3, #0]
    _comp_serial.tx = 0;
     61e:	4b03      	ldr	r3, [pc, #12]	; (62c <compute_stop+0x18>)
     620:	2200      	movs	r2, #0
     622:	605a      	str	r2, [r3, #4]
}
     624:	46c0      	nop			; (mov r8, r8)
     626:	46bd      	mov	sp, r7
     628:	bd80      	pop	{r7, pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	200007cc 	.word	0x200007cc

00000630 <compute_begin>:

//==============================================================================
uint8_t compute_begin(hand_ang_t* output) {
     630:	b580      	push	{r7, lr}
     632:	b082      	sub	sp, #8
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
    switch (_comp_mode) {
     638:	4b16      	ldr	r3, [pc, #88]	; (694 <compute_begin+0x64>)
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	2b00      	cmp	r3, #0
     63e:	d016      	beq.n	66e <compute_begin+0x3e>
     640:	2b01      	cmp	r3, #1
     642:	d122      	bne.n	68a <compute_begin+0x5a>
        // Trigger external computation
        case COMP_EXTERNAL: {
            if (serial_register(_comp_serial)) {
     644:	4b14      	ldr	r3, [pc, #80]	; (698 <compute_begin+0x68>)
     646:	6818      	ldr	r0, [r3, #0]
     648:	6859      	ldr	r1, [r3, #4]
     64a:	4b14      	ldr	r3, [pc, #80]	; (69c <compute_begin+0x6c>)
     64c:	4798      	blx	r3
     64e:	1e03      	subs	r3, r0, #0
     650:	d01a      	beq.n	688 <compute_begin+0x58>
                _comp_output = output;
     652:	4b13      	ldr	r3, [pc, #76]	; (6a0 <compute_begin+0x70>)
     654:	687a      	ldr	r2, [r7, #4]
     656:	601a      	str	r2, [r3, #0]
                _comp_idx = 0;
     658:	4b12      	ldr	r3, [pc, #72]	; (6a4 <compute_begin+0x74>)
     65a:	2200      	movs	r2, #0
     65c:	701a      	strb	r2, [r3, #0]
                _comp_state = COMP_EXT;
     65e:	4b12      	ldr	r3, [pc, #72]	; (6a8 <compute_begin+0x78>)
     660:	2200      	movs	r2, #0
     662:	701a      	strb	r2, [r3, #0]
                serial_write(EXTERNAL_COMP_COMMAND);
     664:	2063      	movs	r0, #99	; 0x63
     666:	4b11      	ldr	r3, [pc, #68]	; (6ac <compute_begin+0x7c>)
     668:	4798      	blx	r3
                return 1;
     66a:	2301      	movs	r3, #1
     66c:	e00e      	b.n	68c <compute_begin+0x5c>
            }
        } break;

        // Register for internal computation
        case COMP_INTERNAL: {
            _comp_toggle_row();
     66e:	4b10      	ldr	r3, [pc, #64]	; (6b0 <compute_begin+0x80>)
     670:	4798      	blx	r3
            _comp_state = COMP_INT;
     672:	4b0d      	ldr	r3, [pc, #52]	; (6a8 <compute_begin+0x78>)
     674:	2201      	movs	r2, #1
     676:	701a      	strb	r2, [r3, #0]
            _comp_output = output;
     678:	4b09      	ldr	r3, [pc, #36]	; (6a0 <compute_begin+0x70>)
     67a:	687a      	ldr	r2, [r7, #4]
     67c:	601a      	str	r2, [r3, #0]
            _comp_idx = 0;
     67e:	4b09      	ldr	r3, [pc, #36]	; (6a4 <compute_begin+0x74>)
     680:	2200      	movs	r2, #0
     682:	701a      	strb	r2, [r3, #0]
            return 1;
     684:	2301      	movs	r3, #1
     686:	e001      	b.n	68c <compute_begin+0x5c>
        } break;
     688:	46c0      	nop			; (mov r8, r8)
        }
    }

    return 0;
     68a:	2300      	movs	r3, #0
}
     68c:	0018      	movs	r0, r3
     68e:	46bd      	mov	sp, r7
     690:	b002      	add	sp, #8
     692:	bd80      	pop	{r7, pc}
     694:	2000078d 	.word	0x2000078d
     698:	200007cc 	.word	0x200007cc
     69c:	00002e89 	.word	0x00002e89
     6a0:	20000788 	.word	0x20000788
     6a4:	20000785 	.word	0x20000785
     6a8:	20000784 	.word	0x20000784
     6ac:	00002e39 	.word	0x00002e39
     6b0:	000007c9 	.word	0x000007c9

000006b4 <compute_complete>:

//==============================================================================
uint8_t compute_complete() {
     6b4:	b580      	push	{r7, lr}
     6b6:	af00      	add	r7, sp, #0
    if (_comp_mode == COMP_INTERNAL) _comp_internal();
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <compute_complete+0x24>)
     6ba:	781b      	ldrb	r3, [r3, #0]
     6bc:	2b00      	cmp	r3, #0
     6be:	d101      	bne.n	6c4 <compute_complete+0x10>
     6c0:	4b06      	ldr	r3, [pc, #24]	; (6dc <compute_complete+0x28>)
     6c2:	4798      	blx	r3
    return (_comp_state == COMP_DONE);
     6c4:	4b06      	ldr	r3, [pc, #24]	; (6e0 <compute_complete+0x2c>)
     6c6:	781b      	ldrb	r3, [r3, #0]
     6c8:	b2db      	uxtb	r3, r3
     6ca:	3b03      	subs	r3, #3
     6cc:	425a      	negs	r2, r3
     6ce:	4153      	adcs	r3, r2
     6d0:	b2db      	uxtb	r3, r3
}
     6d2:	0018      	movs	r0, r3
     6d4:	46bd      	mov	sp, r7
     6d6:	bd80      	pop	{r7, pc}
     6d8:	2000078d 	.word	0x2000078d
     6dc:	00000729 	.word	0x00000729
     6e0:	20000784 	.word	0x20000784

000006e4 <compute_get_emg_ref>:

//==============================================================================
emg_data_t* compute_get_emg_ref() {
     6e4:	b580      	push	{r7, lr}
     6e6:	af00      	add	r7, sp, #0
    return &_comp_data[_comp_current_sample_row()][_comp_intern_sample_idx++];
     6e8:	4b0c      	ldr	r3, [pc, #48]	; (71c <compute_get_emg_ref+0x38>)
     6ea:	4798      	blx	r3
     6ec:	0003      	movs	r3, r0
     6ee:	0019      	movs	r1, r3
     6f0:	4b0b      	ldr	r3, [pc, #44]	; (720 <compute_get_emg_ref+0x3c>)
     6f2:	781b      	ldrb	r3, [r3, #0]
     6f4:	1c5a      	adds	r2, r3, #1
     6f6:	b2d0      	uxtb	r0, r2
     6f8:	4a09      	ldr	r2, [pc, #36]	; (720 <compute_get_emg_ref+0x3c>)
     6fa:	7010      	strb	r0, [r2, #0]
     6fc:	001a      	movs	r2, r3
     6fe:	0052      	lsls	r2, r2, #1
     700:	18d2      	adds	r2, r2, r3
     702:	0053      	lsls	r3, r2, #1
     704:	001a      	movs	r2, r3
     706:	000b      	movs	r3, r1
     708:	005b      	lsls	r3, r3, #1
     70a:	185b      	adds	r3, r3, r1
     70c:	01db      	lsls	r3, r3, #7
     70e:	18d2      	adds	r2, r2, r3
     710:	4b04      	ldr	r3, [pc, #16]	; (724 <compute_get_emg_ref+0x40>)
     712:	18d3      	adds	r3, r2, r3
}
     714:	0018      	movs	r0, r3
     716:	46bd      	mov	sp, r7
     718:	bd80      	pop	{r7, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	0000079d 	.word	0x0000079d
     720:	2000078c 	.word	0x2000078c
     724:	20000484 	.word	0x20000484

00000728 <_comp_internal>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
void _comp_internal() {
     728:	b590      	push	{r4, r7, lr}
     72a:	b083      	sub	sp, #12
     72c:	af00      	add	r7, sp, #0
    // Get the model for the particular joint
    comp_model_t model = _comp_models[_comp_idx];
     72e:	4b15      	ldr	r3, [pc, #84]	; (784 <_comp_internal+0x5c>)
     730:	781b      	ldrb	r3, [r3, #0]
     732:	001a      	movs	r2, r3
     734:	4b14      	ldr	r3, [pc, #80]	; (788 <_comp_internal+0x60>)
     736:	0092      	lsls	r2, r2, #2
     738:	58d3      	ldr	r3, [r2, r3]
     73a:	607b      	str	r3, [r7, #4]

    // Compute the joing angle from the emg data
    _comp_output[_comp_idx++] = model(
     73c:	4b13      	ldr	r3, [pc, #76]	; (78c <_comp_internal+0x64>)
     73e:	681a      	ldr	r2, [r3, #0]
     740:	4b10      	ldr	r3, [pc, #64]	; (784 <_comp_internal+0x5c>)
     742:	781b      	ldrb	r3, [r3, #0]
     744:	1c59      	adds	r1, r3, #1
     746:	b2c8      	uxtb	r0, r1
     748:	490e      	ldr	r1, [pc, #56]	; (784 <_comp_internal+0x5c>)
     74a:	7008      	strb	r0, [r1, #0]
     74c:	18d4      	adds	r4, r2, r3
        _comp_data[_comp_current_model_row()]);
     74e:	4b10      	ldr	r3, [pc, #64]	; (790 <_comp_internal+0x68>)
     750:	4798      	blx	r3
     752:	0003      	movs	r3, r0
     754:	001a      	movs	r2, r3
     756:	0013      	movs	r3, r2
     758:	005b      	lsls	r3, r3, #1
     75a:	189b      	adds	r3, r3, r2
     75c:	01db      	lsls	r3, r3, #7
     75e:	4a0d      	ldr	r2, [pc, #52]	; (794 <_comp_internal+0x6c>)
     760:	189a      	adds	r2, r3, r2
    _comp_output[_comp_idx++] = model(
     762:	687b      	ldr	r3, [r7, #4]
     764:	0010      	movs	r0, r2
     766:	4798      	blx	r3
     768:	0003      	movs	r3, r0
     76a:	7023      	strb	r3, [r4, #0]

    // Update the state if complete
    if (_comp_idx >= NUM_JOINTS) {
     76c:	4b05      	ldr	r3, [pc, #20]	; (784 <_comp_internal+0x5c>)
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	2b0e      	cmp	r3, #14
     772:	d902      	bls.n	77a <_comp_internal+0x52>
        _comp_state = COMP_DONE;
     774:	4b08      	ldr	r3, [pc, #32]	; (798 <_comp_internal+0x70>)
     776:	2203      	movs	r2, #3
     778:	701a      	strb	r2, [r3, #0]
    }
}
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	46bd      	mov	sp, r7
     77e:	b003      	add	sp, #12
     780:	bd90      	pop	{r4, r7, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	20000785 	.word	0x20000785
     788:	20000790 	.word	0x20000790
     78c:	20000788 	.word	0x20000788
     790:	000007b5 	.word	0x000007b5
     794:	20000484 	.word	0x20000484
     798:	20000784 	.word	0x20000784

0000079c <_comp_current_sample_row>:

//==============================================================================
uint8_t _comp_current_sample_row() {
     79c:	b580      	push	{r7, lr}
     79e:	af00      	add	r7, sp, #0
    return (1-_comp_intern_sample_row);
     7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <_comp_current_sample_row+0x14>)
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	2201      	movs	r2, #1
     7a6:	1ad3      	subs	r3, r2, r3
     7a8:	b2db      	uxtb	r3, r3
}
     7aa:	0018      	movs	r0, r3
     7ac:	46bd      	mov	sp, r7
     7ae:	bd80      	pop	{r7, pc}
     7b0:	20000480 	.word	0x20000480

000007b4 <_comp_current_model_row>:

//==============================================================================
uint8_t _comp_current_model_row() {
     7b4:	b580      	push	{r7, lr}
     7b6:	af00      	add	r7, sp, #0
    return _comp_intern_sample_row;
     7b8:	4b02      	ldr	r3, [pc, #8]	; (7c4 <_comp_current_model_row+0x10>)
     7ba:	781b      	ldrb	r3, [r3, #0]
}
     7bc:	0018      	movs	r0, r3
     7be:	46bd      	mov	sp, r7
     7c0:	bd80      	pop	{r7, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	20000480 	.word	0x20000480

000007c8 <_comp_toggle_row>:

//==============================================================================
void _comp_toggle_row() {
     7c8:	b580      	push	{r7, lr}
     7ca:	af00      	add	r7, sp, #0
    _comp_intern_sample_idx = 0;
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <_comp_toggle_row+0x20>)
     7ce:	2200      	movs	r2, #0
     7d0:	701a      	strb	r2, [r3, #0]
    _comp_intern_sample_row = (1-_comp_intern_sample_row);
     7d2:	4b06      	ldr	r3, [pc, #24]	; (7ec <_comp_toggle_row+0x24>)
     7d4:	781b      	ldrb	r3, [r3, #0]
     7d6:	2201      	movs	r2, #1
     7d8:	1ad3      	subs	r3, r2, r3
     7da:	b2da      	uxtb	r2, r3
     7dc:	4b03      	ldr	r3, [pc, #12]	; (7ec <_comp_toggle_row+0x24>)
     7de:	701a      	strb	r2, [r3, #0]
}
     7e0:	46c0      	nop			; (mov r8, r8)
     7e2:	46bd      	mov	sp, r7
     7e4:	bd80      	pop	{r7, pc}
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	2000078c 	.word	0x2000078c
     7ec:	20000480 	.word	0x20000480

000007f0 <_comp_callback>:
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _comp_callback() {
     7f0:	b5b0      	push	{r4, r5, r7, lr}
     7f2:	af00      	add	r7, sp, #0
    switch (_comp_state) {
     7f4:	4b18      	ldr	r3, [pc, #96]	; (858 <_comp_callback+0x68>)
     7f6:	781b      	ldrb	r3, [r3, #0]
     7f8:	b2db      	uxtb	r3, r3
     7fa:	2b00      	cmp	r3, #0
     7fc:	d002      	beq.n	804 <_comp_callback+0x14>
     7fe:	2b02      	cmp	r3, #2
     800:	d004      	beq.n	80c <_comp_callback+0x1c>
     802:	e01d      	b.n	840 <_comp_callback+0x50>
        case COMP_EXT: {
            // Do nothing on the initial tx callback
            _comp_state = COMP_RX;
     804:	4b14      	ldr	r3, [pc, #80]	; (858 <_comp_callback+0x68>)
     806:	2202      	movs	r2, #2
     808:	701a      	strb	r2, [r3, #0]
        } break;
     80a:	e020      	b.n	84e <_comp_callback+0x5e>

        case COMP_RX: {
            // Receive data
            _comp_output[_comp_idx++] = serial_read();
     80c:	4b13      	ldr	r3, [pc, #76]	; (85c <_comp_callback+0x6c>)
     80e:	681a      	ldr	r2, [r3, #0]
     810:	4b13      	ldr	r3, [pc, #76]	; (860 <_comp_callback+0x70>)
     812:	781b      	ldrb	r3, [r3, #0]
     814:	1c59      	adds	r1, r3, #1
     816:	b2c8      	uxtb	r0, r1
     818:	4911      	ldr	r1, [pc, #68]	; (860 <_comp_callback+0x70>)
     81a:	7008      	strb	r0, [r1, #0]
     81c:	18d4      	adds	r4, r2, r3
     81e:	4b11      	ldr	r3, [pc, #68]	; (864 <_comp_callback+0x74>)
     820:	4798      	blx	r3
     822:	0003      	movs	r3, r0
     824:	7023      	strb	r3, [r4, #0]
            if (_comp_idx >= NUM_JOINTS) {
     826:	4b0e      	ldr	r3, [pc, #56]	; (860 <_comp_callback+0x70>)
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b0e      	cmp	r3, #14
     82c:	d90e      	bls.n	84c <_comp_callback+0x5c>
                _comp_state = COMP_DONE;
     82e:	4b0a      	ldr	r3, [pc, #40]	; (858 <_comp_callback+0x68>)
     830:	2203      	movs	r2, #3
     832:	701a      	strb	r2, [r3, #0]
                serial_unregister(_comp_serial);
     834:	4b0c      	ldr	r3, [pc, #48]	; (868 <_comp_callback+0x78>)
     836:	6818      	ldr	r0, [r3, #0]
     838:	6859      	ldr	r1, [r3, #4]
     83a:	4b0c      	ldr	r3, [pc, #48]	; (86c <_comp_callback+0x7c>)
     83c:	4798      	blx	r3
            }
        } break;
     83e:	e005      	b.n	84c <_comp_callback+0x5c>
        
        default: {
            serial_unregister(_comp_serial);
     840:	4b09      	ldr	r3, [pc, #36]	; (868 <_comp_callback+0x78>)
     842:	6818      	ldr	r0, [r3, #0]
     844:	6859      	ldr	r1, [r3, #4]
     846:	4b09      	ldr	r3, [pc, #36]	; (86c <_comp_callback+0x7c>)
     848:	4798      	blx	r3
        } break;
     84a:	e000      	b.n	84e <_comp_callback+0x5e>
        } break;
     84c:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return 0;
     84e:	2300      	movs	r3, #0
}
     850:	0018      	movs	r0, r3
     852:	46bd      	mov	sp, r7
     854:	bdb0      	pop	{r4, r5, r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	20000784 	.word	0x20000784
     85c:	20000788 	.word	0x20000788
     860:	20000785 	.word	0x20000785
     864:	00002e09 	.word	0x00002e09
     868:	200007cc 	.word	0x200007cc
     86c:	00002f49 	.word	0x00002f49

00000870 <_comp_model_0>:
//     |  | \__/ |__/ |___ |___ .__/ 
// 
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _comp_model_0(emg_data_t* data) {
     870:	b580      	push	{r7, lr}
     872:	b082      	sub	sp, #8
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
    return 0;
     878:	2300      	movs	r3, #0
}
     87a:	0018      	movs	r0, r3
     87c:	46bd      	mov	sp, r7
     87e:	b002      	add	sp, #8
     880:	bd80      	pop	{r7, pc}

00000882 <_comp_model_1>:

//==============================================================================
uint8_t _comp_model_1(emg_data_t* data) {
     882:	b580      	push	{r7, lr}
     884:	b082      	sub	sp, #8
     886:	af00      	add	r7, sp, #0
     888:	6078      	str	r0, [r7, #4]
    return 10;
     88a:	230a      	movs	r3, #10
}
     88c:	0018      	movs	r0, r3
     88e:	46bd      	mov	sp, r7
     890:	b002      	add	sp, #8
     892:	bd80      	pop	{r7, pc}

00000894 <_comp_model_2>:

//==============================================================================
uint8_t _comp_model_2(emg_data_t* data) {
     894:	b580      	push	{r7, lr}
     896:	b082      	sub	sp, #8
     898:	af00      	add	r7, sp, #0
     89a:	6078      	str	r0, [r7, #4]
    return 20;
     89c:	2314      	movs	r3, #20
}
     89e:	0018      	movs	r0, r3
     8a0:	46bd      	mov	sp, r7
     8a2:	b002      	add	sp, #8
     8a4:	bd80      	pop	{r7, pc}

000008a6 <_comp_model_3>:

//==============================================================================
uint8_t _comp_model_3(emg_data_t* data) {
     8a6:	b580      	push	{r7, lr}
     8a8:	b082      	sub	sp, #8
     8aa:	af00      	add	r7, sp, #0
     8ac:	6078      	str	r0, [r7, #4]
    return 30;
     8ae:	231e      	movs	r3, #30
}
     8b0:	0018      	movs	r0, r3
     8b2:	46bd      	mov	sp, r7
     8b4:	b002      	add	sp, #8
     8b6:	bd80      	pop	{r7, pc}

000008b8 <_comp_model_4>:

//==============================================================================
uint8_t _comp_model_4(emg_data_t* data) {
     8b8:	b580      	push	{r7, lr}
     8ba:	b082      	sub	sp, #8
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
    return 40;
     8c0:	2328      	movs	r3, #40	; 0x28
}
     8c2:	0018      	movs	r0, r3
     8c4:	46bd      	mov	sp, r7
     8c6:	b002      	add	sp, #8
     8c8:	bd80      	pop	{r7, pc}

000008ca <_comp_model_5>:

//==============================================================================
uint8_t _comp_model_5(emg_data_t* data) {
     8ca:	b580      	push	{r7, lr}
     8cc:	b082      	sub	sp, #8
     8ce:	af00      	add	r7, sp, #0
     8d0:	6078      	str	r0, [r7, #4]
    return 50;
     8d2:	2332      	movs	r3, #50	; 0x32
}
     8d4:	0018      	movs	r0, r3
     8d6:	46bd      	mov	sp, r7
     8d8:	b002      	add	sp, #8
     8da:	bd80      	pop	{r7, pc}

000008dc <_comp_model_6>:

//==============================================================================
uint8_t _comp_model_6(emg_data_t* data) {
     8dc:	b580      	push	{r7, lr}
     8de:	b082      	sub	sp, #8
     8e0:	af00      	add	r7, sp, #0
     8e2:	6078      	str	r0, [r7, #4]
    return 60;
     8e4:	233c      	movs	r3, #60	; 0x3c
}
     8e6:	0018      	movs	r0, r3
     8e8:	46bd      	mov	sp, r7
     8ea:	b002      	add	sp, #8
     8ec:	bd80      	pop	{r7, pc}

000008ee <_comp_model_7>:

//==============================================================================
uint8_t _comp_model_7(emg_data_t* data) {
     8ee:	b580      	push	{r7, lr}
     8f0:	b082      	sub	sp, #8
     8f2:	af00      	add	r7, sp, #0
     8f4:	6078      	str	r0, [r7, #4]
    return 70;
     8f6:	2346      	movs	r3, #70	; 0x46
}
     8f8:	0018      	movs	r0, r3
     8fa:	46bd      	mov	sp, r7
     8fc:	b002      	add	sp, #8
     8fe:	bd80      	pop	{r7, pc}

00000900 <_comp_model_8>:

//==============================================================================
uint8_t _comp_model_8(emg_data_t* data) {
     900:	b580      	push	{r7, lr}
     902:	b082      	sub	sp, #8
     904:	af00      	add	r7, sp, #0
     906:	6078      	str	r0, [r7, #4]
    return 80;
     908:	2350      	movs	r3, #80	; 0x50
}
     90a:	0018      	movs	r0, r3
     90c:	46bd      	mov	sp, r7
     90e:	b002      	add	sp, #8
     910:	bd80      	pop	{r7, pc}

00000912 <_comp_model_9>:

//==============================================================================
uint8_t _comp_model_9(emg_data_t* data) {
     912:	b580      	push	{r7, lr}
     914:	b082      	sub	sp, #8
     916:	af00      	add	r7, sp, #0
     918:	6078      	str	r0, [r7, #4]
    return 90;
     91a:	235a      	movs	r3, #90	; 0x5a
}
     91c:	0018      	movs	r0, r3
     91e:	46bd      	mov	sp, r7
     920:	b002      	add	sp, #8
     922:	bd80      	pop	{r7, pc}

00000924 <_comp_model_10>:

//==============================================================================
uint8_t _comp_model_10(emg_data_t* data) {
     924:	b580      	push	{r7, lr}
     926:	b082      	sub	sp, #8
     928:	af00      	add	r7, sp, #0
     92a:	6078      	str	r0, [r7, #4]
    return 100;
     92c:	2364      	movs	r3, #100	; 0x64
}
     92e:	0018      	movs	r0, r3
     930:	46bd      	mov	sp, r7
     932:	b002      	add	sp, #8
     934:	bd80      	pop	{r7, pc}

00000936 <_comp_model_11>:

//==============================================================================
uint8_t _comp_model_11(emg_data_t* data) {
     936:	b580      	push	{r7, lr}
     938:	b082      	sub	sp, #8
     93a:	af00      	add	r7, sp, #0
     93c:	6078      	str	r0, [r7, #4]
    return 110;
     93e:	236e      	movs	r3, #110	; 0x6e
}
     940:	0018      	movs	r0, r3
     942:	46bd      	mov	sp, r7
     944:	b002      	add	sp, #8
     946:	bd80      	pop	{r7, pc}

00000948 <_comp_model_12>:

//==============================================================================
uint8_t _comp_model_12(emg_data_t* data) {
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	6078      	str	r0, [r7, #4]
    return 120;
     950:	2378      	movs	r3, #120	; 0x78
}
     952:	0018      	movs	r0, r3
     954:	46bd      	mov	sp, r7
     956:	b002      	add	sp, #8
     958:	bd80      	pop	{r7, pc}

0000095a <_comp_model_13>:

//==============================================================================
uint8_t _comp_model_13(emg_data_t* data) {
     95a:	b580      	push	{r7, lr}
     95c:	b082      	sub	sp, #8
     95e:	af00      	add	r7, sp, #0
     960:	6078      	str	r0, [r7, #4]
    return 130;
     962:	2382      	movs	r3, #130	; 0x82
}
     964:	0018      	movs	r0, r3
     966:	46bd      	mov	sp, r7
     968:	b002      	add	sp, #8
     96a:	bd80      	pop	{r7, pc}

0000096c <_comp_model_14>:

//==============================================================================
uint8_t _comp_model_14(emg_data_t* data) {
     96c:	b580      	push	{r7, lr}
     96e:	b082      	sub	sp, #8
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
    return 140;
     974:	238c      	movs	r3, #140	; 0x8c
}
     976:	0018      	movs	r0, r3
     978:	46bd      	mov	sp, r7
     97a:	b002      	add	sp, #8
     97c:	bd80      	pop	{r7, pc}
	...

00000980 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     980:	b580      	push	{r7, lr}
     982:	b082      	sub	sp, #8
     984:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     986:	4b2f      	ldr	r3, [pc, #188]	; (a44 <Reset_Handler+0xc4>)
     988:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     98a:	4b2f      	ldr	r3, [pc, #188]	; (a48 <Reset_Handler+0xc8>)
     98c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     98e:	687a      	ldr	r2, [r7, #4]
     990:	683b      	ldr	r3, [r7, #0]
     992:	429a      	cmp	r2, r3
     994:	d00c      	beq.n	9b0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     996:	e007      	b.n	9a8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     998:	683b      	ldr	r3, [r7, #0]
     99a:	1d1a      	adds	r2, r3, #4
     99c:	603a      	str	r2, [r7, #0]
     99e:	687a      	ldr	r2, [r7, #4]
     9a0:	1d11      	adds	r1, r2, #4
     9a2:	6079      	str	r1, [r7, #4]
     9a4:	6812      	ldr	r2, [r2, #0]
     9a6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     9a8:	683a      	ldr	r2, [r7, #0]
     9aa:	4b28      	ldr	r3, [pc, #160]	; (a4c <Reset_Handler+0xcc>)
     9ac:	429a      	cmp	r2, r3
     9ae:	d3f3      	bcc.n	998 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     9b0:	4b27      	ldr	r3, [pc, #156]	; (a50 <Reset_Handler+0xd0>)
     9b2:	603b      	str	r3, [r7, #0]
     9b4:	e004      	b.n	9c0 <Reset_Handler+0x40>
                *pDest++ = 0;
     9b6:	683b      	ldr	r3, [r7, #0]
     9b8:	1d1a      	adds	r2, r3, #4
     9ba:	603a      	str	r2, [r7, #0]
     9bc:	2200      	movs	r2, #0
     9be:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     9c0:	683a      	ldr	r2, [r7, #0]
     9c2:	4b24      	ldr	r3, [pc, #144]	; (a54 <Reset_Handler+0xd4>)
     9c4:	429a      	cmp	r2, r3
     9c6:	d3f6      	bcc.n	9b6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     9c8:	4b23      	ldr	r3, [pc, #140]	; (a58 <Reset_Handler+0xd8>)
     9ca:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     9cc:	4b23      	ldr	r3, [pc, #140]	; (a5c <Reset_Handler+0xdc>)
     9ce:	687a      	ldr	r2, [r7, #4]
     9d0:	21ff      	movs	r1, #255	; 0xff
     9d2:	438a      	bics	r2, r1
     9d4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     9d6:	4a22      	ldr	r2, [pc, #136]	; (a60 <Reset_Handler+0xe0>)
     9d8:	2390      	movs	r3, #144	; 0x90
     9da:	005b      	lsls	r3, r3, #1
     9dc:	2102      	movs	r1, #2
     9de:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     9e0:	4a20      	ldr	r2, [pc, #128]	; (a64 <Reset_Handler+0xe4>)
     9e2:	78d3      	ldrb	r3, [r2, #3]
     9e4:	2103      	movs	r1, #3
     9e6:	438b      	bics	r3, r1
     9e8:	1c19      	adds	r1, r3, #0
     9ea:	2302      	movs	r3, #2
     9ec:	430b      	orrs	r3, r1
     9ee:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     9f0:	4a1c      	ldr	r2, [pc, #112]	; (a64 <Reset_Handler+0xe4>)
     9f2:	78d3      	ldrb	r3, [r2, #3]
     9f4:	210c      	movs	r1, #12
     9f6:	438b      	bics	r3, r1
     9f8:	1c19      	adds	r1, r3, #0
     9fa:	2308      	movs	r3, #8
     9fc:	430b      	orrs	r3, r1
     9fe:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     a00:	4a19      	ldr	r2, [pc, #100]	; (a68 <Reset_Handler+0xe8>)
     a02:	7b93      	ldrb	r3, [r2, #14]
     a04:	2130      	movs	r1, #48	; 0x30
     a06:	438b      	bics	r3, r1
     a08:	1c19      	adds	r1, r3, #0
     a0a:	2320      	movs	r3, #32
     a0c:	430b      	orrs	r3, r1
     a0e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     a10:	4a15      	ldr	r2, [pc, #84]	; (a68 <Reset_Handler+0xe8>)
     a12:	7b93      	ldrb	r3, [r2, #14]
     a14:	210c      	movs	r1, #12
     a16:	438b      	bics	r3, r1
     a18:	1c19      	adds	r1, r3, #0
     a1a:	2308      	movs	r3, #8
     a1c:	430b      	orrs	r3, r1
     a1e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     a20:	4a11      	ldr	r2, [pc, #68]	; (a68 <Reset_Handler+0xe8>)
     a22:	7b93      	ldrb	r3, [r2, #14]
     a24:	2103      	movs	r1, #3
     a26:	438b      	bics	r3, r1
     a28:	1c19      	adds	r1, r3, #0
     a2a:	2302      	movs	r3, #2
     a2c:	430b      	orrs	r3, r1
     a2e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     a30:	4a0e      	ldr	r2, [pc, #56]	; (a6c <Reset_Handler+0xec>)
     a32:	6853      	ldr	r3, [r2, #4]
     a34:	2180      	movs	r1, #128	; 0x80
     a36:	430b      	orrs	r3, r1
     a38:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     a3a:	4b0d      	ldr	r3, [pc, #52]	; (a70 <Reset_Handler+0xf0>)
     a3c:	4798      	blx	r3

        /* Branch to main function */
        main();
     a3e:	4b0d      	ldr	r3, [pc, #52]	; (a74 <Reset_Handler+0xf4>)
     a40:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     a42:	e7fe      	b.n	a42 <Reset_Handler+0xc2>
     a44:	00006548 	.word	0x00006548
     a48:	20000000 	.word	0x20000000
     a4c:	2000043c 	.word	0x2000043c
     a50:	20000440 	.word	0x20000440
     a54:	200008bc 	.word	0x200008bc
     a58:	00000000 	.word	0x00000000
     a5c:	e000ed00 	.word	0xe000ed00
     a60:	41007000 	.word	0x41007000
     a64:	41005000 	.word	0x41005000
     a68:	41004800 	.word	0x41004800
     a6c:	41004000 	.word	0x41004000
     a70:	000060e1 	.word	0x000060e1
     a74:	00001b15 	.word	0x00001b15

00000a78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     a78:	b580      	push	{r7, lr}
     a7a:	af00      	add	r7, sp, #0
        while (1) {
     a7c:	e7fe      	b.n	a7c <Dummy_Handler+0x4>
	...

00000a80 <SystemInit>:

#define MASTER_CLOCK_FREQ (48000000ul)
#define MAIN_OSC_FREQ (32768ul)

void SystemInit( void )
{
     a80:	b580      	push	{r7, lr}
     a82:	b082      	sub	sp, #8
     a84:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     a86:	4a77      	ldr	r2, [pc, #476]	; (c64 <SystemInit+0x1e4>)
     a88:	6853      	ldr	r3, [r2, #4]
     a8a:	211e      	movs	r1, #30
     a8c:	438b      	bics	r3, r1
     a8e:	2102      	movs	r1, #2
     a90:	430b      	orrs	r3, r1
     a92:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     a94:	4b74      	ldr	r3, [pc, #464]	; (c68 <SystemInit+0x1e8>)
     a96:	4a74      	ldr	r2, [pc, #464]	; (c68 <SystemInit+0x1e8>)
     a98:	6992      	ldr	r2, [r2, #24]
     a9a:	2108      	movs	r1, #8
     a9c:	430a      	orrs	r2, r1
     a9e:	619a      	str	r2, [r3, #24]

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     aa0:	4b72      	ldr	r3, [pc, #456]	; (c6c <SystemInit+0x1ec>)
     aa2:	4a73      	ldr	r2, [pc, #460]	; (c70 <SystemInit+0x1f0>)
     aa4:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     aa6:	4a71      	ldr	r2, [pc, #452]	; (c6c <SystemInit+0x1ec>)
     aa8:	8a93      	ldrh	r3, [r2, #20]
     aaa:	2102      	movs	r1, #2
     aac:	430b      	orrs	r3, r1
     aae:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     ab0:	46c0      	nop			; (mov r8, r8)
     ab2:	4b6e      	ldr	r3, [pc, #440]	; (c6c <SystemInit+0x1ec>)
     ab4:	68db      	ldr	r3, [r3, #12]
     ab6:	2202      	movs	r2, #2
     ab8:	4013      	ands	r3, r2
     aba:	d0fa      	beq.n	ab2 <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     abc:	4b6d      	ldr	r3, [pc, #436]	; (c74 <SystemInit+0x1f4>)
     abe:	2201      	movs	r2, #1
     ac0:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	4b6b      	ldr	r3, [pc, #428]	; (c74 <SystemInit+0x1f4>)
     ac6:	781b      	ldrb	r3, [r3, #0]
     ac8:	b2db      	uxtb	r3, r3
     aca:	001a      	movs	r2, r3
     acc:	2301      	movs	r3, #1
     ace:	4013      	ands	r3, r2
     ad0:	d005      	beq.n	ade <SystemInit+0x5e>
     ad2:	4b68      	ldr	r3, [pc, #416]	; (c74 <SystemInit+0x1f4>)
     ad4:	785b      	ldrb	r3, [r3, #1]
     ad6:	b2db      	uxtb	r3, r3
     ad8:	b25b      	sxtb	r3, r3
     ada:	2b00      	cmp	r3, #0
     adc:	dbf2      	blt.n	ac4 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     ade:	4b65      	ldr	r3, [pc, #404]	; (c74 <SystemInit+0x1f4>)
     ae0:	2201      	movs	r2, #1
     ae2:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     ae4:	46c0      	nop			; (mov r8, r8)
     ae6:	4b63      	ldr	r3, [pc, #396]	; (c74 <SystemInit+0x1f4>)
     ae8:	785b      	ldrb	r3, [r3, #1]
     aea:	b2db      	uxtb	r3, r3
     aec:	b25b      	sxtb	r3, r3
     aee:	2b00      	cmp	r3, #0
     af0:	dbf9      	blt.n	ae6 <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) | // Generic Clock Generator 1
     af2:	4b60      	ldr	r3, [pc, #384]	; (c74 <SystemInit+0x1f4>)
     af4:	4a60      	ldr	r2, [pc, #384]	; (c78 <SystemInit+0x1f8>)
     af6:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     af8:	46c0      	nop			; (mov r8, r8)
     afa:	4b5e      	ldr	r3, [pc, #376]	; (c74 <SystemInit+0x1f4>)
     afc:	785b      	ldrb	r3, [r3, #1]
     afe:	b2db      	uxtb	r3, r3
     b00:	b25b      	sxtb	r3, r3
     b02:	2b00      	cmp	r3, #0
     b04:	dbf9      	blt.n	afa <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     b06:	4b5b      	ldr	r3, [pc, #364]	; (c74 <SystemInit+0x1f4>)
     b08:	2282      	movs	r2, #130	; 0x82
     b0a:	01d2      	lsls	r2, r2, #7
     b0c:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	4b58      	ldr	r3, [pc, #352]	; (c74 <SystemInit+0x1f4>)
     b12:	785b      	ldrb	r3, [r3, #1]
     b14:	b2db      	uxtb	r3, r3
     b16:	b25b      	sxtb	r3, r3
     b18:	2b00      	cmp	r3, #0
     b1a:	dbf9      	blt.n	b10 <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0 ;
     b1c:	4a53      	ldr	r2, [pc, #332]	; (c6c <SystemInit+0x1ec>)
     b1e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     b20:	2180      	movs	r1, #128	; 0x80
     b22:	438b      	bics	r3, r1
     b24:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	4b50      	ldr	r3, [pc, #320]	; (c6c <SystemInit+0x1ec>)
     b2a:	68db      	ldr	r3, [r3, #12]
     b2c:	2210      	movs	r2, #16
     b2e:	4013      	ands	r3, r2
     b30:	d0fa      	beq.n	b28 <SystemInit+0xa8>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     b32:	4b4e      	ldr	r3, [pc, #312]	; (c6c <SystemInit+0x1ec>)
     b34:	4a51      	ldr	r2, [pc, #324]	; (c7c <SystemInit+0x1fc>)
     b36:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (MASTER_CLOCK_FREQ/MAIN_OSC_FREQ) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b38:	46c0      	nop			; (mov r8, r8)
     b3a:	4b4c      	ldr	r3, [pc, #304]	; (c6c <SystemInit+0x1ec>)
     b3c:	68db      	ldr	r3, [r3, #12]
     b3e:	2210      	movs	r2, #16
     b40:	4013      	ands	r3, r2
     b42:	d0fa      	beq.n	b3a <SystemInit+0xba>
  {
    /* Wait for synchronization */
  }

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     b44:	4a49      	ldr	r2, [pc, #292]	; (c6c <SystemInit+0x1ec>)
     b46:	4b49      	ldr	r3, [pc, #292]	; (c6c <SystemInit+0x1ec>)
     b48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     b4a:	b29b      	uxth	r3, r3
     b4c:	494c      	ldr	r1, [pc, #304]	; (c80 <SystemInit+0x200>)
     b4e:	430b      	orrs	r3, r1
     b50:	b29b      	uxth	r3, r3
     b52:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b54:	46c0      	nop			; (mov r8, r8)
     b56:	4b45      	ldr	r3, [pc, #276]	; (c6c <SystemInit+0x1ec>)
     b58:	68db      	ldr	r3, [r3, #12]
     b5a:	2210      	movs	r2, #16
     b5c:	4013      	ands	r3, r2
     b5e:	d0fa      	beq.n	b56 <SystemInit+0xd6>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     b60:	4a42      	ldr	r2, [pc, #264]	; (c6c <SystemInit+0x1ec>)
     b62:	4b42      	ldr	r3, [pc, #264]	; (c6c <SystemInit+0x1ec>)
     b64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     b66:	b29b      	uxth	r3, r3
     b68:	2102      	movs	r1, #2
     b6a:	430b      	orrs	r3, r1
     b6c:	b29b      	uxth	r3, r3
     b6e:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     b70:	46c0      	nop			; (mov r8, r8)
     b72:	4b3e      	ldr	r3, [pc, #248]	; (c6c <SystemInit+0x1ec>)
     b74:	68db      	ldr	r3, [r3, #12]
     b76:	2280      	movs	r2, #128	; 0x80
     b78:	4013      	ands	r3, r2
     b7a:	d0fa      	beq.n	b72 <SystemInit+0xf2>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     b7c:	4b3b      	ldr	r3, [pc, #236]	; (c6c <SystemInit+0x1ec>)
     b7e:	68db      	ldr	r3, [r3, #12]
     b80:	2240      	movs	r2, #64	; 0x40
     b82:	4013      	ands	r3, r2
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     b84:	d0f5      	beq.n	b72 <SystemInit+0xf2>
  {
    /* Wait for locks flags */
  }

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	4b38      	ldr	r3, [pc, #224]	; (c6c <SystemInit+0x1ec>)
     b8a:	68db      	ldr	r3, [r3, #12]
     b8c:	2210      	movs	r2, #16
     b8e:	4013      	ands	r3, r2
     b90:	d0fa      	beq.n	b88 <SystemInit+0x108>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     b92:	4b38      	ldr	r3, [pc, #224]	; (c74 <SystemInit+0x1f4>)
     b94:	2200      	movs	r2, #0
     b96:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     b98:	46c0      	nop			; (mov r8, r8)
     b9a:	4b36      	ldr	r3, [pc, #216]	; (c74 <SystemInit+0x1f4>)
     b9c:	785b      	ldrb	r3, [r3, #1]
     b9e:	b2db      	uxtb	r3, r3
     ba0:	b25b      	sxtb	r3, r3
     ba2:	2b00      	cmp	r3, #0
     ba4:	dbf9      	blt.n	b9a <SystemInit+0x11a>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     ba6:	4b33      	ldr	r3, [pc, #204]	; (c74 <SystemInit+0x1f4>)
     ba8:	4a36      	ldr	r2, [pc, #216]	; (c84 <SystemInit+0x204>)
     baa:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     bac:	46c0      	nop			; (mov r8, r8)
     bae:	4b31      	ldr	r3, [pc, #196]	; (c74 <SystemInit+0x1f4>)
     bb0:	785b      	ldrb	r3, [r3, #1]
     bb2:	b2db      	uxtb	r3, r3
     bb4:	b25b      	sxtb	r3, r3
     bb6:	2b00      	cmp	r3, #0
     bb8:	dbf9      	blt.n	bae <SystemInit+0x12e>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_1_Val ;
     bba:	4a2c      	ldr	r2, [pc, #176]	; (c6c <SystemInit+0x1ec>)
     bbc:	6a13      	ldr	r3, [r2, #32]
     bbe:	4932      	ldr	r1, [pc, #200]	; (c88 <SystemInit+0x208>)
     bc0:	400b      	ands	r3, r1
     bc2:	2180      	movs	r1, #128	; 0x80
     bc4:	0049      	lsls	r1, r1, #1
     bc6:	430b      	orrs	r3, r1
     bc8:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     bca:	4a28      	ldr	r2, [pc, #160]	; (c6c <SystemInit+0x1ec>)
     bcc:	6a13      	ldr	r3, [r2, #32]
     bce:	2180      	movs	r1, #128	; 0x80
     bd0:	438b      	bics	r3, r1
     bd2:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     bd4:	4b27      	ldr	r3, [pc, #156]	; (c74 <SystemInit+0x1f4>)
     bd6:	2203      	movs	r2, #3
     bd8:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     bda:	4b26      	ldr	r3, [pc, #152]	; (c74 <SystemInit+0x1f4>)
     bdc:	4a2b      	ldr	r2, [pc, #172]	; (c8c <SystemInit+0x20c>)
     bde:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     be0:	46c0      	nop			; (mov r8, r8)
     be2:	4b24      	ldr	r3, [pc, #144]	; (c74 <SystemInit+0x1f4>)
     be4:	785b      	ldrb	r3, [r3, #1]
     be6:	b2db      	uxtb	r3, r3
     be8:	b25b      	sxtb	r3, r3
     bea:	2b00      	cmp	r3, #0
     bec:	dbf9      	blt.n	be2 <SystemInit+0x162>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     bee:	4b1e      	ldr	r3, [pc, #120]	; (c68 <SystemInit+0x1e8>)
     bf0:	2200      	movs	r2, #0
     bf2:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     bf4:	4b1c      	ldr	r3, [pc, #112]	; (c68 <SystemInit+0x1e8>)
     bf6:	2200      	movs	r2, #0
     bf8:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     bfa:	4b1b      	ldr	r3, [pc, #108]	; (c68 <SystemInit+0x1e8>)
     bfc:	2200      	movs	r2, #0
     bfe:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     c00:	4b19      	ldr	r3, [pc, #100]	; (c68 <SystemInit+0x1e8>)
     c02:	2200      	movs	r2, #0
     c04:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=MASTER_CLOCK_FREQ ;
     c06:	4b22      	ldr	r3, [pc, #136]	; (c90 <SystemInit+0x210>)
     c08:	4a22      	ldr	r2, [pc, #136]	; (c94 <SystemInit+0x214>)
     c0a:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     c0c:	4b22      	ldr	r3, [pc, #136]	; (c98 <SystemInit+0x218>)
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	08db      	lsrs	r3, r3, #3
     c12:	2207      	movs	r2, #7
     c14:	4013      	ands	r3, r2
     c16:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     c18:	4b20      	ldr	r3, [pc, #128]	; (c9c <SystemInit+0x21c>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	0edb      	lsrs	r3, r3, #27
     c1e:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     c20:	4b1d      	ldr	r3, [pc, #116]	; (c98 <SystemInit+0x218>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	015b      	lsls	r3, r3, #5
     c26:	22ff      	movs	r2, #255	; 0xff
     c28:	4013      	ands	r3, r2
     c2a:	683a      	ldr	r2, [r7, #0]
     c2c:	4313      	orrs	r3, r2
     c2e:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     c30:	491b      	ldr	r1, [pc, #108]	; (ca0 <SystemInit+0x220>)
     c32:	687b      	ldr	r3, [r7, #4]
     c34:	b29b      	uxth	r3, r3
     c36:	021b      	lsls	r3, r3, #8
     c38:	b29a      	uxth	r2, r3
     c3a:	23e0      	movs	r3, #224	; 0xe0
     c3c:	00db      	lsls	r3, r3, #3
     c3e:	4013      	ands	r3, r2
     c40:	b29a      	uxth	r2, r3
     c42:	683b      	ldr	r3, [r7, #0]
     c44:	b29b      	uxth	r3, r3
     c46:	20ff      	movs	r0, #255	; 0xff
     c48:	4003      	ands	r3, r0
     c4a:	b29b      	uxth	r3, r3
     c4c:	4313      	orrs	r3, r2
     c4e:	b29b      	uxth	r3, r3
     c50:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     c52:	4a04      	ldr	r2, [pc, #16]	; (c64 <SystemInit+0x1e4>)
     c54:	6853      	ldr	r3, [r2, #4]
     c56:	2180      	movs	r1, #128	; 0x80
     c58:	430b      	orrs	r3, r1
     c5a:	6053      	str	r3, [r2, #4]
}
     c5c:	46c0      	nop			; (mov r8, r8)
     c5e:	46bd      	mov	sp, r7
     c60:	b002      	add	sp, #8
     c62:	bd80      	pop	{r7, pc}
     c64:	41004000 	.word	0x41004000
     c68:	40000400 	.word	0x40000400
     c6c:	40000800 	.word	0x40000800
     c70:	0000060c 	.word	0x0000060c
     c74:	40000c00 	.word	0x40000c00
     c78:	00010501 	.word	0x00010501
     c7c:	7dff05b8 	.word	0x7dff05b8
     c80:	00000a04 	.word	0x00000a04
     c84:	00030700 	.word	0x00030700
     c88:	fffffcff 	.word	0xfffffcff
     c8c:	00010603 	.word	0x00010603
     c90:	20000000 	.word	0x20000000
     c94:	02dc6c00 	.word	0x02dc6c00
     c98:	00806024 	.word	0x00806024
     c9c:	00806020 	.word	0x00806020
     ca0:	42004000 	.word	0x42004000

00000ca4 <emg_setup>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void emg_setup(uint8_t channel1, uint8_t channel2, uint8_t channel3) {
     ca4:	b590      	push	{r4, r7, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	af00      	add	r7, sp, #0
     caa:	0004      	movs	r4, r0
     cac:	0008      	movs	r0, r1
     cae:	0011      	movs	r1, r2
     cb0:	1dfb      	adds	r3, r7, #7
     cb2:	1c22      	adds	r2, r4, #0
     cb4:	701a      	strb	r2, [r3, #0]
     cb6:	1dbb      	adds	r3, r7, #6
     cb8:	1c02      	adds	r2, r0, #0
     cba:	701a      	strb	r2, [r3, #0]
     cbc:	1d7b      	adds	r3, r7, #5
     cbe:	1c0a      	adds	r2, r1, #0
     cc0:	701a      	strb	r2, [r3, #0]
    // Save which channels are active
    _emg_channel_active[0] = channel1;
     cc2:	4b19      	ldr	r3, [pc, #100]	; (d28 <emg_setup+0x84>)
     cc4:	1dfa      	adds	r2, r7, #7
     cc6:	7812      	ldrb	r2, [r2, #0]
     cc8:	701a      	strb	r2, [r3, #0]
    _emg_channel_active[1] = channel2;
     cca:	4b17      	ldr	r3, [pc, #92]	; (d28 <emg_setup+0x84>)
     ccc:	1dba      	adds	r2, r7, #6
     cce:	7812      	ldrb	r2, [r2, #0]
     cd0:	705a      	strb	r2, [r3, #1]
    _emg_channel_active[2] = channel3;
     cd2:	4b15      	ldr	r3, [pc, #84]	; (d28 <emg_setup+0x84>)
     cd4:	1d7a      	adds	r2, r7, #5
     cd6:	7812      	ldrb	r2, [r2, #0]
     cd8:	709a      	strb	r2, [r3, #2]

    // Enable channel 1 as input
    PORT->Group[CHANEL_1_GROUP].PINCFG[CHANEL_1_PIN].bit.INEN = 1;
     cda:	4914      	ldr	r1, [pc, #80]	; (d2c <emg_setup+0x88>)
     cdc:	2242      	movs	r2, #66	; 0x42
     cde:	5c8b      	ldrb	r3, [r1, r2]
     ce0:	2002      	movs	r0, #2
     ce2:	4303      	orrs	r3, r0
     ce4:	548b      	strb	r3, [r1, r2]
    PORT->Group[CHANEL_1_GROUP].DIRCLR.reg = CHANEL_1_PORT;
     ce6:	4b11      	ldr	r3, [pc, #68]	; (d2c <emg_setup+0x88>)
     ce8:	2204      	movs	r2, #4
     cea:	605a      	str	r2, [r3, #4]

    // Enable channel 2 as input
    PORT->Group[CHANEL_2_GROUP].PINCFG[CHANEL_2_PIN].bit.INEN = 1;
     cec:	490f      	ldr	r1, [pc, #60]	; (d2c <emg_setup+0x88>)
     cee:	22c8      	movs	r2, #200	; 0xc8
     cf0:	5c8b      	ldrb	r3, [r1, r2]
     cf2:	2002      	movs	r0, #2
     cf4:	4303      	orrs	r3, r0
     cf6:	548b      	strb	r3, [r1, r2]
    PORT->Group[CHANEL_2_GROUP].DIRCLR.reg = CHANEL_2_PORT;
     cf8:	490c      	ldr	r1, [pc, #48]	; (d2c <emg_setup+0x88>)
     cfa:	2284      	movs	r2, #132	; 0x84
     cfc:	2380      	movs	r3, #128	; 0x80
     cfe:	005b      	lsls	r3, r3, #1
     d00:	508b      	str	r3, [r1, r2]

    // Enable channel 3 as input
    PORT->Group[CHANEL_3_GROUP].PINCFG[CHANEL_3_PIN].bit.INEN = 1;
     d02:	490a      	ldr	r1, [pc, #40]	; (d2c <emg_setup+0x88>)
     d04:	22c9      	movs	r2, #201	; 0xc9
     d06:	5c8b      	ldrb	r3, [r1, r2]
     d08:	2002      	movs	r0, #2
     d0a:	4303      	orrs	r3, r0
     d0c:	548b      	strb	r3, [r1, r2]
    PORT->Group[CHANEL_3_GROUP].DIRCLR.reg = CHANEL_3_PORT;
     d0e:	4907      	ldr	r1, [pc, #28]	; (d2c <emg_setup+0x88>)
     d10:	2284      	movs	r2, #132	; 0x84
     d12:	2380      	movs	r3, #128	; 0x80
     d14:	009b      	lsls	r3, r3, #2
     d16:	508b      	str	r3, [r1, r2]

    // Reset the index
    _emg_idx = 0;
     d18:	4b05      	ldr	r3, [pc, #20]	; (d30 <emg_setup+0x8c>)
     d1a:	2200      	movs	r2, #0
     d1c:	701a      	strb	r2, [r3, #0]
}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	46bd      	mov	sp, r7
     d22:	b003      	add	sp, #12
     d24:	bd90      	pop	{r4, r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	200007dc 	.word	0x200007dc
     d2c:	41004400 	.word	0x41004400
     d30:	200007d8 	.word	0x200007d8

00000d34 <emg_stop>:

//==============================================================================
void emg_stop() {
     d34:	b580      	push	{r7, lr}
     d36:	af00      	add	r7, sp, #0
    _emg_idx = 0;
     d38:	4b02      	ldr	r3, [pc, #8]	; (d44 <emg_stop+0x10>)
     d3a:	2200      	movs	r2, #0
     d3c:	701a      	strb	r2, [r3, #0]
}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	46bd      	mov	sp, r7
     d42:	bd80      	pop	{r7, pc}
     d44:	200007d8 	.word	0x200007d8

00000d48 <emg_sample>:

//==============================================================================
uint8_t emg_sample(emg_data_t* output)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b082      	sub	sp, #8
     d4c:	af00      	add	r7, sp, #0
     d4e:	6078      	str	r0, [r7, #4]
    if (adc_register(_emg_callback)) {
     d50:	4b0d      	ldr	r3, [pc, #52]	; (d88 <emg_sample+0x40>)
     d52:	0018      	movs	r0, r3
     d54:	4b0d      	ldr	r3, [pc, #52]	; (d8c <emg_sample+0x44>)
     d56:	4798      	blx	r3
     d58:	1e03      	subs	r3, r0, #0
     d5a:	d010      	beq.n	d7e <emg_sample+0x36>
        _emg_data = output;
     d5c:	4b0c      	ldr	r3, [pc, #48]	; (d90 <emg_sample+0x48>)
     d5e:	687a      	ldr	r2, [r7, #4]
     d60:	601a      	str	r2, [r3, #0]
        _emg_idx = 0;
     d62:	4b0c      	ldr	r3, [pc, #48]	; (d94 <emg_sample+0x4c>)
     d64:	2200      	movs	r2, #0
     d66:	701a      	strb	r2, [r3, #0]
        adc_read(_emg_channel_pins[_emg_idx]);
     d68:	4b0a      	ldr	r3, [pc, #40]	; (d94 <emg_sample+0x4c>)
     d6a:	781b      	ldrb	r3, [r3, #0]
     d6c:	b2db      	uxtb	r3, r3
     d6e:	001a      	movs	r2, r3
     d70:	4b09      	ldr	r3, [pc, #36]	; (d98 <emg_sample+0x50>)
     d72:	5c9b      	ldrb	r3, [r3, r2]
     d74:	0018      	movs	r0, r3
     d76:	4b09      	ldr	r3, [pc, #36]	; (d9c <emg_sample+0x54>)
     d78:	4798      	blx	r3
        return 1;
     d7a:	2301      	movs	r3, #1
     d7c:	e000      	b.n	d80 <emg_sample+0x38>
    }
    return 0;
     d7e:	2300      	movs	r3, #0
}
     d80:	0018      	movs	r0, r3
     d82:	46bd      	mov	sp, r7
     d84:	b002      	add	sp, #8
     d86:	bd80      	pop	{r7, pc}
     d88:	00000dbd 	.word	0x00000dbd
     d8c:	000003e1 	.word	0x000003e1
     d90:	200007d4 	.word	0x200007d4
     d94:	200007d8 	.word	0x200007d8
     d98:	20000004 	.word	0x20000004
     d9c:	00000385 	.word	0x00000385

00000da0 <emg_sample_complete>:

//==============================================================================
uint8_t emg_sample_complete() {
     da0:	b580      	push	{r7, lr}
     da2:	af00      	add	r7, sp, #0
    return _emg_idx == EMG_NUM_PINS;
     da4:	4b04      	ldr	r3, [pc, #16]	; (db8 <emg_sample_complete+0x18>)
     da6:	781b      	ldrb	r3, [r3, #0]
     da8:	b2db      	uxtb	r3, r3
     daa:	3b03      	subs	r3, #3
     dac:	425a      	negs	r2, r3
     dae:	4153      	adcs	r3, r2
     db0:	b2db      	uxtb	r3, r3
}
     db2:	0018      	movs	r0, r3
     db4:	46bd      	mov	sp, r7
     db6:	bd80      	pop	{r7, pc}
     db8:	200007d8 	.word	0x200007d8

00000dbc <_emg_callback>:
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _emg_callback(uint16_t data) {
     dbc:	b580      	push	{r7, lr}
     dbe:	b082      	sub	sp, #8
     dc0:	af00      	add	r7, sp, #0
     dc2:	0002      	movs	r2, r0
     dc4:	1dbb      	adds	r3, r7, #6
     dc6:	801a      	strh	r2, [r3, #0]
    // Store the value if the channel is active
    if (_emg_channel_active[_emg_idx]) {
     dc8:	4b1b      	ldr	r3, [pc, #108]	; (e38 <_emg_callback+0x7c>)
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	b2db      	uxtb	r3, r3
     dce:	001a      	movs	r2, r3
     dd0:	4b1a      	ldr	r3, [pc, #104]	; (e3c <_emg_callback+0x80>)
     dd2:	5c9b      	ldrb	r3, [r3, r2]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d00d      	beq.n	df4 <_emg_callback+0x38>
        _emg_data->data[_emg_idx++] = data;
     dd8:	4b19      	ldr	r3, [pc, #100]	; (e40 <_emg_callback+0x84>)
     dda:	681a      	ldr	r2, [r3, #0]
     ddc:	4b16      	ldr	r3, [pc, #88]	; (e38 <_emg_callback+0x7c>)
     dde:	781b      	ldrb	r3, [r3, #0]
     de0:	b2db      	uxtb	r3, r3
     de2:	1c59      	adds	r1, r3, #1
     de4:	b2c8      	uxtb	r0, r1
     de6:	4914      	ldr	r1, [pc, #80]	; (e38 <_emg_callback+0x7c>)
     de8:	7008      	strb	r0, [r1, #0]
     dea:	005b      	lsls	r3, r3, #1
     dec:	1db9      	adds	r1, r7, #6
     dee:	8809      	ldrh	r1, [r1, #0]
     df0:	5299      	strh	r1, [r3, r2]
     df2:	e00b      	b.n	e0c <_emg_callback+0x50>
    }

    // Store 0 if the channel inactive
    else {
        _emg_data->data[_emg_idx++] = 0;
     df4:	4b12      	ldr	r3, [pc, #72]	; (e40 <_emg_callback+0x84>)
     df6:	681a      	ldr	r2, [r3, #0]
     df8:	4b0f      	ldr	r3, [pc, #60]	; (e38 <_emg_callback+0x7c>)
     dfa:	781b      	ldrb	r3, [r3, #0]
     dfc:	b2db      	uxtb	r3, r3
     dfe:	1c59      	adds	r1, r3, #1
     e00:	b2c8      	uxtb	r0, r1
     e02:	490d      	ldr	r1, [pc, #52]	; (e38 <_emg_callback+0x7c>)
     e04:	7008      	strb	r0, [r1, #0]
     e06:	005b      	lsls	r3, r3, #1
     e08:	2100      	movs	r1, #0
     e0a:	5299      	strh	r1, [r3, r2]
    }

    // Start the next adc read if appropriate
    if (_emg_idx < EMG_NUM_PINS) {
     e0c:	4b0a      	ldr	r3, [pc, #40]	; (e38 <_emg_callback+0x7c>)
     e0e:	781b      	ldrb	r3, [r3, #0]
     e10:	b2db      	uxtb	r3, r3
     e12:	2b02      	cmp	r3, #2
     e14:	d80a      	bhi.n	e2c <_emg_callback+0x70>
        adc_read(_emg_channel_pins[_emg_idx]);
     e16:	4b08      	ldr	r3, [pc, #32]	; (e38 <_emg_callback+0x7c>)
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	b2db      	uxtb	r3, r3
     e1c:	001a      	movs	r2, r3
     e1e:	4b09      	ldr	r3, [pc, #36]	; (e44 <_emg_callback+0x88>)
     e20:	5c9b      	ldrb	r3, [r3, r2]
     e22:	0018      	movs	r0, r3
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <_emg_callback+0x8c>)
     e26:	4798      	blx	r3
        return 0;
     e28:	2300      	movs	r3, #0
     e2a:	e000      	b.n	e2e <_emg_callback+0x72>
    }

    // Otherwise free adc callback
    return 1;
     e2c:	2301      	movs	r3, #1
}
     e2e:	0018      	movs	r0, r3
     e30:	46bd      	mov	sp, r7
     e32:	b002      	add	sp, #8
     e34:	bd80      	pop	{r7, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	200007d8 	.word	0x200007d8
     e3c:	200007dc 	.word	0x200007dc
     e40:	200007d4 	.word	0x200007d4
     e44:	20000004 	.word	0x20000004
     e48:	00000385 	.word	0x00000385

00000e4c <hand_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void hand_init() {
     e4c:	b580      	push	{r7, lr}
     e4e:	b082      	sub	sp, #8
     e50:	af00      	add	r7, sp, #0
    // Init all kx003 units
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     e52:	1dfb      	adds	r3, r7, #7
     e54:	2201      	movs	r2, #1
     e56:	701a      	strb	r2, [r3, #0]
     e58:	e010      	b.n	e7c <hand_init+0x30>
        i2c_mux_init(I2C_MUX_ADDR, idx);
     e5a:	1dfb      	adds	r3, r7, #7
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	0019      	movs	r1, r3
     e60:	20e0      	movs	r0, #224	; 0xe0
     e62:	4b0f      	ldr	r3, [pc, #60]	; (ea0 <hand_init+0x54>)
     e64:	4798      	blx	r3
        kx003_init(0x1E);
     e66:	201e      	movs	r0, #30
     e68:	4b0e      	ldr	r3, [pc, #56]	; (ea4 <hand_init+0x58>)
     e6a:	4798      	blx	r3
        kx003_init(0x1C);
     e6c:	201c      	movs	r0, #28
     e6e:	4b0d      	ldr	r3, [pc, #52]	; (ea4 <hand_init+0x58>)
     e70:	4798      	blx	r3
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     e72:	1dfa      	adds	r2, r7, #7
     e74:	1dfb      	adds	r3, r7, #7
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	18db      	adds	r3, r3, r3
     e7a:	7013      	strb	r3, [r2, #0]
     e7c:	1dfb      	adds	r3, r7, #7
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	2b00      	cmp	r3, #0
     e82:	d1ea      	bne.n	e5a <hand_init+0xe>
    }

    // Reset state machine
    _hand_mode = HAND_PNT_TOP;
     e84:	4b08      	ldr	r3, [pc, #32]	; (ea8 <hand_init+0x5c>)
     e86:	2200      	movs	r2, #0
     e88:	701a      	strb	r2, [r3, #0]
    _hand_idx = 0;
     e8a:	4b08      	ldr	r3, [pc, #32]	; (eac <hand_init+0x60>)
     e8c:	2200      	movs	r2, #0
     e8e:	701a      	strb	r2, [r3, #0]
    _hand_i2c_stat = HAND_I2C_REQUEST;
     e90:	4b07      	ldr	r3, [pc, #28]	; (eb0 <hand_init+0x64>)
     e92:	2200      	movs	r2, #0
     e94:	701a      	strb	r2, [r3, #0]
}
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	46bd      	mov	sp, r7
     e9a:	b002      	add	sp, #8
     e9c:	bd80      	pop	{r7, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	000015d9 	.word	0x000015d9
     ea4:	0000170d 	.word	0x0000170d
     ea8:	200007e8 	.word	0x200007e8
     eac:	200007ea 	.word	0x200007ea
     eb0:	200007e9 	.word	0x200007e9

00000eb4 <hand_stop>:

//==============================================================================
void hand_stop() {
     eb4:	b580      	push	{r7, lr}
     eb6:	b082      	sub	sp, #8
     eb8:	af00      	add	r7, sp, #0
    // Stop all kx003 units
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     eba:	1dfb      	adds	r3, r7, #7
     ebc:	2201      	movs	r2, #1
     ebe:	701a      	strb	r2, [r3, #0]
     ec0:	e010      	b.n	ee4 <hand_stop+0x30>
        i2c_mux_init(I2C_MUX_ADDR, idx);
     ec2:	1dfb      	adds	r3, r7, #7
     ec4:	781b      	ldrb	r3, [r3, #0]
     ec6:	0019      	movs	r1, r3
     ec8:	20e0      	movs	r0, #224	; 0xe0
     eca:	4b0f      	ldr	r3, [pc, #60]	; (f08 <hand_stop+0x54>)
     ecc:	4798      	blx	r3
        kx003_stop(0x1E);
     ece:	201e      	movs	r0, #30
     ed0:	4b0e      	ldr	r3, [pc, #56]	; (f0c <hand_stop+0x58>)
     ed2:	4798      	blx	r3
        kx003_stop(0x1C);
     ed4:	201c      	movs	r0, #28
     ed6:	4b0d      	ldr	r3, [pc, #52]	; (f0c <hand_stop+0x58>)
     ed8:	4798      	blx	r3
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     eda:	1dfa      	adds	r2, r7, #7
     edc:	1dfb      	adds	r3, r7, #7
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	18db      	adds	r3, r3, r3
     ee2:	7013      	strb	r3, [r2, #0]
     ee4:	1dfb      	adds	r3, r7, #7
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	2b00      	cmp	r3, #0
     eea:	d1ea      	bne.n	ec2 <hand_stop+0xe>
    }

    // Reset state machine
    _hand_mode = HAND_PNT_TOP;
     eec:	4b08      	ldr	r3, [pc, #32]	; (f10 <hand_stop+0x5c>)
     eee:	2200      	movs	r2, #0
     ef0:	701a      	strb	r2, [r3, #0]
    _hand_idx = 0;
     ef2:	4b08      	ldr	r3, [pc, #32]	; (f14 <hand_stop+0x60>)
     ef4:	2200      	movs	r2, #0
     ef6:	701a      	strb	r2, [r3, #0]
    _hand_i2c_stat = HAND_I2C_REQUEST;
     ef8:	4b07      	ldr	r3, [pc, #28]	; (f18 <hand_stop+0x64>)
     efa:	2200      	movs	r2, #0
     efc:	701a      	strb	r2, [r3, #0]
}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	46bd      	mov	sp, r7
     f02:	b002      	add	sp, #8
     f04:	bd80      	pop	{r7, pc}
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	000015d9 	.word	0x000015d9
     f0c:	000017a1 	.word	0x000017a1
     f10:	200007e8 	.word	0x200007e8
     f14:	200007ea 	.word	0x200007ea
     f18:	200007e9 	.word	0x200007e9

00000f1c <hand_read>:

//==============================================================================
uint8_t hand_read(hand_pos_t* output) {
     f1c:	b580      	push	{r7, lr}
     f1e:	b082      	sub	sp, #8
     f20:	af00      	add	r7, sp, #0
     f22:	6078      	str	r0, [r7, #4]
    _hand_output = output;
     f24:	4b06      	ldr	r3, [pc, #24]	; (f40 <hand_read+0x24>)
     f26:	687a      	ldr	r2, [r7, #4]
     f28:	601a      	str	r2, [r3, #0]
    _hand_mode = HAND_PNT_TOP;
     f2a:	4b06      	ldr	r3, [pc, #24]	; (f44 <hand_read+0x28>)
     f2c:	2200      	movs	r2, #0
     f2e:	701a      	strb	r2, [r3, #0]
    _hand_i2c_stat = HAND_I2C_REQUEST;
     f30:	4b05      	ldr	r3, [pc, #20]	; (f48 <hand_read+0x2c>)
     f32:	2200      	movs	r2, #0
     f34:	701a      	strb	r2, [r3, #0]
    return 1;
     f36:	2301      	movs	r3, #1
}
     f38:	0018      	movs	r0, r3
     f3a:	46bd      	mov	sp, r7
     f3c:	b002      	add	sp, #8
     f3e:	bd80      	pop	{r7, pc}
     f40:	200007e4 	.word	0x200007e4
     f44:	200007e8 	.word	0x200007e8
     f48:	200007e9 	.word	0x200007e9

00000f4c <hand_read_complete>:


//==============================================================================
uint8_t hand_read_complete() {
     f4c:	b580      	push	{r7, lr}
     f4e:	b082      	sub	sp, #8
     f50:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
     f52:	1dfb      	adds	r3, r7, #7
     f54:	2200      	movs	r2, #0
     f56:	701a      	strb	r2, [r3, #0]
    switch (_hand_mode) {
     f58:	4b5d      	ldr	r3, [pc, #372]	; (10d0 <hand_read_complete+0x184>)
     f5a:	781b      	ldrb	r3, [r3, #0]
     f5c:	2b18      	cmp	r3, #24
     f5e:	d900      	bls.n	f62 <hand_read_complete+0x16>
     f60:	e0af      	b.n	10c2 <hand_read_complete+0x176>
     f62:	009a      	lsls	r2, r3, #2
     f64:	4b5b      	ldr	r3, [pc, #364]	; (10d4 <hand_read_complete+0x188>)
     f66:	18d3      	adds	r3, r2, r3
     f68:	681b      	ldr	r3, [r3, #0]
     f6a:	469f      	mov	pc, r3
        case HAND_PNT_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_PNT_TOP);
     f6c:	2180      	movs	r1, #128	; 0x80
     f6e:	20e0      	movs	r0, #224	; 0xe0
     f70:	4b59      	ldr	r3, [pc, #356]	; (10d8 <hand_read_complete+0x18c>)
     f72:	4798      	blx	r3
        } break;
     f74:	e0a5      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_PNT_TIP: {
            _hand_kx003(PNT_TIP_ADDR, _hand_output->pnt.tip.bytes);
     f76:	4b59      	ldr	r3, [pc, #356]	; (10dc <hand_read_complete+0x190>)
     f78:	681b      	ldr	r3, [r3, #0]
     f7a:	0019      	movs	r1, r3
     f7c:	201e      	movs	r0, #30
     f7e:	4b58      	ldr	r3, [pc, #352]	; (10e0 <hand_read_complete+0x194>)
     f80:	4798      	blx	r3
        } break;
     f82:	e09e      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_PNT_MID: {
            _hand_kx003(PNT_MID_ADDR, _hand_output->pnt.mid.bytes);
     f84:	4b55      	ldr	r3, [pc, #340]	; (10dc <hand_read_complete+0x190>)
     f86:	681b      	ldr	r3, [r3, #0]
     f88:	3306      	adds	r3, #6
     f8a:	0019      	movs	r1, r3
     f8c:	201c      	movs	r0, #28
     f8e:	4b54      	ldr	r3, [pc, #336]	; (10e0 <hand_read_complete+0x194>)
     f90:	4798      	blx	r3
        } break;
     f92:	e096      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_MID_PNT: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_PNT_MID);
     f94:	2120      	movs	r1, #32
     f96:	20e0      	movs	r0, #224	; 0xe0
     f98:	4b4f      	ldr	r3, [pc, #316]	; (10d8 <hand_read_complete+0x18c>)
     f9a:	4798      	blx	r3
        } break;
     f9c:	e091      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_PNT_BS: {
            _hand_kx003(PNT_BS_ADDR, _hand_output->pnt.bs.bytes);
     f9e:	4b4f      	ldr	r3, [pc, #316]	; (10dc <hand_read_complete+0x190>)
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	330c      	adds	r3, #12
     fa4:	0019      	movs	r1, r3
     fa6:	201e      	movs	r0, #30
     fa8:	4b4d      	ldr	r3, [pc, #308]	; (10e0 <hand_read_complete+0x194>)
     faa:	4798      	blx	r3
        } break;
     fac:	e089      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_MID_BS: {
            _hand_kx003(MID_BS_ADDR, _hand_output->mid.bs.bytes);
     fae:	4b4b      	ldr	r3, [pc, #300]	; (10dc <hand_read_complete+0x190>)
     fb0:	681b      	ldr	r3, [r3, #0]
     fb2:	331e      	adds	r3, #30
     fb4:	0019      	movs	r1, r3
     fb6:	201c      	movs	r0, #28
     fb8:	4b49      	ldr	r3, [pc, #292]	; (10e0 <hand_read_complete+0x194>)
     fba:	4798      	blx	r3
        } break;
     fbc:	e081      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_MID_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_MID_TOP);
     fbe:	2140      	movs	r1, #64	; 0x40
     fc0:	20e0      	movs	r0, #224	; 0xe0
     fc2:	4b45      	ldr	r3, [pc, #276]	; (10d8 <hand_read_complete+0x18c>)
     fc4:	4798      	blx	r3
        } break;
     fc6:	e07c      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_MID_MID: {
            _hand_kx003(MID_MID_ADDR, _hand_output->mid.mid.bytes);
     fc8:	4b44      	ldr	r3, [pc, #272]	; (10dc <hand_read_complete+0x190>)
     fca:	681b      	ldr	r3, [r3, #0]
     fcc:	3318      	adds	r3, #24
     fce:	0019      	movs	r1, r3
     fd0:	201c      	movs	r0, #28
     fd2:	4b43      	ldr	r3, [pc, #268]	; (10e0 <hand_read_complete+0x194>)
     fd4:	4798      	blx	r3
        } break;
     fd6:	e074      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_MID_TIP: {
            _hand_kx003(MID_TIP_ADDR, _hand_output->mid.tip.bytes);
     fd8:	4b40      	ldr	r3, [pc, #256]	; (10dc <hand_read_complete+0x190>)
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	3312      	adds	r3, #18
     fde:	0019      	movs	r1, r3
     fe0:	201e      	movs	r0, #30
     fe2:	4b3f      	ldr	r3, [pc, #252]	; (10e0 <hand_read_complete+0x194>)
     fe4:	4798      	blx	r3
        } break;
     fe6:	e06c      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_RNG_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_RNG_TOP);
     fe8:	2110      	movs	r1, #16
     fea:	20e0      	movs	r0, #224	; 0xe0
     fec:	4b3a      	ldr	r3, [pc, #232]	; (10d8 <hand_read_complete+0x18c>)
     fee:	4798      	blx	r3
        } break;
     ff0:	e067      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_RNG_TIP: {
            _hand_kx003(RNG_TIP_ADDR, _hand_output->rng.tip.bytes);
     ff2:	4b3a      	ldr	r3, [pc, #232]	; (10dc <hand_read_complete+0x190>)
     ff4:	681b      	ldr	r3, [r3, #0]
     ff6:	3324      	adds	r3, #36	; 0x24
     ff8:	0019      	movs	r1, r3
     ffa:	201e      	movs	r0, #30
     ffc:	4b38      	ldr	r3, [pc, #224]	; (10e0 <hand_read_complete+0x194>)
     ffe:	4798      	blx	r3
        } break;
    1000:	e05f      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_RNG_MID: {
            _hand_kx003(RNG_MID_ADDR, _hand_output->rng.mid.bytes);
    1002:	4b36      	ldr	r3, [pc, #216]	; (10dc <hand_read_complete+0x190>)
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	332a      	adds	r3, #42	; 0x2a
    1008:	0019      	movs	r1, r3
    100a:	201c      	movs	r0, #28
    100c:	4b34      	ldr	r3, [pc, #208]	; (10e0 <hand_read_complete+0x194>)
    100e:	4798      	blx	r3
        } break;
    1010:	e057      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_RNG_PNK: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_RNG_PNK);
    1012:	2104      	movs	r1, #4
    1014:	20e0      	movs	r0, #224	; 0xe0
    1016:	4b30      	ldr	r3, [pc, #192]	; (10d8 <hand_read_complete+0x18c>)
    1018:	4798      	blx	r3
        } break;
    101a:	e052      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_RNG_BS: {
            _hand_kx003(RNG_BS_ADDR, _hand_output->rng.bs.bytes);
    101c:	4b2f      	ldr	r3, [pc, #188]	; (10dc <hand_read_complete+0x190>)
    101e:	681b      	ldr	r3, [r3, #0]
    1020:	3330      	adds	r3, #48	; 0x30
    1022:	0019      	movs	r1, r3
    1024:	201e      	movs	r0, #30
    1026:	4b2e      	ldr	r3, [pc, #184]	; (10e0 <hand_read_complete+0x194>)
    1028:	4798      	blx	r3
        } break;
    102a:	e04a      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_PNK_BS: {
            _hand_kx003(PNK_BS_ADDR, _hand_output->pnk.bs.bytes);
    102c:	4b2b      	ldr	r3, [pc, #172]	; (10dc <hand_read_complete+0x190>)
    102e:	681b      	ldr	r3, [r3, #0]
    1030:	3342      	adds	r3, #66	; 0x42
    1032:	0019      	movs	r1, r3
    1034:	201c      	movs	r0, #28
    1036:	4b2a      	ldr	r3, [pc, #168]	; (10e0 <hand_read_complete+0x194>)
    1038:	4798      	blx	r3
        } break;
    103a:	e042      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_PNK_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_PNK_TOP);
    103c:	2108      	movs	r1, #8
    103e:	20e0      	movs	r0, #224	; 0xe0
    1040:	4b25      	ldr	r3, [pc, #148]	; (10d8 <hand_read_complete+0x18c>)
    1042:	4798      	blx	r3
        } break;
    1044:	e03d      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_PNK_MID: {
            _hand_kx003(PNK_MID_ADDR, _hand_output->pnk.mid.bytes);
    1046:	4b25      	ldr	r3, [pc, #148]	; (10dc <hand_read_complete+0x190>)
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	333c      	adds	r3, #60	; 0x3c
    104c:	0019      	movs	r1, r3
    104e:	201c      	movs	r0, #28
    1050:	4b23      	ldr	r3, [pc, #140]	; (10e0 <hand_read_complete+0x194>)
    1052:	4798      	blx	r3
        } break;
    1054:	e035      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_PNK_TIP: {
            _hand_kx003(PNK_TIP_ADDR, _hand_output->pnk.tip.bytes);
    1056:	4b21      	ldr	r3, [pc, #132]	; (10dc <hand_read_complete+0x190>)
    1058:	681b      	ldr	r3, [r3, #0]
    105a:	3336      	adds	r3, #54	; 0x36
    105c:	0019      	movs	r1, r3
    105e:	201e      	movs	r0, #30
    1060:	4b1f      	ldr	r3, [pc, #124]	; (10e0 <hand_read_complete+0x194>)
    1062:	4798      	blx	r3
        } break;
    1064:	e02d      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_THM_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_THM_TOP);
    1066:	2102      	movs	r1, #2
    1068:	20e0      	movs	r0, #224	; 0xe0
    106a:	4b1b      	ldr	r3, [pc, #108]	; (10d8 <hand_read_complete+0x18c>)
    106c:	4798      	blx	r3
        } break;
    106e:	e028      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_THM_TIP: {
            _hand_kx003(THM_TIP_ADDR, _hand_output->thm.tip.bytes);
    1070:	4b1a      	ldr	r3, [pc, #104]	; (10dc <hand_read_complete+0x190>)
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	3348      	adds	r3, #72	; 0x48
    1076:	0019      	movs	r1, r3
    1078:	201e      	movs	r0, #30
    107a:	4b19      	ldr	r3, [pc, #100]	; (10e0 <hand_read_complete+0x194>)
    107c:	4798      	blx	r3
        } break;
    107e:	e020      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_THM_MID: {
            _hand_kx003(THM_MID_ADDR, _hand_output->thm.mid.bytes);
    1080:	4b16      	ldr	r3, [pc, #88]	; (10dc <hand_read_complete+0x190>)
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	334e      	adds	r3, #78	; 0x4e
    1086:	0019      	movs	r1, r3
    1088:	201c      	movs	r0, #28
    108a:	4b15      	ldr	r3, [pc, #84]	; (10e0 <hand_read_complete+0x194>)
    108c:	4798      	blx	r3
        } break;
    108e:	e018      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_THM_HND: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_THM_HND);
    1090:	2101      	movs	r1, #1
    1092:	20e0      	movs	r0, #224	; 0xe0
    1094:	4b10      	ldr	r3, [pc, #64]	; (10d8 <hand_read_complete+0x18c>)
    1096:	4798      	blx	r3
        } break;
    1098:	e013      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_THM_BS: {
            _hand_kx003(THM_BS_ADDR, _hand_output->thm.bs.bytes);
    109a:	4b10      	ldr	r3, [pc, #64]	; (10dc <hand_read_complete+0x190>)
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	3354      	adds	r3, #84	; 0x54
    10a0:	0019      	movs	r1, r3
    10a2:	201e      	movs	r0, #30
    10a4:	4b0e      	ldr	r3, [pc, #56]	; (10e0 <hand_read_complete+0x194>)
    10a6:	4798      	blx	r3
        } break;
    10a8:	e00b      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_HND_BS: {
            _hand_kx003(HND_BS_ADDR, _hand_output->hnd.bytes);
    10aa:	4b0c      	ldr	r3, [pc, #48]	; (10dc <hand_read_complete+0x190>)
    10ac:	681b      	ldr	r3, [r3, #0]
    10ae:	335a      	adds	r3, #90	; 0x5a
    10b0:	0019      	movs	r1, r3
    10b2:	201c      	movs	r0, #28
    10b4:	4b0a      	ldr	r3, [pc, #40]	; (10e0 <hand_read_complete+0x194>)
    10b6:	4798      	blx	r3
        } break;
    10b8:	e003      	b.n	10c2 <hand_read_complete+0x176>

        case HAND_COMPLETE: {
            complete = 1;
    10ba:	1dfb      	adds	r3, r7, #7
    10bc:	2201      	movs	r2, #1
    10be:	701a      	strb	r2, [r3, #0]
        } break;
    10c0:	46c0      	nop			; (mov r8, r8)
    }

    return complete;
    10c2:	1dfb      	adds	r3, r7, #7
    10c4:	781b      	ldrb	r3, [r3, #0]
}
    10c6:	0018      	movs	r0, r3
    10c8:	46bd      	mov	sp, r7
    10ca:	b002      	add	sp, #8
    10cc:	bd80      	pop	{r7, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	200007e8 	.word	0x200007e8
    10d4:	000062e4 	.word	0x000062e4
    10d8:	000010e5 	.word	0x000010e5
    10dc:	200007e4 	.word	0x200007e4
    10e0:	00001155 	.word	0x00001155

000010e4 <_hand_i2c_mux>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
void _hand_i2c_mux(uint8_t addr, uint8_t data) {
    10e4:	b580      	push	{r7, lr}
    10e6:	b082      	sub	sp, #8
    10e8:	af00      	add	r7, sp, #0
    10ea:	0002      	movs	r2, r0
    10ec:	1dfb      	adds	r3, r7, #7
    10ee:	701a      	strb	r2, [r3, #0]
    10f0:	1dbb      	adds	r3, r7, #6
    10f2:	1c0a      	adds	r2, r1, #0
    10f4:	701a      	strb	r2, [r3, #0]
    if (_hand_i2c_stat == HAND_I2C_REQUEST) {
    10f6:	4b13      	ldr	r3, [pc, #76]	; (1144 <_hand_i2c_mux+0x60>)
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d10d      	bne.n	111a <_hand_i2c_mux+0x36>
        if (i2c_mux_write(addr, data)) {
    10fe:	1dbb      	adds	r3, r7, #6
    1100:	781a      	ldrb	r2, [r3, #0]
    1102:	1dfb      	adds	r3, r7, #7
    1104:	781b      	ldrb	r3, [r3, #0]
    1106:	0011      	movs	r1, r2
    1108:	0018      	movs	r0, r3
    110a:	4b0f      	ldr	r3, [pc, #60]	; (1148 <_hand_i2c_mux+0x64>)
    110c:	4798      	blx	r3
    110e:	1e03      	subs	r3, r0, #0
    1110:	d014      	beq.n	113c <_hand_i2c_mux+0x58>
            _hand_i2c_stat = HAND_I2C_WAITING;
    1112:	4b0c      	ldr	r3, [pc, #48]	; (1144 <_hand_i2c_mux+0x60>)
    1114:	2201      	movs	r2, #1
    1116:	701a      	strb	r2, [r3, #0]
        if (i2c_mux_write_complete()) {
            _hand_i2c_stat = HAND_I2C_REQUEST;
            _hand_mode++;
        }
    }
}
    1118:	e010      	b.n	113c <_hand_i2c_mux+0x58>
    } else if (_hand_i2c_stat == HAND_I2C_WAITING) {
    111a:	4b0a      	ldr	r3, [pc, #40]	; (1144 <_hand_i2c_mux+0x60>)
    111c:	781b      	ldrb	r3, [r3, #0]
    111e:	2b01      	cmp	r3, #1
    1120:	d10c      	bne.n	113c <_hand_i2c_mux+0x58>
        if (i2c_mux_write_complete()) {
    1122:	4b0a      	ldr	r3, [pc, #40]	; (114c <_hand_i2c_mux+0x68>)
    1124:	4798      	blx	r3
    1126:	1e03      	subs	r3, r0, #0
    1128:	d008      	beq.n	113c <_hand_i2c_mux+0x58>
            _hand_i2c_stat = HAND_I2C_REQUEST;
    112a:	4b06      	ldr	r3, [pc, #24]	; (1144 <_hand_i2c_mux+0x60>)
    112c:	2200      	movs	r2, #0
    112e:	701a      	strb	r2, [r3, #0]
            _hand_mode++;
    1130:	4b07      	ldr	r3, [pc, #28]	; (1150 <_hand_i2c_mux+0x6c>)
    1132:	781b      	ldrb	r3, [r3, #0]
    1134:	3301      	adds	r3, #1
    1136:	b2da      	uxtb	r2, r3
    1138:	4b05      	ldr	r3, [pc, #20]	; (1150 <_hand_i2c_mux+0x6c>)
    113a:	701a      	strb	r2, [r3, #0]
}
    113c:	46c0      	nop			; (mov r8, r8)
    113e:	46bd      	mov	sp, r7
    1140:	b002      	add	sp, #8
    1142:	bd80      	pop	{r7, pc}
    1144:	200007e9 	.word	0x200007e9
    1148:	00001625 	.word	0x00001625
    114c:	0000167d 	.word	0x0000167d
    1150:	200007e8 	.word	0x200007e8

00001154 <_hand_kx003>:

//==============================================================================
void _hand_kx003(uint8_t addr, joint_pos_t* output) {
    1154:	b590      	push	{r4, r7, lr}
    1156:	b083      	sub	sp, #12
    1158:	af00      	add	r7, sp, #0
    115a:	0002      	movs	r2, r0
    115c:	6039      	str	r1, [r7, #0]
    115e:	1dfb      	adds	r3, r7, #7
    1160:	701a      	strb	r2, [r3, #0]
    if (_hand_i2c_stat == HAND_I2C_REQUEST) {
    1162:	4b13      	ldr	r3, [pc, #76]	; (11b0 <_hand_kx003+0x5c>)
    1164:	781b      	ldrb	r3, [r3, #0]
    1166:	2b00      	cmp	r3, #0
    1168:	d10c      	bne.n	1184 <_hand_kx003+0x30>
        if (kx003_read(addr, KX003_XOUT_L, &(output->bytes), 6)) {
    116a:	683a      	ldr	r2, [r7, #0]
    116c:	1dfb      	adds	r3, r7, #7
    116e:	7818      	ldrb	r0, [r3, #0]
    1170:	2306      	movs	r3, #6
    1172:	2106      	movs	r1, #6
    1174:	4c0f      	ldr	r4, [pc, #60]	; (11b4 <_hand_kx003+0x60>)
    1176:	47a0      	blx	r4
    1178:	1e03      	subs	r3, r0, #0
    117a:	d014      	beq.n	11a6 <_hand_kx003+0x52>
            _hand_i2c_stat = HAND_I2C_WAITING;
    117c:	4b0c      	ldr	r3, [pc, #48]	; (11b0 <_hand_kx003+0x5c>)
    117e:	2201      	movs	r2, #1
    1180:	701a      	strb	r2, [r3, #0]
        if (kx003_read_complete()) {
            _hand_i2c_stat = HAND_I2C_REQUEST;
            _hand_mode++;
        }
    }
}
    1182:	e010      	b.n	11a6 <_hand_kx003+0x52>
    } else if (_hand_i2c_stat == HAND_I2C_WAITING) {
    1184:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <_hand_kx003+0x5c>)
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	2b01      	cmp	r3, #1
    118a:	d10c      	bne.n	11a6 <_hand_kx003+0x52>
        if (kx003_read_complete()) {
    118c:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <_hand_kx003+0x64>)
    118e:	4798      	blx	r3
    1190:	1e03      	subs	r3, r0, #0
    1192:	d008      	beq.n	11a6 <_hand_kx003+0x52>
            _hand_i2c_stat = HAND_I2C_REQUEST;
    1194:	4b06      	ldr	r3, [pc, #24]	; (11b0 <_hand_kx003+0x5c>)
    1196:	2200      	movs	r2, #0
    1198:	701a      	strb	r2, [r3, #0]
            _hand_mode++;
    119a:	4b08      	ldr	r3, [pc, #32]	; (11bc <_hand_kx003+0x68>)
    119c:	781b      	ldrb	r3, [r3, #0]
    119e:	3301      	adds	r3, #1
    11a0:	b2da      	uxtb	r2, r3
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <_hand_kx003+0x68>)
    11a4:	701a      	strb	r2, [r3, #0]
}
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	46bd      	mov	sp, r7
    11aa:	b003      	add	sp, #12
    11ac:	bd90      	pop	{r4, r7, pc}
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	200007e9 	.word	0x200007e9
    11b4:	00001829 	.word	0x00001829
    11b8:	000018c5 	.word	0x000018c5
    11bc:	200007e8 	.word	0x200007e8

000011c0 <i2c_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void i2c_init(uint32_t baudrate) {
    11c0:	b580      	push	{r7, lr}
    11c2:	b082      	sub	sp, #8
    11c4:	af00      	add	r7, sp, #0
    11c6:	6078      	str	r0, [r7, #4]
    // Set up i2c forwarding to serial
    I2C_callback.rx = _SERCOM3_Handler;
    11c8:	4b10      	ldr	r3, [pc, #64]	; (120c <i2c_init+0x4c>)
    11ca:	4a11      	ldr	r2, [pc, #68]	; (1210 <i2c_init+0x50>)
    11cc:	601a      	str	r2, [r3, #0]
    I2C_callback.tx = _SERCOM3_Handler;
    11ce:	4b0f      	ldr	r3, [pc, #60]	; (120c <i2c_init+0x4c>)
    11d0:	4a0f      	ldr	r2, [pc, #60]	; (1210 <i2c_init+0x50>)
    11d2:	605a      	str	r2, [r3, #4]

    // Remove these
    _i2c_init = 0;
    11d4:	4b0f      	ldr	r3, [pc, #60]	; (1214 <i2c_init+0x54>)
    11d6:	2200      	movs	r2, #0
    11d8:	701a      	strb	r2, [r3, #0]
    _i2c_addr = 0;
    11da:	4b0f      	ldr	r3, [pc, #60]	; (1218 <i2c_init+0x58>)
    11dc:	2200      	movs	r2, #0
    11de:	701a      	strb	r2, [r3, #0]
    _i2c_mode = 0;
    11e0:	4b0e      	ldr	r3, [pc, #56]	; (121c <i2c_init+0x5c>)
    11e2:	2200      	movs	r2, #0
    11e4:	701a      	strb	r2, [r3, #0]
    _i2c_flag = 0;
    11e6:	4b0e      	ldr	r3, [pc, #56]	; (1220 <i2c_init+0x60>)
    11e8:	2200      	movs	r2, #0
    11ea:	701a      	strb	r2, [r3, #0]
    _reading = 0;
    11ec:	4b0d      	ldr	r3, [pc, #52]	; (1224 <i2c_init+0x64>)
    11ee:	2200      	movs	r2, #0
    11f0:	701a      	strb	r2, [r3, #0]
    _i2c_rx_buff = 0;
    11f2:	4b0d      	ldr	r3, [pc, #52]	; (1228 <i2c_init+0x68>)
    11f4:	2200      	movs	r2, #0
    11f6:	701a      	strb	r2, [r3, #0]

    // Set the default rx/tx callbacks
    _i2c_default = _i2c_default_func;
    11f8:	4b0c      	ldr	r3, [pc, #48]	; (122c <i2c_init+0x6c>)
    11fa:	4a0d      	ldr	r2, [pc, #52]	; (1230 <i2c_init+0x70>)
    11fc:	601a      	str	r2, [r3, #0]
    _i2c_callback = _i2c_default_func;
    11fe:	4b0d      	ldr	r3, [pc, #52]	; (1234 <i2c_init+0x74>)
    1200:	4a0b      	ldr	r2, [pc, #44]	; (1230 <i2c_init+0x70>)
    1202:	601a      	str	r2, [r3, #0]
}
    1204:	46c0      	nop			; (mov r8, r8)
    1206:	46bd      	mov	sp, r7
    1208:	b002      	add	sp, #8
    120a:	bd80      	pop	{r7, pc}
    120c:	200007ec 	.word	0x200007ec
    1210:	00001535 	.word	0x00001535
    1214:	20000800 	.word	0x20000800
    1218:	200007f6 	.word	0x200007f6
    121c:	200007f7 	.word	0x200007f7
    1220:	200007f8 	.word	0x200007f8
    1224:	20000801 	.word	0x20000801
    1228:	200007f4 	.word	0x200007f4
    122c:	200007fc 	.word	0x200007fc
    1230:	00001501 	.word	0x00001501
    1234:	20000804 	.word	0x20000804

00001238 <i2c_stop>:

//==============================================================================
void i2c_stop() {
    1238:	b580      	push	{r7, lr}
    123a:	af00      	add	r7, sp, #0
    i2c_unregister(_i2c_callback);
    123c:	4b0c      	ldr	r3, [pc, #48]	; (1270 <i2c_stop+0x38>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	0018      	movs	r0, r3
    1242:	4b0c      	ldr	r3, [pc, #48]	; (1274 <i2c_stop+0x3c>)
    1244:	4798      	blx	r3

    // Remove these
    _i2c_init = 0;
    1246:	4b0c      	ldr	r3, [pc, #48]	; (1278 <i2c_stop+0x40>)
    1248:	2200      	movs	r2, #0
    124a:	701a      	strb	r2, [r3, #0]
    _i2c_addr = 0;
    124c:	4b0b      	ldr	r3, [pc, #44]	; (127c <i2c_stop+0x44>)
    124e:	2200      	movs	r2, #0
    1250:	701a      	strb	r2, [r3, #0]
    _i2c_mode = 0;
    1252:	4b0b      	ldr	r3, [pc, #44]	; (1280 <i2c_stop+0x48>)
    1254:	2200      	movs	r2, #0
    1256:	701a      	strb	r2, [r3, #0]
    _i2c_flag = 0;
    1258:	4b0a      	ldr	r3, [pc, #40]	; (1284 <i2c_stop+0x4c>)
    125a:	2200      	movs	r2, #0
    125c:	701a      	strb	r2, [r3, #0]
    _reading = 0;
    125e:	4b0a      	ldr	r3, [pc, #40]	; (1288 <i2c_stop+0x50>)
    1260:	2200      	movs	r2, #0
    1262:	701a      	strb	r2, [r3, #0]
    _i2c_rx_buff = 0;
    1264:	4b09      	ldr	r3, [pc, #36]	; (128c <i2c_stop+0x54>)
    1266:	2200      	movs	r2, #0
    1268:	701a      	strb	r2, [r3, #0]
}
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	46bd      	mov	sp, r7
    126e:	bd80      	pop	{r7, pc}
    1270:	20000804 	.word	0x20000804
    1274:	00001441 	.word	0x00001441
    1278:	20000800 	.word	0x20000800
    127c:	200007f6 	.word	0x200007f6
    1280:	200007f7 	.word	0x200007f7
    1284:	200007f8 	.word	0x200007f8
    1288:	20000801 	.word	0x20000801
    128c:	200007f4 	.word	0x200007f4

00001290 <i2c_timeout>:

//==============================================================================
uint8_t i2c_timeout() {
    1290:	b580      	push	{r7, lr}
    1292:	af00      	add	r7, sp, #0
    if (_i2c_active) return _i2c_active = 0;
    1294:	4b07      	ldr	r3, [pc, #28]	; (12b4 <i2c_timeout+0x24>)
    1296:	781b      	ldrb	r3, [r3, #0]
    1298:	b2db      	uxtb	r3, r3
    129a:	2b00      	cmp	r3, #0
    129c:	d004      	beq.n	12a8 <i2c_timeout+0x18>
    129e:	4b05      	ldr	r3, [pc, #20]	; (12b4 <i2c_timeout+0x24>)
    12a0:	2200      	movs	r2, #0
    12a2:	701a      	strb	r2, [r3, #0]
    12a4:	2300      	movs	r3, #0
    12a6:	e002      	b.n	12ae <i2c_timeout+0x1e>
    else return i2c_registered();
    12a8:	4b03      	ldr	r3, [pc, #12]	; (12b8 <i2c_timeout+0x28>)
    12aa:	4798      	blx	r3
    12ac:	0003      	movs	r3, r0
}
    12ae:	0018      	movs	r0, r3
    12b0:	46bd      	mov	sp, r7
    12b2:	bd80      	pop	{r7, pc}
    12b4:	200007f5 	.word	0x200007f5
    12b8:	000014d1 	.word	0x000014d1

000012bc <i2c_begin_read>:

//==============================================================================
uint8_t i2c_begin_read(uint8_t addr)
{
    12bc:	b580      	push	{r7, lr}
    12be:	b082      	sub	sp, #8
    12c0:	af00      	add	r7, sp, #0
    12c2:	0002      	movs	r2, r0
    12c4:	1dfb      	adds	r3, r7, #7
    12c6:	701a      	strb	r2, [r3, #0]
    // Remove this, initiates computer acting as i2c
    _i2c_init = 1;
    12c8:	4b0a      	ldr	r3, [pc, #40]	; (12f4 <i2c_begin_read+0x38>)
    12ca:	2201      	movs	r2, #1
    12cc:	701a      	strb	r2, [r3, #0]
    _i2c_addr = addr;
    12ce:	4b0a      	ldr	r3, [pc, #40]	; (12f8 <i2c_begin_read+0x3c>)
    12d0:	1dfa      	adds	r2, r7, #7
    12d2:	7812      	ldrb	r2, [r2, #0]
    12d4:	701a      	strb	r2, [r3, #0]
    _reading = 1;
    12d6:	4b09      	ldr	r3, [pc, #36]	; (12fc <i2c_begin_read+0x40>)
    12d8:	2201      	movs	r2, #1
    12da:	701a      	strb	r2, [r3, #0]
    serial_write(RX_S);
    12dc:	2034      	movs	r0, #52	; 0x34
    12de:	4b08      	ldr	r3, [pc, #32]	; (1300 <i2c_begin_read+0x44>)
    12e0:	4798      	blx	r3

    // Leave this, timeout update
    _i2c_active = 1;
    12e2:	4b08      	ldr	r3, [pc, #32]	; (1304 <i2c_begin_read+0x48>)
    12e4:	2201      	movs	r2, #1
    12e6:	701a      	strb	r2, [r3, #0]

    // I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
	// I2C_SERCOM->I2CM.ADDR.reg = addr | I2C_TRANSFER_READ;
}
    12e8:	46c0      	nop			; (mov r8, r8)
    12ea:	0018      	movs	r0, r3
    12ec:	46bd      	mov	sp, r7
    12ee:	b002      	add	sp, #8
    12f0:	bd80      	pop	{r7, pc}
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	20000800 	.word	0x20000800
    12f8:	200007f6 	.word	0x200007f6
    12fc:	20000801 	.word	0x20000801
    1300:	00002e39 	.word	0x00002e39
    1304:	200007f5 	.word	0x200007f5

00001308 <i2c_begin_write>:

//==============================================================================
uint8_t i2c_begin_write(uint8_t addr)
{
    1308:	b580      	push	{r7, lr}
    130a:	b082      	sub	sp, #8
    130c:	af00      	add	r7, sp, #0
    130e:	0002      	movs	r2, r0
    1310:	1dfb      	adds	r3, r7, #7
    1312:	701a      	strb	r2, [r3, #0]
    // Remove this, initiates computer acting as i2c
    _i2c_init = 1;
    1314:	4b08      	ldr	r3, [pc, #32]	; (1338 <i2c_begin_write+0x30>)
    1316:	2201      	movs	r2, #1
    1318:	701a      	strb	r2, [r3, #0]
    _i2c_addr = addr;
    131a:	4b08      	ldr	r3, [pc, #32]	; (133c <i2c_begin_write+0x34>)
    131c:	1dfa      	adds	r2, r7, #7
    131e:	7812      	ldrb	r2, [r2, #0]
    1320:	701a      	strb	r2, [r3, #0]
    serial_write(TX_S);
    1322:	2031      	movs	r0, #49	; 0x31
    1324:	4b06      	ldr	r3, [pc, #24]	; (1340 <i2c_begin_write+0x38>)
    1326:	4798      	blx	r3

    // Leave this, timeout update
    _i2c_active = 1;
    1328:	4b06      	ldr	r3, [pc, #24]	; (1344 <i2c_begin_write+0x3c>)
    132a:	2201      	movs	r2, #1
    132c:	701a      	strb	r2, [r3, #0]

    // I2C_SERCOM->I2CM.ADDR.reg = addr | I2C_TRANSFER_WRITE;
}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	0018      	movs	r0, r3
    1332:	46bd      	mov	sp, r7
    1334:	b002      	add	sp, #8
    1336:	bd80      	pop	{r7, pc}
    1338:	20000800 	.word	0x20000800
    133c:	200007f6 	.word	0x200007f6
    1340:	00002e39 	.word	0x00002e39
    1344:	200007f5 	.word	0x200007f5

00001348 <i2c_tx_flag>:

//==============================================================================
uint8_t i2c_tx_flag()
{
    1348:	b580      	push	{r7, lr}
    134a:	af00      	add	r7, sp, #0
    // Check if tx is free
    return serial_tx_flag(); // SERCOM3->I2CM.INTFLAG.bit.MB;
    134c:	4b02      	ldr	r3, [pc, #8]	; (1358 <i2c_tx_flag+0x10>)
    134e:	4798      	blx	r3
    1350:	0003      	movs	r3, r0
}
    1352:	0018      	movs	r0, r3
    1354:	46bd      	mov	sp, r7
    1356:	bd80      	pop	{r7, pc}
    1358:	00002dd9 	.word	0x00002dd9

0000135c <i2c_rx_flag>:

//==============================================================================
uint8_t i2c_rx_flag() {
    135c:	b580      	push	{r7, lr}
    135e:	af00      	add	r7, sp, #0
    // Check if there is rx data
    return serial_rx_flag(); // SERCOM3->I2CM.INTFLAG.bit.SB;
    1360:	4b02      	ldr	r3, [pc, #8]	; (136c <i2c_rx_flag+0x10>)
    1362:	4798      	blx	r3
    1364:	0003      	movs	r3, r0
}
    1366:	0018      	movs	r0, r3
    1368:	46bd      	mov	sp, r7
    136a:	bd80      	pop	{r7, pc}
    136c:	00002df1 	.word	0x00002df1

00001370 <i2c_read>:

//==============================================================================
uint8_t i2c_read() {
    1370:	b590      	push	{r4, r7, lr}
    1372:	b083      	sub	sp, #12
    1374:	af00      	add	r7, sp, #0
    if (_reading) {
    1376:	4b0d      	ldr	r3, [pc, #52]	; (13ac <i2c_read+0x3c>)
    1378:	781b      	ldrb	r3, [r3, #0]
    137a:	b2db      	uxtb	r3, r3
    137c:	2b00      	cmp	r3, #0
    137e:	d00d      	beq.n	139c <i2c_read+0x2c>
        uint8_t data = serial_read();
    1380:	1dfc      	adds	r4, r7, #7
    1382:	4b0b      	ldr	r3, [pc, #44]	; (13b0 <i2c_read+0x40>)
    1384:	4798      	blx	r3
    1386:	0003      	movs	r3, r0
    1388:	7023      	strb	r3, [r4, #0]
        _i2c_flag = 1;
    138a:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <i2c_read+0x44>)
    138c:	2201      	movs	r2, #1
    138e:	701a      	strb	r2, [r3, #0]
        serial_write(RX_C);
    1390:	2035      	movs	r0, #53	; 0x35
    1392:	4b09      	ldr	r3, [pc, #36]	; (13b8 <i2c_read+0x48>)
    1394:	4798      	blx	r3
        return data;
    1396:	1dfb      	adds	r3, r7, #7
    1398:	781b      	ldrb	r3, [r3, #0]
    139a:	e002      	b.n	13a2 <i2c_read+0x32>
    } else {
        return _i2c_rx_buff;
    139c:	4b07      	ldr	r3, [pc, #28]	; (13bc <i2c_read+0x4c>)
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	b2db      	uxtb	r3, r3
    }

    // return I2C_SERCOM->I2CM.DATA.reg;
}
    13a2:	0018      	movs	r0, r3
    13a4:	46bd      	mov	sp, r7
    13a6:	b003      	add	sp, #12
    13a8:	bd90      	pop	{r4, r7, pc}
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	20000801 	.word	0x20000801
    13b0:	00002e09 	.word	0x00002e09
    13b4:	200007f8 	.word	0x200007f8
    13b8:	00002e39 	.word	0x00002e39
    13bc:	200007f4 	.word	0x200007f4

000013c0 <i2c_write>:

//==============================================================================
void i2c_write(uint8_t data) {
    13c0:	b580      	push	{r7, lr}
    13c2:	b082      	sub	sp, #8
    13c4:	af00      	add	r7, sp, #0
    13c6:	0002      	movs	r2, r0
    13c8:	1dfb      	adds	r3, r7, #7
    13ca:	701a      	strb	r2, [r3, #0]
    _i2c_init = 1;
    13cc:	4b06      	ldr	r3, [pc, #24]	; (13e8 <i2c_write+0x28>)
    13ce:	2201      	movs	r2, #1
    13d0:	701a      	strb	r2, [r3, #0]
    _i2c_addr = data;
    13d2:	4b06      	ldr	r3, [pc, #24]	; (13ec <i2c_write+0x2c>)
    13d4:	1dfa      	adds	r2, r7, #7
    13d6:	7812      	ldrb	r2, [r2, #0]
    13d8:	701a      	strb	r2, [r3, #0]
    serial_write(TX_C);
    13da:	2032      	movs	r0, #50	; 0x32
    13dc:	4b04      	ldr	r3, [pc, #16]	; (13f0 <i2c_write+0x30>)
    13de:	4798      	blx	r3
    // I2C_SERCOM->I2CM.DATA.reg = data;
}
    13e0:	46c0      	nop			; (mov r8, r8)
    13e2:	46bd      	mov	sp, r7
    13e4:	b002      	add	sp, #8
    13e6:	bd80      	pop	{r7, pc}
    13e8:	20000800 	.word	0x20000800
    13ec:	200007f6 	.word	0x200007f6
    13f0:	00002e39 	.word	0x00002e39

000013f4 <i2c_register>:

//==============================================================================
uint8_t i2c_register(i2c_callback_t callback) {
    13f4:	b580      	push	{r7, lr}
    13f6:	b082      	sub	sp, #8
    13f8:	af00      	add	r7, sp, #0
    13fa:	6078      	str	r0, [r7, #4]
    if (!i2c_registered()) {
    13fc:	4b0b      	ldr	r3, [pc, #44]	; (142c <i2c_register+0x38>)
    13fe:	4798      	blx	r3
    1400:	1e03      	subs	r3, r0, #0
    1402:	d10e      	bne.n	1422 <i2c_register+0x2e>
        // Remove this 
        if (serial_register(I2C_callback)) {
    1404:	4b0a      	ldr	r3, [pc, #40]	; (1430 <i2c_register+0x3c>)
    1406:	6818      	ldr	r0, [r3, #0]
    1408:	6859      	ldr	r1, [r3, #4]
    140a:	4b0a      	ldr	r3, [pc, #40]	; (1434 <i2c_register+0x40>)
    140c:	4798      	blx	r3
    140e:	1e03      	subs	r3, r0, #0
    1410:	d007      	beq.n	1422 <i2c_register+0x2e>
            // Leave this
            _i2c_active = 1;
    1412:	4b09      	ldr	r3, [pc, #36]	; (1438 <i2c_register+0x44>)
    1414:	2201      	movs	r2, #1
    1416:	701a      	strb	r2, [r3, #0]
            _i2c_callback = callback;
    1418:	4b08      	ldr	r3, [pc, #32]	; (143c <i2c_register+0x48>)
    141a:	687a      	ldr	r2, [r7, #4]
    141c:	601a      	str	r2, [r3, #0]
            return 1;
    141e:	2301      	movs	r3, #1
    1420:	e000      	b.n	1424 <i2c_register+0x30>
        }
    }
    
    return 0;
    1422:	2300      	movs	r3, #0
}
    1424:	0018      	movs	r0, r3
    1426:	46bd      	mov	sp, r7
    1428:	b002      	add	sp, #8
    142a:	bd80      	pop	{r7, pc}
    142c:	000014d1 	.word	0x000014d1
    1430:	200007ec 	.word	0x200007ec
    1434:	00002e89 	.word	0x00002e89
    1438:	200007f5 	.word	0x200007f5
    143c:	20000804 	.word	0x20000804

00001440 <i2c_unregister>:

//==============================================================================
void i2c_unregister(i2c_callback_t callback)
{
    1440:	b580      	push	{r7, lr}
    1442:	b082      	sub	sp, #8
    1444:	af00      	add	r7, sp, #0
    1446:	6078      	str	r0, [r7, #4]
    // Remove this
    serial_unregister(I2C_callback);
    1448:	4b06      	ldr	r3, [pc, #24]	; (1464 <i2c_unregister+0x24>)
    144a:	6818      	ldr	r0, [r3, #0]
    144c:	6859      	ldr	r1, [r3, #4]
    144e:	4b06      	ldr	r3, [pc, #24]	; (1468 <i2c_unregister+0x28>)
    1450:	4798      	blx	r3

    // Leave this
    _i2c_callback = _i2c_default;
    1452:	4b06      	ldr	r3, [pc, #24]	; (146c <i2c_unregister+0x2c>)
    1454:	681a      	ldr	r2, [r3, #0]
    1456:	4b06      	ldr	r3, [pc, #24]	; (1470 <i2c_unregister+0x30>)
    1458:	601a      	str	r2, [r3, #0]
}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	46bd      	mov	sp, r7
    145e:	b002      	add	sp, #8
    1460:	bd80      	pop	{r7, pc}
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	200007ec 	.word	0x200007ec
    1468:	00002f49 	.word	0x00002f49
    146c:	200007fc 	.word	0x200007fc
    1470:	20000804 	.word	0x20000804

00001474 <i2c_rx_stop>:
    i2c_register(callback);
    _i2c_default = callback;
}

//==============================================================================
void i2c_rx_stop() {
    1474:	b580      	push	{r7, lr}
    1476:	af00      	add	r7, sp, #0
    // Remove this
    _i2c_flag = 1;
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <i2c_rx_stop+0x28>)
    147a:	2201      	movs	r2, #1
    147c:	701a      	strb	r2, [r3, #0]
    _reading = 0;
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <i2c_rx_stop+0x2c>)
    1480:	2200      	movs	r2, #0
    1482:	701a      	strb	r2, [r3, #0]
    _i2c_rx_buff = serial_read();
    1484:	4b07      	ldr	r3, [pc, #28]	; (14a4 <i2c_rx_stop+0x30>)
    1486:	4798      	blx	r3
    1488:	0003      	movs	r3, r0
    148a:	001a      	movs	r2, r3
    148c:	4b06      	ldr	r3, [pc, #24]	; (14a8 <i2c_rx_stop+0x34>)
    148e:	701a      	strb	r2, [r3, #0]
    serial_write(RX_E);
    1490:	2036      	movs	r0, #54	; 0x36
    1492:	4b06      	ldr	r3, [pc, #24]	; (14ac <i2c_rx_stop+0x38>)
    1494:	4798      	blx	r3

    // I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    // I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	46bd      	mov	sp, r7
    149a:	bd80      	pop	{r7, pc}
    149c:	200007f8 	.word	0x200007f8
    14a0:	20000801 	.word	0x20000801
    14a4:	00002e09 	.word	0x00002e09
    14a8:	200007f4 	.word	0x200007f4
    14ac:	00002e39 	.word	0x00002e39

000014b0 <i2c_tx_stop>:

//==============================================================================
void i2c_tx_stop() {
    14b0:	b580      	push	{r7, lr}
    14b2:	af00      	add	r7, sp, #0
    // Remove this
    _i2c_flag = 1;
    14b4:	4b04      	ldr	r3, [pc, #16]	; (14c8 <i2c_tx_stop+0x18>)
    14b6:	2201      	movs	r2, #1
    14b8:	701a      	strb	r2, [r3, #0]
    serial_write(TX_E);
    14ba:	2033      	movs	r0, #51	; 0x33
    14bc:	4b03      	ldr	r3, [pc, #12]	; (14cc <i2c_tx_stop+0x1c>)
    14be:	4798      	blx	r3

    // I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
}
    14c0:	46c0      	nop			; (mov r8, r8)
    14c2:	46bd      	mov	sp, r7
    14c4:	bd80      	pop	{r7, pc}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	200007f8 	.word	0x200007f8
    14cc:	00002e39 	.word	0x00002e39

000014d0 <i2c_registered>:

//==============================================================================
uint8_t i2c_registered() {
    14d0:	b580      	push	{r7, lr}
    14d2:	af00      	add	r7, sp, #0
    return (_i2c_callback != _i2c_default);
    14d4:	4b05      	ldr	r3, [pc, #20]	; (14ec <i2c_registered+0x1c>)
    14d6:	681a      	ldr	r2, [r3, #0]
    14d8:	4b05      	ldr	r3, [pc, #20]	; (14f0 <i2c_registered+0x20>)
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	1ad3      	subs	r3, r2, r3
    14de:	1e5a      	subs	r2, r3, #1
    14e0:	4193      	sbcs	r3, r2
    14e2:	b2db      	uxtb	r3, r3
}
    14e4:	0018      	movs	r0, r3
    14e6:	46bd      	mov	sp, r7
    14e8:	bd80      	pop	{r7, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	20000804 	.word	0x20000804
    14f0:	200007fc 	.word	0x200007fc

000014f4 <_i2c_failed_flag>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _i2c_failed_flag() {
    14f4:	b580      	push	{r7, lr}
    14f6:	af00      	add	r7, sp, #0
    return 0; // SERCOM3->I2CM.STATUS.bit.RXNACK;
    14f8:	2300      	movs	r3, #0
}
    14fa:	0018      	movs	r0, r3
    14fc:	46bd      	mov	sp, r7
    14fe:	bd80      	pop	{r7, pc}

00001500 <_i2c_default_func>:
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _i2c_default_func(){
    1500:	b580      	push	{r7, lr}
    1502:	af00      	add	r7, sp, #0
    if (i2c_tx_flag()) {
    1504:	4b08      	ldr	r3, [pc, #32]	; (1528 <_i2c_default_func+0x28>)
    1506:	4798      	blx	r3
    1508:	1e03      	subs	r3, r0, #0
    150a:	d001      	beq.n	1510 <_i2c_default_func+0x10>
        return 0;
    150c:	2300      	movs	r3, #0
    150e:	e007      	b.n	1520 <_i2c_default_func+0x20>
    }
    else if (i2c_rx_flag()) {
    1510:	4b06      	ldr	r3, [pc, #24]	; (152c <_i2c_default_func+0x2c>)
    1512:	4798      	blx	r3
    1514:	1e03      	subs	r3, r0, #0
    1516:	d003      	beq.n	1520 <_i2c_default_func+0x20>
        i2c_read();
    1518:	4b05      	ldr	r3, [pc, #20]	; (1530 <_i2c_default_func+0x30>)
    151a:	4798      	blx	r3
        return 0;
    151c:	2300      	movs	r3, #0
    151e:	e7ff      	b.n	1520 <_i2c_default_func+0x20>
    }
}
    1520:	0018      	movs	r0, r3
    1522:	46bd      	mov	sp, r7
    1524:	bd80      	pop	{r7, pc}
    1526:	46c0      	nop			; (mov r8, r8)
    1528:	00001349 	.word	0x00001349
    152c:	0000135d 	.word	0x0000135d
    1530:	00001371 	.word	0x00001371

00001534 <_SERCOM3_Handler>:
//------------------------------------------------------------------------------


//==============================================================================
uint8_t _SERCOM3_Handler()
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0
    // Leave this, timeout update
    _i2c_active = 1;
    1538:	4b1d      	ldr	r3, [pc, #116]	; (15b0 <_SERCOM3_Handler+0x7c>)
    153a:	2201      	movs	r2, #1
    153c:	701a      	strb	r2, [r3, #0]

    // Remove this
    if (_i2c_init) {
    153e:	4b1d      	ldr	r3, [pc, #116]	; (15b4 <_SERCOM3_Handler+0x80>)
    1540:	781b      	ldrb	r3, [r3, #0]
    1542:	b2db      	uxtb	r3, r3
    1544:	2b00      	cmp	r3, #0
    1546:	d010      	beq.n	156a <_SERCOM3_Handler+0x36>
        _i2c_init = 0;
    1548:	4b1a      	ldr	r3, [pc, #104]	; (15b4 <_SERCOM3_Handler+0x80>)
    154a:	2200      	movs	r2, #0
    154c:	701a      	strb	r2, [r3, #0]
        serial_write(_i2c_addr);
    154e:	4b1a      	ldr	r3, [pc, #104]	; (15b8 <_SERCOM3_Handler+0x84>)
    1550:	781b      	ldrb	r3, [r3, #0]
    1552:	b2db      	uxtb	r3, r3
    1554:	0018      	movs	r0, r3
    1556:	4b19      	ldr	r3, [pc, #100]	; (15bc <_SERCOM3_Handler+0x88>)
    1558:	4798      	blx	r3
        return _i2c_flag = _i2c_addr = 0;
    155a:	2300      	movs	r3, #0
    155c:	4a16      	ldr	r2, [pc, #88]	; (15b8 <_SERCOM3_Handler+0x84>)
    155e:	1c19      	adds	r1, r3, #0
    1560:	7011      	strb	r1, [r2, #0]
    1562:	4a17      	ldr	r2, [pc, #92]	; (15c0 <_SERCOM3_Handler+0x8c>)
    1564:	1c19      	adds	r1, r3, #0
    1566:	7011      	strb	r1, [r2, #0]
    1568:	e01f      	b.n	15aa <_SERCOM3_Handler+0x76>
    } else if (_i2c_flag) {
    156a:	4b15      	ldr	r3, [pc, #84]	; (15c0 <_SERCOM3_Handler+0x8c>)
    156c:	781b      	ldrb	r3, [r3, #0]
    156e:	b2db      	uxtb	r3, r3
    1570:	2b00      	cmp	r3, #0
    1572:	d004      	beq.n	157e <_SERCOM3_Handler+0x4a>
        return _i2c_flag = 0;
    1574:	4b12      	ldr	r3, [pc, #72]	; (15c0 <_SERCOM3_Handler+0x8c>)
    1576:	2200      	movs	r2, #0
    1578:	701a      	strb	r2, [r3, #0]
    157a:	2300      	movs	r3, #0
    157c:	e015      	b.n	15aa <_SERCOM3_Handler+0x76>
    }

    // Leave this
    if (_i2c_failed_flag()) {
    157e:	4b11      	ldr	r3, [pc, #68]	; (15c4 <_SERCOM3_Handler+0x90>)
    1580:	4798      	blx	r3
    1582:	1e03      	subs	r3, r0, #0
    1584:	d001      	beq.n	158a <_SERCOM3_Handler+0x56>
        return 1;
    1586:	2301      	movs	r3, #1
    1588:	e00f      	b.n	15aa <_SERCOM3_Handler+0x76>
    }

    else if (_i2c_callback()) {
    158a:	4b0f      	ldr	r3, [pc, #60]	; (15c8 <_SERCOM3_Handler+0x94>)
    158c:	681b      	ldr	r3, [r3, #0]
    158e:	4798      	blx	r3
    1590:	1e03      	subs	r3, r0, #0
    1592:	d009      	beq.n	15a8 <_SERCOM3_Handler+0x74>
        // Remove this
        serial_unregister(I2C_callback);
    1594:	4b0d      	ldr	r3, [pc, #52]	; (15cc <_SERCOM3_Handler+0x98>)
    1596:	6818      	ldr	r0, [r3, #0]
    1598:	6859      	ldr	r1, [r3, #4]
    159a:	4b0d      	ldr	r3, [pc, #52]	; (15d0 <_SERCOM3_Handler+0x9c>)
    159c:	4798      	blx	r3

        // Leave this
        i2c_unregister(_i2c_callback);
    159e:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <_SERCOM3_Handler+0x94>)
    15a0:	681b      	ldr	r3, [r3, #0]
    15a2:	0018      	movs	r0, r3
    15a4:	4b0b      	ldr	r3, [pc, #44]	; (15d4 <_SERCOM3_Handler+0xa0>)
    15a6:	4798      	blx	r3
    }

    return 0;
    15a8:	2300      	movs	r3, #0
}
    15aa:	0018      	movs	r0, r3
    15ac:	46bd      	mov	sp, r7
    15ae:	bd80      	pop	{r7, pc}
    15b0:	200007f5 	.word	0x200007f5
    15b4:	20000800 	.word	0x20000800
    15b8:	200007f6 	.word	0x200007f6
    15bc:	00002e39 	.word	0x00002e39
    15c0:	200007f8 	.word	0x200007f8
    15c4:	000014f5 	.word	0x000014f5
    15c8:	20000804 	.word	0x20000804
    15cc:	200007ec 	.word	0x200007ec
    15d0:	00002f49 	.word	0x00002f49
    15d4:	00001441 	.word	0x00001441

000015d8 <i2c_mux_init>:
//
//------------------------------------------------------------------------------

//==============================================================================
void i2c_mux_init(uint8_t addr, uint8_t data)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b082      	sub	sp, #8
    15dc:	af00      	add	r7, sp, #0
    15de:	0002      	movs	r2, r0
    15e0:	1dfb      	adds	r3, r7, #7
    15e2:	701a      	strb	r2, [r3, #0]
    15e4:	1dbb      	adds	r3, r7, #6
    15e6:	1c0a      	adds	r2, r1, #0
    15e8:	701a      	strb	r2, [r3, #0]
    while (i2c_registered());
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	4b0b      	ldr	r3, [pc, #44]	; (161c <i2c_mux_init+0x44>)
    15ee:	4798      	blx	r3
    15f0:	1e03      	subs	r3, r0, #0
    15f2:	d1fb      	bne.n	15ec <i2c_mux_init+0x14>
    while (!i2c_mux_write(addr, data));
    15f4:	46c0      	nop			; (mov r8, r8)
    15f6:	1dbb      	adds	r3, r7, #6
    15f8:	781a      	ldrb	r2, [r3, #0]
    15fa:	1dfb      	adds	r3, r7, #7
    15fc:	781b      	ldrb	r3, [r3, #0]
    15fe:	0011      	movs	r1, r2
    1600:	0018      	movs	r0, r3
    1602:	4b07      	ldr	r3, [pc, #28]	; (1620 <i2c_mux_init+0x48>)
    1604:	4798      	blx	r3
    1606:	1e03      	subs	r3, r0, #0
    1608:	d0f5      	beq.n	15f6 <i2c_mux_init+0x1e>
    while (i2c_registered());
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	4b03      	ldr	r3, [pc, #12]	; (161c <i2c_mux_init+0x44>)
    160e:	4798      	blx	r3
    1610:	1e03      	subs	r3, r0, #0
    1612:	d1fb      	bne.n	160c <i2c_mux_init+0x34>
}
    1614:	46c0      	nop			; (mov r8, r8)
    1616:	46bd      	mov	sp, r7
    1618:	b002      	add	sp, #8
    161a:	bd80      	pop	{r7, pc}
    161c:	000014d1 	.word	0x000014d1
    1620:	00001625 	.word	0x00001625

00001624 <i2c_mux_write>:

//==============================================================================
uint8_t i2c_mux_write(uint8_t addr, uint8_t data) {
    1624:	b580      	push	{r7, lr}
    1626:	b082      	sub	sp, #8
    1628:	af00      	add	r7, sp, #0
    162a:	0002      	movs	r2, r0
    162c:	1dfb      	adds	r3, r7, #7
    162e:	701a      	strb	r2, [r3, #0]
    1630:	1dbb      	adds	r3, r7, #6
    1632:	1c0a      	adds	r2, r1, #0
    1634:	701a      	strb	r2, [r3, #0]
    if (i2c_register(_i2c_mux_callback)) {
    1636:	4b0c      	ldr	r3, [pc, #48]	; (1668 <i2c_mux_write+0x44>)
    1638:	0018      	movs	r0, r3
    163a:	4b0c      	ldr	r3, [pc, #48]	; (166c <i2c_mux_write+0x48>)
    163c:	4798      	blx	r3
    163e:	1e03      	subs	r3, r0, #0
    1640:	d00d      	beq.n	165e <i2c_mux_write+0x3a>
        _i2c_mux_data = data;
    1642:	4b0b      	ldr	r3, [pc, #44]	; (1670 <i2c_mux_write+0x4c>)
    1644:	1dba      	adds	r2, r7, #6
    1646:	7812      	ldrb	r2, [r2, #0]
    1648:	701a      	strb	r2, [r3, #0]
        _i2c_mux_state = I2C_MUX_DATA;
    164a:	4b0a      	ldr	r3, [pc, #40]	; (1674 <i2c_mux_write+0x50>)
    164c:	2200      	movs	r2, #0
    164e:	701a      	strb	r2, [r3, #0]
        i2c_begin_write(addr);
    1650:	1dfb      	adds	r3, r7, #7
    1652:	781b      	ldrb	r3, [r3, #0]
    1654:	0018      	movs	r0, r3
    1656:	4b08      	ldr	r3, [pc, #32]	; (1678 <i2c_mux_write+0x54>)
    1658:	4798      	blx	r3
        return 1;
    165a:	2301      	movs	r3, #1
    165c:	e000      	b.n	1660 <i2c_mux_write+0x3c>
    }
    return 0;
    165e:	2300      	movs	r3, #0
}
    1660:	0018      	movs	r0, r3
    1662:	46bd      	mov	sp, r7
    1664:	b002      	add	sp, #8
    1666:	bd80      	pop	{r7, pc}
    1668:	00001699 	.word	0x00001699
    166c:	000013f5 	.word	0x000013f5
    1670:	20000808 	.word	0x20000808
    1674:	20000809 	.word	0x20000809
    1678:	00001309 	.word	0x00001309

0000167c <i2c_mux_write_complete>:

uint8_t i2c_mux_write_complete() {
    167c:	b580      	push	{r7, lr}
    167e:	af00      	add	r7, sp, #0
    return (_i2c_mux_state == I2C_MUX_DONE);
    1680:	4b04      	ldr	r3, [pc, #16]	; (1694 <i2c_mux_write_complete+0x18>)
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	3b02      	subs	r3, #2
    1686:	425a      	negs	r2, r3
    1688:	4153      	adcs	r3, r2
    168a:	b2db      	uxtb	r3, r3
}
    168c:	0018      	movs	r0, r3
    168e:	46bd      	mov	sp, r7
    1690:	bd80      	pop	{r7, pc}
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	20000809 	.word	0x20000809

00001698 <_i2c_mux_callback>:
//     /  `  /\  |    |    |__)  /\  /  ` |__/ /__`
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

uint8_t _i2c_mux_callback() {
    1698:	b580      	push	{r7, lr}
    169a:	b082      	sub	sp, #8
    169c:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    169e:	1dfb      	adds	r3, r7, #7
    16a0:	2200      	movs	r2, #0
    16a2:	701a      	strb	r2, [r3, #0]

    switch (_i2c_mux_state) {
    16a4:	4b14      	ldr	r3, [pc, #80]	; (16f8 <_i2c_mux_callback+0x60>)
    16a6:	781b      	ldrb	r3, [r3, #0]
    16a8:	2b00      	cmp	r3, #0
    16aa:	d002      	beq.n	16b2 <_i2c_mux_callback+0x1a>
    16ac:	2b01      	cmp	r3, #1
    16ae:	d00d      	beq.n	16cc <_i2c_mux_callback+0x34>
    16b0:	e01c      	b.n	16ec <_i2c_mux_callback+0x54>
        case I2C_MUX_DATA: {
            if (!i2c_tx_flag()) break;
    16b2:	4b12      	ldr	r3, [pc, #72]	; (16fc <_i2c_mux_callback+0x64>)
    16b4:	4798      	blx	r3
    16b6:	1e03      	subs	r3, r0, #0
    16b8:	d015      	beq.n	16e6 <_i2c_mux_callback+0x4e>
            _i2c_mux_state = I2C_MUX_STOP;
    16ba:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <_i2c_mux_callback+0x60>)
    16bc:	2201      	movs	r2, #1
    16be:	701a      	strb	r2, [r3, #0]
            i2c_write(_i2c_mux_data);
    16c0:	4b0f      	ldr	r3, [pc, #60]	; (1700 <_i2c_mux_callback+0x68>)
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	0018      	movs	r0, r3
    16c6:	4b0f      	ldr	r3, [pc, #60]	; (1704 <_i2c_mux_callback+0x6c>)
    16c8:	4798      	blx	r3
        } break;
    16ca:	e00f      	b.n	16ec <_i2c_mux_callback+0x54>

        case I2C_MUX_STOP: {
            if (!i2c_tx_flag()) break;
    16cc:	4b0b      	ldr	r3, [pc, #44]	; (16fc <_i2c_mux_callback+0x64>)
    16ce:	4798      	blx	r3
    16d0:	1e03      	subs	r3, r0, #0
    16d2:	d00a      	beq.n	16ea <_i2c_mux_callback+0x52>
            _i2c_mux_state = I2C_MUX_DONE;
    16d4:	4b08      	ldr	r3, [pc, #32]	; (16f8 <_i2c_mux_callback+0x60>)
    16d6:	2202      	movs	r2, #2
    16d8:	701a      	strb	r2, [r3, #0]
            complete = 1;
    16da:	1dfb      	adds	r3, r7, #7
    16dc:	2201      	movs	r2, #1
    16de:	701a      	strb	r2, [r3, #0]
            i2c_tx_stop();
    16e0:	4b09      	ldr	r3, [pc, #36]	; (1708 <_i2c_mux_callback+0x70>)
    16e2:	4798      	blx	r3
        } break;
    16e4:	e002      	b.n	16ec <_i2c_mux_callback+0x54>
            if (!i2c_tx_flag()) break;
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	e000      	b.n	16ec <_i2c_mux_callback+0x54>
            if (!i2c_tx_flag()) break;
    16ea:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
    16ec:	1dfb      	adds	r3, r7, #7
    16ee:	781b      	ldrb	r3, [r3, #0]
}
    16f0:	0018      	movs	r0, r3
    16f2:	46bd      	mov	sp, r7
    16f4:	b002      	add	sp, #8
    16f6:	bd80      	pop	{r7, pc}
    16f8:	20000809 	.word	0x20000809
    16fc:	00001349 	.word	0x00001349
    1700:	20000808 	.word	0x20000808
    1704:	000013c1 	.word	0x000013c1
    1708:	000014b1 	.word	0x000014b1

0000170c <kx003_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void kx003_init(uint8_t addr) {
    170c:	b580      	push	{r7, lr}
    170e:	b082      	sub	sp, #8
    1710:	af00      	add	r7, sp, #0
    1712:	0002      	movs	r2, r0
    1714:	1dfb      	adds	r3, r7, #7
    1716:	701a      	strb	r2, [r3, #0]
    // First turn off the kx003
    kx003_stop(addr);
    1718:	1dfb      	adds	r3, r7, #7
    171a:	781b      	ldrb	r3, [r3, #0]
    171c:	0018      	movs	r0, r3
    171e:	4b17      	ldr	r3, [pc, #92]	; (177c <kx003_init+0x70>)
    1720:	4798      	blx	r3

    // Set the callback mode
    _kx003_mode = KX003_INIT;
    1722:	4b17      	ldr	r3, [pc, #92]	; (1780 <kx003_init+0x74>)
    1724:	2200      	movs	r2, #0
    1726:	701a      	strb	r2, [r3, #0]
    
    // Wait and send the initial message
    while (i2c_registered());
    1728:	46c0      	nop			; (mov r8, r8)
    172a:	4b16      	ldr	r3, [pc, #88]	; (1784 <kx003_init+0x78>)
    172c:	4798      	blx	r3
    172e:	1e03      	subs	r3, r0, #0
    1730:	d1fb      	bne.n	172a <kx003_init+0x1e>
    while (!i2c_register(_kx003_init_callback));
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	4b14      	ldr	r3, [pc, #80]	; (1788 <kx003_init+0x7c>)
    1736:	0018      	movs	r0, r3
    1738:	4b14      	ldr	r3, [pc, #80]	; (178c <kx003_init+0x80>)
    173a:	4798      	blx	r3
    173c:	1e03      	subs	r3, r0, #0
    173e:	d0f9      	beq.n	1734 <kx003_init+0x28>
    _kx003_idx = 0;
    1740:	4b13      	ldr	r3, [pc, #76]	; (1790 <kx003_init+0x84>)
    1742:	2200      	movs	r2, #0
    1744:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    1746:	1dfb      	adds	r3, r7, #7
    1748:	781b      	ldrb	r3, [r3, #0]
    174a:	0018      	movs	r0, r3
    174c:	4b11      	ldr	r3, [pc, #68]	; (1794 <kx003_init+0x88>)
    174e:	4798      	blx	r3

    while (i2c_registered());
    1750:	46c0      	nop			; (mov r8, r8)
    1752:	4b0c      	ldr	r3, [pc, #48]	; (1784 <kx003_init+0x78>)
    1754:	4798      	blx	r3
    1756:	1e03      	subs	r3, r0, #0
    1758:	d1fb      	bne.n	1752 <kx003_init+0x46>

    // Reset state machine
    _kx003_reg = 0;
    175a:	4b0f      	ldr	r3, [pc, #60]	; (1798 <kx003_init+0x8c>)
    175c:	2200      	movs	r2, #0
    175e:	701a      	strb	r2, [r3, #0]
    _kx003_mode = KX003_INIT;
    1760:	4b07      	ldr	r3, [pc, #28]	; (1780 <kx003_init+0x74>)
    1762:	2200      	movs	r2, #0
    1764:	701a      	strb	r2, [r3, #0]
    _kx003_addr = addr;
    1766:	4b0d      	ldr	r3, [pc, #52]	; (179c <kx003_init+0x90>)
    1768:	1dfa      	adds	r2, r7, #7
    176a:	7812      	ldrb	r2, [r2, #0]
    176c:	701a      	strb	r2, [r3, #0]
    _kx003_idx = 0;
    176e:	4b08      	ldr	r3, [pc, #32]	; (1790 <kx003_init+0x84>)
    1770:	2200      	movs	r2, #0
    1772:	701a      	strb	r2, [r3, #0]
}
    1774:	46c0      	nop			; (mov r8, r8)
    1776:	46bd      	mov	sp, r7
    1778:	b002      	add	sp, #8
    177a:	bd80      	pop	{r7, pc}
    177c:	000017a1 	.word	0x000017a1
    1780:	20000814 	.word	0x20000814
    1784:	000014d1 	.word	0x000014d1
    1788:	000018e1 	.word	0x000018e1
    178c:	000013f5 	.word	0x000013f5
    1790:	2000080d 	.word	0x2000080d
    1794:	00001309 	.word	0x00001309
    1798:	2000080c 	.word	0x2000080c
    179c:	20000815 	.word	0x20000815

000017a0 <kx003_stop>:

//==============================================================================
void kx003_stop(uint8_t addr) {
    17a0:	b580      	push	{r7, lr}
    17a2:	b082      	sub	sp, #8
    17a4:	af00      	add	r7, sp, #0
    17a6:	0002      	movs	r2, r0
    17a8:	1dfb      	adds	r3, r7, #7
    17aa:	701a      	strb	r2, [r3, #0]
    // Set the callback mode
    _kx003_mode = KX003_STOP;
    17ac:	4b16      	ldr	r3, [pc, #88]	; (1808 <kx003_stop+0x68>)
    17ae:	2200      	movs	r2, #0
    17b0:	701a      	strb	r2, [r3, #0]
    
    // Wait and send the initial message
    while (i2c_registered());
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	4b15      	ldr	r3, [pc, #84]	; (180c <kx003_stop+0x6c>)
    17b6:	4798      	blx	r3
    17b8:	1e03      	subs	r3, r0, #0
    17ba:	d1fb      	bne.n	17b4 <kx003_stop+0x14>
    while (!i2c_register(_kx003_stop_callback));
    17bc:	46c0      	nop			; (mov r8, r8)
    17be:	4b14      	ldr	r3, [pc, #80]	; (1810 <kx003_stop+0x70>)
    17c0:	0018      	movs	r0, r3
    17c2:	4b14      	ldr	r3, [pc, #80]	; (1814 <kx003_stop+0x74>)
    17c4:	4798      	blx	r3
    17c6:	1e03      	subs	r3, r0, #0
    17c8:	d0f9      	beq.n	17be <kx003_stop+0x1e>
    _kx003_idx = 0;
    17ca:	4b13      	ldr	r3, [pc, #76]	; (1818 <kx003_stop+0x78>)
    17cc:	2200      	movs	r2, #0
    17ce:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    17d0:	1dfb      	adds	r3, r7, #7
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	0018      	movs	r0, r3
    17d6:	4b11      	ldr	r3, [pc, #68]	; (181c <kx003_stop+0x7c>)
    17d8:	4798      	blx	r3

    while (i2c_registered());
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	4b0b      	ldr	r3, [pc, #44]	; (180c <kx003_stop+0x6c>)
    17de:	4798      	blx	r3
    17e0:	1e03      	subs	r3, r0, #0
    17e2:	d1fb      	bne.n	17dc <kx003_stop+0x3c>

    // Reset state machine
    _kx003_reg = 0;
    17e4:	4b0e      	ldr	r3, [pc, #56]	; (1820 <kx003_stop+0x80>)
    17e6:	2200      	movs	r2, #0
    17e8:	701a      	strb	r2, [r3, #0]
    _kx003_mode = KX003_STOP;
    17ea:	4b07      	ldr	r3, [pc, #28]	; (1808 <kx003_stop+0x68>)
    17ec:	2200      	movs	r2, #0
    17ee:	701a      	strb	r2, [r3, #0]
    _kx003_addr = addr;
    17f0:	4b0c      	ldr	r3, [pc, #48]	; (1824 <kx003_stop+0x84>)
    17f2:	1dfa      	adds	r2, r7, #7
    17f4:	7812      	ldrb	r2, [r2, #0]
    17f6:	701a      	strb	r2, [r3, #0]
    _kx003_idx = 0;
    17f8:	4b07      	ldr	r3, [pc, #28]	; (1818 <kx003_stop+0x78>)
    17fa:	2200      	movs	r2, #0
    17fc:	701a      	strb	r2, [r3, #0]
}
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	46bd      	mov	sp, r7
    1802:	b002      	add	sp, #8
    1804:	bd80      	pop	{r7, pc}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	20000814 	.word	0x20000814
    180c:	000014d1 	.word	0x000014d1
    1810:	00001965 	.word	0x00001965
    1814:	000013f5 	.word	0x000013f5
    1818:	2000080d 	.word	0x2000080d
    181c:	00001309 	.word	0x00001309
    1820:	2000080c 	.word	0x2000080c
    1824:	20000815 	.word	0x20000815

00001828 <kx003_read>:

//==============================================================================
uint8_t kx003_read(uint8_t addr, uint8_t reg, uint8_t* dest, uint8_t bytes) {
    1828:	b590      	push	{r4, r7, lr}
    182a:	b083      	sub	sp, #12
    182c:	af00      	add	r7, sp, #0
    182e:	0004      	movs	r4, r0
    1830:	0008      	movs	r0, r1
    1832:	603a      	str	r2, [r7, #0]
    1834:	0019      	movs	r1, r3
    1836:	1dfb      	adds	r3, r7, #7
    1838:	1c22      	adds	r2, r4, #0
    183a:	701a      	strb	r2, [r3, #0]
    183c:	1dbb      	adds	r3, r7, #6
    183e:	1c02      	adds	r2, r0, #0
    1840:	701a      	strb	r2, [r3, #0]
    1842:	1d7b      	adds	r3, r7, #5
    1844:	1c0a      	adds	r2, r1, #0
    1846:	701a      	strb	r2, [r3, #0]
    if (bytes && i2c_register(_kx003_read_callback)) {
    1848:	1d7b      	adds	r3, r7, #5
    184a:	781b      	ldrb	r3, [r3, #0]
    184c:	2b00      	cmp	r3, #0
    184e:	d021      	beq.n	1894 <kx003_read+0x6c>
    1850:	4b13      	ldr	r3, [pc, #76]	; (18a0 <kx003_read+0x78>)
    1852:	0018      	movs	r0, r3
    1854:	4b13      	ldr	r3, [pc, #76]	; (18a4 <kx003_read+0x7c>)
    1856:	4798      	blx	r3
    1858:	1e03      	subs	r3, r0, #0
    185a:	d01b      	beq.n	1894 <kx003_read+0x6c>
        _kx003_reg = reg;
    185c:	4b12      	ldr	r3, [pc, #72]	; (18a8 <kx003_read+0x80>)
    185e:	1dba      	adds	r2, r7, #6
    1860:	7812      	ldrb	r2, [r2, #0]
    1862:	701a      	strb	r2, [r3, #0]
        _kx003_bytes = bytes;
    1864:	4b11      	ldr	r3, [pc, #68]	; (18ac <kx003_read+0x84>)
    1866:	1d7a      	adds	r2, r7, #5
    1868:	7812      	ldrb	r2, [r2, #0]
    186a:	701a      	strb	r2, [r3, #0]
        _kx003_mode = KX003_REG;
    186c:	4b10      	ldr	r3, [pc, #64]	; (18b0 <kx003_read+0x88>)
    186e:	2202      	movs	r2, #2
    1870:	701a      	strb	r2, [r3, #0]
        _kx003_addr = addr;
    1872:	4b10      	ldr	r3, [pc, #64]	; (18b4 <kx003_read+0x8c>)
    1874:	1dfa      	adds	r2, r7, #7
    1876:	7812      	ldrb	r2, [r2, #0]
    1878:	701a      	strb	r2, [r3, #0]
        _kx003_dest = dest;
    187a:	4b0f      	ldr	r3, [pc, #60]	; (18b8 <kx003_read+0x90>)
    187c:	683a      	ldr	r2, [r7, #0]
    187e:	601a      	str	r2, [r3, #0]
        _kx003_idx = 0;
    1880:	4b0e      	ldr	r3, [pc, #56]	; (18bc <kx003_read+0x94>)
    1882:	2200      	movs	r2, #0
    1884:	701a      	strb	r2, [r3, #0]
        i2c_begin_write(addr);
    1886:	1dfb      	adds	r3, r7, #7
    1888:	781b      	ldrb	r3, [r3, #0]
    188a:	0018      	movs	r0, r3
    188c:	4b0c      	ldr	r3, [pc, #48]	; (18c0 <kx003_read+0x98>)
    188e:	4798      	blx	r3
        return 1;
    1890:	2301      	movs	r3, #1
    1892:	e000      	b.n	1896 <kx003_read+0x6e>
    }
    return 0;
    1894:	2300      	movs	r3, #0
}
    1896:	0018      	movs	r0, r3
    1898:	46bd      	mov	sp, r7
    189a:	b003      	add	sp, #12
    189c:	bd90      	pop	{r4, r7, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	000019e9 	.word	0x000019e9
    18a4:	000013f5 	.word	0x000013f5
    18a8:	2000080c 	.word	0x2000080c
    18ac:	2000080e 	.word	0x2000080e
    18b0:	20000814 	.word	0x20000814
    18b4:	20000815 	.word	0x20000815
    18b8:	20000810 	.word	0x20000810
    18bc:	2000080d 	.word	0x2000080d
    18c0:	00001309 	.word	0x00001309

000018c4 <kx003_read_complete>:

//==============================================================================
uint8_t kx003_read_complete() {
    18c4:	b580      	push	{r7, lr}
    18c6:	af00      	add	r7, sp, #0
    return (_kx003_mode == KX003_RX_END);
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <kx003_read_complete+0x18>)
    18ca:	781b      	ldrb	r3, [r3, #0]
    18cc:	b2db      	uxtb	r3, r3
    18ce:	3b05      	subs	r3, #5
    18d0:	425a      	negs	r2, r3
    18d2:	4153      	adcs	r3, r2
    18d4:	b2db      	uxtb	r3, r3
}
    18d6:	0018      	movs	r0, r3
    18d8:	46bd      	mov	sp, r7
    18da:	bd80      	pop	{r7, pc}
    18dc:	20000814 	.word	0x20000814

000018e0 <_kx003_init_callback>:
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _kx003_init_callback() {
    18e0:	b580      	push	{r7, lr}
    18e2:	b082      	sub	sp, #8
    18e4:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    18e6:	1dfb      	adds	r3, r7, #7
    18e8:	2200      	movs	r2, #0
    18ea:	701a      	strb	r2, [r3, #0]

    switch (_kx003_mode) {
    18ec:	4b19      	ldr	r3, [pc, #100]	; (1954 <_kx003_init_callback+0x74>)
    18ee:	781b      	ldrb	r3, [r3, #0]
    18f0:	b2db      	uxtb	r3, r3
    18f2:	2b01      	cmp	r3, #1
    18f4:	d019      	beq.n	192a <_kx003_init_callback+0x4a>
    18f6:	2b1d      	cmp	r3, #29
    18f8:	d00c      	beq.n	1914 <_kx003_init_callback+0x34>
    18fa:	2b00      	cmp	r3, #0
    18fc:	d124      	bne.n	1948 <_kx003_init_callback+0x68>
        // Initialization callback
        case KX003_INIT: {
            if (!i2c_tx_flag()) break;
    18fe:	4b16      	ldr	r3, [pc, #88]	; (1958 <_kx003_init_callback+0x78>)
    1900:	4798      	blx	r3
    1902:	1e03      	subs	r3, r0, #0
    1904:	d01b      	beq.n	193e <_kx003_init_callback+0x5e>
            _kx003_mode = KX003_CTRL_REG;
    1906:	4b13      	ldr	r3, [pc, #76]	; (1954 <_kx003_init_callback+0x74>)
    1908:	221d      	movs	r2, #29
    190a:	701a      	strb	r2, [r3, #0]
            i2c_write(KX003_CTRL_REG);
    190c:	201d      	movs	r0, #29
    190e:	4b13      	ldr	r3, [pc, #76]	; (195c <_kx003_init_callback+0x7c>)
    1910:	4798      	blx	r3
        } break;
    1912:	e019      	b.n	1948 <_kx003_init_callback+0x68>

        case KX003_CTRL_REG: {
            if (!i2c_tx_flag()) break;
    1914:	4b10      	ldr	r3, [pc, #64]	; (1958 <_kx003_init_callback+0x78>)
    1916:	4798      	blx	r3
    1918:	1e03      	subs	r3, r0, #0
    191a:	d012      	beq.n	1942 <_kx003_init_callback+0x62>
            _kx003_mode = KX003_TX_CLEAR;
    191c:	4b0d      	ldr	r3, [pc, #52]	; (1954 <_kx003_init_callback+0x74>)
    191e:	2201      	movs	r2, #1
    1920:	701a      	strb	r2, [r3, #0]
            i2c_write(KX003_CTRL_PC1 | KX003_CTRL_RES | KX003_CTRL_GS0);
    1922:	20c8      	movs	r0, #200	; 0xc8
    1924:	4b0d      	ldr	r3, [pc, #52]	; (195c <_kx003_init_callback+0x7c>)
    1926:	4798      	blx	r3
        } break;
    1928:	e00e      	b.n	1948 <_kx003_init_callback+0x68>

        case KX003_TX_CLEAR: {
            if (!i2c_tx_flag()) break;
    192a:	4b0b      	ldr	r3, [pc, #44]	; (1958 <_kx003_init_callback+0x78>)
    192c:	4798      	blx	r3
    192e:	1e03      	subs	r3, r0, #0
    1930:	d009      	beq.n	1946 <_kx003_init_callback+0x66>
            i2c_tx_stop();
    1932:	4b0b      	ldr	r3, [pc, #44]	; (1960 <_kx003_init_callback+0x80>)
    1934:	4798      	blx	r3
            complete = 1;
    1936:	1dfb      	adds	r3, r7, #7
    1938:	2201      	movs	r2, #1
    193a:	701a      	strb	r2, [r3, #0]
        } break;
    193c:	e004      	b.n	1948 <_kx003_init_callback+0x68>
            if (!i2c_tx_flag()) break;
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	e002      	b.n	1948 <_kx003_init_callback+0x68>
            if (!i2c_tx_flag()) break;
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	e000      	b.n	1948 <_kx003_init_callback+0x68>
            if (!i2c_tx_flag()) break;
    1946:	46c0      	nop			; (mov r8, r8)
    }

    return complete;
    1948:	1dfb      	adds	r3, r7, #7
    194a:	781b      	ldrb	r3, [r3, #0]
}
    194c:	0018      	movs	r0, r3
    194e:	46bd      	mov	sp, r7
    1950:	b002      	add	sp, #8
    1952:	bd80      	pop	{r7, pc}
    1954:	20000814 	.word	0x20000814
    1958:	00001349 	.word	0x00001349
    195c:	000013c1 	.word	0x000013c1
    1960:	000014b1 	.word	0x000014b1

00001964 <_kx003_stop_callback>:

//==============================================================================
uint8_t _kx003_stop_callback() {
    1964:	b580      	push	{r7, lr}
    1966:	b082      	sub	sp, #8
    1968:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    196a:	1dfb      	adds	r3, r7, #7
    196c:	2200      	movs	r2, #0
    196e:	701a      	strb	r2, [r3, #0]

    switch (_kx003_mode) {
    1970:	4b19      	ldr	r3, [pc, #100]	; (19d8 <_kx003_stop_callback+0x74>)
    1972:	781b      	ldrb	r3, [r3, #0]
    1974:	b2db      	uxtb	r3, r3
    1976:	2b01      	cmp	r3, #1
    1978:	d019      	beq.n	19ae <_kx003_stop_callback+0x4a>
    197a:	2b1d      	cmp	r3, #29
    197c:	d00c      	beq.n	1998 <_kx003_stop_callback+0x34>
    197e:	2b00      	cmp	r3, #0
    1980:	d124      	bne.n	19cc <_kx003_stop_callback+0x68>
        // Initialization callback
        case KX003_INIT: {
            if (!i2c_tx_flag()) break;
    1982:	4b16      	ldr	r3, [pc, #88]	; (19dc <_kx003_stop_callback+0x78>)
    1984:	4798      	blx	r3
    1986:	1e03      	subs	r3, r0, #0
    1988:	d01b      	beq.n	19c2 <_kx003_stop_callback+0x5e>
            i2c_write(KX003_CTRL_REG);
    198a:	201d      	movs	r0, #29
    198c:	4b14      	ldr	r3, [pc, #80]	; (19e0 <_kx003_stop_callback+0x7c>)
    198e:	4798      	blx	r3
            _kx003_mode = KX003_CTRL_REG;
    1990:	4b11      	ldr	r3, [pc, #68]	; (19d8 <_kx003_stop_callback+0x74>)
    1992:	221d      	movs	r2, #29
    1994:	701a      	strb	r2, [r3, #0]
        } break;
    1996:	e019      	b.n	19cc <_kx003_stop_callback+0x68>

        case KX003_CTRL_REG: {
            if (!i2c_tx_flag()) break;
    1998:	4b10      	ldr	r3, [pc, #64]	; (19dc <_kx003_stop_callback+0x78>)
    199a:	4798      	blx	r3
    199c:	1e03      	subs	r3, r0, #0
    199e:	d012      	beq.n	19c6 <_kx003_stop_callback+0x62>
            i2c_write(0x00);
    19a0:	2000      	movs	r0, #0
    19a2:	4b0f      	ldr	r3, [pc, #60]	; (19e0 <_kx003_stop_callback+0x7c>)
    19a4:	4798      	blx	r3
            _kx003_mode = KX003_TX_CLEAR;
    19a6:	4b0c      	ldr	r3, [pc, #48]	; (19d8 <_kx003_stop_callback+0x74>)
    19a8:	2201      	movs	r2, #1
    19aa:	701a      	strb	r2, [r3, #0]
        } break;
    19ac:	e00e      	b.n	19cc <_kx003_stop_callback+0x68>

        case KX003_TX_CLEAR: {
            if (!i2c_tx_flag()) break;
    19ae:	4b0b      	ldr	r3, [pc, #44]	; (19dc <_kx003_stop_callback+0x78>)
    19b0:	4798      	blx	r3
    19b2:	1e03      	subs	r3, r0, #0
    19b4:	d009      	beq.n	19ca <_kx003_stop_callback+0x66>
            i2c_tx_stop();
    19b6:	4b0b      	ldr	r3, [pc, #44]	; (19e4 <_kx003_stop_callback+0x80>)
    19b8:	4798      	blx	r3
            complete = 1;
    19ba:	1dfb      	adds	r3, r7, #7
    19bc:	2201      	movs	r2, #1
    19be:	701a      	strb	r2, [r3, #0]
        } break;
    19c0:	e004      	b.n	19cc <_kx003_stop_callback+0x68>
            if (!i2c_tx_flag()) break;
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	e002      	b.n	19cc <_kx003_stop_callback+0x68>
            if (!i2c_tx_flag()) break;
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	e000      	b.n	19cc <_kx003_stop_callback+0x68>
            if (!i2c_tx_flag()) break;
    19ca:	46c0      	nop			; (mov r8, r8)
    }

    return complete;
    19cc:	1dfb      	adds	r3, r7, #7
    19ce:	781b      	ldrb	r3, [r3, #0]
}
    19d0:	0018      	movs	r0, r3
    19d2:	46bd      	mov	sp, r7
    19d4:	b002      	add	sp, #8
    19d6:	bd80      	pop	{r7, pc}
    19d8:	20000814 	.word	0x20000814
    19dc:	00001349 	.word	0x00001349
    19e0:	000013c1 	.word	0x000013c1
    19e4:	000014b1 	.word	0x000014b1

000019e8 <_kx003_read_callback>:

//==============================================================================
uint8_t _kx003_read_callback() {
    19e8:	b590      	push	{r4, r7, lr}
    19ea:	b083      	sub	sp, #12
    19ec:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    19ee:	1dfb      	adds	r3, r7, #7
    19f0:	2200      	movs	r2, #0
    19f2:	701a      	strb	r2, [r3, #0]

    switch (_kx003_mode) {
    19f4:	4b39      	ldr	r3, [pc, #228]	; (1adc <_kx003_read_callback+0xf4>)
    19f6:	781b      	ldrb	r3, [r3, #0]
    19f8:	b2db      	uxtb	r3, r3
    19fa:	2b05      	cmp	r3, #5
    19fc:	d900      	bls.n	1a00 <_kx003_read_callback+0x18>
    19fe:	e067      	b.n	1ad0 <_kx003_read_callback+0xe8>
    1a00:	009a      	lsls	r2, r3, #2
    1a02:	4b37      	ldr	r3, [pc, #220]	; (1ae0 <_kx003_read_callback+0xf8>)
    1a04:	18d3      	adds	r3, r2, r3
    1a06:	681b      	ldr	r3, [r3, #0]
    1a08:	469f      	mov	pc, r3
        // Write which register to read
        case KX003_REG: {
            if (!i2c_tx_flag()) break;
    1a0a:	4b36      	ldr	r3, [pc, #216]	; (1ae4 <_kx003_read_callback+0xfc>)
    1a0c:	4798      	blx	r3
    1a0e:	1e03      	subs	r3, r0, #0
    1a10:	d055      	beq.n	1abe <_kx003_read_callback+0xd6>
            _kx003_mode = KX003_TX_CLEAR;
    1a12:	4b32      	ldr	r3, [pc, #200]	; (1adc <_kx003_read_callback+0xf4>)
    1a14:	2201      	movs	r2, #1
    1a16:	701a      	strb	r2, [r3, #0]
            i2c_write(_kx003_reg);
    1a18:	4b33      	ldr	r3, [pc, #204]	; (1ae8 <_kx003_read_callback+0x100>)
    1a1a:	781b      	ldrb	r3, [r3, #0]
    1a1c:	0018      	movs	r0, r3
    1a1e:	4b33      	ldr	r3, [pc, #204]	; (1aec <_kx003_read_callback+0x104>)
    1a20:	4798      	blx	r3
        } break;
    1a22:	e055      	b.n	1ad0 <_kx003_read_callback+0xe8>

        // Remove this
        case KX003_TX_CLEAR: {
            if (!i2c_tx_flag()) break;
    1a24:	4b2f      	ldr	r3, [pc, #188]	; (1ae4 <_kx003_read_callback+0xfc>)
    1a26:	4798      	blx	r3
    1a28:	1e03      	subs	r3, r0, #0
    1a2a:	d04a      	beq.n	1ac2 <_kx003_read_callback+0xda>
            _kx003_mode = KX003_RX_START;
    1a2c:	4b2b      	ldr	r3, [pc, #172]	; (1adc <_kx003_read_callback+0xf4>)
    1a2e:	2203      	movs	r2, #3
    1a30:	701a      	strb	r2, [r3, #0]
            serial_write(TX_E);
    1a32:	2033      	movs	r0, #51	; 0x33
    1a34:	4b2e      	ldr	r3, [pc, #184]	; (1af0 <_kx003_read_callback+0x108>)
    1a36:	4798      	blx	r3
        } break;
    1a38:	e04a      	b.n	1ad0 <_kx003_read_callback+0xe8>

        // Begin the read
        case KX003_RX_START: {
            if (!i2c_tx_flag()) break;
    1a3a:	4b2a      	ldr	r3, [pc, #168]	; (1ae4 <_kx003_read_callback+0xfc>)
    1a3c:	4798      	blx	r3
    1a3e:	1e03      	subs	r3, r0, #0
    1a40:	d041      	beq.n	1ac6 <_kx003_read_callback+0xde>
            _kx003_mode = KX003_RX;
    1a42:	4b26      	ldr	r3, [pc, #152]	; (1adc <_kx003_read_callback+0xf4>)
    1a44:	2204      	movs	r2, #4
    1a46:	701a      	strb	r2, [r3, #0]
            i2c_begin_read(_kx003_addr);
    1a48:	4b2a      	ldr	r3, [pc, #168]	; (1af4 <_kx003_read_callback+0x10c>)
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	0018      	movs	r0, r3
    1a4e:	4b2a      	ldr	r3, [pc, #168]	; (1af8 <_kx003_read_callback+0x110>)
    1a50:	4798      	blx	r3
        } break;
    1a52:	e03d      	b.n	1ad0 <_kx003_read_callback+0xe8>

        // Continue reading
        case KX003_RX: {
            if (!i2c_rx_flag()) break;
    1a54:	4b29      	ldr	r3, [pc, #164]	; (1afc <_kx003_read_callback+0x114>)
    1a56:	4798      	blx	r3
    1a58:	1e03      	subs	r3, r0, #0
    1a5a:	d036      	beq.n	1aca <_kx003_read_callback+0xe2>
            if (_kx003_idx < _kx003_bytes-1) {
    1a5c:	4b28      	ldr	r3, [pc, #160]	; (1b00 <_kx003_read_callback+0x118>)
    1a5e:	781b      	ldrb	r3, [r3, #0]
    1a60:	001a      	movs	r2, r3
    1a62:	4b28      	ldr	r3, [pc, #160]	; (1b04 <_kx003_read_callback+0x11c>)
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	b2db      	uxtb	r3, r3
    1a68:	3b01      	subs	r3, #1
    1a6a:	429a      	cmp	r2, r3
    1a6c:	da11      	bge.n	1a92 <_kx003_read_callback+0xaa>
                uint8_t data = i2c_read();
    1a6e:	1dbc      	adds	r4, r7, #6
    1a70:	4b25      	ldr	r3, [pc, #148]	; (1b08 <_kx003_read_callback+0x120>)
    1a72:	4798      	blx	r3
    1a74:	0003      	movs	r3, r0
    1a76:	7023      	strb	r3, [r4, #0]
                _kx003_dest[_kx003_idx++] = data;
    1a78:	4b24      	ldr	r3, [pc, #144]	; (1b0c <_kx003_read_callback+0x124>)
    1a7a:	681a      	ldr	r2, [r3, #0]
    1a7c:	4b20      	ldr	r3, [pc, #128]	; (1b00 <_kx003_read_callback+0x118>)
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	1c59      	adds	r1, r3, #1
    1a82:	b2c8      	uxtb	r0, r1
    1a84:	491e      	ldr	r1, [pc, #120]	; (1b00 <_kx003_read_callback+0x118>)
    1a86:	7008      	strb	r0, [r1, #0]
    1a88:	18d3      	adds	r3, r2, r3
    1a8a:	1dba      	adds	r2, r7, #6
    1a8c:	7812      	ldrb	r2, [r2, #0]
    1a8e:	701a      	strb	r2, [r3, #0]
                break;
    1a90:	e01e      	b.n	1ad0 <_kx003_read_callback+0xe8>
            }
            _kx003_mode = KX003_RX_END;
    1a92:	4b12      	ldr	r3, [pc, #72]	; (1adc <_kx003_read_callback+0xf4>)
    1a94:	2205      	movs	r2, #5
    1a96:	701a      	strb	r2, [r3, #0]
        } // Allow passing when enough bytes rx 

        // End reading
        case KX003_RX_END: {
            if (!i2c_rx_flag()) break;
    1a98:	4b18      	ldr	r3, [pc, #96]	; (1afc <_kx003_read_callback+0x114>)
    1a9a:	4798      	blx	r3
    1a9c:	1e03      	subs	r3, r0, #0
    1a9e:	d016      	beq.n	1ace <_kx003_read_callback+0xe6>
            i2c_rx_stop();
    1aa0:	4b1b      	ldr	r3, [pc, #108]	; (1b10 <_kx003_read_callback+0x128>)
    1aa2:	4798      	blx	r3
            _kx003_dest[_kx003_idx] = i2c_read();
    1aa4:	4b19      	ldr	r3, [pc, #100]	; (1b0c <_kx003_read_callback+0x124>)
    1aa6:	681b      	ldr	r3, [r3, #0]
    1aa8:	4a15      	ldr	r2, [pc, #84]	; (1b00 <_kx003_read_callback+0x118>)
    1aaa:	7812      	ldrb	r2, [r2, #0]
    1aac:	189c      	adds	r4, r3, r2
    1aae:	4b16      	ldr	r3, [pc, #88]	; (1b08 <_kx003_read_callback+0x120>)
    1ab0:	4798      	blx	r3
    1ab2:	0003      	movs	r3, r0
    1ab4:	7023      	strb	r3, [r4, #0]
            complete = 1;
    1ab6:	1dfb      	adds	r3, r7, #7
    1ab8:	2201      	movs	r2, #1
    1aba:	701a      	strb	r2, [r3, #0]
        } break;
    1abc:	e008      	b.n	1ad0 <_kx003_read_callback+0xe8>
            if (!i2c_tx_flag()) break;
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	e006      	b.n	1ad0 <_kx003_read_callback+0xe8>
            if (!i2c_tx_flag()) break;
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	e004      	b.n	1ad0 <_kx003_read_callback+0xe8>
            if (!i2c_tx_flag()) break;
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	e002      	b.n	1ad0 <_kx003_read_callback+0xe8>
            if (!i2c_rx_flag()) break;
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	e000      	b.n	1ad0 <_kx003_read_callback+0xe8>
            if (!i2c_rx_flag()) break;
    1ace:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
    1ad0:	1dfb      	adds	r3, r7, #7
    1ad2:	781b      	ldrb	r3, [r3, #0]
}
    1ad4:	0018      	movs	r0, r3
    1ad6:	46bd      	mov	sp, r7
    1ad8:	b003      	add	sp, #12
    1ada:	bd90      	pop	{r4, r7, pc}
    1adc:	20000814 	.word	0x20000814
    1ae0:	00006348 	.word	0x00006348
    1ae4:	00001349 	.word	0x00001349
    1ae8:	2000080c 	.word	0x2000080c
    1aec:	000013c1 	.word	0x000013c1
    1af0:	00002e39 	.word	0x00002e39
    1af4:	20000815 	.word	0x20000815
    1af8:	000012bd 	.word	0x000012bd
    1afc:	0000135d 	.word	0x0000135d
    1b00:	2000080d 	.word	0x2000080d
    1b04:	2000080e 	.word	0x2000080e
    1b08:	00001371 	.word	0x00001371
    1b0c:	20000810 	.word	0x20000810
    1b10:	00001475 	.word	0x00001475

00001b14 <main>:
//
//-----------------------------------------------------------------------------

//=============================================================================
int main(void)
{
    1b14:	b5b0      	push	{r4, r5, r7, lr}
    1b16:	b0a8      	sub	sp, #160	; 0xa0
    1b18:	af00      	add	r7, sp, #0
    uint64_t current_time = 0;
    1b1a:	2300      	movs	r3, #0
    1b1c:	2400      	movs	r4, #0
    1b1e:	2280      	movs	r2, #128	; 0x80
    1b20:	18ba      	adds	r2, r7, r2
    1b22:	6013      	str	r3, [r2, #0]
    1b24:	6054      	str	r4, [r2, #4]
    uint64_t num_samples = 0;
    1b26:	2300      	movs	r3, #0
    1b28:	2400      	movs	r4, #0
    1b2a:	2298      	movs	r2, #152	; 0x98
    1b2c:	18ba      	adds	r2, r7, r2
    1b2e:	6013      	str	r3, [r2, #0]
    1b30:	6054      	str	r4, [r2, #4]
    char* message;

    emg_data_t emg_data;
    emg_data_t* emg_ref = &emg_data;
    1b32:	2374      	movs	r3, #116	; 0x74
    1b34:	18fb      	adds	r3, r7, r3
    1b36:	2294      	movs	r2, #148	; 0x94
    1b38:	18ba      	adds	r2, r7, r2
    1b3a:	6013      	str	r3, [r2, #0]
    hand_pos_t hand_data;
    hand_ang_t hand_ang;

    emg_state_t emg_state = EMG_SAMPLE;
    1b3c:	2393      	movs	r3, #147	; 0x93
    1b3e:	18fb      	adds	r3, r7, r3
    1b40:	2200      	movs	r2, #0
    1b42:	701a      	strb	r2, [r3, #0]
    hand_state_t hand_state = HAND_SAMPLE;
    1b44:	2392      	movs	r3, #146	; 0x92
    1b46:	18fb      	adds	r3, r7, r3
    1b48:	2200      	movs	r2, #0
    1b4a:	701a      	strb	r2, [r3, #0]
    control_state_t control_state = CONTROL_BEGIN;
    1b4c:	2391      	movs	r3, #145	; 0x91
    1b4e:	18fb      	adds	r3, r7, r3
    1b50:	2200      	movs	r2, #0
    1b52:	701a      	strb	r2, [r3, #0]
    compute_state_t compute_state = COMPUTE_BEGIN;
    1b54:	2390      	movs	r3, #144	; 0x90
    1b56:	18fb      	adds	r3, r7, r3
    1b58:	2203      	movs	r2, #3
    1b5a:	701a      	strb	r2, [r3, #0]

    for (machine_state_t x = 0; x < M_NUM_STATES; x++) {
    1b5c:	238f      	movs	r3, #143	; 0x8f
    1b5e:	18fb      	adds	r3, r7, r3
    1b60:	2200      	movs	r2, #0
    1b62:	701a      	strb	r2, [r3, #0]
    1b64:	e010      	b.n	1b88 <main+0x74>
        machine_counters[x] = 0;
    1b66:	238f      	movs	r3, #143	; 0x8f
    1b68:	18fb      	adds	r3, r7, r3
    1b6a:	781b      	ldrb	r3, [r3, #0]
    1b6c:	4ab7      	ldr	r2, [pc, #732]	; (1e4c <main+0x338>)
    1b6e:	00db      	lsls	r3, r3, #3
    1b70:	18d2      	adds	r2, r2, r3
    1b72:	2300      	movs	r3, #0
    1b74:	2400      	movs	r4, #0
    1b76:	6013      	str	r3, [r2, #0]
    1b78:	6054      	str	r4, [r2, #4]
    for (machine_state_t x = 0; x < M_NUM_STATES; x++) {
    1b7a:	238f      	movs	r3, #143	; 0x8f
    1b7c:	18fb      	adds	r3, r7, r3
    1b7e:	781a      	ldrb	r2, [r3, #0]
    1b80:	238f      	movs	r3, #143	; 0x8f
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	3201      	adds	r2, #1
    1b86:	701a      	strb	r2, [r3, #0]
    1b88:	238f      	movs	r3, #143	; 0x8f
    1b8a:	18fb      	adds	r3, r7, r3
    1b8c:	781b      	ldrb	r3, [r3, #0]
    1b8e:	2b04      	cmp	r3, #4
    1b90:	d9e9      	bls.n	1b66 <main+0x52>
    }

    machine_delays[M_EMG_SAMPLE] = 1;
    1b92:	4aaf      	ldr	r2, [pc, #700]	; (1e50 <main+0x33c>)
    1b94:	2301      	movs	r3, #1
    1b96:	2400      	movs	r4, #0
    1b98:	6013      	str	r3, [r2, #0]
    1b9a:	6054      	str	r4, [r2, #4]
    machine_delays[M_HAND_SAMPLE] = 20;
    1b9c:	4aac      	ldr	r2, [pc, #688]	; (1e50 <main+0x33c>)
    1b9e:	2314      	movs	r3, #20
    1ba0:	2400      	movs	r4, #0
    1ba2:	6093      	str	r3, [r2, #8]
    1ba4:	60d4      	str	r4, [r2, #12]
    machine_delays[M_COMPUTE] = 20;
    1ba6:	4aaa      	ldr	r2, [pc, #680]	; (1e50 <main+0x33c>)
    1ba8:	2314      	movs	r3, #20
    1baa:	2400      	movs	r4, #0
    1bac:	6113      	str	r3, [r2, #16]
    1bae:	6154      	str	r4, [r2, #20]
    machine_delays[M_CONTROL] = 100;
    1bb0:	4aa7      	ldr	r2, [pc, #668]	; (1e50 <main+0x33c>)
    1bb2:	2364      	movs	r3, #100	; 0x64
    1bb4:	2400      	movs	r4, #0
    1bb6:	6193      	str	r3, [r2, #24]
    1bb8:	61d4      	str	r4, [r2, #28]

    /* Initialize the SAM system */
    SystemInit();
    1bba:	4ba6      	ldr	r3, [pc, #664]	; (1e54 <main+0x340>)
    1bbc:	4798      	blx	r3
    timer_init();
    1bbe:	4ba6      	ldr	r3, [pc, #664]	; (1e58 <main+0x344>)
    1bc0:	4798      	blx	r3

    serial_init(SERIAL_BAUD);
    1bc2:	4ba6      	ldr	r3, [pc, #664]	; (1e5c <main+0x348>)
    1bc4:	0018      	movs	r0, r3
    1bc6:	4ba6      	ldr	r3, [pc, #664]	; (1e60 <main+0x34c>)
    1bc8:	4798      	blx	r3
    serial_set_default_rx(rx_mode_setter);
    1bca:	4ba6      	ldr	r3, [pc, #664]	; (1e64 <main+0x350>)
    1bcc:	0018      	movs	r0, r3
    1bce:	4ba6      	ldr	r3, [pc, #664]	; (1e68 <main+0x354>)
    1bd0:	4798      	blx	r3

    adc_init();
    1bd2:	4ba6      	ldr	r3, [pc, #664]	; (1e6c <main+0x358>)
    1bd4:	4798      	blx	r3

    /* Replace with your application code */
    while (1)
    {
        switch (machine_mode) {
    1bd6:	4ba6      	ldr	r3, [pc, #664]	; (1e70 <main+0x35c>)
    1bd8:	781b      	ldrb	r3, [r3, #0]
    1bda:	b2db      	uxtb	r3, r3
    1bdc:	2b4d      	cmp	r3, #77	; 0x4d
    1bde:	d101      	bne.n	1be4 <main+0xd0>
    1be0:	f000 fb64 	bl	22ac <STACK_SIZE+0x2ac>
    1be4:	dc04      	bgt.n	1bf0 <main+0xdc>
    1be6:	2b43      	cmp	r3, #67	; 0x43
    1be8:	d100      	bne.n	1bec <main+0xd8>
    1bea:	e195      	b.n	1f18 <main+0x404>
    1bec:	f000 fe3e 	bl	286c <STACK_SIZE+0x86c>
    1bf0:	2b53      	cmp	r3, #83	; 0x53
    1bf2:	d005      	beq.n	1c00 <main+0xec>
    1bf4:	2b54      	cmp	r3, #84	; 0x54
    1bf6:	d101      	bne.n	1bfc <main+0xe8>
    1bf8:	f000 fcd6 	bl	25a8 <STACK_SIZE+0x5a8>
    1bfc:	f000 fe36 	bl	286c <STACK_SIZE+0x86c>
             *                                        *
             ******************************************/

            case MODE_SOLO: {
                // Acknowledge the mode reset
                message = "beginning solo operation";
    1c00:	4b9c      	ldr	r3, [pc, #624]	; (1e74 <main+0x360>)
    1c02:	67fb      	str	r3, [r7, #124]	; 0x7c
                serial_init(SERIAL_BAUD);
    1c04:	4b95      	ldr	r3, [pc, #596]	; (1e5c <main+0x348>)
    1c06:	0018      	movs	r0, r3
    1c08:	4b95      	ldr	r3, [pc, #596]	; (1e60 <main+0x34c>)
    1c0a:	4798      	blx	r3
                timer_delay(500);
    1c0c:	23fa      	movs	r3, #250	; 0xfa
    1c0e:	005b      	lsls	r3, r3, #1
    1c10:	0018      	movs	r0, r3
    1c12:	4b99      	ldr	r3, [pc, #612]	; (1e78 <main+0x364>)
    1c14:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    1c16:	4b93      	ldr	r3, [pc, #588]	; (1e64 <main+0x350>)
    1c18:	0018      	movs	r0, r3
    1c1a:	4b93      	ldr	r3, [pc, #588]	; (1e68 <main+0x354>)
    1c1c:	4798      	blx	r3
                while (!transmit('t', message));
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1c22:	0019      	movs	r1, r3
    1c24:	2074      	movs	r0, #116	; 0x74
    1c26:	4b95      	ldr	r3, [pc, #596]	; (1e7c <main+0x368>)
    1c28:	4798      	blx	r3
    1c2a:	1e03      	subs	r3, r0, #0
    1c2c:	d0f8      	beq.n	1c20 <main+0x10c>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    1c2e:	4b8b      	ldr	r3, [pc, #556]	; (1e5c <main+0x348>)
    1c30:	0018      	movs	r0, r3
    1c32:	4b93      	ldr	r3, [pc, #588]	; (1e80 <main+0x36c>)
    1c34:	4798      	blx	r3

                // Reset the emg sampling machine
                emg_state = EMG_SAMPLE;
    1c36:	2393      	movs	r3, #147	; 0x93
    1c38:	18fb      	adds	r3, r7, r3
    1c3a:	2200      	movs	r2, #0
    1c3c:	701a      	strb	r2, [r3, #0]
                machine_counters[M_EMG_SAMPLE] = 0;
    1c3e:	4a83      	ldr	r2, [pc, #524]	; (1e4c <main+0x338>)
    1c40:	2300      	movs	r3, #0
    1c42:	2400      	movs	r4, #0
    1c44:	6013      	str	r3, [r2, #0]
    1c46:	6054      	str	r4, [r2, #4]
                machine_delays[M_EMG_SAMPLE] = 1;
    1c48:	4a81      	ldr	r2, [pc, #516]	; (1e50 <main+0x33c>)
    1c4a:	2301      	movs	r3, #1
    1c4c:	2400      	movs	r4, #0
    1c4e:	6013      	str	r3, [r2, #0]
    1c50:	6054      	str	r4, [r2, #4]
                num_samples = 1;
    1c52:	2301      	movs	r3, #1
    1c54:	2400      	movs	r4, #0
    1c56:	2298      	movs	r2, #152	; 0x98
    1c58:	18ba      	adds	r2, r7, r2
    1c5a:	6013      	str	r3, [r2, #0]
    1c5c:	6054      	str	r4, [r2, #4]

                // Enable EMG hardware
                adc_init();
    1c5e:	4b83      	ldr	r3, [pc, #524]	; (1e6c <main+0x358>)
    1c60:	4798      	blx	r3
                emg_setup(1, 1, 1);
    1c62:	2201      	movs	r2, #1
    1c64:	2101      	movs	r1, #1
    1c66:	2001      	movs	r0, #1
    1c68:	4b86      	ldr	r3, [pc, #536]	; (1e84 <main+0x370>)
    1c6a:	4798      	blx	r3

                // Reset the computation machine
                compute_state = COMPUTE_BEGIN;
    1c6c:	2390      	movs	r3, #144	; 0x90
    1c6e:	18fb      	adds	r3, r7, r3
    1c70:	2203      	movs	r2, #3
    1c72:	701a      	strb	r2, [r3, #0]
                machine_counters[M_COMPUTE] = 0;
    1c74:	4a75      	ldr	r2, [pc, #468]	; (1e4c <main+0x338>)
    1c76:	2300      	movs	r3, #0
    1c78:	2400      	movs	r4, #0
    1c7a:	6113      	str	r3, [r2, #16]
    1c7c:	6154      	str	r4, [r2, #20]
                machine_delays[M_COMPUTE] = INTERNAL_COMP_SAMPLES;
    1c7e:	4a74      	ldr	r2, [pc, #464]	; (1e50 <main+0x33c>)
    1c80:	2340      	movs	r3, #64	; 0x40
    1c82:	2400      	movs	r4, #0
    1c84:	6113      	str	r3, [r2, #16]
    1c86:	6154      	str	r4, [r2, #20]

                // Init internal computation machine
                compute_init(COMP_INTERNAL);
    1c88:	2000      	movs	r0, #0
    1c8a:	4b7f      	ldr	r3, [pc, #508]	; (1e88 <main+0x374>)
    1c8c:	4798      	blx	r3
                emg_ref = compute_get_emg_ref();
    1c8e:	4b7f      	ldr	r3, [pc, #508]	; (1e8c <main+0x378>)
    1c90:	4798      	blx	r3
    1c92:	0003      	movs	r3, r0
    1c94:	2294      	movs	r2, #148	; 0x94
    1c96:	18ba      	adds	r2, r7, r2
    1c98:	6013      	str	r3, [r2, #0]

                // Reset the hand controller machine
                control_state = CONTROL_BEGIN;
    1c9a:	2391      	movs	r3, #145	; 0x91
    1c9c:	18fb      	adds	r3, r7, r3
    1c9e:	2200      	movs	r2, #0
    1ca0:	701a      	strb	r2, [r3, #0]
                machine_counters[M_CONTROL] = 0;
    1ca2:	4a6a      	ldr	r2, [pc, #424]	; (1e4c <main+0x338>)
    1ca4:	2300      	movs	r3, #0
    1ca6:	2400      	movs	r4, #0
    1ca8:	6193      	str	r3, [r2, #24]
    1caa:	61d4      	str	r4, [r2, #28]
                machine_delays[M_COMPUTE] = 50;
    1cac:	4a68      	ldr	r2, [pc, #416]	; (1e50 <main+0x33c>)
    1cae:	2332      	movs	r3, #50	; 0x32
    1cb0:	2400      	movs	r4, #0
    1cb2:	6113      	str	r3, [r2, #16]
    1cb4:	6154      	str	r4, [r2, #20]

                // Enable prosthetic hardware
                servos_init(SERVOS_ADDR);
    1cb6:	2080      	movs	r0, #128	; 0x80
    1cb8:	4b75      	ldr	r3, [pc, #468]	; (1e90 <main+0x37c>)
    1cba:	4798      	blx	r3

                // Reset the mode flag and enter the 'main' loop
                mode_change_flag = 0;
    1cbc:	4b75      	ldr	r3, [pc, #468]	; (1e94 <main+0x380>)
    1cbe:	2200      	movs	r2, #0
    1cc0:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    1cc2:	e110      	b.n	1ee6 <main+0x3d2>
                    // Get the current time
                    current_time = timer_get();
    1cc4:	4b74      	ldr	r3, [pc, #464]	; (1e98 <main+0x384>)
    1cc6:	4798      	blx	r3
    1cc8:	0003      	movs	r3, r0
    1cca:	000c      	movs	r4, r1
    1ccc:	2280      	movs	r2, #128	; 0x80
    1cce:	18ba      	adds	r2, r7, r2
    1cd0:	6013      	str	r3, [r2, #0]
    1cd2:	6054      	str	r4, [r2, #4]

                    /*
                     * EMG sampling machine
                     */
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    1cd4:	4b5d      	ldr	r3, [pc, #372]	; (1e4c <main+0x338>)
    1cd6:	685c      	ldr	r4, [r3, #4]
    1cd8:	681b      	ldr	r3, [r3, #0]
    1cda:	2280      	movs	r2, #128	; 0x80
    1cdc:	18ba      	adds	r2, r7, r2
    1cde:	6811      	ldr	r1, [r2, #0]
    1ce0:	6852      	ldr	r2, [r2, #4]
    1ce2:	1ac9      	subs	r1, r1, r3
    1ce4:	41a2      	sbcs	r2, r4
                            machine_delays[M_EMG_SAMPLE]) {
    1ce6:	4b5a      	ldr	r3, [pc, #360]	; (1e50 <main+0x33c>)
    1ce8:	685c      	ldr	r4, [r3, #4]
    1cea:	681b      	ldr	r3, [r3, #0]
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    1cec:	42a2      	cmp	r2, r4
    1cee:	d802      	bhi.n	1cf6 <main+0x1e2>
    1cf0:	d13f      	bne.n	1d72 <main+0x25e>
    1cf2:	4299      	cmp	r1, r3
    1cf4:	d93d      	bls.n	1d72 <main+0x25e>
                        switch (emg_state) {
    1cf6:	2393      	movs	r3, #147	; 0x93
    1cf8:	18fb      	adds	r3, r7, r3
    1cfa:	781b      	ldrb	r3, [r3, #0]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d002      	beq.n	1d06 <main+0x1f2>
    1d00:	2b01      	cmp	r3, #1
    1d02:	d00d      	beq.n	1d20 <main+0x20c>
    1d04:	e035      	b.n	1d72 <main+0x25e>
                            case EMG_SAMPLE: {
                                // Begin EMG sample
                                if (emg_sample(emg_ref)) {
    1d06:	2394      	movs	r3, #148	; 0x94
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	0018      	movs	r0, r3
    1d0e:	4b63      	ldr	r3, [pc, #396]	; (1e9c <main+0x388>)
    1d10:	4798      	blx	r3
    1d12:	1e03      	subs	r3, r0, #0
    1d14:	d02a      	beq.n	1d6c <main+0x258>
                                    emg_state = EMG_SAMPLE_END;
    1d16:	2393      	movs	r3, #147	; 0x93
    1d18:	18fb      	adds	r3, r7, r3
    1d1a:	2201      	movs	r2, #1
    1d1c:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1d1e:	e025      	b.n	1d6c <main+0x258>

                            case EMG_SAMPLE_END: {
                                if (emg_sample_complete()) {
    1d20:	4b5f      	ldr	r3, [pc, #380]	; (1ea0 <main+0x38c>)
    1d22:	4798      	blx	r3
    1d24:	1e03      	subs	r3, r0, #0
    1d26:	d023      	beq.n	1d70 <main+0x25c>
                                    emg_ref = compute_get_emg_ref();
    1d28:	4b58      	ldr	r3, [pc, #352]	; (1e8c <main+0x378>)
    1d2a:	4798      	blx	r3
    1d2c:	0003      	movs	r3, r0
    1d2e:	2294      	movs	r2, #148	; 0x94
    1d30:	18ba      	adds	r2, r7, r2
    1d32:	6013      	str	r3, [r2, #0]
                                    machine_counters[M_EMG_SAMPLE] += machine_delays[M_EMG_SAMPLE];
    1d34:	4b45      	ldr	r3, [pc, #276]	; (1e4c <main+0x338>)
    1d36:	6819      	ldr	r1, [r3, #0]
    1d38:	685a      	ldr	r2, [r3, #4]
    1d3a:	4b45      	ldr	r3, [pc, #276]	; (1e50 <main+0x33c>)
    1d3c:	685c      	ldr	r4, [r3, #4]
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	185b      	adds	r3, r3, r1
    1d42:	4154      	adcs	r4, r2
    1d44:	4a41      	ldr	r2, [pc, #260]	; (1e4c <main+0x338>)
    1d46:	6013      	str	r3, [r2, #0]
    1d48:	6054      	str	r4, [r2, #4]
                                    emg_state = EMG_SAMPLE;
    1d4a:	2393      	movs	r3, #147	; 0x93
    1d4c:	18fb      	adds	r3, r7, r3
    1d4e:	2200      	movs	r2, #0
    1d50:	701a      	strb	r2, [r3, #0]
                                    num_samples++;
    1d52:	2398      	movs	r3, #152	; 0x98
    1d54:	18fb      	adds	r3, r7, r3
    1d56:	685c      	ldr	r4, [r3, #4]
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	2101      	movs	r1, #1
    1d5c:	2200      	movs	r2, #0
    1d5e:	185b      	adds	r3, r3, r1
    1d60:	4154      	adcs	r4, r2
    1d62:	2298      	movs	r2, #152	; 0x98
    1d64:	18ba      	adds	r2, r7, r2
    1d66:	6013      	str	r3, [r2, #0]
    1d68:	6054      	str	r4, [r2, #4]
                                }
                            } break;
    1d6a:	e001      	b.n	1d70 <main+0x25c>
                            } break;
    1d6c:	46c0      	nop			; (mov r8, r8)
    1d6e:	e000      	b.n	1d72 <main+0x25e>
                            } break;
    1d70:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Computation machine
                     */
                    if (num_samples - machine_counters[M_COMPUTE] >
    1d72:	4b36      	ldr	r3, [pc, #216]	; (1e4c <main+0x338>)
    1d74:	695c      	ldr	r4, [r3, #20]
    1d76:	691b      	ldr	r3, [r3, #16]
    1d78:	2298      	movs	r2, #152	; 0x98
    1d7a:	18ba      	adds	r2, r7, r2
    1d7c:	6811      	ldr	r1, [r2, #0]
    1d7e:	6852      	ldr	r2, [r2, #4]
    1d80:	1ac9      	subs	r1, r1, r3
    1d82:	41a2      	sbcs	r2, r4
                            machine_delays[M_COMPUTE]) {
    1d84:	4b32      	ldr	r3, [pc, #200]	; (1e50 <main+0x33c>)
    1d86:	695c      	ldr	r4, [r3, #20]
    1d88:	691b      	ldr	r3, [r3, #16]
                    if (num_samples - machine_counters[M_COMPUTE] >
    1d8a:	42a2      	cmp	r2, r4
    1d8c:	d802      	bhi.n	1d94 <main+0x280>
    1d8e:	d12b      	bne.n	1de8 <main+0x2d4>
    1d90:	4299      	cmp	r1, r3
    1d92:	d929      	bls.n	1de8 <main+0x2d4>
                        switch (compute_state) {
    1d94:	2390      	movs	r3, #144	; 0x90
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	781b      	ldrb	r3, [r3, #0]
    1d9a:	2b03      	cmp	r3, #3
    1d9c:	d002      	beq.n	1da4 <main+0x290>
    1d9e:	2b04      	cmp	r3, #4
    1da0:	d00b      	beq.n	1dba <main+0x2a6>
    1da2:	e021      	b.n	1de8 <main+0x2d4>
                            case COMPUTE_BEGIN: {
                                // Begin computation on emg data
                                if (compute_begin(&hand_ang)) {
    1da4:	1d3b      	adds	r3, r7, #4
    1da6:	0018      	movs	r0, r3
    1da8:	4b3e      	ldr	r3, [pc, #248]	; (1ea4 <main+0x390>)
    1daa:	4798      	blx	r3
    1dac:	1e03      	subs	r3, r0, #0
    1dae:	d018      	beq.n	1de2 <main+0x2ce>
                                    compute_state = COMPUTE_END;
    1db0:	2390      	movs	r3, #144	; 0x90
    1db2:	18fb      	adds	r3, r7, r3
    1db4:	2204      	movs	r2, #4
    1db6:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1db8:	e013      	b.n	1de2 <main+0x2ce>

                            case COMPUTE_END: {
                                // Continue computation until complete
                                if (compute_complete()) {
    1dba:	4b3b      	ldr	r3, [pc, #236]	; (1ea8 <main+0x394>)
    1dbc:	4798      	blx	r3
    1dbe:	1e03      	subs	r3, r0, #0
    1dc0:	d011      	beq.n	1de6 <main+0x2d2>
                                    machine_counters[M_COMPUTE] += machine_delays[M_COMPUTE];
    1dc2:	4b22      	ldr	r3, [pc, #136]	; (1e4c <main+0x338>)
    1dc4:	6919      	ldr	r1, [r3, #16]
    1dc6:	695a      	ldr	r2, [r3, #20]
    1dc8:	4b21      	ldr	r3, [pc, #132]	; (1e50 <main+0x33c>)
    1dca:	695c      	ldr	r4, [r3, #20]
    1dcc:	691b      	ldr	r3, [r3, #16]
    1dce:	185b      	adds	r3, r3, r1
    1dd0:	4154      	adcs	r4, r2
    1dd2:	4a1e      	ldr	r2, [pc, #120]	; (1e4c <main+0x338>)
    1dd4:	6113      	str	r3, [r2, #16]
    1dd6:	6154      	str	r4, [r2, #20]
                                    compute_state = COMPUTE_BEGIN;
    1dd8:	2390      	movs	r3, #144	; 0x90
    1dda:	18fb      	adds	r3, r7, r3
    1ddc:	2203      	movs	r2, #3
    1dde:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1de0:	e001      	b.n	1de6 <main+0x2d2>
                            } break;
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	e000      	b.n	1de8 <main+0x2d4>
                            } break;
    1de6:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Hand controlling machine
                     */
                    if (num_samples - machine_counters[M_CONTROL] >
    1de8:	4b18      	ldr	r3, [pc, #96]	; (1e4c <main+0x338>)
    1dea:	69dc      	ldr	r4, [r3, #28]
    1dec:	699b      	ldr	r3, [r3, #24]
    1dee:	2298      	movs	r2, #152	; 0x98
    1df0:	18ba      	adds	r2, r7, r2
    1df2:	6811      	ldr	r1, [r2, #0]
    1df4:	6852      	ldr	r2, [r2, #4]
    1df6:	1ac9      	subs	r1, r1, r3
    1df8:	41a2      	sbcs	r2, r4
                            machine_delays[M_CONTROL]) {
    1dfa:	4b15      	ldr	r3, [pc, #84]	; (1e50 <main+0x33c>)
    1dfc:	69dc      	ldr	r4, [r3, #28]
    1dfe:	699b      	ldr	r3, [r3, #24]
    1e00:	2091      	movs	r0, #145	; 0x91
    1e02:	1838      	adds	r0, r7, r0
    1e04:	2591      	movs	r5, #145	; 0x91
    1e06:	197d      	adds	r5, r7, r5
    1e08:	782d      	ldrb	r5, [r5, #0]
    1e0a:	7005      	strb	r5, [r0, #0]
                    if (num_samples - machine_counters[M_CONTROL] >
    1e0c:	42a2      	cmp	r2, r4
    1e0e:	d803      	bhi.n	1e18 <main+0x304>
    1e10:	d169      	bne.n	1ee6 <main+0x3d2>
    1e12:	4299      	cmp	r1, r3
    1e14:	d800      	bhi.n	1e18 <main+0x304>
    1e16:	e066      	b.n	1ee6 <main+0x3d2>
                        switch (control_state) {
    1e18:	2391      	movs	r3, #145	; 0x91
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	781b      	ldrb	r3, [r3, #0]
    1e1e:	2291      	movs	r2, #145	; 0x91
    1e20:	18ba      	adds	r2, r7, r2
    1e22:	2191      	movs	r1, #145	; 0x91
    1e24:	1879      	adds	r1, r7, r1
    1e26:	7809      	ldrb	r1, [r1, #0]
    1e28:	7011      	strb	r1, [r2, #0]
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d002      	beq.n	1e34 <main+0x320>
    1e2e:	2b01      	cmp	r3, #1
    1e30:	d03e      	beq.n	1eb0 <main+0x39c>
    1e32:	e058      	b.n	1ee6 <main+0x3d2>
                            case CONTROL_BEGIN: {
                                // Begin I2C control of hand
                                if (servos_write(SERVOS_ADDR, &hand_ang)) {
    1e34:	1d3b      	adds	r3, r7, #4
    1e36:	0019      	movs	r1, r3
    1e38:	2080      	movs	r0, #128	; 0x80
    1e3a:	4b1c      	ldr	r3, [pc, #112]	; (1eac <main+0x398>)
    1e3c:	4798      	blx	r3
    1e3e:	1e03      	subs	r3, r0, #0
    1e40:	d051      	beq.n	1ee6 <main+0x3d2>
                                    control_state = CONTROL_END;
    1e42:	2391      	movs	r3, #145	; 0x91
    1e44:	18fb      	adds	r3, r7, r3
    1e46:	2201      	movs	r2, #1
    1e48:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1e4a:	e04c      	b.n	1ee6 <main+0x3d2>
    1e4c:	20000818 	.word	0x20000818
    1e50:	20000848 	.word	0x20000848
    1e54:	00000a81 	.word	0x00000a81
    1e58:	00003a59 	.word	0x00003a59
    1e5c:	000f4240 	.word	0x000f4240
    1e60:	00002b85 	.word	0x00002b85
    1e64:	00002a19 	.word	0x00002a19
    1e68:	00002fe5 	.word	0x00002fe5
    1e6c:	0000021d 	.word	0x0000021d
    1e70:	20000007 	.word	0x20000007
    1e74:	00006360 	.word	0x00006360
    1e78:	00003a99 	.word	0x00003a99
    1e7c:	000028fd 	.word	0x000028fd
    1e80:	000011c1 	.word	0x000011c1
    1e84:	00000ca5 	.word	0x00000ca5
    1e88:	00000521 	.word	0x00000521
    1e8c:	000006e5 	.word	0x000006e5
    1e90:	0000315d 	.word	0x0000315d
    1e94:	2000045c 	.word	0x2000045c
    1e98:	00003a81 	.word	0x00003a81
    1e9c:	00000d49 	.word	0x00000d49
    1ea0:	00000da1 	.word	0x00000da1
    1ea4:	00000631 	.word	0x00000631
    1ea8:	000006b5 	.word	0x000006b5
    1eac:	00003295 	.word	0x00003295

                            case CONTROL_END: {
                                // Wait for I2C control of hand to complete
                                if (servos_write_complete()) {
    1eb0:	4bbf      	ldr	r3, [pc, #764]	; (21b0 <STACK_SIZE+0x1b0>)
    1eb2:	4798      	blx	r3
    1eb4:	0003      	movs	r3, r0
    1eb6:	0019      	movs	r1, r3
    1eb8:	2391      	movs	r3, #145	; 0x91
    1eba:	18fb      	adds	r3, r7, r3
    1ebc:	2291      	movs	r2, #145	; 0x91
    1ebe:	18ba      	adds	r2, r7, r2
    1ec0:	7812      	ldrb	r2, [r2, #0]
    1ec2:	701a      	strb	r2, [r3, #0]
    1ec4:	2900      	cmp	r1, #0
    1ec6:	d00e      	beq.n	1ee6 <main+0x3d2>
                                    machine_counters[M_CONTROL] += machine_delays[M_CONTROL];
    1ec8:	4bba      	ldr	r3, [pc, #744]	; (21b4 <STACK_SIZE+0x1b4>)
    1eca:	6999      	ldr	r1, [r3, #24]
    1ecc:	69da      	ldr	r2, [r3, #28]
    1ece:	4bba      	ldr	r3, [pc, #744]	; (21b8 <STACK_SIZE+0x1b8>)
    1ed0:	69dc      	ldr	r4, [r3, #28]
    1ed2:	699b      	ldr	r3, [r3, #24]
    1ed4:	185b      	adds	r3, r3, r1
    1ed6:	4154      	adcs	r4, r2
    1ed8:	4ab6      	ldr	r2, [pc, #728]	; (21b4 <STACK_SIZE+0x1b4>)
    1eda:	6193      	str	r3, [r2, #24]
    1edc:	61d4      	str	r4, [r2, #28]
                                    control_state = CONTROL_BEGIN;
    1ede:	2391      	movs	r3, #145	; 0x91
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	2200      	movs	r2, #0
    1ee4:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    1ee6:	4bb5      	ldr	r3, [pc, #724]	; (21bc <STACK_SIZE+0x1bc>)
    1ee8:	781b      	ldrb	r3, [r3, #0]
    1eea:	b2db      	uxtb	r3, r3
    1eec:	2b00      	cmp	r3, #0
    1eee:	d100      	bne.n	1ef2 <main+0x3de>
    1ef0:	e6e8      	b.n	1cc4 <main+0x1b0>
                        } // end switch
                    }
                } // end solo-controlled loop

                // Reset i2c
                i2c_stop();
    1ef2:	4bb3      	ldr	r3, [pc, #716]	; (21c0 <STACK_SIZE+0x1c0>)
    1ef4:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    1ef6:	4bb3      	ldr	r3, [pc, #716]	; (21c4 <STACK_SIZE+0x1c4>)
    1ef8:	0018      	movs	r0, r3
    1efa:	4bb3      	ldr	r3, [pc, #716]	; (21c8 <STACK_SIZE+0x1c8>)
    1efc:	4798      	blx	r3

                // Disable EMG hardware
                adc_stop();
    1efe:	4bb3      	ldr	r3, [pc, #716]	; (21cc <STACK_SIZE+0x1cc>)
    1f00:	4798      	blx	r3
                emg_stop();
    1f02:	4bb3      	ldr	r3, [pc, #716]	; (21d0 <STACK_SIZE+0x1d0>)
    1f04:	4798      	blx	r3

                // Disable computation machine
                compute_stop();
    1f06:	4bb3      	ldr	r3, [pc, #716]	; (21d4 <STACK_SIZE+0x1d4>)
    1f08:	4798      	blx	r3

                // Disable prosthetic hardware
                servos_stop(SERVOS_ADDR);
    1f0a:	2080      	movs	r0, #128	; 0x80
    1f0c:	4bb2      	ldr	r3, [pc, #712]	; (21d8 <STACK_SIZE+0x1d8>)
    1f0e:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    1f10:	4bab      	ldr	r3, [pc, #684]	; (21c0 <STACK_SIZE+0x1c0>)
    1f12:	4798      	blx	r3

            } break;
    1f14:	f000 fcb6 	bl	2884 <STACK_SIZE+0x884>
             *                                        *
             ******************************************/

            case MODE_CONTROL: {
                // Acknowledge the mode reset
                message = "beginning hand controller";
    1f18:	4bb0      	ldr	r3, [pc, #704]	; (21dc <STACK_SIZE+0x1dc>)
    1f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
                serial_init(SERIAL_BAUD);
    1f1c:	4ba9      	ldr	r3, [pc, #676]	; (21c4 <STACK_SIZE+0x1c4>)
    1f1e:	0018      	movs	r0, r3
    1f20:	4baf      	ldr	r3, [pc, #700]	; (21e0 <STACK_SIZE+0x1e0>)
    1f22:	4798      	blx	r3
                timer_delay(500);
    1f24:	23fa      	movs	r3, #250	; 0xfa
    1f26:	005b      	lsls	r3, r3, #1
    1f28:	0018      	movs	r0, r3
    1f2a:	4bae      	ldr	r3, [pc, #696]	; (21e4 <STACK_SIZE+0x1e4>)
    1f2c:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    1f2e:	4bae      	ldr	r3, [pc, #696]	; (21e8 <STACK_SIZE+0x1e8>)
    1f30:	0018      	movs	r0, r3
    1f32:	4bae      	ldr	r3, [pc, #696]	; (21ec <STACK_SIZE+0x1ec>)
    1f34:	4798      	blx	r3

                while (!transmit('t', message));
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f3a:	0019      	movs	r1, r3
    1f3c:	2074      	movs	r0, #116	; 0x74
    1f3e:	4bac      	ldr	r3, [pc, #688]	; (21f0 <STACK_SIZE+0x1f0>)
    1f40:	4798      	blx	r3
    1f42:	1e03      	subs	r3, r0, #0
    1f44:	d0f8      	beq.n	1f38 <main+0x424>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    1f46:	4b9f      	ldr	r3, [pc, #636]	; (21c4 <STACK_SIZE+0x1c4>)
    1f48:	0018      	movs	r0, r3
    1f4a:	4b9f      	ldr	r3, [pc, #636]	; (21c8 <STACK_SIZE+0x1c8>)
    1f4c:	4798      	blx	r3

                // Reset the emg sampling machine
                emg_state = EMG_SAMPLE;
    1f4e:	2393      	movs	r3, #147	; 0x93
    1f50:	18fb      	adds	r3, r7, r3
    1f52:	2200      	movs	r2, #0
    1f54:	701a      	strb	r2, [r3, #0]
                machine_counters[M_EMG_SAMPLE] = 0;
    1f56:	4a97      	ldr	r2, [pc, #604]	; (21b4 <STACK_SIZE+0x1b4>)
    1f58:	2300      	movs	r3, #0
    1f5a:	2400      	movs	r4, #0
    1f5c:	6013      	str	r3, [r2, #0]
    1f5e:	6054      	str	r4, [r2, #4]
                machine_delays[M_EMG_SAMPLE] = 1;
    1f60:	4a95      	ldr	r2, [pc, #596]	; (21b8 <STACK_SIZE+0x1b8>)
    1f62:	2301      	movs	r3, #1
    1f64:	2400      	movs	r4, #0
    1f66:	6013      	str	r3, [r2, #0]
    1f68:	6054      	str	r4, [r2, #4]
                num_samples = 0;
    1f6a:	2300      	movs	r3, #0
    1f6c:	2400      	movs	r4, #0
    1f6e:	2298      	movs	r2, #152	; 0x98
    1f70:	18ba      	adds	r2, r7, r2
    1f72:	6013      	str	r3, [r2, #0]
    1f74:	6054      	str	r4, [r2, #4]

                // Enable EMG hardware
                adc_init();
    1f76:	4b9f      	ldr	r3, [pc, #636]	; (21f4 <STACK_SIZE+0x1f4>)
    1f78:	4798      	blx	r3
                emg_setup(1, 1, 1);
    1f7a:	2201      	movs	r2, #1
    1f7c:	2101      	movs	r1, #1
    1f7e:	2001      	movs	r0, #1
    1f80:	4b9d      	ldr	r3, [pc, #628]	; (21f8 <STACK_SIZE+0x1f8>)
    1f82:	4798      	blx	r3

                // Reset the computer connection machine
                compute_state = COMPUTE_TX;
    1f84:	2390      	movs	r3, #144	; 0x90
    1f86:	18fb      	adds	r3, r7, r3
    1f88:	2200      	movs	r2, #0
    1f8a:	701a      	strb	r2, [r3, #0]
                machine_counters[M_COMPUTE] = 0;
    1f8c:	4a89      	ldr	r2, [pc, #548]	; (21b4 <STACK_SIZE+0x1b4>)
    1f8e:	2300      	movs	r3, #0
    1f90:	2400      	movs	r4, #0
    1f92:	6113      	str	r3, [r2, #16]
    1f94:	6154      	str	r4, [r2, #20]
                machine_delays[M_COMPUTE] = 50;
    1f96:	4a88      	ldr	r2, [pc, #544]	; (21b8 <STACK_SIZE+0x1b8>)
    1f98:	2332      	movs	r3, #50	; 0x32
    1f9a:	2400      	movs	r4, #0
    1f9c:	6113      	str	r3, [r2, #16]
    1f9e:	6154      	str	r4, [r2, #20]

                // Init computation module
                compute_init(COMP_EXTERNAL);
    1fa0:	2001      	movs	r0, #1
    1fa2:	4b96      	ldr	r3, [pc, #600]	; (21fc <STACK_SIZE+0x1fc>)
    1fa4:	4798      	blx	r3

                // Reset the prosthetic controlling machine
                control_state = CONTROL_BEGIN;
    1fa6:	2391      	movs	r3, #145	; 0x91
    1fa8:	18fb      	adds	r3, r7, r3
    1faa:	2200      	movs	r2, #0
    1fac:	701a      	strb	r2, [r3, #0]
                machine_counters[M_CONTROL] = 0;
    1fae:	4a81      	ldr	r2, [pc, #516]	; (21b4 <STACK_SIZE+0x1b4>)
    1fb0:	2300      	movs	r3, #0
    1fb2:	2400      	movs	r4, #0
    1fb4:	6193      	str	r3, [r2, #24]
    1fb6:	61d4      	str	r4, [r2, #28]
                machine_delays[M_CONTROL] = 50;
    1fb8:	4a7f      	ldr	r2, [pc, #508]	; (21b8 <STACK_SIZE+0x1b8>)
    1fba:	2332      	movs	r3, #50	; 0x32
    1fbc:	2400      	movs	r4, #0
    1fbe:	6193      	str	r3, [r2, #24]
    1fc0:	61d4      	str	r4, [r2, #28]

                // Enable prosthetic hardware
                servos_init(SERVOS_ADDR);
    1fc2:	2080      	movs	r0, #128	; 0x80
    1fc4:	4b8e      	ldr	r3, [pc, #568]	; (2200 <STACK_SIZE+0x200>)
    1fc6:	4798      	blx	r3

                // Reset the timeout values
                machine_counters[M_TIMEOUTS] = timer_get();
    1fc8:	4b8e      	ldr	r3, [pc, #568]	; (2204 <STACK_SIZE+0x204>)
    1fca:	4798      	blx	r3
    1fcc:	0003      	movs	r3, r0
    1fce:	000c      	movs	r4, r1
    1fd0:	4a78      	ldr	r2, [pc, #480]	; (21b4 <STACK_SIZE+0x1b4>)
    1fd2:	6213      	str	r3, [r2, #32]
    1fd4:	6254      	str	r4, [r2, #36]	; 0x24
                machine_delays[M_TIMEOUTS] = 5000;
    1fd6:	4a78      	ldr	r2, [pc, #480]	; (21b8 <STACK_SIZE+0x1b8>)
    1fd8:	4b8b      	ldr	r3, [pc, #556]	; (2208 <STACK_SIZE+0x208>)
    1fda:	2400      	movs	r4, #0
    1fdc:	6213      	str	r3, [r2, #32]
    1fde:	6254      	str	r4, [r2, #36]	; 0x24

                // Reset the mode flag and enter the 'main' loop
                mode_change_flag = 0;
    1fe0:	4b76      	ldr	r3, [pc, #472]	; (21bc <STACK_SIZE+0x1bc>)
    1fe2:	2200      	movs	r2, #0
    1fe4:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    1fe6:	e149      	b.n	227c <STACK_SIZE+0x27c>
                    // Get the current time
                    current_time = timer_get();
    1fe8:	4b86      	ldr	r3, [pc, #536]	; (2204 <STACK_SIZE+0x204>)
    1fea:	4798      	blx	r3
    1fec:	0003      	movs	r3, r0
    1fee:	000c      	movs	r4, r1
    1ff0:	2280      	movs	r2, #128	; 0x80
    1ff2:	18ba      	adds	r2, r7, r2
    1ff4:	6013      	str	r3, [r2, #0]
    1ff6:	6054      	str	r4, [r2, #4]

                    /*
                     * EMG sampling machine
                     */
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    1ff8:	4b6e      	ldr	r3, [pc, #440]	; (21b4 <STACK_SIZE+0x1b4>)
    1ffa:	685c      	ldr	r4, [r3, #4]
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	2280      	movs	r2, #128	; 0x80
    2000:	18ba      	adds	r2, r7, r2
    2002:	6811      	ldr	r1, [r2, #0]
    2004:	6852      	ldr	r2, [r2, #4]
    2006:	1ac9      	subs	r1, r1, r3
    2008:	41a2      	sbcs	r2, r4
                            machine_delays[M_EMG_SAMPLE]) {
    200a:	4b6b      	ldr	r3, [pc, #428]	; (21b8 <STACK_SIZE+0x1b8>)
    200c:	685c      	ldr	r4, [r3, #4]
    200e:	681b      	ldr	r3, [r3, #0]
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    2010:	42a2      	cmp	r2, r4
    2012:	d802      	bhi.n	201a <STACK_SIZE+0x1a>
    2014:	d156      	bne.n	20c4 <STACK_SIZE+0xc4>
    2016:	4299      	cmp	r1, r3
    2018:	d954      	bls.n	20c4 <STACK_SIZE+0xc4>
                        switch (emg_state) {
    201a:	2393      	movs	r3, #147	; 0x93
    201c:	18fb      	adds	r3, r7, r3
    201e:	781b      	ldrb	r3, [r3, #0]
    2020:	2b01      	cmp	r3, #1
    2022:	d014      	beq.n	204e <STACK_SIZE+0x4e>
    2024:	dc02      	bgt.n	202c <STACK_SIZE+0x2c>
    2026:	2b00      	cmp	r3, #0
    2028:	d005      	beq.n	2036 <STACK_SIZE+0x36>
    202a:	e04b      	b.n	20c4 <STACK_SIZE+0xc4>
    202c:	2b02      	cmp	r3, #2
    202e:	d017      	beq.n	2060 <STACK_SIZE+0x60>
    2030:	2b03      	cmp	r3, #3
    2032:	d022      	beq.n	207a <STACK_SIZE+0x7a>
    2034:	e046      	b.n	20c4 <STACK_SIZE+0xc4>
                            case EMG_SAMPLE: {
                                // Begin emg sample
                                if (emg_sample(&emg_data)) {
    2036:	2374      	movs	r3, #116	; 0x74
    2038:	18fb      	adds	r3, r7, r3
    203a:	0018      	movs	r0, r3
    203c:	4b73      	ldr	r3, [pc, #460]	; (220c <STACK_SIZE+0x20c>)
    203e:	4798      	blx	r3
    2040:	1e03      	subs	r3, r0, #0
    2042:	d03a      	beq.n	20ba <STACK_SIZE+0xba>
                                    emg_state = EMG_SAMPLE_END;
    2044:	2393      	movs	r3, #147	; 0x93
    2046:	18fb      	adds	r3, r7, r3
    2048:	2201      	movs	r2, #1
    204a:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    204c:	e035      	b.n	20ba <STACK_SIZE+0xba>

                            case EMG_SAMPLE_END: {
                                // Wait for emg  sample to end
                                if (emg_sample_complete()) {
    204e:	4b70      	ldr	r3, [pc, #448]	; (2210 <STACK_SIZE+0x210>)
    2050:	4798      	blx	r3
    2052:	1e03      	subs	r3, r0, #0
    2054:	d033      	beq.n	20be <STACK_SIZE+0xbe>
                                    emg_state = EMG_TX;
    2056:	2393      	movs	r3, #147	; 0x93
    2058:	18fb      	adds	r3, r7, r3
    205a:	2202      	movs	r2, #2
    205c:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    205e:	e02e      	b.n	20be <STACK_SIZE+0xbe>

                            case EMG_TX: {
                                // Begin transmitting emg data
                                if (transmit('e', emg_data.bytes)) {
    2060:	2374      	movs	r3, #116	; 0x74
    2062:	18fb      	adds	r3, r7, r3
    2064:	0019      	movs	r1, r3
    2066:	2065      	movs	r0, #101	; 0x65
    2068:	4b61      	ldr	r3, [pc, #388]	; (21f0 <STACK_SIZE+0x1f0>)
    206a:	4798      	blx	r3
    206c:	1e03      	subs	r3, r0, #0
    206e:	d028      	beq.n	20c2 <STACK_SIZE+0xc2>
                                    emg_state = EMG_TX_END;
    2070:	2393      	movs	r3, #147	; 0x93
    2072:	18fb      	adds	r3, r7, r3
    2074:	2203      	movs	r2, #3
    2076:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    2078:	e023      	b.n	20c2 <STACK_SIZE+0xc2>

                            case EMG_TX_END: {
                                if (tx_emg_flag) {
    207a:	4b66      	ldr	r3, [pc, #408]	; (2214 <STACK_SIZE+0x214>)
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	2b00      	cmp	r3, #0
    2080:	d020      	beq.n	20c4 <STACK_SIZE+0xc4>
                                    emg_state = EMG_SAMPLE;
    2082:	2393      	movs	r3, #147	; 0x93
    2084:	18fb      	adds	r3, r7, r3
    2086:	2200      	movs	r2, #0
    2088:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_EMG_SAMPLE] += machine_delays[M_EMG_SAMPLE];
    208a:	4b4a      	ldr	r3, [pc, #296]	; (21b4 <STACK_SIZE+0x1b4>)
    208c:	6819      	ldr	r1, [r3, #0]
    208e:	685a      	ldr	r2, [r3, #4]
    2090:	4b49      	ldr	r3, [pc, #292]	; (21b8 <STACK_SIZE+0x1b8>)
    2092:	685c      	ldr	r4, [r3, #4]
    2094:	681b      	ldr	r3, [r3, #0]
    2096:	185b      	adds	r3, r3, r1
    2098:	4154      	adcs	r4, r2
    209a:	4a46      	ldr	r2, [pc, #280]	; (21b4 <STACK_SIZE+0x1b4>)
    209c:	6013      	str	r3, [r2, #0]
    209e:	6054      	str	r4, [r2, #4]
                                    num_samples++;
    20a0:	2398      	movs	r3, #152	; 0x98
    20a2:	18fb      	adds	r3, r7, r3
    20a4:	685c      	ldr	r4, [r3, #4]
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	2101      	movs	r1, #1
    20aa:	2200      	movs	r2, #0
    20ac:	185b      	adds	r3, r3, r1
    20ae:	4154      	adcs	r4, r2
    20b0:	2298      	movs	r2, #152	; 0x98
    20b2:	18ba      	adds	r2, r7, r2
    20b4:	6013      	str	r3, [r2, #0]
    20b6:	6054      	str	r4, [r2, #4]
    20b8:	e004      	b.n	20c4 <STACK_SIZE+0xc4>
                            } break;
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	e002      	b.n	20c4 <STACK_SIZE+0xc4>
                            } break;
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	e000      	b.n	20c4 <STACK_SIZE+0xc4>
                            } break;
    20c2:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * External computation machine
                     */
                    if (num_samples - machine_counters[M_COMPUTE] >
    20c4:	4b3b      	ldr	r3, [pc, #236]	; (21b4 <STACK_SIZE+0x1b4>)
    20c6:	695c      	ldr	r4, [r3, #20]
    20c8:	691b      	ldr	r3, [r3, #16]
    20ca:	2298      	movs	r2, #152	; 0x98
    20cc:	18ba      	adds	r2, r7, r2
    20ce:	6811      	ldr	r1, [r2, #0]
    20d0:	6852      	ldr	r2, [r2, #4]
    20d2:	1ac9      	subs	r1, r1, r3
    20d4:	41a2      	sbcs	r2, r4
                            machine_delays[M_COMPUTE]) {
    20d6:	4b38      	ldr	r3, [pc, #224]	; (21b8 <STACK_SIZE+0x1b8>)
    20d8:	695c      	ldr	r4, [r3, #20]
    20da:	691b      	ldr	r3, [r3, #16]
                    if (num_samples - machine_counters[M_COMPUTE] >
    20dc:	42a2      	cmp	r2, r4
    20de:	d802      	bhi.n	20e6 <STACK_SIZE+0xe6>
    20e0:	d12b      	bne.n	213a <STACK_SIZE+0x13a>
    20e2:	4299      	cmp	r1, r3
    20e4:	d929      	bls.n	213a <STACK_SIZE+0x13a>
                        switch (compute_state) {
    20e6:	2390      	movs	r3, #144	; 0x90
    20e8:	18fb      	adds	r3, r7, r3
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d002      	beq.n	20f6 <STACK_SIZE+0xf6>
    20f0:	2b01      	cmp	r3, #1
    20f2:	d00b      	beq.n	210c <STACK_SIZE+0x10c>
    20f4:	e021      	b.n	213a <STACK_SIZE+0x13a>
                            case COMPUTE_TX: {
                                // Initiate external computation
                                if (compute_begin(&hand_ang)) {
    20f6:	1d3b      	adds	r3, r7, #4
    20f8:	0018      	movs	r0, r3
    20fa:	4b47      	ldr	r3, [pc, #284]	; (2218 <STACK_SIZE+0x218>)
    20fc:	4798      	blx	r3
    20fe:	1e03      	subs	r3, r0, #0
    2100:	d018      	beq.n	2134 <STACK_SIZE+0x134>
                                    compute_state = COMPUTE_TX_END;
    2102:	2390      	movs	r3, #144	; 0x90
    2104:	18fb      	adds	r3, r7, r3
    2106:	2201      	movs	r2, #1
    2108:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    210a:	e013      	b.n	2134 <STACK_SIZE+0x134>

                            case COMPUTE_TX_END: {
                                // Wait for external computation to be returned
                                if (compute_complete()) {
    210c:	4b43      	ldr	r3, [pc, #268]	; (221c <STACK_SIZE+0x21c>)
    210e:	4798      	blx	r3
    2110:	1e03      	subs	r3, r0, #0
    2112:	d011      	beq.n	2138 <STACK_SIZE+0x138>
                                    machine_counters[M_COMPUTE] += machine_delays[M_COMPUTE];
    2114:	4b27      	ldr	r3, [pc, #156]	; (21b4 <STACK_SIZE+0x1b4>)
    2116:	6919      	ldr	r1, [r3, #16]
    2118:	695a      	ldr	r2, [r3, #20]
    211a:	4b27      	ldr	r3, [pc, #156]	; (21b8 <STACK_SIZE+0x1b8>)
    211c:	695c      	ldr	r4, [r3, #20]
    211e:	691b      	ldr	r3, [r3, #16]
    2120:	185b      	adds	r3, r3, r1
    2122:	4154      	adcs	r4, r2
    2124:	4a23      	ldr	r2, [pc, #140]	; (21b4 <STACK_SIZE+0x1b4>)
    2126:	6113      	str	r3, [r2, #16]
    2128:	6154      	str	r4, [r2, #20]
                                    compute_state = COMPUTE_TX;
    212a:	2390      	movs	r3, #144	; 0x90
    212c:	18fb      	adds	r3, r7, r3
    212e:	2200      	movs	r2, #0
    2130:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    2132:	e001      	b.n	2138 <STACK_SIZE+0x138>
                            } break;
    2134:	46c0      	nop			; (mov r8, r8)
    2136:	e000      	b.n	213a <STACK_SIZE+0x13a>
                            } break;
    2138:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Prosthetic controlling machine
                     */
                    if (num_samples - machine_counters[M_CONTROL] > 
    213a:	4b1e      	ldr	r3, [pc, #120]	; (21b4 <STACK_SIZE+0x1b4>)
    213c:	69dc      	ldr	r4, [r3, #28]
    213e:	699b      	ldr	r3, [r3, #24]
    2140:	2298      	movs	r2, #152	; 0x98
    2142:	18ba      	adds	r2, r7, r2
    2144:	6811      	ldr	r1, [r2, #0]
    2146:	6852      	ldr	r2, [r2, #4]
    2148:	1ac9      	subs	r1, r1, r3
    214a:	41a2      	sbcs	r2, r4
                            machine_delays[M_CONTROL]) {
    214c:	4b1a      	ldr	r3, [pc, #104]	; (21b8 <STACK_SIZE+0x1b8>)
    214e:	69dc      	ldr	r4, [r3, #28]
    2150:	699b      	ldr	r3, [r3, #24]
                    if (num_samples - machine_counters[M_CONTROL] > 
    2152:	42a2      	cmp	r2, r4
    2154:	d802      	bhi.n	215c <STACK_SIZE+0x15c>
    2156:	d166      	bne.n	2226 <STACK_SIZE+0x226>
    2158:	4299      	cmp	r1, r3
    215a:	d964      	bls.n	2226 <STACK_SIZE+0x226>
                        switch (control_state) {
    215c:	2391      	movs	r3, #145	; 0x91
    215e:	18fb      	adds	r3, r7, r3
    2160:	781b      	ldrb	r3, [r3, #0]
    2162:	2b00      	cmp	r3, #0
    2164:	d002      	beq.n	216c <STACK_SIZE+0x16c>
    2166:	2b01      	cmp	r3, #1
    2168:	d00c      	beq.n	2184 <STACK_SIZE+0x184>
    216a:	e05c      	b.n	2226 <STACK_SIZE+0x226>
                            case CONTROL_BEGIN: {
                                // Begin I2C control of servos
                                if (servos_write(SERVOS_ADDR, &hand_ang)) {
    216c:	1d3b      	adds	r3, r7, #4
    216e:	0019      	movs	r1, r3
    2170:	2080      	movs	r0, #128	; 0x80
    2172:	4b2b      	ldr	r3, [pc, #172]	; (2220 <STACK_SIZE+0x220>)
    2174:	4798      	blx	r3
    2176:	1e03      	subs	r3, r0, #0
    2178:	d018      	beq.n	21ac <STACK_SIZE+0x1ac>
                                    control_state = CONTROL_END;
    217a:	2391      	movs	r3, #145	; 0x91
    217c:	18fb      	adds	r3, r7, r3
    217e:	2201      	movs	r2, #1
    2180:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    2182:	e013      	b.n	21ac <STACK_SIZE+0x1ac>

                            case CONTROL_END: {
                                // Wait for end of I2C control of servos
                                if (servos_write_complete()) {
    2184:	4b0a      	ldr	r3, [pc, #40]	; (21b0 <STACK_SIZE+0x1b0>)
    2186:	4798      	blx	r3
    2188:	1e03      	subs	r3, r0, #0
    218a:	d04b      	beq.n	2224 <STACK_SIZE+0x224>
                                    machine_counters[M_CONTROL] += machine_delays[M_CONTROL];
    218c:	4b09      	ldr	r3, [pc, #36]	; (21b4 <STACK_SIZE+0x1b4>)
    218e:	6999      	ldr	r1, [r3, #24]
    2190:	69da      	ldr	r2, [r3, #28]
    2192:	4b09      	ldr	r3, [pc, #36]	; (21b8 <STACK_SIZE+0x1b8>)
    2194:	69dc      	ldr	r4, [r3, #28]
    2196:	699b      	ldr	r3, [r3, #24]
    2198:	185b      	adds	r3, r3, r1
    219a:	4154      	adcs	r4, r2
    219c:	4a05      	ldr	r2, [pc, #20]	; (21b4 <STACK_SIZE+0x1b4>)
    219e:	6193      	str	r3, [r2, #24]
    21a0:	61d4      	str	r4, [r2, #28]
                                    control_state = CONTROL_BEGIN;
    21a2:	2391      	movs	r3, #145	; 0x91
    21a4:	18fb      	adds	r3, r7, r3
    21a6:	2200      	movs	r2, #0
    21a8:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    21aa:	e03b      	b.n	2224 <STACK_SIZE+0x224>
                            } break;
    21ac:	46c0      	nop			; (mov r8, r8)
    21ae:	e03a      	b.n	2226 <STACK_SIZE+0x226>
    21b0:	000032f1 	.word	0x000032f1
    21b4:	20000818 	.word	0x20000818
    21b8:	20000848 	.word	0x20000848
    21bc:	2000045c 	.word	0x2000045c
    21c0:	00001239 	.word	0x00001239
    21c4:	000f4240 	.word	0x000f4240
    21c8:	000011c1 	.word	0x000011c1
    21cc:	00000349 	.word	0x00000349
    21d0:	00000d35 	.word	0x00000d35
    21d4:	00000615 	.word	0x00000615
    21d8:	00003225 	.word	0x00003225
    21dc:	0000637c 	.word	0x0000637c
    21e0:	00002b85 	.word	0x00002b85
    21e4:	00003a99 	.word	0x00003a99
    21e8:	00002a19 	.word	0x00002a19
    21ec:	00002fe5 	.word	0x00002fe5
    21f0:	000028fd 	.word	0x000028fd
    21f4:	0000021d 	.word	0x0000021d
    21f8:	00000ca5 	.word	0x00000ca5
    21fc:	00000521 	.word	0x00000521
    2200:	0000315d 	.word	0x0000315d
    2204:	00003a81 	.word	0x00003a81
    2208:	00001388 	.word	0x00001388
    220c:	00000d49 	.word	0x00000d49
    2210:	00000da1 	.word	0x00000da1
    2214:	2000045d 	.word	0x2000045d
    2218:	00000631 	.word	0x00000631
    221c:	000006b5 	.word	0x000006b5
    2220:	00003295 	.word	0x00003295
                            } break;
    2224:	46c0      	nop			; (mov r8, r8)
                        } // end switch
                    }

                    // Timeout check for registered things
                    if (current_time - machine_counters[M_TIMEOUTS] >
    2226:	4bc2      	ldr	r3, [pc, #776]	; (2530 <STACK_SIZE+0x530>)
    2228:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    222a:	6a1b      	ldr	r3, [r3, #32]
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	18ba      	adds	r2, r7, r2
    2230:	6811      	ldr	r1, [r2, #0]
    2232:	6852      	ldr	r2, [r2, #4]
    2234:	1ac9      	subs	r1, r1, r3
    2236:	41a2      	sbcs	r2, r4
                            machine_delays[M_TIMEOUTS]) {
    2238:	4bbe      	ldr	r3, [pc, #760]	; (2534 <STACK_SIZE+0x534>)
    223a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    223c:	6a1b      	ldr	r3, [r3, #32]
                    if (current_time - machine_counters[M_TIMEOUTS] >
    223e:	42a2      	cmp	r2, r4
    2240:	d803      	bhi.n	224a <STACK_SIZE+0x24a>
    2242:	d11b      	bne.n	227c <STACK_SIZE+0x27c>
    2244:	4299      	cmp	r1, r3
    2246:	d800      	bhi.n	224a <STACK_SIZE+0x24a>
    2248:	e018      	b.n	227c <STACK_SIZE+0x27c>
                        // Call timeout functions
                        if (i2c_timeout() || serial_timeout()) {
    224a:	4bbb      	ldr	r3, [pc, #748]	; (2538 <STACK_SIZE+0x538>)
    224c:	4798      	blx	r3
    224e:	1e03      	subs	r3, r0, #0
    2250:	d103      	bne.n	225a <STACK_SIZE+0x25a>
    2252:	4bba      	ldr	r3, [pc, #744]	; (253c <STACK_SIZE+0x53c>)
    2254:	4798      	blx	r3
    2256:	1e03      	subs	r3, r0, #0
    2258:	d005      	beq.n	2266 <STACK_SIZE+0x266>
                            machine_mode = MODE_WAIT;
    225a:	4bb9      	ldr	r3, [pc, #740]	; (2540 <STACK_SIZE+0x540>)
    225c:	2257      	movs	r2, #87	; 0x57
    225e:	701a      	strb	r2, [r3, #0]
                            mode_change_flag = 1;
    2260:	4bb8      	ldr	r3, [pc, #736]	; (2544 <STACK_SIZE+0x544>)
    2262:	2201      	movs	r2, #1
    2264:	701a      	strb	r2, [r3, #0]
                        }
                        machine_counters[M_TIMEOUTS] += machine_delays[M_TIMEOUTS];
    2266:	4bb2      	ldr	r3, [pc, #712]	; (2530 <STACK_SIZE+0x530>)
    2268:	6a19      	ldr	r1, [r3, #32]
    226a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    226c:	4bb1      	ldr	r3, [pc, #708]	; (2534 <STACK_SIZE+0x534>)
    226e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    2270:	6a1b      	ldr	r3, [r3, #32]
    2272:	185b      	adds	r3, r3, r1
    2274:	4154      	adcs	r4, r2
    2276:	4aae      	ldr	r2, [pc, #696]	; (2530 <STACK_SIZE+0x530>)
    2278:	6213      	str	r3, [r2, #32]
    227a:	6254      	str	r4, [r2, #36]	; 0x24
                while (!mode_change_flag) {
    227c:	4bb1      	ldr	r3, [pc, #708]	; (2544 <STACK_SIZE+0x544>)
    227e:	781b      	ldrb	r3, [r3, #0]
    2280:	b2db      	uxtb	r3, r3
    2282:	2b00      	cmp	r3, #0
    2284:	d100      	bne.n	2288 <STACK_SIZE+0x288>
    2286:	e6af      	b.n	1fe8 <main+0x4d4>
                    }
                } // end external-control loop

                // Reset i2c
                i2c_stop();
    2288:	4baf      	ldr	r3, [pc, #700]	; (2548 <STACK_SIZE+0x548>)
    228a:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    228c:	4baf      	ldr	r3, [pc, #700]	; (254c <STACK_SIZE+0x54c>)
    228e:	0018      	movs	r0, r3
    2290:	4baf      	ldr	r3, [pc, #700]	; (2550 <STACK_SIZE+0x550>)
    2292:	4798      	blx	r3

                // Disable EMG hardware
                adc_stop();
    2294:	4baf      	ldr	r3, [pc, #700]	; (2554 <STACK_SIZE+0x554>)
    2296:	4798      	blx	r3
                emg_stop();
    2298:	4baf      	ldr	r3, [pc, #700]	; (2558 <STACK_SIZE+0x558>)
    229a:	4798      	blx	r3

                // Disable computation machine
                compute_stop();
    229c:	4baf      	ldr	r3, [pc, #700]	; (255c <STACK_SIZE+0x55c>)
    229e:	4798      	blx	r3

                // Disable prosthetic control hardware
                servos_stop(SERVOS_ADDR);
    22a0:	2080      	movs	r0, #128	; 0x80
    22a2:	4baf      	ldr	r3, [pc, #700]	; (2560 <STACK_SIZE+0x560>)
    22a4:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    22a6:	4ba8      	ldr	r3, [pc, #672]	; (2548 <STACK_SIZE+0x548>)
    22a8:	4798      	blx	r3
            } break;
    22aa:	e2eb      	b.n	2884 <STACK_SIZE+0x884>
             *                                        *
             ******************************************/

            case MODE_MIRROR: {
                // Acknowledge the mode reset
                serial_init(SERIAL_BAUD);
    22ac:	4ba7      	ldr	r3, [pc, #668]	; (254c <STACK_SIZE+0x54c>)
    22ae:	0018      	movs	r0, r3
    22b0:	4bac      	ldr	r3, [pc, #688]	; (2564 <STACK_SIZE+0x564>)
    22b2:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    22b4:	4ba5      	ldr	r3, [pc, #660]	; (254c <STACK_SIZE+0x54c>)
    22b6:	0018      	movs	r0, r3
    22b8:	4ba5      	ldr	r3, [pc, #660]	; (2550 <STACK_SIZE+0x550>)
    22ba:	4798      	blx	r3
                timer_delay(500);
    22bc:	23fa      	movs	r3, #250	; 0xfa
    22be:	005b      	lsls	r3, r3, #1
    22c0:	0018      	movs	r0, r3
    22c2:	4ba9      	ldr	r3, [pc, #676]	; (2568 <STACK_SIZE+0x568>)
    22c4:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    22c6:	4ba9      	ldr	r3, [pc, #676]	; (256c <STACK_SIZE+0x56c>)
    22c8:	0018      	movs	r0, r3
    22ca:	4ba9      	ldr	r3, [pc, #676]	; (2570 <STACK_SIZE+0x570>)
    22cc:	4798      	blx	r3
                message = "beginning hand mirror";
    22ce:	4ba9      	ldr	r3, [pc, #676]	; (2574 <STACK_SIZE+0x574>)
    22d0:	67fb      	str	r3, [r7, #124]	; 0x7c
                while (!transmit('t', message));
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    22d6:	0019      	movs	r1, r3
    22d8:	2074      	movs	r0, #116	; 0x74
    22da:	4ba7      	ldr	r3, [pc, #668]	; (2578 <STACK_SIZE+0x578>)
    22dc:	4798      	blx	r3
    22de:	1e03      	subs	r3, r0, #0
    22e0:	d0f8      	beq.n	22d4 <STACK_SIZE+0x2d4>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    22e2:	4b9a      	ldr	r3, [pc, #616]	; (254c <STACK_SIZE+0x54c>)
    22e4:	0018      	movs	r0, r3
    22e6:	4b9a      	ldr	r3, [pc, #616]	; (2550 <STACK_SIZE+0x550>)
    22e8:	4798      	blx	r3

                // Reset the hand sampling machine
                hand_state = HAND_SAMPLE;
    22ea:	2392      	movs	r3, #146	; 0x92
    22ec:	18fb      	adds	r3, r7, r3
    22ee:	2200      	movs	r2, #0
    22f0:	701a      	strb	r2, [r3, #0]
                machine_counters[M_HAND_SAMPLE] = 0;
    22f2:	4a8f      	ldr	r2, [pc, #572]	; (2530 <STACK_SIZE+0x530>)
    22f4:	2300      	movs	r3, #0
    22f6:	2400      	movs	r4, #0
    22f8:	6093      	str	r3, [r2, #8]
    22fa:	60d4      	str	r4, [r2, #12]
                machine_delays[M_HAND_SAMPLE] = 50;
    22fc:	4a8d      	ldr	r2, [pc, #564]	; (2534 <STACK_SIZE+0x534>)
    22fe:	2332      	movs	r3, #50	; 0x32
    2300:	2400      	movs	r4, #0
    2302:	6093      	str	r3, [r2, #8]
    2304:	60d4      	str	r4, [r2, #12]
                num_samples = 0;
    2306:	2300      	movs	r3, #0
    2308:	2400      	movs	r4, #0
    230a:	2298      	movs	r2, #152	; 0x98
    230c:	18ba      	adds	r2, r7, r2
    230e:	6013      	str	r3, [r2, #0]
    2310:	6054      	str	r4, [r2, #4]

                // Enable hand sampling hardware
                hand_init();
    2312:	4b9a      	ldr	r3, [pc, #616]	; (257c <STACK_SIZE+0x57c>)
    2314:	4798      	blx	r3

                // Reset the hand controlling machine
                control_state = CONTROL_BEGIN;
    2316:	2391      	movs	r3, #145	; 0x91
    2318:	18fb      	adds	r3, r7, r3
    231a:	2200      	movs	r2, #0
    231c:	701a      	strb	r2, [r3, #0]
                machine_counters[M_CONTROL] = 0;
    231e:	4a84      	ldr	r2, [pc, #528]	; (2530 <STACK_SIZE+0x530>)
    2320:	2300      	movs	r3, #0
    2322:	2400      	movs	r4, #0
    2324:	6193      	str	r3, [r2, #24]
    2326:	61d4      	str	r4, [r2, #28]
                machine_delays[M_CONTROL] = 1;
    2328:	4a82      	ldr	r2, [pc, #520]	; (2534 <STACK_SIZE+0x534>)
    232a:	2301      	movs	r3, #1
    232c:	2400      	movs	r4, #0
    232e:	6193      	str	r3, [r2, #24]
    2330:	61d4      	str	r4, [r2, #28]

                // Enable the prosthetic hardware
                servos_init(SERVOS_ADDR);
    2332:	2080      	movs	r0, #128	; 0x80
    2334:	4b92      	ldr	r3, [pc, #584]	; (2580 <STACK_SIZE+0x580>)
    2336:	4798      	blx	r3

                // Reset the timeout values
                machine_counters[M_TIMEOUTS] = timer_get();
    2338:	4b92      	ldr	r3, [pc, #584]	; (2584 <STACK_SIZE+0x584>)
    233a:	4798      	blx	r3
    233c:	0003      	movs	r3, r0
    233e:	000c      	movs	r4, r1
    2340:	4a7b      	ldr	r2, [pc, #492]	; (2530 <STACK_SIZE+0x530>)
    2342:	6213      	str	r3, [r2, #32]
    2344:	6254      	str	r4, [r2, #36]	; 0x24
                machine_delays[M_TIMEOUTS] = 5000;
    2346:	4a7b      	ldr	r2, [pc, #492]	; (2534 <STACK_SIZE+0x534>)
    2348:	4b8f      	ldr	r3, [pc, #572]	; (2588 <STACK_SIZE+0x588>)
    234a:	2400      	movs	r4, #0
    234c:	6213      	str	r3, [r2, #32]
    234e:	6254      	str	r4, [r2, #36]	; 0x24

                // Reset the mode flag and enter the 'main' loop
                mode_change_flag = 0;
    2350:	4b7c      	ldr	r3, [pc, #496]	; (2544 <STACK_SIZE+0x544>)
    2352:	2200      	movs	r2, #0
    2354:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    2356:	e0d7      	b.n	2508 <STACK_SIZE+0x508>
                    // Get the current time
                    current_time = timer_get();
    2358:	4b8a      	ldr	r3, [pc, #552]	; (2584 <STACK_SIZE+0x584>)
    235a:	4798      	blx	r3
    235c:	0003      	movs	r3, r0
    235e:	000c      	movs	r4, r1
    2360:	2280      	movs	r2, #128	; 0x80
    2362:	18ba      	adds	r2, r7, r2
    2364:	6013      	str	r3, [r2, #0]
    2366:	6054      	str	r4, [r2, #4]

                    /*
                     * Hand sampling machine
                     */
                     if (current_time - machine_counters[M_HAND_SAMPLE] > 
    2368:	4b71      	ldr	r3, [pc, #452]	; (2530 <STACK_SIZE+0x530>)
    236a:	68dc      	ldr	r4, [r3, #12]
    236c:	689b      	ldr	r3, [r3, #8]
    236e:	2280      	movs	r2, #128	; 0x80
    2370:	18ba      	adds	r2, r7, r2
    2372:	6811      	ldr	r1, [r2, #0]
    2374:	6852      	ldr	r2, [r2, #4]
    2376:	1ac9      	subs	r1, r1, r3
    2378:	41a2      	sbcs	r2, r4
                            machine_delays[M_HAND_SAMPLE]) {
    237a:	4b6e      	ldr	r3, [pc, #440]	; (2534 <STACK_SIZE+0x534>)
    237c:	68dc      	ldr	r4, [r3, #12]
    237e:	689b      	ldr	r3, [r3, #8]
                     if (current_time - machine_counters[M_HAND_SAMPLE] > 
    2380:	42a2      	cmp	r2, r4
    2382:	d802      	bhi.n	238a <STACK_SIZE+0x38a>
    2384:	d159      	bne.n	243a <STACK_SIZE+0x43a>
    2386:	4299      	cmp	r1, r3
    2388:	d957      	bls.n	243a <STACK_SIZE+0x43a>
                        switch (hand_state) {
    238a:	2392      	movs	r3, #146	; 0x92
    238c:	18fb      	adds	r3, r7, r3
    238e:	781b      	ldrb	r3, [r3, #0]
    2390:	2b01      	cmp	r3, #1
    2392:	d014      	beq.n	23be <STACK_SIZE+0x3be>
    2394:	dc02      	bgt.n	239c <STACK_SIZE+0x39c>
    2396:	2b00      	cmp	r3, #0
    2398:	d005      	beq.n	23a6 <STACK_SIZE+0x3a6>
    239a:	e04e      	b.n	243a <STACK_SIZE+0x43a>
    239c:	2b02      	cmp	r3, #2
    239e:	d017      	beq.n	23d0 <STACK_SIZE+0x3d0>
    23a0:	2b03      	cmp	r3, #3
    23a2:	d023      	beq.n	23ec <STACK_SIZE+0x3ec>
    23a4:	e049      	b.n	243a <STACK_SIZE+0x43a>
                            case HAND_SAMPLE: {
                                // Begin hand sample via I2C
                                if (hand_read(&hand_data)) {
    23a6:	2314      	movs	r3, #20
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	0018      	movs	r0, r3
    23ac:	4b77      	ldr	r3, [pc, #476]	; (258c <STACK_SIZE+0x58c>)
    23ae:	4798      	blx	r3
    23b0:	1e03      	subs	r3, r0, #0
    23b2:	d03b      	beq.n	242c <STACK_SIZE+0x42c>
                                    hand_state = HAND_SAMPLE_END;
    23b4:	2392      	movs	r3, #146	; 0x92
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2201      	movs	r2, #1
    23ba:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    23bc:	e036      	b.n	242c <STACK_SIZE+0x42c>

                            case HAND_SAMPLE_END: {
                                // Wait for I2C hand sample end
                                if (hand_read_complete()) {
    23be:	4b74      	ldr	r3, [pc, #464]	; (2590 <STACK_SIZE+0x590>)
    23c0:	4798      	blx	r3
    23c2:	1e03      	subs	r3, r0, #0
    23c4:	d034      	beq.n	2430 <STACK_SIZE+0x430>
                                    hand_state = HAND_ANGLE;
    23c6:	2392      	movs	r3, #146	; 0x92
    23c8:	18fb      	adds	r3, r7, r3
    23ca:	2202      	movs	r2, #2
    23cc:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    23ce:	e02f      	b.n	2430 <STACK_SIZE+0x430>

                            case HAND_ANGLE: {
                                // Begin hand angle calculation
                                if (servos_compute(&hand_data, &hand_ang)) {
    23d0:	1d3a      	adds	r2, r7, #4
    23d2:	2314      	movs	r3, #20
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	0011      	movs	r1, r2
    23d8:	0018      	movs	r0, r3
    23da:	4b6e      	ldr	r3, [pc, #440]	; (2594 <STACK_SIZE+0x594>)
    23dc:	4798      	blx	r3
    23de:	1e03      	subs	r3, r0, #0
    23e0:	d028      	beq.n	2434 <STACK_SIZE+0x434>
                                    hand_state = HAND_ANGLE_END;
    23e2:	2392      	movs	r3, #146	; 0x92
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	2203      	movs	r2, #3
    23e8:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    23ea:	e023      	b.n	2434 <STACK_SIZE+0x434>

                            case HAND_ANGLE_END: {
                                // Wait for hand angle computation to finish
                                if (servos_compute_complete()) {
    23ec:	4b6a      	ldr	r3, [pc, #424]	; (2598 <STACK_SIZE+0x598>)
    23ee:	4798      	blx	r3
    23f0:	1e03      	subs	r3, r0, #0
    23f2:	d021      	beq.n	2438 <STACK_SIZE+0x438>
                                    hand_state = HAND_SAMPLE;
    23f4:	2392      	movs	r3, #146	; 0x92
    23f6:	18fb      	adds	r3, r7, r3
    23f8:	2200      	movs	r2, #0
    23fa:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_HAND_SAMPLE] += machine_delays[M_HAND_SAMPLE];
    23fc:	4b4c      	ldr	r3, [pc, #304]	; (2530 <STACK_SIZE+0x530>)
    23fe:	6899      	ldr	r1, [r3, #8]
    2400:	68da      	ldr	r2, [r3, #12]
    2402:	4b4c      	ldr	r3, [pc, #304]	; (2534 <STACK_SIZE+0x534>)
    2404:	68dc      	ldr	r4, [r3, #12]
    2406:	689b      	ldr	r3, [r3, #8]
    2408:	185b      	adds	r3, r3, r1
    240a:	4154      	adcs	r4, r2
    240c:	4a48      	ldr	r2, [pc, #288]	; (2530 <STACK_SIZE+0x530>)
    240e:	6093      	str	r3, [r2, #8]
    2410:	60d4      	str	r4, [r2, #12]
                                    num_samples++;
    2412:	2398      	movs	r3, #152	; 0x98
    2414:	18fb      	adds	r3, r7, r3
    2416:	685c      	ldr	r4, [r3, #4]
    2418:	681b      	ldr	r3, [r3, #0]
    241a:	2101      	movs	r1, #1
    241c:	2200      	movs	r2, #0
    241e:	185b      	adds	r3, r3, r1
    2420:	4154      	adcs	r4, r2
    2422:	2298      	movs	r2, #152	; 0x98
    2424:	18ba      	adds	r2, r7, r2
    2426:	6013      	str	r3, [r2, #0]
    2428:	6054      	str	r4, [r2, #4]
                                }
                            } break;
    242a:	e005      	b.n	2438 <STACK_SIZE+0x438>
                            } break;
    242c:	46c0      	nop			; (mov r8, r8)
    242e:	e004      	b.n	243a <STACK_SIZE+0x43a>
                            } break;
    2430:	46c0      	nop			; (mov r8, r8)
    2432:	e002      	b.n	243a <STACK_SIZE+0x43a>
                            } break;
    2434:	46c0      	nop			; (mov r8, r8)
    2436:	e000      	b.n	243a <STACK_SIZE+0x43a>
                            } break;
    2438:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Prosthetic controlling machine
                     */
                    if (num_samples - machine_counters[M_CONTROL] >
    243a:	4b3d      	ldr	r3, [pc, #244]	; (2530 <STACK_SIZE+0x530>)
    243c:	69dc      	ldr	r4, [r3, #28]
    243e:	699b      	ldr	r3, [r3, #24]
    2440:	2298      	movs	r2, #152	; 0x98
    2442:	18ba      	adds	r2, r7, r2
    2444:	6811      	ldr	r1, [r2, #0]
    2446:	6852      	ldr	r2, [r2, #4]
    2448:	1ac9      	subs	r1, r1, r3
    244a:	41a2      	sbcs	r2, r4
                            machine_delays[M_CONTROL]) {
    244c:	4b39      	ldr	r3, [pc, #228]	; (2534 <STACK_SIZE+0x534>)
    244e:	69dc      	ldr	r4, [r3, #28]
    2450:	699b      	ldr	r3, [r3, #24]
                    if (num_samples - machine_counters[M_CONTROL] >
    2452:	42a2      	cmp	r2, r4
    2454:	d802      	bhi.n	245c <STACK_SIZE+0x45c>
    2456:	d12c      	bne.n	24b2 <STACK_SIZE+0x4b2>
    2458:	4299      	cmp	r1, r3
    245a:	d92a      	bls.n	24b2 <STACK_SIZE+0x4b2>
                        switch (control_state) {
    245c:	2391      	movs	r3, #145	; 0x91
    245e:	18fb      	adds	r3, r7, r3
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b00      	cmp	r3, #0
    2464:	d002      	beq.n	246c <STACK_SIZE+0x46c>
    2466:	2b01      	cmp	r3, #1
    2468:	d00c      	beq.n	2484 <STACK_SIZE+0x484>
    246a:	e022      	b.n	24b2 <STACK_SIZE+0x4b2>
                            case CONTROL_BEGIN: {
                                // Begin I2C control of servos
                                if (servos_write(SERVOS_ADDR, &hand_ang)) {
    246c:	1d3b      	adds	r3, r7, #4
    246e:	0019      	movs	r1, r3
    2470:	2080      	movs	r0, #128	; 0x80
    2472:	4b4a      	ldr	r3, [pc, #296]	; (259c <STACK_SIZE+0x59c>)
    2474:	4798      	blx	r3
    2476:	1e03      	subs	r3, r0, #0
    2478:	d018      	beq.n	24ac <STACK_SIZE+0x4ac>
                                    control_state = CONTROL_END;
    247a:	2391      	movs	r3, #145	; 0x91
    247c:	18fb      	adds	r3, r7, r3
    247e:	2201      	movs	r2, #1
    2480:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    2482:	e013      	b.n	24ac <STACK_SIZE+0x4ac>

                            case CONTROL_END: {
                                // Wait for I2C control of servos to finish
                                if (servos_write_complete()) {
    2484:	4b46      	ldr	r3, [pc, #280]	; (25a0 <STACK_SIZE+0x5a0>)
    2486:	4798      	blx	r3
    2488:	1e03      	subs	r3, r0, #0
    248a:	d011      	beq.n	24b0 <STACK_SIZE+0x4b0>
                                    control_state = CONTROL_BEGIN;
    248c:	2391      	movs	r3, #145	; 0x91
    248e:	18fb      	adds	r3, r7, r3
    2490:	2200      	movs	r2, #0
    2492:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_CONTROL] += machine_delays[M_CONTROL];
    2494:	4b26      	ldr	r3, [pc, #152]	; (2530 <STACK_SIZE+0x530>)
    2496:	6999      	ldr	r1, [r3, #24]
    2498:	69da      	ldr	r2, [r3, #28]
    249a:	4b26      	ldr	r3, [pc, #152]	; (2534 <STACK_SIZE+0x534>)
    249c:	69dc      	ldr	r4, [r3, #28]
    249e:	699b      	ldr	r3, [r3, #24]
    24a0:	185b      	adds	r3, r3, r1
    24a2:	4154      	adcs	r4, r2
    24a4:	4a22      	ldr	r2, [pc, #136]	; (2530 <STACK_SIZE+0x530>)
    24a6:	6193      	str	r3, [r2, #24]
    24a8:	61d4      	str	r4, [r2, #28]
                                }
                            } break;
    24aa:	e001      	b.n	24b0 <STACK_SIZE+0x4b0>
                            } break;
    24ac:	46c0      	nop			; (mov r8, r8)
    24ae:	e000      	b.n	24b2 <STACK_SIZE+0x4b2>
                            } break;
    24b0:	46c0      	nop			; (mov r8, r8)
                        } // end switch
                    }

                    // Timeout check for registered things
                    if (current_time - machine_counters[M_TIMEOUTS] >
    24b2:	4b1f      	ldr	r3, [pc, #124]	; (2530 <STACK_SIZE+0x530>)
    24b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    24b6:	6a1b      	ldr	r3, [r3, #32]
    24b8:	2280      	movs	r2, #128	; 0x80
    24ba:	18ba      	adds	r2, r7, r2
    24bc:	6811      	ldr	r1, [r2, #0]
    24be:	6852      	ldr	r2, [r2, #4]
    24c0:	1ac9      	subs	r1, r1, r3
    24c2:	41a2      	sbcs	r2, r4
                            machine_delays[M_TIMEOUTS]) {
    24c4:	4b1b      	ldr	r3, [pc, #108]	; (2534 <STACK_SIZE+0x534>)
    24c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    24c8:	6a1b      	ldr	r3, [r3, #32]
                    if (current_time - machine_counters[M_TIMEOUTS] >
    24ca:	42a2      	cmp	r2, r4
    24cc:	d803      	bhi.n	24d6 <STACK_SIZE+0x4d6>
    24ce:	d11b      	bne.n	2508 <STACK_SIZE+0x508>
    24d0:	4299      	cmp	r1, r3
    24d2:	d800      	bhi.n	24d6 <STACK_SIZE+0x4d6>
    24d4:	e018      	b.n	2508 <STACK_SIZE+0x508>
                        // Call timeout functions
                        if (i2c_timeout() || serial_timeout()) {
    24d6:	4b18      	ldr	r3, [pc, #96]	; (2538 <STACK_SIZE+0x538>)
    24d8:	4798      	blx	r3
    24da:	1e03      	subs	r3, r0, #0
    24dc:	d103      	bne.n	24e6 <STACK_SIZE+0x4e6>
    24de:	4b17      	ldr	r3, [pc, #92]	; (253c <STACK_SIZE+0x53c>)
    24e0:	4798      	blx	r3
    24e2:	1e03      	subs	r3, r0, #0
    24e4:	d005      	beq.n	24f2 <STACK_SIZE+0x4f2>
                            machine_mode = MODE_WAIT;
    24e6:	4b16      	ldr	r3, [pc, #88]	; (2540 <STACK_SIZE+0x540>)
    24e8:	2257      	movs	r2, #87	; 0x57
    24ea:	701a      	strb	r2, [r3, #0]
                            mode_change_flag = 1;
    24ec:	4b15      	ldr	r3, [pc, #84]	; (2544 <STACK_SIZE+0x544>)
    24ee:	2201      	movs	r2, #1
    24f0:	701a      	strb	r2, [r3, #0]
                        }
                        machine_counters[M_TIMEOUTS] += machine_delays[M_TIMEOUTS];
    24f2:	4b0f      	ldr	r3, [pc, #60]	; (2530 <STACK_SIZE+0x530>)
    24f4:	6a19      	ldr	r1, [r3, #32]
    24f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    24f8:	4b0e      	ldr	r3, [pc, #56]	; (2534 <STACK_SIZE+0x534>)
    24fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    24fc:	6a1b      	ldr	r3, [r3, #32]
    24fe:	185b      	adds	r3, r3, r1
    2500:	4154      	adcs	r4, r2
    2502:	4a0b      	ldr	r2, [pc, #44]	; (2530 <STACK_SIZE+0x530>)
    2504:	6213      	str	r3, [r2, #32]
    2506:	6254      	str	r4, [r2, #36]	; 0x24
                while (!mode_change_flag) {
    2508:	4b0e      	ldr	r3, [pc, #56]	; (2544 <STACK_SIZE+0x544>)
    250a:	781b      	ldrb	r3, [r3, #0]
    250c:	b2db      	uxtb	r3, r3
    250e:	2b00      	cmp	r3, #0
    2510:	d100      	bne.n	2514 <STACK_SIZE+0x514>
    2512:	e721      	b.n	2358 <STACK_SIZE+0x358>
                    }
                    
                } // end mirroring loop

                // Reset i2c
                i2c_stop();
    2514:	4b0c      	ldr	r3, [pc, #48]	; (2548 <STACK_SIZE+0x548>)
    2516:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    2518:	4b0c      	ldr	r3, [pc, #48]	; (254c <STACK_SIZE+0x54c>)
    251a:	0018      	movs	r0, r3
    251c:	4b0c      	ldr	r3, [pc, #48]	; (2550 <STACK_SIZE+0x550>)
    251e:	4798      	blx	r3

                // Disable hand sampling hardware
                hand_stop();
    2520:	4b20      	ldr	r3, [pc, #128]	; (25a4 <STACK_SIZE+0x5a4>)
    2522:	4798      	blx	r3

                // Disable prosthetic hardware
                servos_stop(SERVOS_ADDR);
    2524:	2080      	movs	r0, #128	; 0x80
    2526:	4b0e      	ldr	r3, [pc, #56]	; (2560 <STACK_SIZE+0x560>)
    2528:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    252a:	4b07      	ldr	r3, [pc, #28]	; (2548 <STACK_SIZE+0x548>)
    252c:	4798      	blx	r3
            } break;
    252e:	e1a9      	b.n	2884 <STACK_SIZE+0x884>
    2530:	20000818 	.word	0x20000818
    2534:	20000848 	.word	0x20000848
    2538:	00001291 	.word	0x00001291
    253c:	00002dad 	.word	0x00002dad
    2540:	20000007 	.word	0x20000007
    2544:	2000045c 	.word	0x2000045c
    2548:	00001239 	.word	0x00001239
    254c:	000f4240 	.word	0x000f4240
    2550:	000011c1 	.word	0x000011c1
    2554:	00000349 	.word	0x00000349
    2558:	00000d35 	.word	0x00000d35
    255c:	00000615 	.word	0x00000615
    2560:	00003225 	.word	0x00003225
    2564:	00002b85 	.word	0x00002b85
    2568:	00003a99 	.word	0x00003a99
    256c:	00002a19 	.word	0x00002a19
    2570:	00002fe5 	.word	0x00002fe5
    2574:	00006398 	.word	0x00006398
    2578:	000028fd 	.word	0x000028fd
    257c:	00000e4d 	.word	0x00000e4d
    2580:	0000315d 	.word	0x0000315d
    2584:	00003a81 	.word	0x00003a81
    2588:	00001388 	.word	0x00001388
    258c:	00000f1d 	.word	0x00000f1d
    2590:	00000f4d 	.word	0x00000f4d
    2594:	0000330d 	.word	0x0000330d
    2598:	00003341 	.word	0x00003341
    259c:	00003295 	.word	0x00003295
    25a0:	000032f1 	.word	0x000032f1
    25a4:	00000eb5 	.word	0x00000eb5
             *                                        *
             ******************************************/

            case MODE_TRAIN: {
                // Acknowledge the mode reset
                message = "beginning data collection";
    25a8:	4bb7      	ldr	r3, [pc, #732]	; (2888 <STACK_SIZE+0x888>)
    25aa:	67fb      	str	r3, [r7, #124]	; 0x7c
                serial_init(SERIAL_BAUD);
    25ac:	4bb7      	ldr	r3, [pc, #732]	; (288c <STACK_SIZE+0x88c>)
    25ae:	0018      	movs	r0, r3
    25b0:	4bb7      	ldr	r3, [pc, #732]	; (2890 <STACK_SIZE+0x890>)
    25b2:	4798      	blx	r3
                timer_delay(500);
    25b4:	23fa      	movs	r3, #250	; 0xfa
    25b6:	005b      	lsls	r3, r3, #1
    25b8:	0018      	movs	r0, r3
    25ba:	4bb6      	ldr	r3, [pc, #728]	; (2894 <STACK_SIZE+0x894>)
    25bc:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    25be:	4bb6      	ldr	r3, [pc, #728]	; (2898 <STACK_SIZE+0x898>)
    25c0:	0018      	movs	r0, r3
    25c2:	4bb6      	ldr	r3, [pc, #728]	; (289c <STACK_SIZE+0x89c>)
    25c4:	4798      	blx	r3
                while (!transmit('t', message));
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    25ca:	0019      	movs	r1, r3
    25cc:	2074      	movs	r0, #116	; 0x74
    25ce:	4bb4      	ldr	r3, [pc, #720]	; (28a0 <STACK_SIZE+0x8a0>)
    25d0:	4798      	blx	r3
    25d2:	1e03      	subs	r3, r0, #0
    25d4:	d0f8      	beq.n	25c8 <STACK_SIZE+0x5c8>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    25d6:	4bad      	ldr	r3, [pc, #692]	; (288c <STACK_SIZE+0x88c>)
    25d8:	0018      	movs	r0, r3
    25da:	4bb2      	ldr	r3, [pc, #712]	; (28a4 <STACK_SIZE+0x8a4>)
    25dc:	4798      	blx	r3

                // Reset the EMG machine
                num_samples = 0;
    25de:	2300      	movs	r3, #0
    25e0:	2400      	movs	r4, #0
    25e2:	2298      	movs	r2, #152	; 0x98
    25e4:	18ba      	adds	r2, r7, r2
    25e6:	6013      	str	r3, [r2, #0]
    25e8:	6054      	str	r4, [r2, #4]
                emg_state = EMG_SAMPLE;
    25ea:	2393      	movs	r3, #147	; 0x93
    25ec:	18fb      	adds	r3, r7, r3
    25ee:	2200      	movs	r2, #0
    25f0:	701a      	strb	r2, [r3, #0]
                machine_counters[M_EMG_SAMPLE] = 0;
    25f2:	4aad      	ldr	r2, [pc, #692]	; (28a8 <STACK_SIZE+0x8a8>)
    25f4:	2300      	movs	r3, #0
    25f6:	2400      	movs	r4, #0
    25f8:	6013      	str	r3, [r2, #0]
    25fa:	6054      	str	r4, [r2, #4]
                machine_delays[M_EMG_SAMPLE] = 1;
    25fc:	4aab      	ldr	r2, [pc, #684]	; (28ac <STACK_SIZE+0x8ac>)
    25fe:	2301      	movs	r3, #1
    2600:	2400      	movs	r4, #0
    2602:	6013      	str	r3, [r2, #0]
    2604:	6054      	str	r4, [r2, #4]

                // Enable EMG hardware
                adc_init();
    2606:	4baa      	ldr	r3, [pc, #680]	; (28b0 <STACK_SIZE+0x8b0>)
    2608:	4798      	blx	r3
                emg_setup(1, 1, 1);
    260a:	2201      	movs	r2, #1
    260c:	2101      	movs	r1, #1
    260e:	2001      	movs	r0, #1
    2610:	4ba8      	ldr	r3, [pc, #672]	; (28b4 <STACK_SIZE+0x8b4>)
    2612:	4798      	blx	r3

                // Reset the hand sampling machine
                hand_state = HAND_SAMPLE;
    2614:	2392      	movs	r3, #146	; 0x92
    2616:	18fb      	adds	r3, r7, r3
    2618:	2200      	movs	r2, #0
    261a:	701a      	strb	r2, [r3, #0]
                machine_counters[M_HAND_SAMPLE] = 0;
    261c:	4aa2      	ldr	r2, [pc, #648]	; (28a8 <STACK_SIZE+0x8a8>)
    261e:	2300      	movs	r3, #0
    2620:	2400      	movs	r4, #0
    2622:	6093      	str	r3, [r2, #8]
    2624:	60d4      	str	r4, [r2, #12]
                machine_delays[M_HAND_SAMPLE] = 20;
    2626:	4aa1      	ldr	r2, [pc, #644]	; (28ac <STACK_SIZE+0x8ac>)
    2628:	2314      	movs	r3, #20
    262a:	2400      	movs	r4, #0
    262c:	6093      	str	r3, [r2, #8]
    262e:	60d4      	str	r4, [r2, #12]

                // Enable hand sampling hardware
                hand_init();
    2630:	4ba1      	ldr	r3, [pc, #644]	; (28b8 <STACK_SIZE+0x8b8>)
    2632:	4798      	blx	r3

                // Reset the timeout values
                machine_counters[M_TIMEOUTS] = timer_get();
    2634:	4ba1      	ldr	r3, [pc, #644]	; (28bc <STACK_SIZE+0x8bc>)
    2636:	4798      	blx	r3
    2638:	0003      	movs	r3, r0
    263a:	000c      	movs	r4, r1
    263c:	4a9a      	ldr	r2, [pc, #616]	; (28a8 <STACK_SIZE+0x8a8>)
    263e:	6213      	str	r3, [r2, #32]
    2640:	6254      	str	r4, [r2, #36]	; 0x24
                machine_delays[M_TIMEOUTS] = 5000;
    2642:	4a9a      	ldr	r2, [pc, #616]	; (28ac <STACK_SIZE+0x8ac>)
    2644:	4b9e      	ldr	r3, [pc, #632]	; (28c0 <STACK_SIZE+0x8c0>)
    2646:	2400      	movs	r4, #0
    2648:	6213      	str	r3, [r2, #32]
    264a:	6254      	str	r4, [r2, #36]	; 0x24

                // Reset the mode flag and enter 'main' loop
                mode_change_flag = 0;
    264c:	4b9d      	ldr	r3, [pc, #628]	; (28c4 <STACK_SIZE+0x8c4>)
    264e:	2200      	movs	r2, #0
    2650:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    2652:	e0f6      	b.n	2842 <STACK_SIZE+0x842>
                    // Get the current time
                    current_time = timer_get();
    2654:	4b99      	ldr	r3, [pc, #612]	; (28bc <STACK_SIZE+0x8bc>)
    2656:	4798      	blx	r3
    2658:	0003      	movs	r3, r0
    265a:	000c      	movs	r4, r1
    265c:	2280      	movs	r2, #128	; 0x80
    265e:	18ba      	adds	r2, r7, r2
    2660:	6013      	str	r3, [r2, #0]
    2662:	6054      	str	r4, [r2, #4]

                    /*
                     * EMG sampling machine
                     */
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    2664:	4b90      	ldr	r3, [pc, #576]	; (28a8 <STACK_SIZE+0x8a8>)
    2666:	685c      	ldr	r4, [r3, #4]
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	2280      	movs	r2, #128	; 0x80
    266c:	18ba      	adds	r2, r7, r2
    266e:	6811      	ldr	r1, [r2, #0]
    2670:	6852      	ldr	r2, [r2, #4]
    2672:	1ac9      	subs	r1, r1, r3
    2674:	41a2      	sbcs	r2, r4
                            machine_delays[M_EMG_SAMPLE]) {
    2676:	4b8d      	ldr	r3, [pc, #564]	; (28ac <STACK_SIZE+0x8ac>)
    2678:	685c      	ldr	r4, [r3, #4]
    267a:	681b      	ldr	r3, [r3, #0]
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    267c:	42a2      	cmp	r2, r4
    267e:	d802      	bhi.n	2686 <STACK_SIZE+0x686>
    2680:	d158      	bne.n	2734 <STACK_SIZE+0x734>
    2682:	4299      	cmp	r1, r3
    2684:	d956      	bls.n	2734 <STACK_SIZE+0x734>
                        switch (emg_state) {
    2686:	2393      	movs	r3, #147	; 0x93
    2688:	18fb      	adds	r3, r7, r3
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	2b01      	cmp	r3, #1
    268e:	d014      	beq.n	26ba <STACK_SIZE+0x6ba>
    2690:	dc02      	bgt.n	2698 <STACK_SIZE+0x698>
    2692:	2b00      	cmp	r3, #0
    2694:	d005      	beq.n	26a2 <STACK_SIZE+0x6a2>
    2696:	e04d      	b.n	2734 <STACK_SIZE+0x734>
    2698:	2b02      	cmp	r3, #2
    269a:	d017      	beq.n	26cc <STACK_SIZE+0x6cc>
    269c:	2b03      	cmp	r3, #3
    269e:	d022      	beq.n	26e6 <STACK_SIZE+0x6e6>
    26a0:	e048      	b.n	2734 <STACK_SIZE+0x734>
                            case EMG_SAMPLE: {
                                // Begin the EMG sample
                                if (emg_sample(&emg_data)) {
    26a2:	2374      	movs	r3, #116	; 0x74
    26a4:	18fb      	adds	r3, r7, r3
    26a6:	0018      	movs	r0, r3
    26a8:	4b87      	ldr	r3, [pc, #540]	; (28c8 <STACK_SIZE+0x8c8>)
    26aa:	4798      	blx	r3
    26ac:	1e03      	subs	r3, r0, #0
    26ae:	d03a      	beq.n	2726 <STACK_SIZE+0x726>
                                    emg_state = EMG_SAMPLE_END;
    26b0:	2393      	movs	r3, #147	; 0x93
    26b2:	18fb      	adds	r3, r7, r3
    26b4:	2201      	movs	r2, #1
    26b6:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    26b8:	e035      	b.n	2726 <STACK_SIZE+0x726>

                            case EMG_SAMPLE_END: {
                                // Wait for the EMG sample to complete
                                if (emg_sample_complete()) {
    26ba:	4b84      	ldr	r3, [pc, #528]	; (28cc <STACK_SIZE+0x8cc>)
    26bc:	4798      	blx	r3
    26be:	1e03      	subs	r3, r0, #0
    26c0:	d033      	beq.n	272a <STACK_SIZE+0x72a>
                                    emg_state = EMG_TX;
    26c2:	2393      	movs	r3, #147	; 0x93
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	2202      	movs	r2, #2
    26c8:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    26ca:	e02e      	b.n	272a <STACK_SIZE+0x72a>

                            case EMG_TX: {
                                // Transmit the EMG data
                                if (transmit('e', emg_data.bytes)) {
    26cc:	2374      	movs	r3, #116	; 0x74
    26ce:	18fb      	adds	r3, r7, r3
    26d0:	0019      	movs	r1, r3
    26d2:	2065      	movs	r0, #101	; 0x65
    26d4:	4b72      	ldr	r3, [pc, #456]	; (28a0 <STACK_SIZE+0x8a0>)
    26d6:	4798      	blx	r3
    26d8:	1e03      	subs	r3, r0, #0
    26da:	d028      	beq.n	272e <STACK_SIZE+0x72e>
                                    emg_state = EMG_TX_END;
    26dc:	2393      	movs	r3, #147	; 0x93
    26de:	18fb      	adds	r3, r7, r3
    26e0:	2203      	movs	r2, #3
    26e2:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    26e4:	e023      	b.n	272e <STACK_SIZE+0x72e>

                            case EMG_TX_END: {
                                // Wait for transmission complete
                                if (tx_emg_flag) {
    26e6:	4b7a      	ldr	r3, [pc, #488]	; (28d0 <STACK_SIZE+0x8d0>)
    26e8:	781b      	ldrb	r3, [r3, #0]
    26ea:	2b00      	cmp	r3, #0
    26ec:	d021      	beq.n	2732 <STACK_SIZE+0x732>
                                    emg_state = EMG_SAMPLE;
    26ee:	2393      	movs	r3, #147	; 0x93
    26f0:	18fb      	adds	r3, r7, r3
    26f2:	2200      	movs	r2, #0
    26f4:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_EMG_SAMPLE] += machine_delays[M_EMG_SAMPLE];
    26f6:	4b6c      	ldr	r3, [pc, #432]	; (28a8 <STACK_SIZE+0x8a8>)
    26f8:	6819      	ldr	r1, [r3, #0]
    26fa:	685a      	ldr	r2, [r3, #4]
    26fc:	4b6b      	ldr	r3, [pc, #428]	; (28ac <STACK_SIZE+0x8ac>)
    26fe:	685c      	ldr	r4, [r3, #4]
    2700:	681b      	ldr	r3, [r3, #0]
    2702:	185b      	adds	r3, r3, r1
    2704:	4154      	adcs	r4, r2
    2706:	4a68      	ldr	r2, [pc, #416]	; (28a8 <STACK_SIZE+0x8a8>)
    2708:	6013      	str	r3, [r2, #0]
    270a:	6054      	str	r4, [r2, #4]
                                    num_samples++;
    270c:	2398      	movs	r3, #152	; 0x98
    270e:	18fb      	adds	r3, r7, r3
    2710:	685c      	ldr	r4, [r3, #4]
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	2101      	movs	r1, #1
    2716:	2200      	movs	r2, #0
    2718:	185b      	adds	r3, r3, r1
    271a:	4154      	adcs	r4, r2
    271c:	2298      	movs	r2, #152	; 0x98
    271e:	18ba      	adds	r2, r7, r2
    2720:	6013      	str	r3, [r2, #0]
    2722:	6054      	str	r4, [r2, #4]
                                }
                            } break;
    2724:	e005      	b.n	2732 <STACK_SIZE+0x732>
                            } break;
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	e004      	b.n	2734 <STACK_SIZE+0x734>
                            } break;
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	e002      	b.n	2734 <STACK_SIZE+0x734>
                            } break;
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	e000      	b.n	2734 <STACK_SIZE+0x734>
                            } break;
    2732:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Hand sampling machine
                     */
                    if (num_samples - machine_counters[M_HAND_SAMPLE] > 
    2734:	4b5c      	ldr	r3, [pc, #368]	; (28a8 <STACK_SIZE+0x8a8>)
    2736:	68dc      	ldr	r4, [r3, #12]
    2738:	689b      	ldr	r3, [r3, #8]
    273a:	2298      	movs	r2, #152	; 0x98
    273c:	18ba      	adds	r2, r7, r2
    273e:	6811      	ldr	r1, [r2, #0]
    2740:	6852      	ldr	r2, [r2, #4]
    2742:	1ac9      	subs	r1, r1, r3
    2744:	41a2      	sbcs	r2, r4
                            machine_delays[M_HAND_SAMPLE]) {
    2746:	4b59      	ldr	r3, [pc, #356]	; (28ac <STACK_SIZE+0x8ac>)
    2748:	68dc      	ldr	r4, [r3, #12]
    274a:	689b      	ldr	r3, [r3, #8]
                    if (num_samples - machine_counters[M_HAND_SAMPLE] > 
    274c:	42a2      	cmp	r2, r4
    274e:	d802      	bhi.n	2756 <STACK_SIZE+0x756>
    2750:	d14c      	bne.n	27ec <STACK_SIZE+0x7ec>
    2752:	4299      	cmp	r1, r3
    2754:	d94a      	bls.n	27ec <STACK_SIZE+0x7ec>

                        switch (hand_state) {
    2756:	2392      	movs	r3, #146	; 0x92
    2758:	18fb      	adds	r3, r7, r3
    275a:	781b      	ldrb	r3, [r3, #0]
    275c:	2b01      	cmp	r3, #1
    275e:	d014      	beq.n	278a <STACK_SIZE+0x78a>
    2760:	dc02      	bgt.n	2768 <STACK_SIZE+0x768>
    2762:	2b00      	cmp	r3, #0
    2764:	d005      	beq.n	2772 <STACK_SIZE+0x772>
    2766:	e041      	b.n	27ec <STACK_SIZE+0x7ec>
    2768:	2b05      	cmp	r3, #5
    276a:	d017      	beq.n	279c <STACK_SIZE+0x79c>
    276c:	2b06      	cmp	r3, #6
    276e:	d022      	beq.n	27b6 <STACK_SIZE+0x7b6>
    2770:	e03c      	b.n	27ec <STACK_SIZE+0x7ec>
                            case HAND_SAMPLE: {
                                // Begin hand sample via I2C
                                if (hand_read(&hand_data)) {
    2772:	2314      	movs	r3, #20
    2774:	18fb      	adds	r3, r7, r3
    2776:	0018      	movs	r0, r3
    2778:	4b56      	ldr	r3, [pc, #344]	; (28d4 <STACK_SIZE+0x8d4>)
    277a:	4798      	blx	r3
    277c:	1e03      	subs	r3, r0, #0
    277e:	d02e      	beq.n	27de <STACK_SIZE+0x7de>
                                    hand_state = HAND_SAMPLE_END;
    2780:	2392      	movs	r3, #146	; 0x92
    2782:	18fb      	adds	r3, r7, r3
    2784:	2201      	movs	r2, #1
    2786:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    2788:	e029      	b.n	27de <STACK_SIZE+0x7de>

                            case HAND_SAMPLE_END: {
                                // Wait for I2C hand sample end
                                if (hand_read_complete()) {
    278a:	4b53      	ldr	r3, [pc, #332]	; (28d8 <STACK_SIZE+0x8d8>)
    278c:	4798      	blx	r3
    278e:	1e03      	subs	r3, r0, #0
    2790:	d027      	beq.n	27e2 <STACK_SIZE+0x7e2>
                                    hand_state = HAND_TX;
    2792:	2392      	movs	r3, #146	; 0x92
    2794:	18fb      	adds	r3, r7, r3
    2796:	2205      	movs	r2, #5
    2798:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    279a:	e022      	b.n	27e2 <STACK_SIZE+0x7e2>

                            case HAND_TX: {
                                // Begin transmitting hand data
                                if (transmit('h', hand_data.bytes)) {
    279c:	2314      	movs	r3, #20
    279e:	18fb      	adds	r3, r7, r3
    27a0:	0019      	movs	r1, r3
    27a2:	2068      	movs	r0, #104	; 0x68
    27a4:	4b3e      	ldr	r3, [pc, #248]	; (28a0 <STACK_SIZE+0x8a0>)
    27a6:	4798      	blx	r3
    27a8:	1e03      	subs	r3, r0, #0
    27aa:	d01c      	beq.n	27e6 <STACK_SIZE+0x7e6>
                                    hand_state = HAND_TX_END;
    27ac:	2392      	movs	r3, #146	; 0x92
    27ae:	18fb      	adds	r3, r7, r3
    27b0:	2206      	movs	r2, #6
    27b2:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    27b4:	e017      	b.n	27e6 <STACK_SIZE+0x7e6>

                            case HAND_TX_END: {
                                // Wait for transmission complete
                                if (tx_hand_flag) {
    27b6:	4b49      	ldr	r3, [pc, #292]	; (28dc <STACK_SIZE+0x8dc>)
    27b8:	781b      	ldrb	r3, [r3, #0]
    27ba:	2b00      	cmp	r3, #0
    27bc:	d015      	beq.n	27ea <STACK_SIZE+0x7ea>
                                    hand_state = HAND_SAMPLE;
    27be:	2392      	movs	r3, #146	; 0x92
    27c0:	18fb      	adds	r3, r7, r3
    27c2:	2200      	movs	r2, #0
    27c4:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_HAND_SAMPLE] += machine_delays[M_HAND_SAMPLE];
    27c6:	4b38      	ldr	r3, [pc, #224]	; (28a8 <STACK_SIZE+0x8a8>)
    27c8:	6899      	ldr	r1, [r3, #8]
    27ca:	68da      	ldr	r2, [r3, #12]
    27cc:	4b37      	ldr	r3, [pc, #220]	; (28ac <STACK_SIZE+0x8ac>)
    27ce:	68dc      	ldr	r4, [r3, #12]
    27d0:	689b      	ldr	r3, [r3, #8]
    27d2:	185b      	adds	r3, r3, r1
    27d4:	4154      	adcs	r4, r2
    27d6:	4a34      	ldr	r2, [pc, #208]	; (28a8 <STACK_SIZE+0x8a8>)
    27d8:	6093      	str	r3, [r2, #8]
    27da:	60d4      	str	r4, [r2, #12]
                                }
                            } break;
    27dc:	e005      	b.n	27ea <STACK_SIZE+0x7ea>
                            } break;
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	e004      	b.n	27ec <STACK_SIZE+0x7ec>
                            } break;
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	e002      	b.n	27ec <STACK_SIZE+0x7ec>
                            } break;
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	e000      	b.n	27ec <STACK_SIZE+0x7ec>
                            } break;
    27ea:	46c0      	nop			; (mov r8, r8)
                        } // end switch
                    }

                    // Timeout check for registered things
                    if (current_time - machine_counters[M_TIMEOUTS] >
    27ec:	4b2e      	ldr	r3, [pc, #184]	; (28a8 <STACK_SIZE+0x8a8>)
    27ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    27f0:	6a1b      	ldr	r3, [r3, #32]
    27f2:	2280      	movs	r2, #128	; 0x80
    27f4:	18ba      	adds	r2, r7, r2
    27f6:	6811      	ldr	r1, [r2, #0]
    27f8:	6852      	ldr	r2, [r2, #4]
    27fa:	1ac9      	subs	r1, r1, r3
    27fc:	41a2      	sbcs	r2, r4
                            machine_delays[M_TIMEOUTS]) {
    27fe:	4b2b      	ldr	r3, [pc, #172]	; (28ac <STACK_SIZE+0x8ac>)
    2800:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    2802:	6a1b      	ldr	r3, [r3, #32]
                    if (current_time - machine_counters[M_TIMEOUTS] >
    2804:	42a2      	cmp	r2, r4
    2806:	d803      	bhi.n	2810 <STACK_SIZE+0x810>
    2808:	d11b      	bne.n	2842 <STACK_SIZE+0x842>
    280a:	4299      	cmp	r1, r3
    280c:	d800      	bhi.n	2810 <STACK_SIZE+0x810>
    280e:	e018      	b.n	2842 <STACK_SIZE+0x842>
                        // Call timeout functions
                        if (i2c_timeout() || serial_timeout()) {
    2810:	4b33      	ldr	r3, [pc, #204]	; (28e0 <STACK_SIZE+0x8e0>)
    2812:	4798      	blx	r3
    2814:	1e03      	subs	r3, r0, #0
    2816:	d103      	bne.n	2820 <STACK_SIZE+0x820>
    2818:	4b32      	ldr	r3, [pc, #200]	; (28e4 <STACK_SIZE+0x8e4>)
    281a:	4798      	blx	r3
    281c:	1e03      	subs	r3, r0, #0
    281e:	d005      	beq.n	282c <STACK_SIZE+0x82c>
                            machine_mode = MODE_WAIT;
    2820:	4b31      	ldr	r3, [pc, #196]	; (28e8 <STACK_SIZE+0x8e8>)
    2822:	2257      	movs	r2, #87	; 0x57
    2824:	701a      	strb	r2, [r3, #0]
                            mode_change_flag = 1;
    2826:	4b27      	ldr	r3, [pc, #156]	; (28c4 <STACK_SIZE+0x8c4>)
    2828:	2201      	movs	r2, #1
    282a:	701a      	strb	r2, [r3, #0]
                        }
                        machine_counters[M_TIMEOUTS] += machine_delays[M_TIMEOUTS];
    282c:	4b1e      	ldr	r3, [pc, #120]	; (28a8 <STACK_SIZE+0x8a8>)
    282e:	6a19      	ldr	r1, [r3, #32]
    2830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2832:	4b1e      	ldr	r3, [pc, #120]	; (28ac <STACK_SIZE+0x8ac>)
    2834:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    2836:	6a1b      	ldr	r3, [r3, #32]
    2838:	185b      	adds	r3, r3, r1
    283a:	4154      	adcs	r4, r2
    283c:	4a1a      	ldr	r2, [pc, #104]	; (28a8 <STACK_SIZE+0x8a8>)
    283e:	6213      	str	r3, [r2, #32]
    2840:	6254      	str	r4, [r2, #36]	; 0x24
                while (!mode_change_flag) {
    2842:	4b20      	ldr	r3, [pc, #128]	; (28c4 <STACK_SIZE+0x8c4>)
    2844:	781b      	ldrb	r3, [r3, #0]
    2846:	b2db      	uxtb	r3, r3
    2848:	2b00      	cmp	r3, #0
    284a:	d100      	bne.n	284e <STACK_SIZE+0x84e>
    284c:	e702      	b.n	2654 <STACK_SIZE+0x654>
                    }

                } // end training loop

                // Reset i2c
                i2c_stop();
    284e:	4b27      	ldr	r3, [pc, #156]	; (28ec <STACK_SIZE+0x8ec>)
    2850:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    2852:	4b0e      	ldr	r3, [pc, #56]	; (288c <STACK_SIZE+0x88c>)
    2854:	0018      	movs	r0, r3
    2856:	4b13      	ldr	r3, [pc, #76]	; (28a4 <STACK_SIZE+0x8a4>)
    2858:	4798      	blx	r3

                // Disable hand sampling hardware
                hand_stop();
    285a:	4b25      	ldr	r3, [pc, #148]	; (28f0 <STACK_SIZE+0x8f0>)
    285c:	4798      	blx	r3

                // Disable EMG hardware
                adc_stop();
    285e:	4b25      	ldr	r3, [pc, #148]	; (28f4 <STACK_SIZE+0x8f4>)
    2860:	4798      	blx	r3
                emg_stop();
    2862:	4b25      	ldr	r3, [pc, #148]	; (28f8 <STACK_SIZE+0x8f8>)
    2864:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    2866:	4b21      	ldr	r3, [pc, #132]	; (28ec <STACK_SIZE+0x8ec>)
    2868:	4798      	blx	r3
            } break;
    286a:	e00b      	b.n	2884 <STACK_SIZE+0x884>

            default: {
                mode_change_flag = 0;
    286c:	4b15      	ldr	r3, [pc, #84]	; (28c4 <STACK_SIZE+0x8c4>)
    286e:	2200      	movs	r2, #0
    2870:	701a      	strb	r2, [r3, #0]
                machine_mode = MODE_WAIT;
    2872:	4b1d      	ldr	r3, [pc, #116]	; (28e8 <STACK_SIZE+0x8e8>)
    2874:	2257      	movs	r2, #87	; 0x57
    2876:	701a      	strb	r2, [r3, #0]
                while(!mode_change_flag) {
    2878:	46c0      	nop			; (mov r8, r8)
    287a:	4b12      	ldr	r3, [pc, #72]	; (28c4 <STACK_SIZE+0x8c4>)
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	b2db      	uxtb	r3, r3
    2880:	2b00      	cmp	r3, #0
    2882:	d0fa      	beq.n	287a <STACK_SIZE+0x87a>
        switch (machine_mode) {
    2884:	f7ff f9a7 	bl	1bd6 <main+0xc2>
    2888:	000063b0 	.word	0x000063b0
    288c:	000f4240 	.word	0x000f4240
    2890:	00002b85 	.word	0x00002b85
    2894:	00003a99 	.word	0x00003a99
    2898:	00002a19 	.word	0x00002a19
    289c:	00002fe5 	.word	0x00002fe5
    28a0:	000028fd 	.word	0x000028fd
    28a4:	000011c1 	.word	0x000011c1
    28a8:	20000818 	.word	0x20000818
    28ac:	20000848 	.word	0x20000848
    28b0:	0000021d 	.word	0x0000021d
    28b4:	00000ca5 	.word	0x00000ca5
    28b8:	00000e4d 	.word	0x00000e4d
    28bc:	00003a81 	.word	0x00003a81
    28c0:	00001388 	.word	0x00001388
    28c4:	2000045c 	.word	0x2000045c
    28c8:	00000d49 	.word	0x00000d49
    28cc:	00000da1 	.word	0x00000da1
    28d0:	2000045d 	.word	0x2000045d
    28d4:	00000f1d 	.word	0x00000f1d
    28d8:	00000f4d 	.word	0x00000f4d
    28dc:	2000045e 	.word	0x2000045e
    28e0:	00001291 	.word	0x00001291
    28e4:	00002dad 	.word	0x00002dad
    28e8:	20000007 	.word	0x20000007
    28ec:	00001239 	.word	0x00001239
    28f0:	00000eb5 	.word	0x00000eb5
    28f4:	00000349 	.word	0x00000349
    28f8:	00000d35 	.word	0x00000d35

000028fc <transmit>:
//     |    |  \ |  \/  /~~\  |  |___
//
//-----------------------------------------------------------------------------

uint8_t transmit(uint8_t command, uint8_t* data)
{
    28fc:	b580      	push	{r7, lr}
    28fe:	b082      	sub	sp, #8
    2900:	af00      	add	r7, sp, #0
    2902:	0002      	movs	r2, r0
    2904:	6039      	str	r1, [r7, #0]
    2906:	1dfb      	adds	r3, r7, #7
    2908:	701a      	strb	r2, [r3, #0]
    if (serial_register_tx(tx_callback)) {
    290a:	4b23      	ldr	r3, [pc, #140]	; (2998 <transmit+0x9c>)
    290c:	0018      	movs	r0, r3
    290e:	4b23      	ldr	r3, [pc, #140]	; (299c <transmit+0xa0>)
    2910:	4798      	blx	r3
    2912:	1e03      	subs	r3, r0, #0
    2914:	d03b      	beq.n	298e <transmit+0x92>
        switch (command) {
    2916:	1dfb      	adds	r3, r7, #7
    2918:	781b      	ldrb	r3, [r3, #0]
    291a:	2b68      	cmp	r3, #104	; 0x68
    291c:	d01f      	beq.n	295e <transmit+0x62>
    291e:	2b74      	cmp	r3, #116	; 0x74
    2920:	d002      	beq.n	2928 <transmit+0x2c>
    2922:	2b65      	cmp	r3, #101	; 0x65
    2924:	d011      	beq.n	294a <transmit+0x4e>
    2926:	e024      	b.n	2972 <transmit+0x76>
            case 't' : {
                tx_length = strlen(data)+1;
    2928:	683b      	ldr	r3, [r7, #0]
    292a:	0018      	movs	r0, r3
    292c:	4b1c      	ldr	r3, [pc, #112]	; (29a0 <transmit+0xa4>)
    292e:	4798      	blx	r3
    2930:	0003      	movs	r3, r0
    2932:	b2db      	uxtb	r3, r3
    2934:	3301      	adds	r3, #1
    2936:	b2da      	uxtb	r2, r3
    2938:	4b1a      	ldr	r3, [pc, #104]	; (29a4 <transmit+0xa8>)
    293a:	701a      	strb	r2, [r3, #0]
                tx_flag = &tx_text_flag;
    293c:	4b1a      	ldr	r3, [pc, #104]	; (29a8 <transmit+0xac>)
    293e:	4a1b      	ldr	r2, [pc, #108]	; (29ac <transmit+0xb0>)
    2940:	601a      	str	r2, [r3, #0]
                tx_text_flag = 0;
    2942:	4b1a      	ldr	r3, [pc, #104]	; (29ac <transmit+0xb0>)
    2944:	2200      	movs	r2, #0
    2946:	701a      	strb	r2, [r3, #0]
            } break;
    2948:	e017      	b.n	297a <transmit+0x7e>
            
            case 'e' : {
                tx_length = 6; 
    294a:	4b16      	ldr	r3, [pc, #88]	; (29a4 <transmit+0xa8>)
    294c:	2206      	movs	r2, #6
    294e:	701a      	strb	r2, [r3, #0]
                tx_flag = &tx_emg_flag; 
    2950:	4b15      	ldr	r3, [pc, #84]	; (29a8 <transmit+0xac>)
    2952:	4a17      	ldr	r2, [pc, #92]	; (29b0 <transmit+0xb4>)
    2954:	601a      	str	r2, [r3, #0]
                tx_emg_flag = 0;
    2956:	4b16      	ldr	r3, [pc, #88]	; (29b0 <transmit+0xb4>)
    2958:	2200      	movs	r2, #0
    295a:	701a      	strb	r2, [r3, #0]
            } break;
    295c:	e00d      	b.n	297a <transmit+0x7e>

            case 'h' : {
                tx_length = 6*16;
    295e:	4b11      	ldr	r3, [pc, #68]	; (29a4 <transmit+0xa8>)
    2960:	2260      	movs	r2, #96	; 0x60
    2962:	701a      	strb	r2, [r3, #0]
                tx_flag = &tx_hand_flag;
    2964:	4b10      	ldr	r3, [pc, #64]	; (29a8 <transmit+0xac>)
    2966:	4a13      	ldr	r2, [pc, #76]	; (29b4 <transmit+0xb8>)
    2968:	601a      	str	r2, [r3, #0]
                tx_hand_flag = 0;
    296a:	4b12      	ldr	r3, [pc, #72]	; (29b4 <transmit+0xb8>)
    296c:	2200      	movs	r2, #0
    296e:	701a      	strb	r2, [r3, #0]
            } break;
    2970:	e003      	b.n	297a <transmit+0x7e>

            default  : tx_length = 0; break;
    2972:	4b0c      	ldr	r3, [pc, #48]	; (29a4 <transmit+0xa8>)
    2974:	2200      	movs	r2, #0
    2976:	701a      	strb	r2, [r3, #0]
    2978:	46c0      	nop			; (mov r8, r8)
        }
        tx_data = data;
    297a:	4b0f      	ldr	r3, [pc, #60]	; (29b8 <transmit+0xbc>)
    297c:	683a      	ldr	r2, [r7, #0]
    297e:	601a      	str	r2, [r3, #0]
        serial_write(command);
    2980:	1dfb      	adds	r3, r7, #7
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	0018      	movs	r0, r3
    2986:	4b0d      	ldr	r3, [pc, #52]	; (29bc <transmit+0xc0>)
    2988:	4798      	blx	r3
        return 1;
    298a:	2301      	movs	r3, #1
    298c:	e000      	b.n	2990 <transmit+0x94>
    } else {
        return 0;
    298e:	2300      	movs	r3, #0
    }
}
    2990:	0018      	movs	r0, r3
    2992:	46bd      	mov	sp, r7
    2994:	b002      	add	sp, #8
    2996:	bd80      	pop	{r7, pc}
    2998:	000029c1 	.word	0x000029c1
    299c:	0000300d 	.word	0x0000300d
    29a0:	00006129 	.word	0x00006129
    29a4:	20000844 	.word	0x20000844
    29a8:	20000840 	.word	0x20000840
    29ac:	20000460 	.word	0x20000460
    29b0:	2000045d 	.word	0x2000045d
    29b4:	2000045e 	.word	0x2000045e
    29b8:	20000870 	.word	0x20000870
    29bc:	00002e39 	.word	0x00002e39

000029c0 <tx_callback>:

uint8_t tx_callback()
{
    29c0:	b580      	push	{r7, lr}
    29c2:	b082      	sub	sp, #8
    29c4:	af00      	add	r7, sp, #0
    if (tx_length-- != 0){
    29c6:	4b10      	ldr	r3, [pc, #64]	; (2a08 <tx_callback+0x48>)
    29c8:	781b      	ldrb	r3, [r3, #0]
    29ca:	1e5a      	subs	r2, r3, #1
    29cc:	b2d1      	uxtb	r1, r2
    29ce:	4a0e      	ldr	r2, [pc, #56]	; (2a08 <tx_callback+0x48>)
    29d0:	7011      	strb	r1, [r2, #0]
    29d2:	2b00      	cmp	r3, #0
    29d4:	d00e      	beq.n	29f4 <tx_callback+0x34>
        uint8_t data = *(tx_data++);
    29d6:	4b0d      	ldr	r3, [pc, #52]	; (2a0c <tx_callback+0x4c>)
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	1c59      	adds	r1, r3, #1
    29dc:	4a0b      	ldr	r2, [pc, #44]	; (2a0c <tx_callback+0x4c>)
    29de:	6011      	str	r1, [r2, #0]
    29e0:	1dfa      	adds	r2, r7, #7
    29e2:	781b      	ldrb	r3, [r3, #0]
    29e4:	7013      	strb	r3, [r2, #0]
        serial_write(data);
    29e6:	1dfb      	adds	r3, r7, #7
    29e8:	781b      	ldrb	r3, [r3, #0]
    29ea:	0018      	movs	r0, r3
    29ec:	4b08      	ldr	r3, [pc, #32]	; (2a10 <tx_callback+0x50>)
    29ee:	4798      	blx	r3
        return 0;
    29f0:	2300      	movs	r3, #0
    29f2:	e004      	b.n	29fe <tx_callback+0x3e>
    }
    else {
        (*tx_flag) = 1;
    29f4:	4b07      	ldr	r3, [pc, #28]	; (2a14 <tx_callback+0x54>)
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	2201      	movs	r2, #1
    29fa:	701a      	strb	r2, [r3, #0]
        return 1;
    29fc:	2301      	movs	r3, #1
    }
}
    29fe:	0018      	movs	r0, r3
    2a00:	46bd      	mov	sp, r7
    2a02:	b002      	add	sp, #8
    2a04:	bd80      	pop	{r7, pc}
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	20000844 	.word	0x20000844
    2a0c:	20000870 	.word	0x20000870
    2a10:	00002e39 	.word	0x00002e39
    2a14:	20000840 	.word	0x20000840

00002a18 <rx_mode_setter>:

uint8_t rx_mode_setter() {
    2a18:	b580      	push	{r7, lr}
    2a1a:	af00      	add	r7, sp, #0
    // Signal that the mode changed!
    mode_change_flag = 1;
    2a1c:	4b14      	ldr	r3, [pc, #80]	; (2a70 <rx_mode_setter+0x58>)
    2a1e:	2201      	movs	r2, #1
    2a20:	701a      	strb	r2, [r3, #0]

    // Sets the machine mode upon receiving a command char
    //  Defaults to sampling
    switch (serial_read()) {
    2a22:	4b14      	ldr	r3, [pc, #80]	; (2a74 <rx_mode_setter+0x5c>)
    2a24:	4798      	blx	r3
    2a26:	0003      	movs	r3, r0
    2a28:	2b4d      	cmp	r3, #77	; 0x4d
    2a2a:	d00c      	beq.n	2a46 <rx_mode_setter+0x2e>
    2a2c:	dc02      	bgt.n	2a34 <rx_mode_setter+0x1c>
    2a2e:	2b43      	cmp	r3, #67	; 0x43
    2a30:	d005      	beq.n	2a3e <rx_mode_setter+0x26>
    2a32:	e014      	b.n	2a5e <rx_mode_setter+0x46>
    2a34:	2b53      	cmp	r3, #83	; 0x53
    2a36:	d00e      	beq.n	2a56 <rx_mode_setter+0x3e>
    2a38:	2b54      	cmp	r3, #84	; 0x54
    2a3a:	d008      	beq.n	2a4e <rx_mode_setter+0x36>
    2a3c:	e00f      	b.n	2a5e <rx_mode_setter+0x46>
        case MODE_CONTROL: {
            machine_mode = MODE_CONTROL;
    2a3e:	4b0e      	ldr	r3, [pc, #56]	; (2a78 <rx_mode_setter+0x60>)
    2a40:	2243      	movs	r2, #67	; 0x43
    2a42:	701a      	strb	r2, [r3, #0]
        } break;
    2a44:	e00f      	b.n	2a66 <rx_mode_setter+0x4e>

        case MODE_MIRROR: {
            machine_mode = MODE_MIRROR;
    2a46:	4b0c      	ldr	r3, [pc, #48]	; (2a78 <rx_mode_setter+0x60>)
    2a48:	224d      	movs	r2, #77	; 0x4d
    2a4a:	701a      	strb	r2, [r3, #0]
        } break;
    2a4c:	e00b      	b.n	2a66 <rx_mode_setter+0x4e>

        case MODE_TRAIN: {
            machine_mode = MODE_TRAIN;
    2a4e:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <rx_mode_setter+0x60>)
    2a50:	2254      	movs	r2, #84	; 0x54
    2a52:	701a      	strb	r2, [r3, #0]
        } break;
    2a54:	e007      	b.n	2a66 <rx_mode_setter+0x4e>

        case MODE_SOLO: {
            machine_mode = MODE_SOLO;
    2a56:	4b08      	ldr	r3, [pc, #32]	; (2a78 <rx_mode_setter+0x60>)
    2a58:	2253      	movs	r2, #83	; 0x53
    2a5a:	701a      	strb	r2, [r3, #0]
        } break;
    2a5c:	e003      	b.n	2a66 <rx_mode_setter+0x4e>

        default: {
            machine_mode = MODE_WAIT;
    2a5e:	4b06      	ldr	r3, [pc, #24]	; (2a78 <rx_mode_setter+0x60>)
    2a60:	2257      	movs	r2, #87	; 0x57
    2a62:	701a      	strb	r2, [r3, #0]
        } break;
    2a64:	46c0      	nop			; (mov r8, r8)
    }

    return 1;
    2a66:	2301      	movs	r3, #1
}
    2a68:	0018      	movs	r0, r3
    2a6a:	46bd      	mov	sp, r7
    2a6c:	bd80      	pop	{r7, pc}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	2000045c 	.word	0x2000045c
    2a74:	00002e09 	.word	0x00002e09
    2a78:	20000007 	.word	0x20000007

00002a7c <NVIC_EnableIRQ>:
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b082      	sub	sp, #8
    2a80:	af00      	add	r7, sp, #0
    2a82:	0002      	movs	r2, r0
    2a84:	1dfb      	adds	r3, r7, #7
    2a86:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2a88:	4b06      	ldr	r3, [pc, #24]	; (2aa4 <NVIC_EnableIRQ+0x28>)
    2a8a:	1dfa      	adds	r2, r7, #7
    2a8c:	7812      	ldrb	r2, [r2, #0]
    2a8e:	0011      	movs	r1, r2
    2a90:	221f      	movs	r2, #31
    2a92:	400a      	ands	r2, r1
    2a94:	2101      	movs	r1, #1
    2a96:	4091      	lsls	r1, r2
    2a98:	000a      	movs	r2, r1
    2a9a:	601a      	str	r2, [r3, #0]
}
    2a9c:	46c0      	nop			; (mov r8, r8)
    2a9e:	46bd      	mov	sp, r7
    2aa0:	b002      	add	sp, #8
    2aa2:	bd80      	pop	{r7, pc}
    2aa4:	e000e100 	.word	0xe000e100

00002aa8 <NVIC_SetPriority>:
{
    2aa8:	b5b0      	push	{r4, r5, r7, lr}
    2aaa:	b082      	sub	sp, #8
    2aac:	af00      	add	r7, sp, #0
    2aae:	0002      	movs	r2, r0
    2ab0:	6039      	str	r1, [r7, #0]
    2ab2:	1dfb      	adds	r3, r7, #7
    2ab4:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    2ab6:	1dfb      	adds	r3, r7, #7
    2ab8:	781b      	ldrb	r3, [r3, #0]
    2aba:	2b7f      	cmp	r3, #127	; 0x7f
    2abc:	d932      	bls.n	2b24 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    2abe:	4c2f      	ldr	r4, [pc, #188]	; (2b7c <NVIC_SetPriority+0xd4>)
    2ac0:	1dfb      	adds	r3, r7, #7
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	001a      	movs	r2, r3
    2ac6:	230f      	movs	r3, #15
    2ac8:	4013      	ands	r3, r2
    2aca:	3b08      	subs	r3, #8
    2acc:	0899      	lsrs	r1, r3, #2
    2ace:	4a2b      	ldr	r2, [pc, #172]	; (2b7c <NVIC_SetPriority+0xd4>)
    2ad0:	1dfb      	adds	r3, r7, #7
    2ad2:	781b      	ldrb	r3, [r3, #0]
    2ad4:	0018      	movs	r0, r3
    2ad6:	230f      	movs	r3, #15
    2ad8:	4003      	ands	r3, r0
    2ada:	3b08      	subs	r3, #8
    2adc:	089b      	lsrs	r3, r3, #2
    2ade:	3306      	adds	r3, #6
    2ae0:	009b      	lsls	r3, r3, #2
    2ae2:	18d3      	adds	r3, r2, r3
    2ae4:	3304      	adds	r3, #4
    2ae6:	681b      	ldr	r3, [r3, #0]
    2ae8:	1dfa      	adds	r2, r7, #7
    2aea:	7812      	ldrb	r2, [r2, #0]
    2aec:	0010      	movs	r0, r2
    2aee:	2203      	movs	r2, #3
    2af0:	4002      	ands	r2, r0
    2af2:	00d2      	lsls	r2, r2, #3
    2af4:	20ff      	movs	r0, #255	; 0xff
    2af6:	4090      	lsls	r0, r2
    2af8:	0002      	movs	r2, r0
    2afa:	43d2      	mvns	r2, r2
    2afc:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    2afe:	683b      	ldr	r3, [r7, #0]
    2b00:	019b      	lsls	r3, r3, #6
    2b02:	20ff      	movs	r0, #255	; 0xff
    2b04:	4018      	ands	r0, r3
    2b06:	1dfb      	adds	r3, r7, #7
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	001d      	movs	r5, r3
    2b0c:	2303      	movs	r3, #3
    2b0e:	402b      	ands	r3, r5
    2b10:	00db      	lsls	r3, r3, #3
    2b12:	4098      	lsls	r0, r3
    2b14:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    2b16:	431a      	orrs	r2, r3
    2b18:	1d8b      	adds	r3, r1, #6
    2b1a:	009b      	lsls	r3, r3, #2
    2b1c:	18e3      	adds	r3, r4, r3
    2b1e:	3304      	adds	r3, #4
    2b20:	601a      	str	r2, [r3, #0]
}
    2b22:	e027      	b.n	2b74 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    2b24:	4c16      	ldr	r4, [pc, #88]	; (2b80 <NVIC_SetPriority+0xd8>)
    2b26:	1dfb      	adds	r3, r7, #7
    2b28:	781b      	ldrb	r3, [r3, #0]
    2b2a:	b25b      	sxtb	r3, r3
    2b2c:	089b      	lsrs	r3, r3, #2
    2b2e:	4914      	ldr	r1, [pc, #80]	; (2b80 <NVIC_SetPriority+0xd8>)
    2b30:	1dfa      	adds	r2, r7, #7
    2b32:	7812      	ldrb	r2, [r2, #0]
    2b34:	b252      	sxtb	r2, r2
    2b36:	0892      	lsrs	r2, r2, #2
    2b38:	32c0      	adds	r2, #192	; 0xc0
    2b3a:	0092      	lsls	r2, r2, #2
    2b3c:	5852      	ldr	r2, [r2, r1]
    2b3e:	1df9      	adds	r1, r7, #7
    2b40:	7809      	ldrb	r1, [r1, #0]
    2b42:	0008      	movs	r0, r1
    2b44:	2103      	movs	r1, #3
    2b46:	4001      	ands	r1, r0
    2b48:	00c9      	lsls	r1, r1, #3
    2b4a:	20ff      	movs	r0, #255	; 0xff
    2b4c:	4088      	lsls	r0, r1
    2b4e:	0001      	movs	r1, r0
    2b50:	43c9      	mvns	r1, r1
    2b52:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    2b54:	683a      	ldr	r2, [r7, #0]
    2b56:	0192      	lsls	r2, r2, #6
    2b58:	20ff      	movs	r0, #255	; 0xff
    2b5a:	4010      	ands	r0, r2
    2b5c:	1dfa      	adds	r2, r7, #7
    2b5e:	7812      	ldrb	r2, [r2, #0]
    2b60:	0015      	movs	r5, r2
    2b62:	2203      	movs	r2, #3
    2b64:	402a      	ands	r2, r5
    2b66:	00d2      	lsls	r2, r2, #3
    2b68:	4090      	lsls	r0, r2
    2b6a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    2b6c:	430a      	orrs	r2, r1
    2b6e:	33c0      	adds	r3, #192	; 0xc0
    2b70:	009b      	lsls	r3, r3, #2
    2b72:	511a      	str	r2, [r3, r4]
}
    2b74:	46c0      	nop			; (mov r8, r8)
    2b76:	46bd      	mov	sp, r7
    2b78:	b002      	add	sp, #8
    2b7a:	bdb0      	pop	{r4, r5, r7, pc}
    2b7c:	e000ed00 	.word	0xe000ed00
    2b80:	e000e100 	.word	0xe000e100

00002b84 <serial_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void serial_init(uint32_t baudrate) {
    2b84:	b590      	push	{r4, r7, lr}
    2b86:	b085      	sub	sp, #20
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]

	// TX (Pad0)
	#if (SERIAL_TX_PIN % 2) // Odd Pin
	PORT->Group[SERIAL_TX_GROUP].PMUX[SERIAL_TX_PMUX].bit.PMUXO = PORT_PMUX_PMUXO_D_Val;
	#else                  // Even Pin
	PORT->Group[SERIAL_TX_GROUP].PMUX[SERIAL_TX_PMUX].bit.PMUXE = PORT_PMUX_PMUXE_D_Val;
    2b8c:	4973      	ldr	r1, [pc, #460]	; (2d5c <serial_init+0x1d8>)
    2b8e:	22bb      	movs	r2, #187	; 0xbb
    2b90:	5c8b      	ldrb	r3, [r1, r2]
    2b92:	200f      	movs	r0, #15
    2b94:	4383      	bics	r3, r0
    2b96:	1c18      	adds	r0, r3, #0
    2b98:	2303      	movs	r3, #3
    2b9a:	4303      	orrs	r3, r0
    2b9c:	548b      	strb	r3, [r1, r2]
	#endif
	// Enable the PMUX
	PORT->Group[SERIAL_TX_GROUP].PINCFG[SERIAL_TX_PIN].bit.PMUXEN = 1;
    2b9e:	496f      	ldr	r1, [pc, #444]	; (2d5c <serial_init+0x1d8>)
    2ba0:	22d6      	movs	r2, #214	; 0xd6
    2ba2:	5c8b      	ldrb	r3, [r1, r2]
    2ba4:	2001      	movs	r0, #1
    2ba6:	4303      	orrs	r3, r0
    2ba8:	548b      	strb	r3, [r1, r2]

	// RX (Pad 1)
	#if (SERIAL_RX_PIN % 2) // Odd Pin
	PORT->Group[SERIAL_RX_GROUP].PMUX[SERIAL_RX_PMUX].bit.PMUXO = PORT_PMUX_PMUXO_D_Val;
    2baa:	496c      	ldr	r1, [pc, #432]	; (2d5c <serial_init+0x1d8>)
    2bac:	22bb      	movs	r2, #187	; 0xbb
    2bae:	5c8b      	ldrb	r3, [r1, r2]
    2bb0:	200f      	movs	r0, #15
    2bb2:	4003      	ands	r3, r0
    2bb4:	1c18      	adds	r0, r3, #0
    2bb6:	2330      	movs	r3, #48	; 0x30
    2bb8:	4303      	orrs	r3, r0
    2bba:	548b      	strb	r3, [r1, r2]
	#else                  // Even Pin
	PORT->Group[SERIAL_RX_GROUP].PMUX[SERIAL_RX_PMUX].bit.PMUXE = PORT_PMUX_PMUXE_D_Val;
	#endif
	// Enable the PMUX
	PORT->Group[SERIAL_RX_GROUP].PINCFG[SERIAL_RX_PIN].bit.PMUXEN = 1;
    2bbc:	4967      	ldr	r1, [pc, #412]	; (2d5c <serial_init+0x1d8>)
    2bbe:	22d7      	movs	r2, #215	; 0xd7
    2bc0:	5c8b      	ldrb	r3, [r1, r2]
    2bc2:	2001      	movs	r0, #1
    2bc4:	4303      	orrs	r3, r0
    2bc6:	548b      	strb	r3, [r1, r2]

	// Enable the power manager
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
    2bc8:	4b65      	ldr	r3, [pc, #404]	; (2d60 <serial_init+0x1dc>)
    2bca:	4a65      	ldr	r2, [pc, #404]	; (2d60 <serial_init+0x1dc>)
    2bcc:	6a12      	ldr	r2, [r2, #32]
    2bce:	2180      	movs	r1, #128	; 0x80
    2bd0:	430a      	orrs	r2, r1
    2bd2:	621a      	str	r2, [r3, #32]

	// Initialize the GCLK
	// Setting clock for the SERCOM5_CORE clock
	GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_ID(GCLK_CLKCTRL_ID_SERCOM5_CORE) |
    2bd4:	4b63      	ldr	r3, [pc, #396]	; (2d64 <serial_init+0x1e0>)
    2bd6:	4a64      	ldr	r2, [pc, #400]	; (2d68 <serial_init+0x1e4>)
    2bd8:	805a      	strh	r2, [r3, #2]
		GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN);
	// Wait for the GCLK to be synchronized
	while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	4b61      	ldr	r3, [pc, #388]	; (2d64 <serial_init+0x1e0>)
    2bde:	785b      	ldrb	r3, [r3, #1]
    2be0:	b2db      	uxtb	r3, r3
    2be2:	b25b      	sxtb	r3, r3
    2be4:	2b00      	cmp	r3, #0
    2be6:	dbf9      	blt.n	2bdc <serial_init+0x58>

	// Reset the USART and wait for synch
	SERCOM5->USART.CTRLA.bit.SWRST = 1;
    2be8:	4a60      	ldr	r2, [pc, #384]	; (2d6c <serial_init+0x1e8>)
    2bea:	6813      	ldr	r3, [r2, #0]
    2bec:	2101      	movs	r1, #1
    2bee:	430b      	orrs	r3, r1
    2bf0:	6013      	str	r3, [r2, #0]
	while (SERCOM5->USART.CTRLA.bit.SWRST || SERCOM5->USART.SYNCBUSY.bit.SWRST);
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	4b5d      	ldr	r3, [pc, #372]	; (2d6c <serial_init+0x1e8>)
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	07db      	lsls	r3, r3, #31
    2bfa:	0fdb      	lsrs	r3, r3, #31
    2bfc:	b2db      	uxtb	r3, r3
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d1f8      	bne.n	2bf4 <serial_init+0x70>
    2c02:	4b5a      	ldr	r3, [pc, #360]	; (2d6c <serial_init+0x1e8>)
    2c04:	69db      	ldr	r3, [r3, #28]
    2c06:	07db      	lsls	r3, r3, #31
    2c08:	0fdb      	lsrs	r3, r3, #31
    2c0a:	b2db      	uxtb	r3, r3
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d1f1      	bne.n	2bf4 <serial_init+0x70>

	// Set the USART controls
	SERCOM5->USART.CTRLA.bit.MODE   = 1; // Internal clock
    2c10:	4a56      	ldr	r2, [pc, #344]	; (2d6c <serial_init+0x1e8>)
    2c12:	6813      	ldr	r3, [r2, #0]
    2c14:	211c      	movs	r1, #28
    2c16:	438b      	bics	r3, r1
    2c18:	2104      	movs	r1, #4
    2c1a:	430b      	orrs	r3, r1
    2c1c:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.CMODE  = 0; // Asynchronous
    2c1e:	4a53      	ldr	r2, [pc, #332]	; (2d6c <serial_init+0x1e8>)
    2c20:	6813      	ldr	r3, [r2, #0]
    2c22:	4953      	ldr	r1, [pc, #332]	; (2d70 <serial_init+0x1ec>)
    2c24:	400b      	ands	r3, r1
    2c26:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.RXPO   = 3; // Pad 3
    2c28:	4a50      	ldr	r2, [pc, #320]	; (2d6c <serial_init+0x1e8>)
    2c2a:	6813      	ldr	r3, [r2, #0]
    2c2c:	21c0      	movs	r1, #192	; 0xc0
    2c2e:	0389      	lsls	r1, r1, #14
    2c30:	430b      	orrs	r3, r1
    2c32:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.TXPO   = 1; // Pad 2
    2c34:	4a4d      	ldr	r2, [pc, #308]	; (2d6c <serial_init+0x1e8>)
    2c36:	6813      	ldr	r3, [r2, #0]
    2c38:	494e      	ldr	r1, [pc, #312]	; (2d74 <serial_init+0x1f0>)
    2c3a:	400b      	ands	r3, r1
    2c3c:	2180      	movs	r1, #128	; 0x80
    2c3e:	0249      	lsls	r1, r1, #9
    2c40:	430b      	orrs	r3, r1
    2c42:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.SAMPR  = 1; // 16x with fractional generation
    2c44:	4a49      	ldr	r2, [pc, #292]	; (2d6c <serial_init+0x1e8>)
    2c46:	6813      	ldr	r3, [r2, #0]
    2c48:	494b      	ldr	r1, [pc, #300]	; (2d78 <serial_init+0x1f4>)
    2c4a:	400b      	ands	r3, r1
    2c4c:	2180      	movs	r1, #128	; 0x80
    2c4e:	0189      	lsls	r1, r1, #6
    2c50:	430b      	orrs	r3, r1
    2c52:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.DORD   = 1; // LSB first
    2c54:	4a45      	ldr	r2, [pc, #276]	; (2d6c <serial_init+0x1e8>)
    2c56:	6813      	ldr	r3, [r2, #0]
    2c58:	2180      	movs	r1, #128	; 0x80
    2c5a:	05c9      	lsls	r1, r1, #23
    2c5c:	430b      	orrs	r3, r1
    2c5e:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.FORM   = 0; // USART Frame - No Parity
    2c60:	4a42      	ldr	r2, [pc, #264]	; (2d6c <serial_init+0x1e8>)
    2c62:	6813      	ldr	r3, [r2, #0]
    2c64:	4945      	ldr	r1, [pc, #276]	; (2d7c <serial_init+0x1f8>)
    2c66:	400b      	ands	r3, r1
    2c68:	6013      	str	r3, [r2, #0]

	SERCOM5->USART.CTRLB.bit.CHSIZE = 0; // 8 bit
    2c6a:	4a40      	ldr	r2, [pc, #256]	; (2d6c <serial_init+0x1e8>)
    2c6c:	6853      	ldr	r3, [r2, #4]
    2c6e:	2107      	movs	r1, #7
    2c70:	438b      	bics	r3, r1
    2c72:	6053      	str	r3, [r2, #4]
	SERCOM5->USART.CTRLB.bit.SBMODE = 0; // 1 Stop bit
    2c74:	4a3d      	ldr	r2, [pc, #244]	; (2d6c <serial_init+0x1e8>)
    2c76:	6853      	ldr	r3, [r2, #4]
    2c78:	2140      	movs	r1, #64	; 0x40
    2c7a:	438b      	bics	r3, r1
    2c7c:	6053      	str	r3, [r2, #4]
	SERCOM5->USART.CTRLB.bit.RXEN   = 1;
    2c7e:	4a3b      	ldr	r2, [pc, #236]	; (2d6c <serial_init+0x1e8>)
    2c80:	6853      	ldr	r3, [r2, #4]
    2c82:	2180      	movs	r1, #128	; 0x80
    2c84:	0289      	lsls	r1, r1, #10
    2c86:	430b      	orrs	r3, r1
    2c88:	6053      	str	r3, [r2, #4]
	SERCOM5->USART.CTRLB.bit.TXEN   = 1;
    2c8a:	4a38      	ldr	r2, [pc, #224]	; (2d6c <serial_init+0x1e8>)
    2c8c:	6853      	ldr	r3, [r2, #4]
    2c8e:	2180      	movs	r1, #128	; 0x80
    2c90:	0249      	lsls	r1, r1, #9
    2c92:	430b      	orrs	r3, r1
    2c94:	6053      	str	r3, [r2, #4]

	// Calculate the baud rate
    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (48000000ul * 8.0) / (16 * baudrate);
    2c96:	687b      	ldr	r3, [r7, #4]
    2c98:	011a      	lsls	r2, r3, #4
    2c9a:	4b39      	ldr	r3, [pc, #228]	; (2d80 <serial_init+0x1fc>)
    2c9c:	0010      	movs	r0, r2
    2c9e:	4798      	blx	r3
    2ca0:	0002      	movs	r2, r0
    2ca2:	000b      	movs	r3, r1
    2ca4:	4c37      	ldr	r4, [pc, #220]	; (2d84 <serial_init+0x200>)
    2ca6:	2000      	movs	r0, #0
    2ca8:	4937      	ldr	r1, [pc, #220]	; (2d88 <serial_init+0x204>)
    2caa:	47a0      	blx	r4
    2cac:	0003      	movs	r3, r0
    2cae:	000c      	movs	r4, r1
    2cb0:	0019      	movs	r1, r3
    2cb2:	0022      	movs	r2, r4
    2cb4:	4b35      	ldr	r3, [pc, #212]	; (2d8c <serial_init+0x208>)
    2cb6:	0008      	movs	r0, r1
    2cb8:	0011      	movs	r1, r2
    2cba:	4798      	blx	r3
    2cbc:	0003      	movs	r3, r0
    2cbe:	60fb      	str	r3, [r7, #12]
    SERCOM5->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    2cc0:	4a2a      	ldr	r2, [pc, #168]	; (2d6c <serial_init+0x1e8>)
    2cc2:	68fb      	ldr	r3, [r7, #12]
    2cc4:	b2db      	uxtb	r3, r3
    2cc6:	1c19      	adds	r1, r3, #0
    2cc8:	2307      	movs	r3, #7
    2cca:	400b      	ands	r3, r1
    2ccc:	b2d9      	uxtb	r1, r3
    2cce:	8993      	ldrh	r3, [r2, #12]
    2cd0:	0348      	lsls	r0, r1, #13
    2cd2:	04db      	lsls	r3, r3, #19
    2cd4:	0cdb      	lsrs	r3, r3, #19
    2cd6:	1c19      	adds	r1, r3, #0
    2cd8:	1c03      	adds	r3, r0, #0
    2cda:	430b      	orrs	r3, r1
    2cdc:	8193      	strh	r3, [r2, #12]
    SERCOM5->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    2cde:	4a23      	ldr	r2, [pc, #140]	; (2d6c <serial_init+0x1e8>)
    2ce0:	68fb      	ldr	r3, [r7, #12]
    2ce2:	08db      	lsrs	r3, r3, #3
    2ce4:	b29b      	uxth	r3, r3
    2ce6:	04db      	lsls	r3, r3, #19
    2ce8:	0cdb      	lsrs	r3, r3, #19
    2cea:	b299      	uxth	r1, r3
    2cec:	8993      	ldrh	r3, [r2, #12]
    2cee:	04c9      	lsls	r1, r1, #19
    2cf0:	0cc8      	lsrs	r0, r1, #19
    2cf2:	0b5b      	lsrs	r3, r3, #13
    2cf4:	035b      	lsls	r3, r3, #13
    2cf6:	1c19      	adds	r1, r3, #0
    2cf8:	1c03      	adds	r3, r0, #0
    2cfa:	430b      	orrs	r3, r1
    2cfc:	8193      	strh	r3, [r2, #12]
	
	// Enable interrupts
	SERCOM5->USART.INTENSET.bit.TXC = 1;
    2cfe:	4a1b      	ldr	r2, [pc, #108]	; (2d6c <serial_init+0x1e8>)
    2d00:	7d93      	ldrb	r3, [r2, #22]
    2d02:	2102      	movs	r1, #2
    2d04:	430b      	orrs	r3, r1
    2d06:	7593      	strb	r3, [r2, #22]
	SERCOM5->USART.INTENSET.bit.RXC = 1;
    2d08:	4a18      	ldr	r2, [pc, #96]	; (2d6c <serial_init+0x1e8>)
    2d0a:	7d93      	ldrb	r3, [r2, #22]
    2d0c:	2104      	movs	r1, #4
    2d0e:	430b      	orrs	r3, r1
    2d10:	7593      	strb	r3, [r2, #22]
	NVIC_EnableIRQ(SERCOM5_IRQn);
    2d12:	200e      	movs	r0, #14
    2d14:	4b1e      	ldr	r3, [pc, #120]	; (2d90 <serial_init+0x20c>)
    2d16:	4798      	blx	r3
	NVIC_SetPriority(SERCOM5_IRQn, 3);
    2d18:	2103      	movs	r1, #3
    2d1a:	200e      	movs	r0, #14
    2d1c:	4b1d      	ldr	r3, [pc, #116]	; (2d94 <serial_init+0x210>)
    2d1e:	4798      	blx	r3

	// Enable the UART and sync
	SERCOM5->USART.CTRLA.bit.ENABLE = 1;
    2d20:	4a12      	ldr	r2, [pc, #72]	; (2d6c <serial_init+0x1e8>)
    2d22:	6813      	ldr	r3, [r2, #0]
    2d24:	2102      	movs	r1, #2
    2d26:	430b      	orrs	r3, r1
    2d28:	6013      	str	r3, [r2, #0]
	while (SERCOM5->USART.SYNCBUSY.bit.ENABLE);
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	4b0f      	ldr	r3, [pc, #60]	; (2d6c <serial_init+0x1e8>)
    2d2e:	69db      	ldr	r3, [r3, #28]
    2d30:	079b      	lsls	r3, r3, #30
    2d32:	0fdb      	lsrs	r3, r3, #31
    2d34:	b2db      	uxtb	r3, r3
    2d36:	2b00      	cmp	r3, #0
    2d38:	d1f8      	bne.n	2d2c <serial_init+0x1a8>

    // Set the defaults
    _serial_default.rx = _serial_default_rx;
    2d3a:	4b17      	ldr	r3, [pc, #92]	; (2d98 <serial_init+0x214>)
    2d3c:	4a17      	ldr	r2, [pc, #92]	; (2d9c <serial_init+0x218>)
    2d3e:	601a      	str	r2, [r3, #0]
    _serial_default.tx = _serial_default_tx;
    2d40:	4b15      	ldr	r3, [pc, #84]	; (2d98 <serial_init+0x214>)
    2d42:	4a17      	ldr	r2, [pc, #92]	; (2da0 <serial_init+0x21c>)
    2d44:	605a      	str	r2, [r3, #4]
    _serial_callback = _serial_default;
    2d46:	4b17      	ldr	r3, [pc, #92]	; (2da4 <serial_init+0x220>)
    2d48:	4a13      	ldr	r2, [pc, #76]	; (2d98 <serial_init+0x214>)
    2d4a:	ca03      	ldmia	r2!, {r0, r1}
    2d4c:	c303      	stmia	r3!, {r0, r1}

    // Prevent timeout
    _serial_active = 1;
    2d4e:	4b16      	ldr	r3, [pc, #88]	; (2da8 <serial_init+0x224>)
    2d50:	2201      	movs	r2, #1
    2d52:	701a      	strb	r2, [r3, #0]
}
    2d54:	46c0      	nop			; (mov r8, r8)
    2d56:	46bd      	mov	sp, r7
    2d58:	b005      	add	sp, #20
    2d5a:	bd90      	pop	{r4, r7, pc}
    2d5c:	41004400 	.word	0x41004400
    2d60:	40000400 	.word	0x40000400
    2d64:	40000c00 	.word	0x40000c00
    2d68:	00004019 	.word	0x00004019
    2d6c:	42001c00 	.word	0x42001c00
    2d70:	efffffff 	.word	0xefffffff
    2d74:	fffcffff 	.word	0xfffcffff
    2d78:	ffff1fff 	.word	0xffff1fff
    2d7c:	f0ffffff 	.word	0xf0ffffff
    2d80:	00005bf5 	.word	0x00005bf5
    2d84:	00004ef9 	.word	0x00004ef9
    2d88:	41b6e360 	.word	0x41b6e360
    2d8c:	00004171 	.word	0x00004171
    2d90:	00002a7d 	.word	0x00002a7d
    2d94:	00002aa9 	.word	0x00002aa9
    2d98:	2000046c 	.word	0x2000046c
    2d9c:	000030e5 	.word	0x000030e5
    2da0:	000030d9 	.word	0x000030d9
    2da4:	20000464 	.word	0x20000464
    2da8:	20000874 	.word	0x20000874

00002dac <serial_timeout>:

//==============================================================================
uint8_t serial_timeout() {
    2dac:	b580      	push	{r7, lr}
    2dae:	af00      	add	r7, sp, #0
    if (_serial_active) return _serial_active = 0;
    2db0:	4b07      	ldr	r3, [pc, #28]	; (2dd0 <serial_timeout+0x24>)
    2db2:	781b      	ldrb	r3, [r3, #0]
    2db4:	2b00      	cmp	r3, #0
    2db6:	d005      	beq.n	2dc4 <serial_timeout+0x18>
    2db8:	4b05      	ldr	r3, [pc, #20]	; (2dd0 <serial_timeout+0x24>)
    2dba:	2200      	movs	r2, #0
    2dbc:	701a      	strb	r2, [r3, #0]
    2dbe:	4b04      	ldr	r3, [pc, #16]	; (2dd0 <serial_timeout+0x24>)
    2dc0:	781b      	ldrb	r3, [r3, #0]
    2dc2:	e002      	b.n	2dca <serial_timeout+0x1e>
    else return serial_registered();
    2dc4:	4b03      	ldr	r3, [pc, #12]	; (2dd4 <serial_timeout+0x28>)
    2dc6:	4798      	blx	r3
    2dc8:	0003      	movs	r3, r0
}
    2dca:	0018      	movs	r0, r3
    2dcc:	46bd      	mov	sp, r7
    2dce:	bd80      	pop	{r7, pc}
    2dd0:	20000874 	.word	0x20000874
    2dd4:	00002f15 	.word	0x00002f15

00002dd8 <serial_tx_flag>:

//==============================================================================
uint8_t serial_tx_flag()  {
    2dd8:	b580      	push	{r7, lr}
    2dda:	af00      	add	r7, sp, #0
    return SERCOM5->USART.INTFLAG.bit.TXC;
    2ddc:	4b03      	ldr	r3, [pc, #12]	; (2dec <serial_tx_flag+0x14>)
    2dde:	7e1b      	ldrb	r3, [r3, #24]
    2de0:	079b      	lsls	r3, r3, #30
    2de2:	0fdb      	lsrs	r3, r3, #31
    2de4:	b2db      	uxtb	r3, r3
}
    2de6:	0018      	movs	r0, r3
    2de8:	46bd      	mov	sp, r7
    2dea:	bd80      	pop	{r7, pc}
    2dec:	42001c00 	.word	0x42001c00

00002df0 <serial_rx_flag>:

//==============================================================================
uint8_t serial_rx_flag() {
    2df0:	b580      	push	{r7, lr}
    2df2:	af00      	add	r7, sp, #0
	return SERCOM5->USART.INTFLAG.bit.RXC;
    2df4:	4b03      	ldr	r3, [pc, #12]	; (2e04 <serial_rx_flag+0x14>)
    2df6:	7e1b      	ldrb	r3, [r3, #24]
    2df8:	075b      	lsls	r3, r3, #29
    2dfa:	0fdb      	lsrs	r3, r3, #31
    2dfc:	b2db      	uxtb	r3, r3
}
    2dfe:	0018      	movs	r0, r3
    2e00:	46bd      	mov	sp, r7
    2e02:	bd80      	pop	{r7, pc}
    2e04:	42001c00 	.word	0x42001c00

00002e08 <serial_read>:

//==============================================================================
uint8_t serial_read() {
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    // Prevent timeout
    _serial_active = 1;
    2e0e:	4b08      	ldr	r3, [pc, #32]	; (2e30 <serial_read+0x28>)
    2e10:	2201      	movs	r2, #1
    2e12:	701a      	strb	r2, [r3, #0]

    uint8_t data = SERCOM5->USART.DATA.bit.DATA;
    2e14:	4b07      	ldr	r3, [pc, #28]	; (2e34 <serial_read+0x2c>)
    2e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2e18:	05db      	lsls	r3, r3, #23
    2e1a:	0ddb      	lsrs	r3, r3, #23
    2e1c:	b29a      	uxth	r2, r3
    2e1e:	1dfb      	adds	r3, r7, #7
    2e20:	701a      	strb	r2, [r3, #0]
    //serial_write(data); // for serial echo
    return data;
    2e22:	1dfb      	adds	r3, r7, #7
    2e24:	781b      	ldrb	r3, [r3, #0]
}
    2e26:	0018      	movs	r0, r3
    2e28:	46bd      	mov	sp, r7
    2e2a:	b002      	add	sp, #8
    2e2c:	bd80      	pop	{r7, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	20000874 	.word	0x20000874
    2e34:	42001c00 	.word	0x42001c00

00002e38 <serial_write>:

//==============================================================================
void serial_write(uint8_t data) {
    2e38:	b580      	push	{r7, lr}
    2e3a:	b082      	sub	sp, #8
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	0002      	movs	r2, r0
    2e40:	1dfb      	adds	r3, r7, #7
    2e42:	701a      	strb	r2, [r3, #0]
    // Prevent timeout
    _serial_active = 1;
    2e44:	4b0e      	ldr	r3, [pc, #56]	; (2e80 <serial_write+0x48>)
    2e46:	2201      	movs	r2, #1
    2e48:	701a      	strb	r2, [r3, #0]

	// Wait for buffer to be empty
	while (!SERCOM5->USART.INTFLAG.bit.DRE);
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	4b0d      	ldr	r3, [pc, #52]	; (2e84 <serial_write+0x4c>)
    2e4e:	7e1b      	ldrb	r3, [r3, #24]
    2e50:	07db      	lsls	r3, r3, #31
    2e52:	0fdb      	lsrs	r3, r3, #31
    2e54:	b2db      	uxtb	r3, r3
    2e56:	2b00      	cmp	r3, #0
    2e58:	d0f8      	beq.n	2e4c <serial_write+0x14>
	SERCOM5->USART.DATA.bit.DATA = data;
    2e5a:	4a0a      	ldr	r2, [pc, #40]	; (2e84 <serial_write+0x4c>)
    2e5c:	1dfb      	adds	r3, r7, #7
    2e5e:	781b      	ldrb	r3, [r3, #0]
    2e60:	05db      	lsls	r3, r3, #23
    2e62:	0ddb      	lsrs	r3, r3, #23
    2e64:	b299      	uxth	r1, r3
    2e66:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2e68:	05c9      	lsls	r1, r1, #23
    2e6a:	0dc8      	lsrs	r0, r1, #23
    2e6c:	0a5b      	lsrs	r3, r3, #9
    2e6e:	025b      	lsls	r3, r3, #9
    2e70:	1c19      	adds	r1, r3, #0
    2e72:	1c03      	adds	r3, r0, #0
    2e74:	430b      	orrs	r3, r1
    2e76:	8513      	strh	r3, [r2, #40]	; 0x28
}
    2e78:	46c0      	nop			; (mov r8, r8)
    2e7a:	46bd      	mov	sp, r7
    2e7c:	b002      	add	sp, #8
    2e7e:	bd80      	pop	{r7, pc}
    2e80:	20000874 	.word	0x20000874
    2e84:	42001c00 	.word	0x42001c00

00002e88 <serial_register>:

//==============================================================================
uint8_t serial_register(serial_t callback) {
    2e88:	b580      	push	{r7, lr}
    2e8a:	b082      	sub	sp, #8
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	003b      	movs	r3, r7
    2e90:	6018      	str	r0, [r3, #0]
    2e92:	6059      	str	r1, [r3, #4]
    if (callback.rx && callback.tx) {
    2e94:	003b      	movs	r3, r7
    2e96:	681b      	ldr	r3, [r3, #0]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d017      	beq.n	2ecc <serial_register+0x44>
    2e9c:	003b      	movs	r3, r7
    2e9e:	685b      	ldr	r3, [r3, #4]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d013      	beq.n	2ecc <serial_register+0x44>
        if (!_serial_rx_registered() && !_serial_tx_registered()) {
    2ea4:	4b17      	ldr	r3, [pc, #92]	; (2f04 <serial_register+0x7c>)
    2ea6:	4798      	blx	r3
    2ea8:	1e03      	subs	r3, r0, #0
    2eaa:	d125      	bne.n	2ef8 <serial_register+0x70>
    2eac:	4b16      	ldr	r3, [pc, #88]	; (2f08 <serial_register+0x80>)
    2eae:	4798      	blx	r3
    2eb0:	1e03      	subs	r3, r0, #0
    2eb2:	d121      	bne.n	2ef8 <serial_register+0x70>
            serial_register_rx(callback.rx);
    2eb4:	003b      	movs	r3, r7
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	0018      	movs	r0, r3
    2eba:	4b14      	ldr	r3, [pc, #80]	; (2f0c <serial_register+0x84>)
    2ebc:	4798      	blx	r3
            serial_register_tx(callback.tx);
    2ebe:	003b      	movs	r3, r7
    2ec0:	685b      	ldr	r3, [r3, #4]
    2ec2:	0018      	movs	r0, r3
    2ec4:	4b12      	ldr	r3, [pc, #72]	; (2f10 <serial_register+0x88>)
    2ec6:	4798      	blx	r3
            return 1;
    2ec8:	2301      	movs	r3, #1
    2eca:	e017      	b.n	2efc <serial_register+0x74>
        }
    }

    else if (callback.rx) {
    2ecc:	003b      	movs	r3, r7
    2ece:	681b      	ldr	r3, [r3, #0]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d006      	beq.n	2ee2 <serial_register+0x5a>
        return serial_register_rx(callback.rx);
    2ed4:	003b      	movs	r3, r7
    2ed6:	681b      	ldr	r3, [r3, #0]
    2ed8:	0018      	movs	r0, r3
    2eda:	4b0c      	ldr	r3, [pc, #48]	; (2f0c <serial_register+0x84>)
    2edc:	4798      	blx	r3
    2ede:	0003      	movs	r3, r0
    2ee0:	e00c      	b.n	2efc <serial_register+0x74>
    }

    else if (callback.tx) {
    2ee2:	003b      	movs	r3, r7
    2ee4:	685b      	ldr	r3, [r3, #4]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d007      	beq.n	2efa <serial_register+0x72>
        return serial_register_tx(callback.tx);
    2eea:	003b      	movs	r3, r7
    2eec:	685b      	ldr	r3, [r3, #4]
    2eee:	0018      	movs	r0, r3
    2ef0:	4b07      	ldr	r3, [pc, #28]	; (2f10 <serial_register+0x88>)
    2ef2:	4798      	blx	r3
    2ef4:	0003      	movs	r3, r0
    2ef6:	e001      	b.n	2efc <serial_register+0x74>
        if (!_serial_rx_registered() && !_serial_tx_registered()) {
    2ef8:	46c0      	nop			; (mov r8, r8)
    }

    return 0;
    2efa:	2300      	movs	r3, #0
}
    2efc:	0018      	movs	r0, r3
    2efe:	46bd      	mov	sp, r7
    2f00:	b002      	add	sp, #8
    2f02:	bd80      	pop	{r7, pc}
    2f04:	00003079 	.word	0x00003079
    2f08:	0000309d 	.word	0x0000309d
    2f0c:	00002f79 	.word	0x00002f79
    2f10:	0000300d 	.word	0x0000300d

00002f14 <serial_registered>:

//==============================================================================
uint8_t serial_registered() {
    2f14:	b580      	push	{r7, lr}
    2f16:	af00      	add	r7, sp, #0
    return ((_serial_callback.rx != _serial_default.rx) || 
    2f18:	4b09      	ldr	r3, [pc, #36]	; (2f40 <serial_registered+0x2c>)
    2f1a:	681a      	ldr	r2, [r3, #0]
    2f1c:	4b09      	ldr	r3, [pc, #36]	; (2f44 <serial_registered+0x30>)
    2f1e:	681b      	ldr	r3, [r3, #0]
    2f20:	429a      	cmp	r2, r3
    2f22:	d105      	bne.n	2f30 <serial_registered+0x1c>
            (_serial_callback.tx != _serial_default.tx));
    2f24:	4b06      	ldr	r3, [pc, #24]	; (2f40 <serial_registered+0x2c>)
    2f26:	685a      	ldr	r2, [r3, #4]
    2f28:	4b06      	ldr	r3, [pc, #24]	; (2f44 <serial_registered+0x30>)
    2f2a:	685b      	ldr	r3, [r3, #4]
    return ((_serial_callback.rx != _serial_default.rx) || 
    2f2c:	429a      	cmp	r2, r3
    2f2e:	d001      	beq.n	2f34 <serial_registered+0x20>
    2f30:	2301      	movs	r3, #1
    2f32:	e000      	b.n	2f36 <serial_registered+0x22>
    2f34:	2300      	movs	r3, #0
    2f36:	b2db      	uxtb	r3, r3
}
    2f38:	0018      	movs	r0, r3
    2f3a:	46bd      	mov	sp, r7
    2f3c:	bd80      	pop	{r7, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	20000464 	.word	0x20000464
    2f44:	2000046c 	.word	0x2000046c

00002f48 <serial_unregister>:

//==============================================================================
void serial_unregister(serial_t callback) {
    2f48:	b580      	push	{r7, lr}
    2f4a:	b082      	sub	sp, #8
    2f4c:	af00      	add	r7, sp, #0
    2f4e:	003b      	movs	r3, r7
    2f50:	6018      	str	r0, [r3, #0]
    2f52:	6059      	str	r1, [r3, #4]
    serial_unregister_rx(callback.rx);
    2f54:	003b      	movs	r3, r7
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	0018      	movs	r0, r3
    2f5a:	4b05      	ldr	r3, [pc, #20]	; (2f70 <serial_unregister+0x28>)
    2f5c:	4798      	blx	r3
    serial_unregister_tx(callback.tx);
    2f5e:	003b      	movs	r3, r7
    2f60:	685b      	ldr	r3, [r3, #4]
    2f62:	0018      	movs	r0, r3
    2f64:	4b03      	ldr	r3, [pc, #12]	; (2f74 <serial_unregister+0x2c>)
    2f66:	4798      	blx	r3
}
    2f68:	46c0      	nop			; (mov r8, r8)
    2f6a:	46bd      	mov	sp, r7
    2f6c:	b002      	add	sp, #8
    2f6e:	bd80      	pop	{r7, pc}
    2f70:	00002fb1 	.word	0x00002fb1
    2f74:	00003045 	.word	0x00003045

00002f78 <serial_register_rx>:
void serial_set_default(serial_t callback) {
    _serial_default = callback;
}

//==============================================================================
uint8_t serial_register_rx(serial_callback_t callback) {
    2f78:	b580      	push	{r7, lr}
    2f7a:	b082      	sub	sp, #8
    2f7c:	af00      	add	r7, sp, #0
    2f7e:	6078      	str	r0, [r7, #4]
    if (!_serial_rx_registered()) {
    2f80:	4b08      	ldr	r3, [pc, #32]	; (2fa4 <serial_register_rx+0x2c>)
    2f82:	4798      	blx	r3
    2f84:	1e03      	subs	r3, r0, #0
    2f86:	d107      	bne.n	2f98 <serial_register_rx+0x20>
        _serial_active = 1;
    2f88:	4b07      	ldr	r3, [pc, #28]	; (2fa8 <serial_register_rx+0x30>)
    2f8a:	2201      	movs	r2, #1
    2f8c:	701a      	strb	r2, [r3, #0]
        _serial_callback.rx = callback;
    2f8e:	4b07      	ldr	r3, [pc, #28]	; (2fac <serial_register_rx+0x34>)
    2f90:	687a      	ldr	r2, [r7, #4]
    2f92:	601a      	str	r2, [r3, #0]
        return 1;
    2f94:	2301      	movs	r3, #1
    2f96:	e000      	b.n	2f9a <serial_register_rx+0x22>
    }
    return 0;
    2f98:	2300      	movs	r3, #0
}
    2f9a:	0018      	movs	r0, r3
    2f9c:	46bd      	mov	sp, r7
    2f9e:	b002      	add	sp, #8
    2fa0:	bd80      	pop	{r7, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	00003079 	.word	0x00003079
    2fa8:	20000874 	.word	0x20000874
    2fac:	20000464 	.word	0x20000464

00002fb0 <serial_unregister_rx>:

//==============================================================================
void serial_unregister_rx(serial_callback_t callback) {
    2fb0:	b580      	push	{r7, lr}
    2fb2:	b082      	sub	sp, #8
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	6078      	str	r0, [r7, #4]
    if (_serial_callback.rx == callback) {
    2fb8:	4b07      	ldr	r3, [pc, #28]	; (2fd8 <serial_unregister_rx+0x28>)
    2fba:	681a      	ldr	r2, [r3, #0]
    2fbc:	687b      	ldr	r3, [r7, #4]
    2fbe:	429a      	cmp	r2, r3
    2fc0:	d106      	bne.n	2fd0 <serial_unregister_rx+0x20>
        _serial_active = 1;
    2fc2:	4b06      	ldr	r3, [pc, #24]	; (2fdc <serial_unregister_rx+0x2c>)
    2fc4:	2201      	movs	r2, #1
    2fc6:	701a      	strb	r2, [r3, #0]
        _serial_callback.rx = _serial_default.rx;
    2fc8:	4b05      	ldr	r3, [pc, #20]	; (2fe0 <serial_unregister_rx+0x30>)
    2fca:	681a      	ldr	r2, [r3, #0]
    2fcc:	4b02      	ldr	r3, [pc, #8]	; (2fd8 <serial_unregister_rx+0x28>)
    2fce:	601a      	str	r2, [r3, #0]
    }
}
    2fd0:	46c0      	nop			; (mov r8, r8)
    2fd2:	46bd      	mov	sp, r7
    2fd4:	b002      	add	sp, #8
    2fd6:	bd80      	pop	{r7, pc}
    2fd8:	20000464 	.word	0x20000464
    2fdc:	20000874 	.word	0x20000874
    2fe0:	2000046c 	.word	0x2000046c

00002fe4 <serial_set_default_rx>:

//==============================================================================
void serial_set_default_rx(serial_callback_t callback) {
    2fe4:	b580      	push	{r7, lr}
    2fe6:	b082      	sub	sp, #8
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
    serial_register_rx(callback);
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	0018      	movs	r0, r3
    2ff0:	4b04      	ldr	r3, [pc, #16]	; (3004 <serial_set_default_rx+0x20>)
    2ff2:	4798      	blx	r3
    _serial_default.rx = callback;
    2ff4:	4b04      	ldr	r3, [pc, #16]	; (3008 <serial_set_default_rx+0x24>)
    2ff6:	687a      	ldr	r2, [r7, #4]
    2ff8:	601a      	str	r2, [r3, #0]
}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	46bd      	mov	sp, r7
    2ffe:	b002      	add	sp, #8
    3000:	bd80      	pop	{r7, pc}
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	00002f79 	.word	0x00002f79
    3008:	2000046c 	.word	0x2000046c

0000300c <serial_register_tx>:

//==============================================================================
uint8_t serial_register_tx(serial_callback_t callback) {
    300c:	b580      	push	{r7, lr}
    300e:	b082      	sub	sp, #8
    3010:	af00      	add	r7, sp, #0
    3012:	6078      	str	r0, [r7, #4]
    if (!_serial_tx_registered()) {
    3014:	4b08      	ldr	r3, [pc, #32]	; (3038 <serial_register_tx+0x2c>)
    3016:	4798      	blx	r3
    3018:	1e03      	subs	r3, r0, #0
    301a:	d107      	bne.n	302c <serial_register_tx+0x20>
        _serial_active = 1;
    301c:	4b07      	ldr	r3, [pc, #28]	; (303c <serial_register_tx+0x30>)
    301e:	2201      	movs	r2, #1
    3020:	701a      	strb	r2, [r3, #0]
        _serial_callback.tx = callback;
    3022:	4b07      	ldr	r3, [pc, #28]	; (3040 <serial_register_tx+0x34>)
    3024:	687a      	ldr	r2, [r7, #4]
    3026:	605a      	str	r2, [r3, #4]
        return 1;
    3028:	2301      	movs	r3, #1
    302a:	e000      	b.n	302e <serial_register_tx+0x22>
    }

    return 0;
    302c:	2300      	movs	r3, #0
}
    302e:	0018      	movs	r0, r3
    3030:	46bd      	mov	sp, r7
    3032:	b002      	add	sp, #8
    3034:	bd80      	pop	{r7, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	0000309d 	.word	0x0000309d
    303c:	20000874 	.word	0x20000874
    3040:	20000464 	.word	0x20000464

00003044 <serial_unregister_tx>:

//==============================================================================
void serial_unregister_tx(serial_callback_t callback) {
    3044:	b580      	push	{r7, lr}
    3046:	b082      	sub	sp, #8
    3048:	af00      	add	r7, sp, #0
    304a:	6078      	str	r0, [r7, #4]
    if (_serial_callback.tx == callback) {
    304c:	4b07      	ldr	r3, [pc, #28]	; (306c <serial_unregister_tx+0x28>)
    304e:	685a      	ldr	r2, [r3, #4]
    3050:	687b      	ldr	r3, [r7, #4]
    3052:	429a      	cmp	r2, r3
    3054:	d106      	bne.n	3064 <serial_unregister_tx+0x20>
        _serial_active = 1;
    3056:	4b06      	ldr	r3, [pc, #24]	; (3070 <serial_unregister_tx+0x2c>)
    3058:	2201      	movs	r2, #1
    305a:	701a      	strb	r2, [r3, #0]
        _serial_callback.tx = _serial_default.tx;
    305c:	4b05      	ldr	r3, [pc, #20]	; (3074 <serial_unregister_tx+0x30>)
    305e:	685a      	ldr	r2, [r3, #4]
    3060:	4b02      	ldr	r3, [pc, #8]	; (306c <serial_unregister_tx+0x28>)
    3062:	605a      	str	r2, [r3, #4]
    }
}
    3064:	46c0      	nop			; (mov r8, r8)
    3066:	46bd      	mov	sp, r7
    3068:	b002      	add	sp, #8
    306a:	bd80      	pop	{r7, pc}
    306c:	20000464 	.word	0x20000464
    3070:	20000874 	.word	0x20000874
    3074:	2000046c 	.word	0x2000046c

00003078 <_serial_rx_registered>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _serial_rx_registered() {
    3078:	b580      	push	{r7, lr}
    307a:	af00      	add	r7, sp, #0
    return (_serial_callback.rx != _serial_default.rx);
    307c:	4b05      	ldr	r3, [pc, #20]	; (3094 <_serial_rx_registered+0x1c>)
    307e:	681a      	ldr	r2, [r3, #0]
    3080:	4b05      	ldr	r3, [pc, #20]	; (3098 <_serial_rx_registered+0x20>)
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	1ad3      	subs	r3, r2, r3
    3086:	1e5a      	subs	r2, r3, #1
    3088:	4193      	sbcs	r3, r2
    308a:	b2db      	uxtb	r3, r3
}
    308c:	0018      	movs	r0, r3
    308e:	46bd      	mov	sp, r7
    3090:	bd80      	pop	{r7, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	20000464 	.word	0x20000464
    3098:	2000046c 	.word	0x2000046c

0000309c <_serial_tx_registered>:

//==============================================================================
uint8_t _serial_tx_registered() {
    309c:	b580      	push	{r7, lr}
    309e:	af00      	add	r7, sp, #0
    return (_serial_callback.tx != _serial_default.tx);
    30a0:	4b05      	ldr	r3, [pc, #20]	; (30b8 <_serial_tx_registered+0x1c>)
    30a2:	685a      	ldr	r2, [r3, #4]
    30a4:	4b05      	ldr	r3, [pc, #20]	; (30bc <_serial_tx_registered+0x20>)
    30a6:	685b      	ldr	r3, [r3, #4]
    30a8:	1ad3      	subs	r3, r2, r3
    30aa:	1e5a      	subs	r2, r3, #1
    30ac:	4193      	sbcs	r3, r2
    30ae:	b2db      	uxtb	r3, r3
}
    30b0:	0018      	movs	r0, r3
    30b2:	46bd      	mov	sp, r7
    30b4:	bd80      	pop	{r7, pc}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	20000464 	.word	0x20000464
    30bc:	2000046c 	.word	0x2000046c

000030c0 <_serial_tx_clear>:

//==============================================================================
void _serial_tx_clear() {
    30c0:	b580      	push	{r7, lr}
    30c2:	af00      	add	r7, sp, #0
    SERCOM5->USART.INTFLAG.bit.TXC = 1;
    30c4:	4a03      	ldr	r2, [pc, #12]	; (30d4 <_serial_tx_clear+0x14>)
    30c6:	7e13      	ldrb	r3, [r2, #24]
    30c8:	2102      	movs	r1, #2
    30ca:	430b      	orrs	r3, r1
    30cc:	7613      	strb	r3, [r2, #24]
}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	46bd      	mov	sp, r7
    30d2:	bd80      	pop	{r7, pc}
    30d4:	42001c00 	.word	0x42001c00

000030d8 <_serial_default_tx>:
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _serial_default_tx()
{
    30d8:	b580      	push	{r7, lr}
    30da:	af00      	add	r7, sp, #0
    return 0;
    30dc:	2300      	movs	r3, #0
}
    30de:	0018      	movs	r0, r3
    30e0:	46bd      	mov	sp, r7
    30e2:	bd80      	pop	{r7, pc}

000030e4 <_serial_default_rx>:

//==============================================================================
uint8_t _serial_default_rx()
{
    30e4:	b580      	push	{r7, lr}
    30e6:	af00      	add	r7, sp, #0
    serial_read();
    30e8:	4b02      	ldr	r3, [pc, #8]	; (30f4 <_serial_default_rx+0x10>)
    30ea:	4798      	blx	r3
    return 0;
    30ec:	2300      	movs	r3, #0
}
    30ee:	0018      	movs	r0, r3
    30f0:	46bd      	mov	sp, r7
    30f2:	bd80      	pop	{r7, pc}
    30f4:	00002e09 	.word	0x00002e09

000030f8 <SERCOM5_Handler>:
//     | .__/ |  \  .__/
//
//------------------------------------------------------------------------------

//==============================================================================
void SERCOM5_Handler() {
    30f8:	b580      	push	{r7, lr}
    30fa:	af00      	add	r7, sp, #0
    // Prevent timeout
    _serial_active = 1;
    30fc:	4b11      	ldr	r3, [pc, #68]	; (3144 <SERCOM5_Handler+0x4c>)
    30fe:	2201      	movs	r2, #1
    3100:	701a      	strb	r2, [r3, #0]

	if (serial_tx_flag()) {
    3102:	4b11      	ldr	r3, [pc, #68]	; (3148 <SERCOM5_Handler+0x50>)
    3104:	4798      	blx	r3
    3106:	1e03      	subs	r3, r0, #0
    3108:	d00b      	beq.n	3122 <SERCOM5_Handler+0x2a>
		// Clear the TX flag and call callback
		if (_serial_callback.tx()) {
    310a:	4b10      	ldr	r3, [pc, #64]	; (314c <SERCOM5_Handler+0x54>)
    310c:	685b      	ldr	r3, [r3, #4]
    310e:	4798      	blx	r3
    3110:	1e03      	subs	r3, r0, #0
    3112:	d003      	beq.n	311c <SERCOM5_Handler+0x24>
            _serial_callback.tx = _serial_default.tx;
    3114:	4b0e      	ldr	r3, [pc, #56]	; (3150 <SERCOM5_Handler+0x58>)
    3116:	685a      	ldr	r2, [r3, #4]
    3118:	4b0c      	ldr	r3, [pc, #48]	; (314c <SERCOM5_Handler+0x54>)
    311a:	605a      	str	r2, [r3, #4]
        }

        _serial_tx_clear();
    311c:	4b0d      	ldr	r3, [pc, #52]	; (3154 <SERCOM5_Handler+0x5c>)
    311e:	4798      	blx	r3
	} else if (serial_rx_flag()) {
		if (_serial_callback.rx()) {
            _serial_callback.rx = _serial_default.rx;
        }
	}
}
    3120:	e00c      	b.n	313c <SERCOM5_Handler+0x44>
	} else if (serial_rx_flag()) {
    3122:	4b0d      	ldr	r3, [pc, #52]	; (3158 <SERCOM5_Handler+0x60>)
    3124:	4798      	blx	r3
    3126:	1e03      	subs	r3, r0, #0
    3128:	d008      	beq.n	313c <SERCOM5_Handler+0x44>
		if (_serial_callback.rx()) {
    312a:	4b08      	ldr	r3, [pc, #32]	; (314c <SERCOM5_Handler+0x54>)
    312c:	681b      	ldr	r3, [r3, #0]
    312e:	4798      	blx	r3
    3130:	1e03      	subs	r3, r0, #0
    3132:	d003      	beq.n	313c <SERCOM5_Handler+0x44>
            _serial_callback.rx = _serial_default.rx;
    3134:	4b06      	ldr	r3, [pc, #24]	; (3150 <SERCOM5_Handler+0x58>)
    3136:	681a      	ldr	r2, [r3, #0]
    3138:	4b04      	ldr	r3, [pc, #16]	; (314c <SERCOM5_Handler+0x54>)
    313a:	601a      	str	r2, [r3, #0]
}
    313c:	46c0      	nop			; (mov r8, r8)
    313e:	46bd      	mov	sp, r7
    3140:	bd80      	pop	{r7, pc}
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	20000874 	.word	0x20000874
    3148:	00002dd9 	.word	0x00002dd9
    314c:	20000464 	.word	0x20000464
    3150:	2000046c 	.word	0x2000046c
    3154:	000030c1 	.word	0x000030c1
    3158:	00002df1 	.word	0x00002df1

0000315c <servos_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void servos_init(uint8_t addr) {
    315c:	b580      	push	{r7, lr}
    315e:	b082      	sub	sp, #8
    3160:	af00      	add	r7, sp, #0
    3162:	0002      	movs	r2, r0
    3164:	1dfb      	adds	r3, r7, #7
    3166:	701a      	strb	r2, [r3, #0]
    // Turn the device off (sleep)
    servos_stop(addr);
    3168:	1dfb      	adds	r3, r7, #7
    316a:	781b      	ldrb	r3, [r3, #0]
    316c:	0018      	movs	r0, r3
    316e:	4b24      	ldr	r3, [pc, #144]	; (3200 <servos_init+0xa4>)
    3170:	4798      	blx	r3

    timer_delay(50);
    3172:	2032      	movs	r0, #50	; 0x32
    3174:	4b23      	ldr	r3, [pc, #140]	; (3204 <servos_init+0xa8>)
    3176:	4798      	blx	r3

    // Set prescale
    while (i2c_registered());
    3178:	46c0      	nop			; (mov r8, r8)
    317a:	4b23      	ldr	r3, [pc, #140]	; (3208 <servos_init+0xac>)
    317c:	4798      	blx	r3
    317e:	1e03      	subs	r3, r0, #0
    3180:	d1fb      	bne.n	317a <servos_init+0x1e>
    while (!i2c_register(_servos_byte_callback));
    3182:	46c0      	nop			; (mov r8, r8)
    3184:	4b21      	ldr	r3, [pc, #132]	; (320c <servos_init+0xb0>)
    3186:	0018      	movs	r0, r3
    3188:	4b21      	ldr	r3, [pc, #132]	; (3210 <servos_init+0xb4>)
    318a:	4798      	blx	r3
    318c:	1e03      	subs	r3, r0, #0
    318e:	d0f9      	beq.n	3184 <servos_init+0x28>
    _servos_mode = SERVOS_REG;
    3190:	4b20      	ldr	r3, [pc, #128]	; (3214 <servos_init+0xb8>)
    3192:	2200      	movs	r2, #0
    3194:	701a      	strb	r2, [r3, #0]
    _servos_reg = PRE_SCALE;    // 20ms period -> 50 Hz
    3196:	4b20      	ldr	r3, [pc, #128]	; (3218 <servos_init+0xbc>)
    3198:	22fe      	movs	r2, #254	; 0xfe
    319a:	701a      	strb	r2, [r3, #0]
    _servos_data = 0x79;        // 50Hz = round(25MHz/4096* 50) - 1
    319c:	4b1f      	ldr	r3, [pc, #124]	; (321c <servos_init+0xc0>)
    319e:	2279      	movs	r2, #121	; 0x79
    31a0:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    31a2:	1dfb      	adds	r3, r7, #7
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	0018      	movs	r0, r3
    31a8:	4b1d      	ldr	r3, [pc, #116]	; (3220 <servos_init+0xc4>)
    31aa:	4798      	blx	r3

    timer_delay(10);
    31ac:	200a      	movs	r0, #10
    31ae:	4b15      	ldr	r3, [pc, #84]	; (3204 <servos_init+0xa8>)
    31b0:	4798      	blx	r3

    // Turn the device back on
    while (i2c_registered());
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	4b14      	ldr	r3, [pc, #80]	; (3208 <servos_init+0xac>)
    31b6:	4798      	blx	r3
    31b8:	1e03      	subs	r3, r0, #0
    31ba:	d1fb      	bne.n	31b4 <servos_init+0x58>
    while (!i2c_register(_servos_byte_callback));
    31bc:	46c0      	nop			; (mov r8, r8)
    31be:	4b13      	ldr	r3, [pc, #76]	; (320c <servos_init+0xb0>)
    31c0:	0018      	movs	r0, r3
    31c2:	4b13      	ldr	r3, [pc, #76]	; (3210 <servos_init+0xb4>)
    31c4:	4798      	blx	r3
    31c6:	1e03      	subs	r3, r0, #0
    31c8:	d0f9      	beq.n	31be <servos_init+0x62>
    _servos_mode = SERVOS_REG;
    31ca:	4b12      	ldr	r3, [pc, #72]	; (3214 <servos_init+0xb8>)
    31cc:	2200      	movs	r2, #0
    31ce:	701a      	strb	r2, [r3, #0]
    _servos_reg = PWM_MODE_1;
    31d0:	4b11      	ldr	r3, [pc, #68]	; (3218 <servos_init+0xbc>)
    31d2:	2200      	movs	r2, #0
    31d4:	701a      	strb	r2, [r3, #0]
    _servos_data = PWM_MODE_1_AI;
    31d6:	4b11      	ldr	r3, [pc, #68]	; (321c <servos_init+0xc0>)
    31d8:	2220      	movs	r2, #32
    31da:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    31dc:	1dfb      	adds	r3, r7, #7
    31de:	781b      	ldrb	r3, [r3, #0]
    31e0:	0018      	movs	r0, r3
    31e2:	4b0f      	ldr	r3, [pc, #60]	; (3220 <servos_init+0xc4>)
    31e4:	4798      	blx	r3
    while (i2c_registered());
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	4b07      	ldr	r3, [pc, #28]	; (3208 <servos_init+0xac>)
    31ea:	4798      	blx	r3
    31ec:	1e03      	subs	r3, r0, #0
    31ee:	d1fb      	bne.n	31e8 <servos_init+0x8c>

    timer_delay(10);
    31f0:	200a      	movs	r0, #10
    31f2:	4b04      	ldr	r3, [pc, #16]	; (3204 <servos_init+0xa8>)
    31f4:	4798      	blx	r3
}
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	46bd      	mov	sp, r7
    31fa:	b002      	add	sp, #8
    31fc:	bd80      	pop	{r7, pc}
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	00003225 	.word	0x00003225
    3204:	00003a99 	.word	0x00003a99
    3208:	000014d1 	.word	0x000014d1
    320c:	000037ad 	.word	0x000037ad
    3210:	000013f5 	.word	0x000013f5
    3214:	2000088d 	.word	0x2000088d
    3218:	2000088c 	.word	0x2000088c
    321c:	20000881 	.word	0x20000881
    3220:	00001309 	.word	0x00001309

00003224 <servos_stop>:

//==============================================================================
void servos_stop(uint8_t addr) {
    3224:	b580      	push	{r7, lr}
    3226:	b082      	sub	sp, #8
    3228:	af00      	add	r7, sp, #0
    322a:	0002      	movs	r2, r0
    322c:	1dfb      	adds	r3, r7, #7
    322e:	701a      	strb	r2, [r3, #0]
    // Turn the device off
    while (i2c_registered());
    3230:	46c0      	nop			; (mov r8, r8)
    3232:	4b11      	ldr	r3, [pc, #68]	; (3278 <servos_stop+0x54>)
    3234:	4798      	blx	r3
    3236:	1e03      	subs	r3, r0, #0
    3238:	d1fb      	bne.n	3232 <servos_stop+0xe>
    while (!i2c_register(_servos_byte_callback));
    323a:	46c0      	nop			; (mov r8, r8)
    323c:	4b0f      	ldr	r3, [pc, #60]	; (327c <servos_stop+0x58>)
    323e:	0018      	movs	r0, r3
    3240:	4b0f      	ldr	r3, [pc, #60]	; (3280 <servos_stop+0x5c>)
    3242:	4798      	blx	r3
    3244:	1e03      	subs	r3, r0, #0
    3246:	d0f9      	beq.n	323c <servos_stop+0x18>
    _servos_mode = SERVOS_REG;
    3248:	4b0e      	ldr	r3, [pc, #56]	; (3284 <servos_stop+0x60>)
    324a:	2200      	movs	r2, #0
    324c:	701a      	strb	r2, [r3, #0]
    _servos_reg = PWM_MODE_1;
    324e:	4b0e      	ldr	r3, [pc, #56]	; (3288 <servos_stop+0x64>)
    3250:	2200      	movs	r2, #0
    3252:	701a      	strb	r2, [r3, #0]
    _servos_data = PWM_MODE_1_SLEEP;
    3254:	4b0d      	ldr	r3, [pc, #52]	; (328c <servos_stop+0x68>)
    3256:	2210      	movs	r2, #16
    3258:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    325a:	1dfb      	adds	r3, r7, #7
    325c:	781b      	ldrb	r3, [r3, #0]
    325e:	0018      	movs	r0, r3
    3260:	4b0b      	ldr	r3, [pc, #44]	; (3290 <servos_stop+0x6c>)
    3262:	4798      	blx	r3
    while (i2c_registered());
    3264:	46c0      	nop			; (mov r8, r8)
    3266:	4b04      	ldr	r3, [pc, #16]	; (3278 <servos_stop+0x54>)
    3268:	4798      	blx	r3
    326a:	1e03      	subs	r3, r0, #0
    326c:	d1fb      	bne.n	3266 <servos_stop+0x42>
}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	46bd      	mov	sp, r7
    3272:	b002      	add	sp, #8
    3274:	bd80      	pop	{r7, pc}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	000014d1 	.word	0x000014d1
    327c:	000037ad 	.word	0x000037ad
    3280:	000013f5 	.word	0x000013f5
    3284:	2000088d 	.word	0x2000088d
    3288:	2000088c 	.word	0x2000088c
    328c:	20000881 	.word	0x20000881
    3290:	00001309 	.word	0x00001309

00003294 <servos_write>:

//==============================================================================
uint8_t servos_write(uint8_t addr, hand_ang_t* bytes) {
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	0002      	movs	r2, r0
    329c:	6039      	str	r1, [r7, #0]
    329e:	1dfb      	adds	r3, r7, #7
    32a0:	701a      	strb	r2, [r3, #0]
    // 20ms -> 50Hz
    // 1ms = -90 deg
    // 2ms = +90 deg
    // 1ms = 4096/20 ~= 205
    // pw = 205+(ang*205/255) <- convert angle to steps
    if (i2c_register(_servos_regs_callback)) {
    32a2:	4b0d      	ldr	r3, [pc, #52]	; (32d8 <servos_write+0x44>)
    32a4:	0018      	movs	r0, r3
    32a6:	4b0d      	ldr	r3, [pc, #52]	; (32dc <servos_write+0x48>)
    32a8:	4798      	blx	r3
    32aa:	1e03      	subs	r3, r0, #0
    32ac:	d00f      	beq.n	32ce <servos_write+0x3a>
        _servos_mode = SERVOS_REG;
    32ae:	4b0c      	ldr	r3, [pc, #48]	; (32e0 <servos_write+0x4c>)
    32b0:	2200      	movs	r2, #0
    32b2:	701a      	strb	r2, [r3, #0]
        _servos_reg = PWM0_ON_L;
    32b4:	4b0b      	ldr	r3, [pc, #44]	; (32e4 <servos_write+0x50>)
    32b6:	2206      	movs	r2, #6
    32b8:	701a      	strb	r2, [r3, #0]
        _servos_list = bytes;
    32ba:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <servos_write+0x54>)
    32bc:	683a      	ldr	r2, [r7, #0]
    32be:	601a      	str	r2, [r3, #0]
        i2c_begin_write(addr);
    32c0:	1dfb      	adds	r3, r7, #7
    32c2:	781b      	ldrb	r3, [r3, #0]
    32c4:	0018      	movs	r0, r3
    32c6:	4b09      	ldr	r3, [pc, #36]	; (32ec <servos_write+0x58>)
    32c8:	4798      	blx	r3
        return 1;
    32ca:	2301      	movs	r3, #1
    32cc:	e000      	b.n	32d0 <servos_write+0x3c>
    }

    return 0;
    32ce:	2300      	movs	r3, #0
}
    32d0:	0018      	movs	r0, r3
    32d2:	46bd      	mov	sp, r7
    32d4:	b002      	add	sp, #8
    32d6:	bd80      	pop	{r7, pc}
    32d8:	0000381d 	.word	0x0000381d
    32dc:	000013f5 	.word	0x000013f5
    32e0:	2000088d 	.word	0x2000088d
    32e4:	2000088c 	.word	0x2000088c
    32e8:	20000884 	.word	0x20000884
    32ec:	00001309 	.word	0x00001309

000032f0 <servos_write_complete>:

//==============================================================================
uint8_t servos_write_complete() {
    32f0:	b580      	push	{r7, lr}
    32f2:	af00      	add	r7, sp, #0
    return (_servos_mode == SERVOS_DONE);
    32f4:	4b04      	ldr	r3, [pc, #16]	; (3308 <servos_write_complete+0x18>)
    32f6:	781b      	ldrb	r3, [r3, #0]
    32f8:	b2db      	uxtb	r3, r3
    32fa:	3b03      	subs	r3, #3
    32fc:	425a      	negs	r2, r3
    32fe:	4153      	adcs	r3, r2
    3300:	b2db      	uxtb	r3, r3
}
    3302:	0018      	movs	r0, r3
    3304:	46bd      	mov	sp, r7
    3306:	bd80      	pop	{r7, pc}
    3308:	2000088d 	.word	0x2000088d

0000330c <servos_compute>:

//==============================================================================
uint8_t servos_compute(hand_pos_t* data, hand_ang_t* output) {
    330c:	b580      	push	{r7, lr}
    330e:	b082      	sub	sp, #8
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
    3314:	6039      	str	r1, [r7, #0]
    _servos_comp_idx = 0;
    3316:	4b07      	ldr	r3, [pc, #28]	; (3334 <servos_compute+0x28>)
    3318:	2200      	movs	r2, #0
    331a:	701a      	strb	r2, [r3, #0]
    _servos_comp_data = data;
    331c:	4b06      	ldr	r3, [pc, #24]	; (3338 <servos_compute+0x2c>)
    331e:	687a      	ldr	r2, [r7, #4]
    3320:	601a      	str	r2, [r3, #0]
    _servos_comp_output = output;
    3322:	4b06      	ldr	r3, [pc, #24]	; (333c <servos_compute+0x30>)
    3324:	683a      	ldr	r2, [r7, #0]
    3326:	601a      	str	r2, [r3, #0]
    return 1;
    3328:	2301      	movs	r3, #1
}
    332a:	0018      	movs	r0, r3
    332c:	46bd      	mov	sp, r7
    332e:	b002      	add	sp, #8
    3330:	bd80      	pop	{r7, pc}
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	20000880 	.word	0x20000880
    3338:	2000087c 	.word	0x2000087c
    333c:	20000888 	.word	0x20000888

00003340 <servos_compute_complete>:

//==============================================================================
uint8_t servos_compute_complete() {
    3340:	b590      	push	{r4, r7, lr}
    3342:	b083      	sub	sp, #12
    3344:	af00      	add	r7, sp, #0
    uint8_t complete;

    switch (_servos_comp_idx) {
    3346:	4bb5      	ldr	r3, [pc, #724]	; (361c <servos_compute_complete+0x2dc>)
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	2b0f      	cmp	r3, #15
    334c:	d900      	bls.n	3350 <servos_compute_complete+0x10>
    334e:	e15e      	b.n	360e <servos_compute_complete+0x2ce>
    3350:	009a      	lsls	r2, r3, #2
    3352:	4bb3      	ldr	r3, [pc, #716]	; (3620 <servos_compute_complete+0x2e0>)
    3354:	18d3      	adds	r3, r2, r3
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	469f      	mov	pc, r3
        case SERVOS_COMP_PNT_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    335a:	4bb2      	ldr	r3, [pc, #712]	; (3624 <servos_compute_complete+0x2e4>)
    335c:	681a      	ldr	r2, [r3, #0]
    335e:	4baf      	ldr	r3, [pc, #700]	; (361c <servos_compute_complete+0x2dc>)
    3360:	781b      	ldrb	r3, [r3, #0]
    3362:	1c59      	adds	r1, r3, #1
    3364:	b2c8      	uxtb	r0, r1
    3366:	49ad      	ldr	r1, [pc, #692]	; (361c <servos_compute_complete+0x2dc>)
    3368:	7008      	strb	r0, [r1, #0]
    336a:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnt.tip, 
    336c:	4bae      	ldr	r3, [pc, #696]	; (3628 <servos_compute_complete+0x2e8>)
    336e:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3370:	001a      	movs	r2, r3
                &_servos_comp_data->pnt.mid);
    3372:	4bad      	ldr	r3, [pc, #692]	; (3628 <servos_compute_complete+0x2e8>)
    3374:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3376:	3306      	adds	r3, #6
    3378:	0019      	movs	r1, r3
    337a:	0010      	movs	r0, r2
    337c:	4bab      	ldr	r3, [pc, #684]	; (362c <servos_compute_complete+0x2ec>)
    337e:	4798      	blx	r3
    3380:	0003      	movs	r3, r0
    3382:	7023      	strb	r3, [r4, #0]
        } break;
    3384:	e143      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNT_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3386:	4ba7      	ldr	r3, [pc, #668]	; (3624 <servos_compute_complete+0x2e4>)
    3388:	681a      	ldr	r2, [r3, #0]
    338a:	4ba4      	ldr	r3, [pc, #656]	; (361c <servos_compute_complete+0x2dc>)
    338c:	781b      	ldrb	r3, [r3, #0]
    338e:	1c59      	adds	r1, r3, #1
    3390:	b2c8      	uxtb	r0, r1
    3392:	49a2      	ldr	r1, [pc, #648]	; (361c <servos_compute_complete+0x2dc>)
    3394:	7008      	strb	r0, [r1, #0]
    3396:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnt.mid,
    3398:	4ba3      	ldr	r3, [pc, #652]	; (3628 <servos_compute_complete+0x2e8>)
    339a:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    339c:	1d9a      	adds	r2, r3, #6
                &_servos_comp_data->pnt.bs);
    339e:	4ba2      	ldr	r3, [pc, #648]	; (3628 <servos_compute_complete+0x2e8>)
    33a0:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    33a2:	330c      	adds	r3, #12
    33a4:	0019      	movs	r1, r3
    33a6:	0010      	movs	r0, r2
    33a8:	4ba0      	ldr	r3, [pc, #640]	; (362c <servos_compute_complete+0x2ec>)
    33aa:	4798      	blx	r3
    33ac:	0003      	movs	r3, r0
    33ae:	7023      	strb	r3, [r4, #0]
        } break;
    33b0:	e12d      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNT_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    33b2:	4b9c      	ldr	r3, [pc, #624]	; (3624 <servos_compute_complete+0x2e4>)
    33b4:	681a      	ldr	r2, [r3, #0]
    33b6:	4b99      	ldr	r3, [pc, #612]	; (361c <servos_compute_complete+0x2dc>)
    33b8:	781b      	ldrb	r3, [r3, #0]
    33ba:	1c59      	adds	r1, r3, #1
    33bc:	b2c8      	uxtb	r0, r1
    33be:	4997      	ldr	r1, [pc, #604]	; (361c <servos_compute_complete+0x2dc>)
    33c0:	7008      	strb	r0, [r1, #0]
    33c2:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnt.bs,
    33c4:	4b98      	ldr	r3, [pc, #608]	; (3628 <servos_compute_complete+0x2e8>)
    33c6:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    33c8:	330c      	adds	r3, #12
    33ca:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    33cc:	4b96      	ldr	r3, [pc, #600]	; (3628 <servos_compute_complete+0x2e8>)
    33ce:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    33d0:	335a      	adds	r3, #90	; 0x5a
    33d2:	0019      	movs	r1, r3
    33d4:	0010      	movs	r0, r2
    33d6:	4b95      	ldr	r3, [pc, #596]	; (362c <servos_compute_complete+0x2ec>)
    33d8:	4798      	blx	r3
    33da:	0003      	movs	r3, r0
    33dc:	7023      	strb	r3, [r4, #0]
        } break;
    33de:	e116      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_MID_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    33e0:	4b90      	ldr	r3, [pc, #576]	; (3624 <servos_compute_complete+0x2e4>)
    33e2:	681a      	ldr	r2, [r3, #0]
    33e4:	4b8d      	ldr	r3, [pc, #564]	; (361c <servos_compute_complete+0x2dc>)
    33e6:	781b      	ldrb	r3, [r3, #0]
    33e8:	1c59      	adds	r1, r3, #1
    33ea:	b2c8      	uxtb	r0, r1
    33ec:	498b      	ldr	r1, [pc, #556]	; (361c <servos_compute_complete+0x2dc>)
    33ee:	7008      	strb	r0, [r1, #0]
    33f0:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->mid.tip,
    33f2:	4b8d      	ldr	r3, [pc, #564]	; (3628 <servos_compute_complete+0x2e8>)
    33f4:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    33f6:	3312      	adds	r3, #18
    33f8:	001a      	movs	r2, r3
                &_servos_comp_data->mid.mid);
    33fa:	4b8b      	ldr	r3, [pc, #556]	; (3628 <servos_compute_complete+0x2e8>)
    33fc:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    33fe:	3318      	adds	r3, #24
    3400:	0019      	movs	r1, r3
    3402:	0010      	movs	r0, r2
    3404:	4b89      	ldr	r3, [pc, #548]	; (362c <servos_compute_complete+0x2ec>)
    3406:	4798      	blx	r3
    3408:	0003      	movs	r3, r0
    340a:	7023      	strb	r3, [r4, #0]
        } break;
    340c:	e0ff      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_MID_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    340e:	4b85      	ldr	r3, [pc, #532]	; (3624 <servos_compute_complete+0x2e4>)
    3410:	681a      	ldr	r2, [r3, #0]
    3412:	4b82      	ldr	r3, [pc, #520]	; (361c <servos_compute_complete+0x2dc>)
    3414:	781b      	ldrb	r3, [r3, #0]
    3416:	1c59      	adds	r1, r3, #1
    3418:	b2c8      	uxtb	r0, r1
    341a:	4980      	ldr	r1, [pc, #512]	; (361c <servos_compute_complete+0x2dc>)
    341c:	7008      	strb	r0, [r1, #0]
    341e:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->mid.mid,
    3420:	4b81      	ldr	r3, [pc, #516]	; (3628 <servos_compute_complete+0x2e8>)
    3422:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3424:	3318      	adds	r3, #24
    3426:	001a      	movs	r2, r3
                &_servos_comp_data->mid.bs);
    3428:	4b7f      	ldr	r3, [pc, #508]	; (3628 <servos_compute_complete+0x2e8>)
    342a:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    342c:	331e      	adds	r3, #30
    342e:	0019      	movs	r1, r3
    3430:	0010      	movs	r0, r2
    3432:	4b7e      	ldr	r3, [pc, #504]	; (362c <servos_compute_complete+0x2ec>)
    3434:	4798      	blx	r3
    3436:	0003      	movs	r3, r0
    3438:	7023      	strb	r3, [r4, #0]
        } break;
    343a:	e0e8      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_MID_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    343c:	4b79      	ldr	r3, [pc, #484]	; (3624 <servos_compute_complete+0x2e4>)
    343e:	681a      	ldr	r2, [r3, #0]
    3440:	4b76      	ldr	r3, [pc, #472]	; (361c <servos_compute_complete+0x2dc>)
    3442:	781b      	ldrb	r3, [r3, #0]
    3444:	1c59      	adds	r1, r3, #1
    3446:	b2c8      	uxtb	r0, r1
    3448:	4974      	ldr	r1, [pc, #464]	; (361c <servos_compute_complete+0x2dc>)
    344a:	7008      	strb	r0, [r1, #0]
    344c:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->mid.bs,
    344e:	4b76      	ldr	r3, [pc, #472]	; (3628 <servos_compute_complete+0x2e8>)
    3450:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3452:	331e      	adds	r3, #30
    3454:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    3456:	4b74      	ldr	r3, [pc, #464]	; (3628 <servos_compute_complete+0x2e8>)
    3458:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    345a:	335a      	adds	r3, #90	; 0x5a
    345c:	0019      	movs	r1, r3
    345e:	0010      	movs	r0, r2
    3460:	4b72      	ldr	r3, [pc, #456]	; (362c <servos_compute_complete+0x2ec>)
    3462:	4798      	blx	r3
    3464:	0003      	movs	r3, r0
    3466:	7023      	strb	r3, [r4, #0]
        } break;
    3468:	e0d1      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_RNG_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    346a:	4b6e      	ldr	r3, [pc, #440]	; (3624 <servos_compute_complete+0x2e4>)
    346c:	681a      	ldr	r2, [r3, #0]
    346e:	4b6b      	ldr	r3, [pc, #428]	; (361c <servos_compute_complete+0x2dc>)
    3470:	781b      	ldrb	r3, [r3, #0]
    3472:	1c59      	adds	r1, r3, #1
    3474:	b2c8      	uxtb	r0, r1
    3476:	4969      	ldr	r1, [pc, #420]	; (361c <servos_compute_complete+0x2dc>)
    3478:	7008      	strb	r0, [r1, #0]
    347a:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->rng.tip,
    347c:	4b6a      	ldr	r3, [pc, #424]	; (3628 <servos_compute_complete+0x2e8>)
    347e:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3480:	3324      	adds	r3, #36	; 0x24
    3482:	001a      	movs	r2, r3
                &_servos_comp_data->rng.mid);
    3484:	4b68      	ldr	r3, [pc, #416]	; (3628 <servos_compute_complete+0x2e8>)
    3486:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3488:	332a      	adds	r3, #42	; 0x2a
    348a:	0019      	movs	r1, r3
    348c:	0010      	movs	r0, r2
    348e:	4b67      	ldr	r3, [pc, #412]	; (362c <servos_compute_complete+0x2ec>)
    3490:	4798      	blx	r3
    3492:	0003      	movs	r3, r0
    3494:	7023      	strb	r3, [r4, #0]
        } break;
    3496:	e0ba      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_RNG_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3498:	4b62      	ldr	r3, [pc, #392]	; (3624 <servos_compute_complete+0x2e4>)
    349a:	681a      	ldr	r2, [r3, #0]
    349c:	4b5f      	ldr	r3, [pc, #380]	; (361c <servos_compute_complete+0x2dc>)
    349e:	781b      	ldrb	r3, [r3, #0]
    34a0:	1c59      	adds	r1, r3, #1
    34a2:	b2c8      	uxtb	r0, r1
    34a4:	495d      	ldr	r1, [pc, #372]	; (361c <servos_compute_complete+0x2dc>)
    34a6:	7008      	strb	r0, [r1, #0]
    34a8:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->rng.mid,
    34aa:	4b5f      	ldr	r3, [pc, #380]	; (3628 <servos_compute_complete+0x2e8>)
    34ac:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    34ae:	332a      	adds	r3, #42	; 0x2a
    34b0:	001a      	movs	r2, r3
                &_servos_comp_data->rng.bs);
    34b2:	4b5d      	ldr	r3, [pc, #372]	; (3628 <servos_compute_complete+0x2e8>)
    34b4:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    34b6:	3330      	adds	r3, #48	; 0x30
    34b8:	0019      	movs	r1, r3
    34ba:	0010      	movs	r0, r2
    34bc:	4b5b      	ldr	r3, [pc, #364]	; (362c <servos_compute_complete+0x2ec>)
    34be:	4798      	blx	r3
    34c0:	0003      	movs	r3, r0
    34c2:	7023      	strb	r3, [r4, #0]
        } break;
    34c4:	e0a3      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_RNG_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    34c6:	4b57      	ldr	r3, [pc, #348]	; (3624 <servos_compute_complete+0x2e4>)
    34c8:	681a      	ldr	r2, [r3, #0]
    34ca:	4b54      	ldr	r3, [pc, #336]	; (361c <servos_compute_complete+0x2dc>)
    34cc:	781b      	ldrb	r3, [r3, #0]
    34ce:	1c59      	adds	r1, r3, #1
    34d0:	b2c8      	uxtb	r0, r1
    34d2:	4952      	ldr	r1, [pc, #328]	; (361c <servos_compute_complete+0x2dc>)
    34d4:	7008      	strb	r0, [r1, #0]
    34d6:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->rng.bs,
    34d8:	4b53      	ldr	r3, [pc, #332]	; (3628 <servos_compute_complete+0x2e8>)
    34da:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    34dc:	3330      	adds	r3, #48	; 0x30
    34de:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    34e0:	4b51      	ldr	r3, [pc, #324]	; (3628 <servos_compute_complete+0x2e8>)
    34e2:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    34e4:	335a      	adds	r3, #90	; 0x5a
    34e6:	0019      	movs	r1, r3
    34e8:	0010      	movs	r0, r2
    34ea:	4b50      	ldr	r3, [pc, #320]	; (362c <servos_compute_complete+0x2ec>)
    34ec:	4798      	blx	r3
    34ee:	0003      	movs	r3, r0
    34f0:	7023      	strb	r3, [r4, #0]
        } break;
    34f2:	e08c      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNK_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    34f4:	4b4b      	ldr	r3, [pc, #300]	; (3624 <servos_compute_complete+0x2e4>)
    34f6:	681a      	ldr	r2, [r3, #0]
    34f8:	4b48      	ldr	r3, [pc, #288]	; (361c <servos_compute_complete+0x2dc>)
    34fa:	781b      	ldrb	r3, [r3, #0]
    34fc:	1c59      	adds	r1, r3, #1
    34fe:	b2c8      	uxtb	r0, r1
    3500:	4946      	ldr	r1, [pc, #280]	; (361c <servos_compute_complete+0x2dc>)
    3502:	7008      	strb	r0, [r1, #0]
    3504:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnk.tip,
    3506:	4b48      	ldr	r3, [pc, #288]	; (3628 <servos_compute_complete+0x2e8>)
    3508:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    350a:	3336      	adds	r3, #54	; 0x36
    350c:	001a      	movs	r2, r3
                &_servos_comp_data->pnk.mid);
    350e:	4b46      	ldr	r3, [pc, #280]	; (3628 <servos_compute_complete+0x2e8>)
    3510:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3512:	333c      	adds	r3, #60	; 0x3c
    3514:	0019      	movs	r1, r3
    3516:	0010      	movs	r0, r2
    3518:	4b44      	ldr	r3, [pc, #272]	; (362c <servos_compute_complete+0x2ec>)
    351a:	4798      	blx	r3
    351c:	0003      	movs	r3, r0
    351e:	7023      	strb	r3, [r4, #0]
        } break;
    3520:	e075      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNK_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3522:	4b40      	ldr	r3, [pc, #256]	; (3624 <servos_compute_complete+0x2e4>)
    3524:	681a      	ldr	r2, [r3, #0]
    3526:	4b3d      	ldr	r3, [pc, #244]	; (361c <servos_compute_complete+0x2dc>)
    3528:	781b      	ldrb	r3, [r3, #0]
    352a:	1c59      	adds	r1, r3, #1
    352c:	b2c8      	uxtb	r0, r1
    352e:	493b      	ldr	r1, [pc, #236]	; (361c <servos_compute_complete+0x2dc>)
    3530:	7008      	strb	r0, [r1, #0]
    3532:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnk.mid,
    3534:	4b3c      	ldr	r3, [pc, #240]	; (3628 <servos_compute_complete+0x2e8>)
    3536:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3538:	333c      	adds	r3, #60	; 0x3c
    353a:	001a      	movs	r2, r3
                &_servos_comp_data->pnk.bs);
    353c:	4b3a      	ldr	r3, [pc, #232]	; (3628 <servos_compute_complete+0x2e8>)
    353e:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3540:	3342      	adds	r3, #66	; 0x42
    3542:	0019      	movs	r1, r3
    3544:	0010      	movs	r0, r2
    3546:	4b39      	ldr	r3, [pc, #228]	; (362c <servos_compute_complete+0x2ec>)
    3548:	4798      	blx	r3
    354a:	0003      	movs	r3, r0
    354c:	7023      	strb	r3, [r4, #0]
        } break;
    354e:	e05e      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNK_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3550:	4b34      	ldr	r3, [pc, #208]	; (3624 <servos_compute_complete+0x2e4>)
    3552:	681a      	ldr	r2, [r3, #0]
    3554:	4b31      	ldr	r3, [pc, #196]	; (361c <servos_compute_complete+0x2dc>)
    3556:	781b      	ldrb	r3, [r3, #0]
    3558:	1c59      	adds	r1, r3, #1
    355a:	b2c8      	uxtb	r0, r1
    355c:	492f      	ldr	r1, [pc, #188]	; (361c <servos_compute_complete+0x2dc>)
    355e:	7008      	strb	r0, [r1, #0]
    3560:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnk.bs,
    3562:	4b31      	ldr	r3, [pc, #196]	; (3628 <servos_compute_complete+0x2e8>)
    3564:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3566:	3342      	adds	r3, #66	; 0x42
    3568:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    356a:	4b2f      	ldr	r3, [pc, #188]	; (3628 <servos_compute_complete+0x2e8>)
    356c:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    356e:	335a      	adds	r3, #90	; 0x5a
    3570:	0019      	movs	r1, r3
    3572:	0010      	movs	r0, r2
    3574:	4b2d      	ldr	r3, [pc, #180]	; (362c <servos_compute_complete+0x2ec>)
    3576:	4798      	blx	r3
    3578:	0003      	movs	r3, r0
    357a:	7023      	strb	r3, [r4, #0]
        } break;
    357c:	e047      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_THM_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    357e:	4b29      	ldr	r3, [pc, #164]	; (3624 <servos_compute_complete+0x2e4>)
    3580:	681a      	ldr	r2, [r3, #0]
    3582:	4b26      	ldr	r3, [pc, #152]	; (361c <servos_compute_complete+0x2dc>)
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	1c59      	adds	r1, r3, #1
    3588:	b2c8      	uxtb	r0, r1
    358a:	4924      	ldr	r1, [pc, #144]	; (361c <servos_compute_complete+0x2dc>)
    358c:	7008      	strb	r0, [r1, #0]
    358e:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->thm.tip,
    3590:	4b25      	ldr	r3, [pc, #148]	; (3628 <servos_compute_complete+0x2e8>)
    3592:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3594:	3348      	adds	r3, #72	; 0x48
    3596:	001a      	movs	r2, r3
                &_servos_comp_data->thm.mid);
    3598:	4b23      	ldr	r3, [pc, #140]	; (3628 <servos_compute_complete+0x2e8>)
    359a:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    359c:	334e      	adds	r3, #78	; 0x4e
    359e:	0019      	movs	r1, r3
    35a0:	0010      	movs	r0, r2
    35a2:	4b22      	ldr	r3, [pc, #136]	; (362c <servos_compute_complete+0x2ec>)
    35a4:	4798      	blx	r3
    35a6:	0003      	movs	r3, r0
    35a8:	7023      	strb	r3, [r4, #0]
        } break;
    35aa:	e030      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_THM_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    35ac:	4b1d      	ldr	r3, [pc, #116]	; (3624 <servos_compute_complete+0x2e4>)
    35ae:	681a      	ldr	r2, [r3, #0]
    35b0:	4b1a      	ldr	r3, [pc, #104]	; (361c <servos_compute_complete+0x2dc>)
    35b2:	781b      	ldrb	r3, [r3, #0]
    35b4:	1c59      	adds	r1, r3, #1
    35b6:	b2c8      	uxtb	r0, r1
    35b8:	4918      	ldr	r1, [pc, #96]	; (361c <servos_compute_complete+0x2dc>)
    35ba:	7008      	strb	r0, [r1, #0]
    35bc:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->thm.mid,
    35be:	4b1a      	ldr	r3, [pc, #104]	; (3628 <servos_compute_complete+0x2e8>)
    35c0:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    35c2:	334e      	adds	r3, #78	; 0x4e
    35c4:	001a      	movs	r2, r3
                &_servos_comp_data->thm.bs);
    35c6:	4b18      	ldr	r3, [pc, #96]	; (3628 <servos_compute_complete+0x2e8>)
    35c8:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    35ca:	3354      	adds	r3, #84	; 0x54
    35cc:	0019      	movs	r1, r3
    35ce:	0010      	movs	r0, r2
    35d0:	4b16      	ldr	r3, [pc, #88]	; (362c <servos_compute_complete+0x2ec>)
    35d2:	4798      	blx	r3
    35d4:	0003      	movs	r3, r0
    35d6:	7023      	strb	r3, [r4, #0]
        } break;
    35d8:	e019      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_THM_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    35da:	4b12      	ldr	r3, [pc, #72]	; (3624 <servos_compute_complete+0x2e4>)
    35dc:	681a      	ldr	r2, [r3, #0]
    35de:	4b0f      	ldr	r3, [pc, #60]	; (361c <servos_compute_complete+0x2dc>)
    35e0:	781b      	ldrb	r3, [r3, #0]
    35e2:	1c59      	adds	r1, r3, #1
    35e4:	b2c8      	uxtb	r0, r1
    35e6:	490d      	ldr	r1, [pc, #52]	; (361c <servos_compute_complete+0x2dc>)
    35e8:	7008      	strb	r0, [r1, #0]
    35ea:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->thm.bs,
    35ec:	4b0e      	ldr	r3, [pc, #56]	; (3628 <servos_compute_complete+0x2e8>)
    35ee:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    35f0:	3354      	adds	r3, #84	; 0x54
    35f2:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    35f4:	4b0c      	ldr	r3, [pc, #48]	; (3628 <servos_compute_complete+0x2e8>)
    35f6:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    35f8:	335a      	adds	r3, #90	; 0x5a
    35fa:	0019      	movs	r1, r3
    35fc:	0010      	movs	r0, r2
    35fe:	4b0b      	ldr	r3, [pc, #44]	; (362c <servos_compute_complete+0x2ec>)
    3600:	4798      	blx	r3
    3602:	0003      	movs	r3, r0
    3604:	7023      	strb	r3, [r4, #0]
        } break;
    3606:	e002      	b.n	360e <servos_compute_complete+0x2ce>

        case SERVOS_COMP_DONE: {
            complete = 1;
    3608:	1dfb      	adds	r3, r7, #7
    360a:	2201      	movs	r2, #1
    360c:	701a      	strb	r2, [r3, #0]
        }
    }

    return complete;
    360e:	1dfb      	adds	r3, r7, #7
    3610:	781b      	ldrb	r3, [r3, #0]
}
    3612:	0018      	movs	r0, r3
    3614:	46bd      	mov	sp, r7
    3616:	b003      	add	sp, #12
    3618:	bd90      	pop	{r4, r7, pc}
    361a:	46c0      	nop			; (mov r8, r8)
    361c:	20000880 	.word	0x20000880
    3620:	000063cc 	.word	0x000063cc
    3624:	20000888 	.word	0x20000888
    3628:	2000087c 	.word	0x2000087c
    362c:	00003631 	.word	0x00003631

00003630 <_servos_comp>:
//     |__) |__) | \  /  /\   |  |__
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

uint8_t _servos_comp(joint_pos_t* joint1, joint_pos_t* joint2) {
    3630:	b590      	push	{r4, r7, lr}
    3632:	b085      	sub	sp, #20
    3634:	af00      	add	r7, sp, #0
    3636:	6078      	str	r0, [r7, #4]
    3638:	6039      	str	r1, [r7, #0]
    float ang = _servos_dot(joint1, joint2);
    363a:	683a      	ldr	r2, [r7, #0]
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	0011      	movs	r1, r2
    3640:	0018      	movs	r0, r3
    3642:	4b23      	ldr	r3, [pc, #140]	; (36d0 <_servos_comp+0xa0>)
    3644:	4798      	blx	r3
    3646:	1c03      	adds	r3, r0, #0
    3648:	60fb      	str	r3, [r7, #12]
    ang /= _servos_mag(joint1);
    364a:	687b      	ldr	r3, [r7, #4]
    364c:	0018      	movs	r0, r3
    364e:	4b21      	ldr	r3, [pc, #132]	; (36d4 <_servos_comp+0xa4>)
    3650:	4798      	blx	r3
    3652:	1c02      	adds	r2, r0, #0
    3654:	4b20      	ldr	r3, [pc, #128]	; (36d8 <_servos_comp+0xa8>)
    3656:	1c11      	adds	r1, r2, #0
    3658:	68f8      	ldr	r0, [r7, #12]
    365a:	4798      	blx	r3
    365c:	1c03      	adds	r3, r0, #0
    365e:	60fb      	str	r3, [r7, #12]
    ang /= _servos_mag(joint2);
    3660:	683b      	ldr	r3, [r7, #0]
    3662:	0018      	movs	r0, r3
    3664:	4b1b      	ldr	r3, [pc, #108]	; (36d4 <_servos_comp+0xa4>)
    3666:	4798      	blx	r3
    3668:	1c02      	adds	r2, r0, #0
    366a:	4b1b      	ldr	r3, [pc, #108]	; (36d8 <_servos_comp+0xa8>)
    366c:	1c11      	adds	r1, r2, #0
    366e:	68f8      	ldr	r0, [r7, #12]
    3670:	4798      	blx	r3
    3672:	1c03      	adds	r3, r0, #0
    3674:	60fb      	str	r3, [r7, #12]
    ang = acosf(ang);
    3676:	68fb      	ldr	r3, [r7, #12]
    3678:	1c18      	adds	r0, r3, #0
    367a:	4b18      	ldr	r3, [pc, #96]	; (36dc <_servos_comp+0xac>)
    367c:	4798      	blx	r3
    367e:	1c03      	adds	r3, r0, #0
    3680:	60fb      	str	r3, [r7, #12]
    if (ang < 0.0) ang *= -1; // brute force absolute value
    3682:	4b17      	ldr	r3, [pc, #92]	; (36e0 <_servos_comp+0xb0>)
    3684:	2100      	movs	r1, #0
    3686:	68f8      	ldr	r0, [r7, #12]
    3688:	4798      	blx	r3
    368a:	1e03      	subs	r3, r0, #0
    368c:	d004      	beq.n	3698 <_servos_comp+0x68>
    368e:	68fb      	ldr	r3, [r7, #12]
    3690:	2280      	movs	r2, #128	; 0x80
    3692:	0612      	lsls	r2, r2, #24
    3694:	4053      	eors	r3, r2
    3696:	60fb      	str	r3, [r7, #12]

    // ang is 0 to pi -> convert to 0 to 255 (-90 to 90)
    return (255 * ang) / M_PI;
    3698:	4b12      	ldr	r3, [pc, #72]	; (36e4 <_servos_comp+0xb4>)
    369a:	4913      	ldr	r1, [pc, #76]	; (36e8 <_servos_comp+0xb8>)
    369c:	68f8      	ldr	r0, [r7, #12]
    369e:	4798      	blx	r3
    36a0:	1c03      	adds	r3, r0, #0
    36a2:	1c1a      	adds	r2, r3, #0
    36a4:	4b11      	ldr	r3, [pc, #68]	; (36ec <_servos_comp+0xbc>)
    36a6:	1c10      	adds	r0, r2, #0
    36a8:	4798      	blx	r3
    36aa:	4c11      	ldr	r4, [pc, #68]	; (36f0 <_servos_comp+0xc0>)
    36ac:	4a11      	ldr	r2, [pc, #68]	; (36f4 <_servos_comp+0xc4>)
    36ae:	4b12      	ldr	r3, [pc, #72]	; (36f8 <_servos_comp+0xc8>)
    36b0:	47a0      	blx	r4
    36b2:	0003      	movs	r3, r0
    36b4:	000c      	movs	r4, r1
    36b6:	0019      	movs	r1, r3
    36b8:	0022      	movs	r2, r4
    36ba:	4b10      	ldr	r3, [pc, #64]	; (36fc <_servos_comp+0xcc>)
    36bc:	0008      	movs	r0, r1
    36be:	0011      	movs	r1, r2
    36c0:	4798      	blx	r3
    36c2:	0003      	movs	r3, r0
    36c4:	b2db      	uxtb	r3, r3
}
    36c6:	0018      	movs	r0, r3
    36c8:	46bd      	mov	sp, r7
    36ca:	b005      	add	sp, #20
    36cc:	bd90      	pop	{r4, r7, pc}
    36ce:	46c0      	nop			; (mov r8, r8)
    36d0:	00003701 	.word	0x00003701
    36d4:	0000377d 	.word	0x0000377d
    36d8:	000044d1 	.word	0x000044d1
    36dc:	00003b01 	.word	0x00003b01
    36e0:	00004121 	.word	0x00004121
    36e4:	000048b1 	.word	0x000048b1
    36e8:	437f0000 	.word	0x437f0000
    36ec:	00005c65 	.word	0x00005c65
    36f0:	00004ef9 	.word	0x00004ef9
    36f4:	54442d18 	.word	0x54442d18
    36f8:	400921fb 	.word	0x400921fb
    36fc:	00004171 	.word	0x00004171

00003700 <_servos_dot>:

float _servos_dot(joint_pos_t* joint1, joint_pos_t* joint2) {
    3700:	b580      	push	{r7, lr}
    3702:	b084      	sub	sp, #16
    3704:	af00      	add	r7, sp, #0
    3706:	6078      	str	r0, [r7, #4]
    3708:	6039      	str	r1, [r7, #0]
    float dot = 0;
    370a:	2300      	movs	r3, #0
    370c:	60fb      	str	r3, [r7, #12]
    for (uint8_t x = 0; x < 3; x++) {
    370e:	230b      	movs	r3, #11
    3710:	18fb      	adds	r3, r7, r3
    3712:	2200      	movs	r2, #0
    3714:	701a      	strb	r2, [r3, #0]
    3716:	e023      	b.n	3760 <_servos_dot+0x60>
        dot += ((int8_t)(joint1->bytes[2*x+1])*(int8_t)(joint2->bytes[2*x+1]));
    3718:	230b      	movs	r3, #11
    371a:	18fb      	adds	r3, r7, r3
    371c:	781b      	ldrb	r3, [r3, #0]
    371e:	005b      	lsls	r3, r3, #1
    3720:	3301      	adds	r3, #1
    3722:	687a      	ldr	r2, [r7, #4]
    3724:	5cd3      	ldrb	r3, [r2, r3]
    3726:	b25b      	sxtb	r3, r3
    3728:	0019      	movs	r1, r3
    372a:	230b      	movs	r3, #11
    372c:	18fb      	adds	r3, r7, r3
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	005b      	lsls	r3, r3, #1
    3732:	3301      	adds	r3, #1
    3734:	683a      	ldr	r2, [r7, #0]
    3736:	5cd3      	ldrb	r3, [r2, r3]
    3738:	b25b      	sxtb	r3, r3
    373a:	434b      	muls	r3, r1
    373c:	001a      	movs	r2, r3
    373e:	4b0d      	ldr	r3, [pc, #52]	; (3774 <_servos_dot+0x74>)
    3740:	0010      	movs	r0, r2
    3742:	4798      	blx	r3
    3744:	1c02      	adds	r2, r0, #0
    3746:	4b0c      	ldr	r3, [pc, #48]	; (3778 <_servos_dot+0x78>)
    3748:	1c11      	adds	r1, r2, #0
    374a:	68f8      	ldr	r0, [r7, #12]
    374c:	4798      	blx	r3
    374e:	1c03      	adds	r3, r0, #0
    3750:	60fb      	str	r3, [r7, #12]
    for (uint8_t x = 0; x < 3; x++) {
    3752:	230b      	movs	r3, #11
    3754:	18fb      	adds	r3, r7, r3
    3756:	781a      	ldrb	r2, [r3, #0]
    3758:	230b      	movs	r3, #11
    375a:	18fb      	adds	r3, r7, r3
    375c:	3201      	adds	r2, #1
    375e:	701a      	strb	r2, [r3, #0]
    3760:	230b      	movs	r3, #11
    3762:	18fb      	adds	r3, r7, r3
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	2b02      	cmp	r3, #2
    3768:	d9d6      	bls.n	3718 <_servos_dot+0x18>
    }
    return dot;
    376a:	68fb      	ldr	r3, [r7, #12]
}
    376c:	1c18      	adds	r0, r3, #0
    376e:	46bd      	mov	sp, r7
    3770:	b004      	add	sp, #16
    3772:	bd80      	pop	{r7, pc}
    3774:	00004e59 	.word	0x00004e59
    3778:	000041ad 	.word	0x000041ad

0000377c <_servos_mag>:

float _servos_mag(joint_pos_t* joint) {
    377c:	b580      	push	{r7, lr}
    377e:	b082      	sub	sp, #8
    3780:	af00      	add	r7, sp, #0
    3782:	6078      	str	r0, [r7, #4]
    return sqrtf(_servos_dot(joint, joint));
    3784:	687a      	ldr	r2, [r7, #4]
    3786:	687b      	ldr	r3, [r7, #4]
    3788:	0011      	movs	r1, r2
    378a:	0018      	movs	r0, r3
    378c:	4b05      	ldr	r3, [pc, #20]	; (37a4 <_servos_mag+0x28>)
    378e:	4798      	blx	r3
    3790:	1c03      	adds	r3, r0, #0
    3792:	1c18      	adds	r0, r3, #0
    3794:	4b04      	ldr	r3, [pc, #16]	; (37a8 <_servos_mag+0x2c>)
    3796:	4798      	blx	r3
    3798:	1c03      	adds	r3, r0, #0
}
    379a:	1c18      	adds	r0, r3, #0
    379c:	46bd      	mov	sp, r7
    379e:	b002      	add	sp, #8
    37a0:	bd80      	pop	{r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	00003701 	.word	0x00003701
    37a8:	00003ba9 	.word	0x00003ba9

000037ac <_servos_byte_callback>:
//     /  `  /\  |    |    |__)  /\  /  ` |__/ /__`
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

uint8_t _servos_byte_callback() {
    37ac:	b580      	push	{r7, lr}
    37ae:	b082      	sub	sp, #8
    37b0:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    37b2:	1dfb      	adds	r3, r7, #7
    37b4:	2200      	movs	r2, #0
    37b6:	701a      	strb	r2, [r3, #0]

    switch (_servos_mode) {
    37b8:	4b13      	ldr	r3, [pc, #76]	; (3808 <_servos_byte_callback+0x5c>)
    37ba:	781b      	ldrb	r3, [r3, #0]
    37bc:	b2db      	uxtb	r3, r3
    37be:	2b01      	cmp	r3, #1
    37c0:	d00d      	beq.n	37de <_servos_byte_callback+0x32>
    37c2:	2b02      	cmp	r3, #2
    37c4:	d014      	beq.n	37f0 <_servos_byte_callback+0x44>
    37c6:	2b00      	cmp	r3, #0
    37c8:	d118      	bne.n	37fc <_servos_byte_callback+0x50>
        case SERVOS_REG: {
            _servos_mode = SERVOS_TX;
    37ca:	4b0f      	ldr	r3, [pc, #60]	; (3808 <_servos_byte_callback+0x5c>)
    37cc:	2201      	movs	r2, #1
    37ce:	701a      	strb	r2, [r3, #0]
            i2c_write(_servos_reg);
    37d0:	4b0e      	ldr	r3, [pc, #56]	; (380c <_servos_byte_callback+0x60>)
    37d2:	781b      	ldrb	r3, [r3, #0]
    37d4:	b2db      	uxtb	r3, r3
    37d6:	0018      	movs	r0, r3
    37d8:	4b0d      	ldr	r3, [pc, #52]	; (3810 <_servos_byte_callback+0x64>)
    37da:	4798      	blx	r3
        } break;
    37dc:	e00e      	b.n	37fc <_servos_byte_callback+0x50>

        case SERVOS_TX: {
            _servos_mode = SERVOS_STOP;
    37de:	4b0a      	ldr	r3, [pc, #40]	; (3808 <_servos_byte_callback+0x5c>)
    37e0:	2202      	movs	r2, #2
    37e2:	701a      	strb	r2, [r3, #0]
            i2c_write(_servos_data);
    37e4:	4b0b      	ldr	r3, [pc, #44]	; (3814 <_servos_byte_callback+0x68>)
    37e6:	781b      	ldrb	r3, [r3, #0]
    37e8:	0018      	movs	r0, r3
    37ea:	4b09      	ldr	r3, [pc, #36]	; (3810 <_servos_byte_callback+0x64>)
    37ec:	4798      	blx	r3
        } break;
    37ee:	e005      	b.n	37fc <_servos_byte_callback+0x50>

        case SERVOS_STOP: {
            i2c_tx_stop();
    37f0:	4b09      	ldr	r3, [pc, #36]	; (3818 <_servos_byte_callback+0x6c>)
    37f2:	4798      	blx	r3
            complete = 1;
    37f4:	1dfb      	adds	r3, r7, #7
    37f6:	2201      	movs	r2, #1
    37f8:	701a      	strb	r2, [r3, #0]
        } break;
    37fa:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
    37fc:	1dfb      	adds	r3, r7, #7
    37fe:	781b      	ldrb	r3, [r3, #0]
}
    3800:	0018      	movs	r0, r3
    3802:	46bd      	mov	sp, r7
    3804:	b002      	add	sp, #8
    3806:	bd80      	pop	{r7, pc}
    3808:	2000088d 	.word	0x2000088d
    380c:	2000088c 	.word	0x2000088c
    3810:	000013c1 	.word	0x000013c1
    3814:	20000881 	.word	0x20000881
    3818:	000014b1 	.word	0x000014b1

0000381c <_servos_regs_callback>:

uint8_t _servos_regs_callback() {
    381c:	b580      	push	{r7, lr}
    381e:	b082      	sub	sp, #8
    3820:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    3822:	1dfb      	adds	r3, r7, #7
    3824:	2200      	movs	r2, #0
    3826:	701a      	strb	r2, [r3, #0]
    uint32_t data;

    switch (_servos_mode) {
    3828:	4b39      	ldr	r3, [pc, #228]	; (3910 <_servos_regs_callback+0xf4>)
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	b2db      	uxtb	r3, r3
    382e:	2b01      	cmp	r3, #1
    3830:	d010      	beq.n	3854 <_servos_regs_callback+0x38>
    3832:	2b02      	cmp	r3, #2
    3834:	d05c      	beq.n	38f0 <_servos_regs_callback+0xd4>
    3836:	2b00      	cmp	r3, #0
    3838:	d163      	bne.n	3902 <_servos_regs_callback+0xe6>
        case SERVOS_REG: {
            _servos_mode = SERVOS_TX;
    383a:	4b35      	ldr	r3, [pc, #212]	; (3910 <_servos_regs_callback+0xf4>)
    383c:	2201      	movs	r2, #1
    383e:	701a      	strb	r2, [r3, #0]
            _servos_idx = 0;
    3840:	4b34      	ldr	r3, [pc, #208]	; (3914 <_servos_regs_callback+0xf8>)
    3842:	2200      	movs	r2, #0
    3844:	701a      	strb	r2, [r3, #0]
            i2c_write(_servos_reg);
    3846:	4b34      	ldr	r3, [pc, #208]	; (3918 <_servos_regs_callback+0xfc>)
    3848:	781b      	ldrb	r3, [r3, #0]
    384a:	b2db      	uxtb	r3, r3
    384c:	0018      	movs	r0, r3
    384e:	4b33      	ldr	r3, [pc, #204]	; (391c <_servos_regs_callback+0x100>)
    3850:	4798      	blx	r3
        } break;
    3852:	e056      	b.n	3902 <_servos_regs_callback+0xe6>

        case SERVOS_TX: {
            switch (_servos_reg++%4) {
    3854:	4b30      	ldr	r3, [pc, #192]	; (3918 <_servos_regs_callback+0xfc>)
    3856:	781b      	ldrb	r3, [r3, #0]
    3858:	b2db      	uxtb	r3, r3
    385a:	1c5a      	adds	r2, r3, #1
    385c:	b2d1      	uxtb	r1, r2
    385e:	4a2e      	ldr	r2, [pc, #184]	; (3918 <_servos_regs_callback+0xfc>)
    3860:	7011      	strb	r1, [r2, #0]
    3862:	001a      	movs	r2, r3
    3864:	2303      	movs	r3, #3
    3866:	4013      	ands	r3, r2
    3868:	2b01      	cmp	r3, #1
    386a:	d02d      	beq.n	38c8 <_servos_regs_callback+0xac>
    386c:	dc02      	bgt.n	3874 <_servos_regs_callback+0x58>
    386e:	2b00      	cmp	r3, #0
    3870:	d00d      	beq.n	388e <_servos_regs_callback+0x72>
                    if (++_servos_idx >= 15) {
                        _servos_mode = SERVOS_STOP;
                    }
                } break;
            } // end switch
        } break;
    3872:	e046      	b.n	3902 <_servos_regs_callback+0xe6>
            switch (_servos_reg++%4) {
    3874:	2b02      	cmp	r3, #2
    3876:	d002      	beq.n	387e <_servos_regs_callback+0x62>
    3878:	2b03      	cmp	r3, #3
    387a:	d004      	beq.n	3886 <_servos_regs_callback+0x6a>
        } break;
    387c:	e041      	b.n	3902 <_servos_regs_callback+0xe6>
                    i2c_write(0);
    387e:	2000      	movs	r0, #0
    3880:	4b26      	ldr	r3, [pc, #152]	; (391c <_servos_regs_callback+0x100>)
    3882:	4798      	blx	r3
                } break;
    3884:	e033      	b.n	38ee <_servos_regs_callback+0xd2>
                    i2c_write(0);
    3886:	2000      	movs	r0, #0
    3888:	4b24      	ldr	r3, [pc, #144]	; (391c <_servos_regs_callback+0x100>)
    388a:	4798      	blx	r3
                } break;
    388c:	e02f      	b.n	38ee <_servos_regs_callback+0xd2>
                    data = _servos_list[_servos_idx];
    388e:	4b24      	ldr	r3, [pc, #144]	; (3920 <_servos_regs_callback+0x104>)
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	4a20      	ldr	r2, [pc, #128]	; (3914 <_servos_regs_callback+0xf8>)
    3894:	7812      	ldrb	r2, [r2, #0]
    3896:	189b      	adds	r3, r3, r2
    3898:	781b      	ldrb	r3, [r3, #0]
    389a:	603b      	str	r3, [r7, #0]
                    data = (data * 4) / 5; // convert 255 -> 204
    389c:	683b      	ldr	r3, [r7, #0]
    389e:	009a      	lsls	r2, r3, #2
    38a0:	4b20      	ldr	r3, [pc, #128]	; (3924 <_servos_regs_callback+0x108>)
    38a2:	2105      	movs	r1, #5
    38a4:	0010      	movs	r0, r2
    38a6:	4798      	blx	r3
    38a8:	0003      	movs	r3, r0
    38aa:	603b      	str	r3, [r7, #0]
                    _servos_data = (data + 205) >> 8; // next reg
    38ac:	683b      	ldr	r3, [r7, #0]
    38ae:	33cd      	adds	r3, #205	; 0xcd
    38b0:	0a1b      	lsrs	r3, r3, #8
    38b2:	b2da      	uxtb	r2, r3
    38b4:	4b1c      	ldr	r3, [pc, #112]	; (3928 <_servos_regs_callback+0x10c>)
    38b6:	701a      	strb	r2, [r3, #0]
                    i2c_write(data+205);
    38b8:	683b      	ldr	r3, [r7, #0]
    38ba:	b2db      	uxtb	r3, r3
    38bc:	3b33      	subs	r3, #51	; 0x33
    38be:	b2db      	uxtb	r3, r3
    38c0:	0018      	movs	r0, r3
    38c2:	4b16      	ldr	r3, [pc, #88]	; (391c <_servos_regs_callback+0x100>)
    38c4:	4798      	blx	r3
                } break;
    38c6:	e012      	b.n	38ee <_servos_regs_callback+0xd2>
                    i2c_write(_servos_data);
    38c8:	4b17      	ldr	r3, [pc, #92]	; (3928 <_servos_regs_callback+0x10c>)
    38ca:	781b      	ldrb	r3, [r3, #0]
    38cc:	0018      	movs	r0, r3
    38ce:	4b13      	ldr	r3, [pc, #76]	; (391c <_servos_regs_callback+0x100>)
    38d0:	4798      	blx	r3
                    if (++_servos_idx >= 15) {
    38d2:	4b10      	ldr	r3, [pc, #64]	; (3914 <_servos_regs_callback+0xf8>)
    38d4:	781b      	ldrb	r3, [r3, #0]
    38d6:	3301      	adds	r3, #1
    38d8:	b2da      	uxtb	r2, r3
    38da:	4b0e      	ldr	r3, [pc, #56]	; (3914 <_servos_regs_callback+0xf8>)
    38dc:	701a      	strb	r2, [r3, #0]
    38de:	4b0d      	ldr	r3, [pc, #52]	; (3914 <_servos_regs_callback+0xf8>)
    38e0:	781b      	ldrb	r3, [r3, #0]
    38e2:	2b0e      	cmp	r3, #14
    38e4:	d902      	bls.n	38ec <_servos_regs_callback+0xd0>
                        _servos_mode = SERVOS_STOP;
    38e6:	4b0a      	ldr	r3, [pc, #40]	; (3910 <_servos_regs_callback+0xf4>)
    38e8:	2202      	movs	r2, #2
    38ea:	701a      	strb	r2, [r3, #0]
                } break;
    38ec:	46c0      	nop			; (mov r8, r8)
        } break;
    38ee:	e008      	b.n	3902 <_servos_regs_callback+0xe6>

        case SERVOS_STOP: {
            _servos_mode = SERVOS_DONE;
    38f0:	4b07      	ldr	r3, [pc, #28]	; (3910 <_servos_regs_callback+0xf4>)
    38f2:	2203      	movs	r2, #3
    38f4:	701a      	strb	r2, [r3, #0]
            i2c_tx_stop();
    38f6:	4b0d      	ldr	r3, [pc, #52]	; (392c <_servos_regs_callback+0x110>)
    38f8:	4798      	blx	r3
            complete = 1;
    38fa:	1dfb      	adds	r3, r7, #7
    38fc:	2201      	movs	r2, #1
    38fe:	701a      	strb	r2, [r3, #0]
        } break;
    3900:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
    3902:	1dfb      	adds	r3, r7, #7
    3904:	781b      	ldrb	r3, [r3, #0]
}
    3906:	0018      	movs	r0, r3
    3908:	46bd      	mov	sp, r7
    390a:	b002      	add	sp, #8
    390c:	bd80      	pop	{r7, pc}
    390e:	46c0      	nop			; (mov r8, r8)
    3910:	2000088d 	.word	0x2000088d
    3914:	20000878 	.word	0x20000878
    3918:	2000088c 	.word	0x2000088c
    391c:	000013c1 	.word	0x000013c1
    3920:	20000884 	.word	0x20000884
    3924:	00003fe5 	.word	0x00003fe5
    3928:	20000881 	.word	0x20000881
    392c:	000014b1 	.word	0x000014b1

00003930 <NVIC_SetPriority>:
{
    3930:	b5b0      	push	{r4, r5, r7, lr}
    3932:	b082      	sub	sp, #8
    3934:	af00      	add	r7, sp, #0
    3936:	0002      	movs	r2, r0
    3938:	6039      	str	r1, [r7, #0]
    393a:	1dfb      	adds	r3, r7, #7
    393c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    393e:	1dfb      	adds	r3, r7, #7
    3940:	781b      	ldrb	r3, [r3, #0]
    3942:	2b7f      	cmp	r3, #127	; 0x7f
    3944:	d932      	bls.n	39ac <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3946:	4c2f      	ldr	r4, [pc, #188]	; (3a04 <NVIC_SetPriority+0xd4>)
    3948:	1dfb      	adds	r3, r7, #7
    394a:	781b      	ldrb	r3, [r3, #0]
    394c:	001a      	movs	r2, r3
    394e:	230f      	movs	r3, #15
    3950:	4013      	ands	r3, r2
    3952:	3b08      	subs	r3, #8
    3954:	0899      	lsrs	r1, r3, #2
    3956:	4a2b      	ldr	r2, [pc, #172]	; (3a04 <NVIC_SetPriority+0xd4>)
    3958:	1dfb      	adds	r3, r7, #7
    395a:	781b      	ldrb	r3, [r3, #0]
    395c:	0018      	movs	r0, r3
    395e:	230f      	movs	r3, #15
    3960:	4003      	ands	r3, r0
    3962:	3b08      	subs	r3, #8
    3964:	089b      	lsrs	r3, r3, #2
    3966:	3306      	adds	r3, #6
    3968:	009b      	lsls	r3, r3, #2
    396a:	18d3      	adds	r3, r2, r3
    396c:	3304      	adds	r3, #4
    396e:	681b      	ldr	r3, [r3, #0]
    3970:	1dfa      	adds	r2, r7, #7
    3972:	7812      	ldrb	r2, [r2, #0]
    3974:	0010      	movs	r0, r2
    3976:	2203      	movs	r2, #3
    3978:	4002      	ands	r2, r0
    397a:	00d2      	lsls	r2, r2, #3
    397c:	20ff      	movs	r0, #255	; 0xff
    397e:	4090      	lsls	r0, r2
    3980:	0002      	movs	r2, r0
    3982:	43d2      	mvns	r2, r2
    3984:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3986:	683b      	ldr	r3, [r7, #0]
    3988:	019b      	lsls	r3, r3, #6
    398a:	20ff      	movs	r0, #255	; 0xff
    398c:	4018      	ands	r0, r3
    398e:	1dfb      	adds	r3, r7, #7
    3990:	781b      	ldrb	r3, [r3, #0]
    3992:	001d      	movs	r5, r3
    3994:	2303      	movs	r3, #3
    3996:	402b      	ands	r3, r5
    3998:	00db      	lsls	r3, r3, #3
    399a:	4098      	lsls	r0, r3
    399c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    399e:	431a      	orrs	r2, r3
    39a0:	1d8b      	adds	r3, r1, #6
    39a2:	009b      	lsls	r3, r3, #2
    39a4:	18e3      	adds	r3, r4, r3
    39a6:	3304      	adds	r3, #4
    39a8:	601a      	str	r2, [r3, #0]
}
    39aa:	e027      	b.n	39fc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    39ac:	4c16      	ldr	r4, [pc, #88]	; (3a08 <NVIC_SetPriority+0xd8>)
    39ae:	1dfb      	adds	r3, r7, #7
    39b0:	781b      	ldrb	r3, [r3, #0]
    39b2:	b25b      	sxtb	r3, r3
    39b4:	089b      	lsrs	r3, r3, #2
    39b6:	4914      	ldr	r1, [pc, #80]	; (3a08 <NVIC_SetPriority+0xd8>)
    39b8:	1dfa      	adds	r2, r7, #7
    39ba:	7812      	ldrb	r2, [r2, #0]
    39bc:	b252      	sxtb	r2, r2
    39be:	0892      	lsrs	r2, r2, #2
    39c0:	32c0      	adds	r2, #192	; 0xc0
    39c2:	0092      	lsls	r2, r2, #2
    39c4:	5852      	ldr	r2, [r2, r1]
    39c6:	1df9      	adds	r1, r7, #7
    39c8:	7809      	ldrb	r1, [r1, #0]
    39ca:	0008      	movs	r0, r1
    39cc:	2103      	movs	r1, #3
    39ce:	4001      	ands	r1, r0
    39d0:	00c9      	lsls	r1, r1, #3
    39d2:	20ff      	movs	r0, #255	; 0xff
    39d4:	4088      	lsls	r0, r1
    39d6:	0001      	movs	r1, r0
    39d8:	43c9      	mvns	r1, r1
    39da:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    39dc:	683a      	ldr	r2, [r7, #0]
    39de:	0192      	lsls	r2, r2, #6
    39e0:	20ff      	movs	r0, #255	; 0xff
    39e2:	4010      	ands	r0, r2
    39e4:	1dfa      	adds	r2, r7, #7
    39e6:	7812      	ldrb	r2, [r2, #0]
    39e8:	0015      	movs	r5, r2
    39ea:	2203      	movs	r2, #3
    39ec:	402a      	ands	r2, r5
    39ee:	00d2      	lsls	r2, r2, #3
    39f0:	4090      	lsls	r0, r2
    39f2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    39f4:	430a      	orrs	r2, r1
    39f6:	33c0      	adds	r3, #192	; 0xc0
    39f8:	009b      	lsls	r3, r3, #2
    39fa:	511a      	str	r2, [r3, r4]
}
    39fc:	46c0      	nop			; (mov r8, r8)
    39fe:	46bd      	mov	sp, r7
    3a00:	b002      	add	sp, #8
    3a02:	bdb0      	pop	{r4, r5, r7, pc}
    3a04:	e000ed00 	.word	0xe000ed00
    3a08:	e000e100 	.word	0xe000e100

00003a0c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	b082      	sub	sp, #8
    3a10:	af00      	add	r7, sp, #0
    3a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    3a14:	687b      	ldr	r3, [r7, #4]
    3a16:	3b01      	subs	r3, #1
    3a18:	4a0c      	ldr	r2, [pc, #48]	; (3a4c <SysTick_Config+0x40>)
    3a1a:	4293      	cmp	r3, r2
    3a1c:	d901      	bls.n	3a22 <SysTick_Config+0x16>
    3a1e:	2301      	movs	r3, #1
    3a20:	e010      	b.n	3a44 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    3a22:	4b0b      	ldr	r3, [pc, #44]	; (3a50 <SysTick_Config+0x44>)
    3a24:	687a      	ldr	r2, [r7, #4]
    3a26:	3a01      	subs	r2, #1
    3a28:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
    3a2a:	2301      	movs	r3, #1
    3a2c:	425b      	negs	r3, r3
    3a2e:	2103      	movs	r1, #3
    3a30:	0018      	movs	r0, r3
    3a32:	4b08      	ldr	r3, [pc, #32]	; (3a54 <SysTick_Config+0x48>)
    3a34:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    3a36:	4b06      	ldr	r3, [pc, #24]	; (3a50 <SysTick_Config+0x44>)
    3a38:	2200      	movs	r2, #0
    3a3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3a3c:	4b04      	ldr	r3, [pc, #16]	; (3a50 <SysTick_Config+0x44>)
    3a3e:	2207      	movs	r2, #7
    3a40:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    3a42:	2300      	movs	r3, #0
}
    3a44:	0018      	movs	r0, r3
    3a46:	46bd      	mov	sp, r7
    3a48:	b002      	add	sp, #8
    3a4a:	bd80      	pop	{r7, pc}
    3a4c:	00ffffff 	.word	0x00ffffff
    3a50:	e000e010 	.word	0xe000e010
    3a54:	00003931 	.word	0x00003931

00003a58 <timer_init>:
//
//------------------------------------------------------------------------------

//==============================================================================
void timer_init()
{
    3a58:	b5b0      	push	{r4, r5, r7, lr}
    3a5a:	af00      	add	r7, sp, #0
    SysTick_Config(48000);
    3a5c:	4b05      	ldr	r3, [pc, #20]	; (3a74 <timer_init+0x1c>)
    3a5e:	0018      	movs	r0, r3
    3a60:	4b05      	ldr	r3, [pc, #20]	; (3a78 <timer_init+0x20>)
    3a62:	4798      	blx	r3
    millis = 0;
    3a64:	4a05      	ldr	r2, [pc, #20]	; (3a7c <timer_init+0x24>)
    3a66:	2300      	movs	r3, #0
    3a68:	2400      	movs	r4, #0
    3a6a:	6013      	str	r3, [r2, #0]
    3a6c:	6054      	str	r4, [r2, #4]
}
    3a6e:	46c0      	nop			; (mov r8, r8)
    3a70:	46bd      	mov	sp, r7
    3a72:	bdb0      	pop	{r4, r5, r7, pc}
    3a74:	0000bb80 	.word	0x0000bb80
    3a78:	00003a0d 	.word	0x00003a0d
    3a7c:	20000890 	.word	0x20000890

00003a80 <timer_get>:

//==============================================================================
uint64_t timer_get()
{
    3a80:	b590      	push	{r4, r7, lr}
    3a82:	af00      	add	r7, sp, #0
    return millis;
    3a84:	4b03      	ldr	r3, [pc, #12]	; (3a94 <timer_get+0x14>)
    3a86:	685c      	ldr	r4, [r3, #4]
    3a88:	681b      	ldr	r3, [r3, #0]
}
    3a8a:	0018      	movs	r0, r3
    3a8c:	0021      	movs	r1, r4
    3a8e:	46bd      	mov	sp, r7
    3a90:	bd90      	pop	{r4, r7, pc}
    3a92:	46c0      	nop			; (mov r8, r8)
    3a94:	20000890 	.word	0x20000890

00003a98 <timer_delay>:

//==============================================================================
void timer_delay(uint32_t delay)
{
    3a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a9a:	b085      	sub	sp, #20
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	6078      	str	r0, [r7, #4]
    uint64_t start = millis;
    3aa0:	4b0d      	ldr	r3, [pc, #52]	; (3ad8 <timer_delay+0x40>)
    3aa2:	685c      	ldr	r4, [r3, #4]
    3aa4:	681b      	ldr	r3, [r3, #0]
    3aa6:	60bb      	str	r3, [r7, #8]
    3aa8:	60fc      	str	r4, [r7, #12]
    while (millis - start < delay);
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	4b0a      	ldr	r3, [pc, #40]	; (3ad8 <timer_delay+0x40>)
    3aae:	681d      	ldr	r5, [r3, #0]
    3ab0:	685e      	ldr	r6, [r3, #4]
    3ab2:	68bb      	ldr	r3, [r7, #8]
    3ab4:	68fc      	ldr	r4, [r7, #12]
    3ab6:	1aed      	subs	r5, r5, r3
    3ab8:	41a6      	sbcs	r6, r4
    3aba:	002b      	movs	r3, r5
    3abc:	0034      	movs	r4, r6
    3abe:	6878      	ldr	r0, [r7, #4]
    3ac0:	0001      	movs	r1, r0
    3ac2:	2000      	movs	r0, #0
    3ac4:	0002      	movs	r2, r0
    3ac6:	42a2      	cmp	r2, r4
    3ac8:	d8f0      	bhi.n	3aac <timer_delay+0x14>
    3aca:	d101      	bne.n	3ad0 <timer_delay+0x38>
    3acc:	4299      	cmp	r1, r3
    3ace:	d8ed      	bhi.n	3aac <timer_delay+0x14>
}
    3ad0:	46c0      	nop			; (mov r8, r8)
    3ad2:	46bd      	mov	sp, r7
    3ad4:	b005      	add	sp, #20
    3ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ad8:	20000890 	.word	0x20000890

00003adc <SysTick_Handler>:
//
//------------------------------------------------------------------------------

//==============================================================================
void SysTick_Handler()
{
    3adc:	b590      	push	{r4, r7, lr}
    3ade:	af00      	add	r7, sp, #0
    millis++;
    3ae0:	4b06      	ldr	r3, [pc, #24]	; (3afc <SysTick_Handler+0x20>)
    3ae2:	685c      	ldr	r4, [r3, #4]
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	2101      	movs	r1, #1
    3ae8:	2200      	movs	r2, #0
    3aea:	185b      	adds	r3, r3, r1
    3aec:	4154      	adcs	r4, r2
    3aee:	4a03      	ldr	r2, [pc, #12]	; (3afc <SysTick_Handler+0x20>)
    3af0:	6013      	str	r3, [r2, #0]
    3af2:	6054      	str	r4, [r2, #4]
}
    3af4:	46c0      	nop			; (mov r8, r8)
    3af6:	46bd      	mov	sp, r7
    3af8:	bd90      	pop	{r4, r7, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	20000890 	.word	0x20000890

00003b00 <acosf>:
    3b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b02:	b08d      	sub	sp, #52	; 0x34
    3b04:	1c04      	adds	r4, r0, #0
    3b06:	f000 f8a1 	bl	3c4c <__ieee754_acosf>
    3b0a:	2300      	movs	r3, #0
    3b0c:	4e23      	ldr	r6, [pc, #140]	; (3b9c <acosf+0x9c>)
    3b0e:	1c05      	adds	r5, r0, #0
    3b10:	56f3      	ldrsb	r3, [r6, r3]
    3b12:	3301      	adds	r3, #1
    3b14:	d031      	beq.n	3b7a <acosf+0x7a>
    3b16:	1c21      	adds	r1, r4, #0
    3b18:	1c20      	adds	r0, r4, #0
    3b1a:	f001 f985 	bl	4e28 <__aeabi_fcmpun>
    3b1e:	1e07      	subs	r7, r0, #0
    3b20:	d12b      	bne.n	3b7a <acosf+0x7a>
    3b22:	1c20      	adds	r0, r4, #0
    3b24:	f000 fa5a 	bl	3fdc <fabsf>
    3b28:	21fe      	movs	r1, #254	; 0xfe
    3b2a:	0589      	lsls	r1, r1, #22
    3b2c:	f000 fb0c 	bl	4148 <__aeabi_fcmpgt>
    3b30:	2800      	cmp	r0, #0
    3b32:	d022      	beq.n	3b7a <acosf+0x7a>
    3b34:	2301      	movs	r3, #1
    3b36:	9302      	str	r3, [sp, #8]
    3b38:	4b19      	ldr	r3, [pc, #100]	; (3ba0 <acosf+0xa0>)
    3b3a:	1c20      	adds	r0, r4, #0
    3b3c:	9303      	str	r3, [sp, #12]
    3b3e:	970a      	str	r7, [sp, #40]	; 0x28
    3b40:	f002 f890 	bl	5c64 <__aeabi_f2d>
    3b44:	9006      	str	r0, [sp, #24]
    3b46:	9107      	str	r1, [sp, #28]
    3b48:	9004      	str	r0, [sp, #16]
    3b4a:	9105      	str	r1, [sp, #20]
    3b4c:	4815      	ldr	r0, [pc, #84]	; (3ba4 <acosf+0xa4>)
    3b4e:	f000 fa3f 	bl	3fd0 <nan>
    3b52:	2300      	movs	r3, #0
    3b54:	56f3      	ldrsb	r3, [r6, r3]
    3b56:	9008      	str	r0, [sp, #32]
    3b58:	9109      	str	r1, [sp, #36]	; 0x24
    3b5a:	2b02      	cmp	r3, #2
    3b5c:	d010      	beq.n	3b80 <acosf+0x80>
    3b5e:	a802      	add	r0, sp, #8
    3b60:	f000 fa34 	bl	3fcc <matherr>
    3b64:	2800      	cmp	r0, #0
    3b66:	d00b      	beq.n	3b80 <acosf+0x80>
    3b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b6a:	9301      	str	r3, [sp, #4]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d10f      	bne.n	3b90 <acosf+0x90>
    3b70:	9808      	ldr	r0, [sp, #32]
    3b72:	9909      	ldr	r1, [sp, #36]	; 0x24
    3b74:	f002 f8c8 	bl	5d08 <__aeabi_d2f>
    3b78:	1c05      	adds	r5, r0, #0
    3b7a:	1c28      	adds	r0, r5, #0
    3b7c:	b00d      	add	sp, #52	; 0x34
    3b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b80:	f002 faa8 	bl	60d4 <__errno>
    3b84:	2321      	movs	r3, #33	; 0x21
    3b86:	6003      	str	r3, [r0, #0]
    3b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b8a:	9301      	str	r3, [sp, #4]
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	d0ef      	beq.n	3b70 <acosf+0x70>
    3b90:	f002 faa0 	bl	60d4 <__errno>
    3b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3b96:	9301      	str	r3, [sp, #4]
    3b98:	6003      	str	r3, [r0, #0]
    3b9a:	e7e9      	b.n	3b70 <acosf+0x70>
    3b9c:	20000008 	.word	0x20000008
    3ba0:	0000640c 	.word	0x0000640c
    3ba4:	00006414 	.word	0x00006414

00003ba8 <sqrtf>:
    3ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3baa:	2500      	movs	r5, #0
    3bac:	b08d      	sub	sp, #52	; 0x34
    3bae:	1c04      	adds	r4, r0, #0
    3bb0:	f000 f9b0 	bl	3f14 <__ieee754_sqrtf>
    3bb4:	4b23      	ldr	r3, [pc, #140]	; (3c44 <sqrtf+0x9c>)
    3bb6:	1c06      	adds	r6, r0, #0
    3bb8:	575d      	ldrsb	r5, [r3, r5]
    3bba:	1c6b      	adds	r3, r5, #1
    3bbc:	d00b      	beq.n	3bd6 <sqrtf+0x2e>
    3bbe:	1c21      	adds	r1, r4, #0
    3bc0:	1c20      	adds	r0, r4, #0
    3bc2:	f001 f931 	bl	4e28 <__aeabi_fcmpun>
    3bc6:	1e07      	subs	r7, r0, #0
    3bc8:	d105      	bne.n	3bd6 <sqrtf+0x2e>
    3bca:	2100      	movs	r1, #0
    3bcc:	1c20      	adds	r0, r4, #0
    3bce:	f000 faa7 	bl	4120 <__aeabi_fcmplt>
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d102      	bne.n	3bdc <sqrtf+0x34>
    3bd6:	1c30      	adds	r0, r6, #0
    3bd8:	b00d      	add	sp, #52	; 0x34
    3bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bdc:	2301      	movs	r3, #1
    3bde:	9302      	str	r3, [sp, #8]
    3be0:	4b19      	ldr	r3, [pc, #100]	; (3c48 <sqrtf+0xa0>)
    3be2:	1c20      	adds	r0, r4, #0
    3be4:	9303      	str	r3, [sp, #12]
    3be6:	970a      	str	r7, [sp, #40]	; 0x28
    3be8:	f002 f83c 	bl	5c64 <__aeabi_f2d>
    3bec:	2200      	movs	r2, #0
    3bee:	9006      	str	r0, [sp, #24]
    3bf0:	9107      	str	r1, [sp, #28]
    3bf2:	9004      	str	r0, [sp, #16]
    3bf4:	9105      	str	r1, [sp, #20]
    3bf6:	2300      	movs	r3, #0
    3bf8:	2d00      	cmp	r5, #0
    3bfa:	d015      	beq.n	3c28 <sqrtf+0x80>
    3bfc:	0010      	movs	r0, r2
    3bfe:	0019      	movs	r1, r3
    3c00:	f001 f97a 	bl	4ef8 <__aeabi_ddiv>
    3c04:	9008      	str	r0, [sp, #32]
    3c06:	9109      	str	r1, [sp, #36]	; 0x24
    3c08:	2d02      	cmp	r5, #2
    3c0a:	d10f      	bne.n	3c2c <sqrtf+0x84>
    3c0c:	f002 fa62 	bl	60d4 <__errno>
    3c10:	2321      	movs	r3, #33	; 0x21
    3c12:	6003      	str	r3, [r0, #0]
    3c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c16:	9301      	str	r3, [sp, #4]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d10d      	bne.n	3c38 <sqrtf+0x90>
    3c1c:	9808      	ldr	r0, [sp, #32]
    3c1e:	9909      	ldr	r1, [sp, #36]	; 0x24
    3c20:	f002 f872 	bl	5d08 <__aeabi_d2f>
    3c24:	1c06      	adds	r6, r0, #0
    3c26:	e7d6      	b.n	3bd6 <sqrtf+0x2e>
    3c28:	9208      	str	r2, [sp, #32]
    3c2a:	9309      	str	r3, [sp, #36]	; 0x24
    3c2c:	a802      	add	r0, sp, #8
    3c2e:	f000 f9cd 	bl	3fcc <matherr>
    3c32:	2800      	cmp	r0, #0
    3c34:	d1ee      	bne.n	3c14 <sqrtf+0x6c>
    3c36:	e7e9      	b.n	3c0c <sqrtf+0x64>
    3c38:	f002 fa4c 	bl	60d4 <__errno>
    3c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3c3e:	9301      	str	r3, [sp, #4]
    3c40:	6003      	str	r3, [r0, #0]
    3c42:	e7eb      	b.n	3c1c <sqrtf+0x74>
    3c44:	20000008 	.word	0x20000008
    3c48:	00006418 	.word	0x00006418

00003c4c <__ieee754_acosf>:
    3c4c:	22fe      	movs	r2, #254	; 0xfe
    3c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c50:	0043      	lsls	r3, r0, #1
    3c52:	1c04      	adds	r4, r0, #0
    3c54:	085b      	lsrs	r3, r3, #1
    3c56:	0592      	lsls	r2, r2, #22
    3c58:	4293      	cmp	r3, r2
    3c5a:	d011      	beq.n	3c80 <__ieee754_acosf+0x34>
    3c5c:	dc09      	bgt.n	3c72 <__ieee754_acosf+0x26>
    3c5e:	4a9d      	ldr	r2, [pc, #628]	; (3ed4 <__ieee754_acosf+0x288>)
    3c60:	4293      	cmp	r3, r2
    3c62:	dc12      	bgt.n	3c8a <__ieee754_acosf+0x3e>
    3c64:	228c      	movs	r2, #140	; 0x8c
    3c66:	0592      	lsls	r2, r2, #22
    3c68:	4293      	cmp	r3, r2
    3c6a:	dd00      	ble.n	3c6e <__ieee754_acosf+0x22>
    3c6c:	e080      	b.n	3d70 <__ieee754_acosf+0x124>
    3c6e:	489a      	ldr	r0, [pc, #616]	; (3ed8 <__ieee754_acosf+0x28c>)
    3c70:	e005      	b.n	3c7e <__ieee754_acosf+0x32>
    3c72:	1c01      	adds	r1, r0, #0
    3c74:	f000 ff3c 	bl	4af0 <__aeabi_fsub>
    3c78:	1c01      	adds	r1, r0, #0
    3c7a:	f000 fc29 	bl	44d0 <__aeabi_fdiv>
    3c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c80:	2000      	movs	r0, #0
    3c82:	2c00      	cmp	r4, #0
    3c84:	dcfb      	bgt.n	3c7e <__ieee754_acosf+0x32>
    3c86:	4895      	ldr	r0, [pc, #596]	; (3edc <__ieee754_acosf+0x290>)
    3c88:	e7f9      	b.n	3c7e <__ieee754_acosf+0x32>
    3c8a:	2800      	cmp	r0, #0
    3c8c:	da00      	bge.n	3c90 <__ieee754_acosf+0x44>
    3c8e:	e0c3      	b.n	3e18 <__ieee754_acosf+0x1cc>
    3c90:	1c01      	adds	r1, r0, #0
    3c92:	20fe      	movs	r0, #254	; 0xfe
    3c94:	0580      	lsls	r0, r0, #22
    3c96:	f000 ff2b 	bl	4af0 <__aeabi_fsub>
    3c9a:	21fc      	movs	r1, #252	; 0xfc
    3c9c:	0589      	lsls	r1, r1, #22
    3c9e:	f000 fe07 	bl	48b0 <__aeabi_fmul>
    3ca2:	1c04      	adds	r4, r0, #0
    3ca4:	f000 f936 	bl	3f14 <__ieee754_sqrtf>
    3ca8:	498d      	ldr	r1, [pc, #564]	; (3ee0 <__ieee754_acosf+0x294>)
    3caa:	1c06      	adds	r6, r0, #0
    3cac:	0b05      	lsrs	r5, r0, #12
    3cae:	1c20      	adds	r0, r4, #0
    3cb0:	f000 fdfe 	bl	48b0 <__aeabi_fmul>
    3cb4:	498b      	ldr	r1, [pc, #556]	; (3ee4 <__ieee754_acosf+0x298>)
    3cb6:	f000 fa79 	bl	41ac <__aeabi_fadd>
    3cba:	1c21      	adds	r1, r4, #0
    3cbc:	f000 fdf8 	bl	48b0 <__aeabi_fmul>
    3cc0:	4989      	ldr	r1, [pc, #548]	; (3ee8 <__ieee754_acosf+0x29c>)
    3cc2:	f000 ff15 	bl	4af0 <__aeabi_fsub>
    3cc6:	1c21      	adds	r1, r4, #0
    3cc8:	f000 fdf2 	bl	48b0 <__aeabi_fmul>
    3ccc:	4987      	ldr	r1, [pc, #540]	; (3eec <__ieee754_acosf+0x2a0>)
    3cce:	f000 fa6d 	bl	41ac <__aeabi_fadd>
    3cd2:	1c21      	adds	r1, r4, #0
    3cd4:	f000 fdec 	bl	48b0 <__aeabi_fmul>
    3cd8:	4985      	ldr	r1, [pc, #532]	; (3ef0 <__ieee754_acosf+0x2a4>)
    3cda:	f000 ff09 	bl	4af0 <__aeabi_fsub>
    3cde:	1c21      	adds	r1, r4, #0
    3ce0:	f000 fde6 	bl	48b0 <__aeabi_fmul>
    3ce4:	4983      	ldr	r1, [pc, #524]	; (3ef4 <__ieee754_acosf+0x2a8>)
    3ce6:	f000 fa61 	bl	41ac <__aeabi_fadd>
    3cea:	1c21      	adds	r1, r4, #0
    3cec:	f000 fde0 	bl	48b0 <__aeabi_fmul>
    3cf0:	4981      	ldr	r1, [pc, #516]	; (3ef8 <__ieee754_acosf+0x2ac>)
    3cf2:	1c07      	adds	r7, r0, #0
    3cf4:	1c20      	adds	r0, r4, #0
    3cf6:	f000 fddb 	bl	48b0 <__aeabi_fmul>
    3cfa:	4980      	ldr	r1, [pc, #512]	; (3efc <__ieee754_acosf+0x2b0>)
    3cfc:	f000 fef8 	bl	4af0 <__aeabi_fsub>
    3d00:	1c21      	adds	r1, r4, #0
    3d02:	f000 fdd5 	bl	48b0 <__aeabi_fmul>
    3d06:	497e      	ldr	r1, [pc, #504]	; (3f00 <__ieee754_acosf+0x2b4>)
    3d08:	f000 fa50 	bl	41ac <__aeabi_fadd>
    3d0c:	1c21      	adds	r1, r4, #0
    3d0e:	f000 fdcf 	bl	48b0 <__aeabi_fmul>
    3d12:	497c      	ldr	r1, [pc, #496]	; (3f04 <__ieee754_acosf+0x2b8>)
    3d14:	f000 feec 	bl	4af0 <__aeabi_fsub>
    3d18:	1c21      	adds	r1, r4, #0
    3d1a:	f000 fdc9 	bl	48b0 <__aeabi_fmul>
    3d1e:	21fe      	movs	r1, #254	; 0xfe
    3d20:	0589      	lsls	r1, r1, #22
    3d22:	f000 fa43 	bl	41ac <__aeabi_fadd>
    3d26:	1c01      	adds	r1, r0, #0
    3d28:	1c38      	adds	r0, r7, #0
    3d2a:	f000 fbd1 	bl	44d0 <__aeabi_fdiv>
    3d2e:	1c31      	adds	r1, r6, #0
    3d30:	f000 fdbe 	bl	48b0 <__aeabi_fmul>
    3d34:	032d      	lsls	r5, r5, #12
    3d36:	1c07      	adds	r7, r0, #0
    3d38:	1c29      	adds	r1, r5, #0
    3d3a:	1c28      	adds	r0, r5, #0
    3d3c:	f000 fdb8 	bl	48b0 <__aeabi_fmul>
    3d40:	1c01      	adds	r1, r0, #0
    3d42:	1c20      	adds	r0, r4, #0
    3d44:	f000 fed4 	bl	4af0 <__aeabi_fsub>
    3d48:	1c31      	adds	r1, r6, #0
    3d4a:	1c04      	adds	r4, r0, #0
    3d4c:	1c28      	adds	r0, r5, #0
    3d4e:	f000 fa2d 	bl	41ac <__aeabi_fadd>
    3d52:	1c01      	adds	r1, r0, #0
    3d54:	1c20      	adds	r0, r4, #0
    3d56:	f000 fbbb 	bl	44d0 <__aeabi_fdiv>
    3d5a:	1c01      	adds	r1, r0, #0
    3d5c:	1c38      	adds	r0, r7, #0
    3d5e:	f000 fa25 	bl	41ac <__aeabi_fadd>
    3d62:	1c29      	adds	r1, r5, #0
    3d64:	f000 fa22 	bl	41ac <__aeabi_fadd>
    3d68:	1c01      	adds	r1, r0, #0
    3d6a:	f000 fa1f 	bl	41ac <__aeabi_fadd>
    3d6e:	e786      	b.n	3c7e <__ieee754_acosf+0x32>
    3d70:	1c01      	adds	r1, r0, #0
    3d72:	f000 fd9d 	bl	48b0 <__aeabi_fmul>
    3d76:	495a      	ldr	r1, [pc, #360]	; (3ee0 <__ieee754_acosf+0x294>)
    3d78:	1c05      	adds	r5, r0, #0
    3d7a:	f000 fd99 	bl	48b0 <__aeabi_fmul>
    3d7e:	4959      	ldr	r1, [pc, #356]	; (3ee4 <__ieee754_acosf+0x298>)
    3d80:	f000 fa14 	bl	41ac <__aeabi_fadd>
    3d84:	1c29      	adds	r1, r5, #0
    3d86:	f000 fd93 	bl	48b0 <__aeabi_fmul>
    3d8a:	4957      	ldr	r1, [pc, #348]	; (3ee8 <__ieee754_acosf+0x29c>)
    3d8c:	f000 feb0 	bl	4af0 <__aeabi_fsub>
    3d90:	1c29      	adds	r1, r5, #0
    3d92:	f000 fd8d 	bl	48b0 <__aeabi_fmul>
    3d96:	4955      	ldr	r1, [pc, #340]	; (3eec <__ieee754_acosf+0x2a0>)
    3d98:	f000 fa08 	bl	41ac <__aeabi_fadd>
    3d9c:	1c29      	adds	r1, r5, #0
    3d9e:	f000 fd87 	bl	48b0 <__aeabi_fmul>
    3da2:	4953      	ldr	r1, [pc, #332]	; (3ef0 <__ieee754_acosf+0x2a4>)
    3da4:	f000 fea4 	bl	4af0 <__aeabi_fsub>
    3da8:	1c29      	adds	r1, r5, #0
    3daa:	f000 fd81 	bl	48b0 <__aeabi_fmul>
    3dae:	4951      	ldr	r1, [pc, #324]	; (3ef4 <__ieee754_acosf+0x2a8>)
    3db0:	f000 f9fc 	bl	41ac <__aeabi_fadd>
    3db4:	1c29      	adds	r1, r5, #0
    3db6:	f000 fd7b 	bl	48b0 <__aeabi_fmul>
    3dba:	494f      	ldr	r1, [pc, #316]	; (3ef8 <__ieee754_acosf+0x2ac>)
    3dbc:	1c06      	adds	r6, r0, #0
    3dbe:	1c28      	adds	r0, r5, #0
    3dc0:	f000 fd76 	bl	48b0 <__aeabi_fmul>
    3dc4:	494d      	ldr	r1, [pc, #308]	; (3efc <__ieee754_acosf+0x2b0>)
    3dc6:	f000 fe93 	bl	4af0 <__aeabi_fsub>
    3dca:	1c29      	adds	r1, r5, #0
    3dcc:	f000 fd70 	bl	48b0 <__aeabi_fmul>
    3dd0:	494b      	ldr	r1, [pc, #300]	; (3f00 <__ieee754_acosf+0x2b4>)
    3dd2:	f000 f9eb 	bl	41ac <__aeabi_fadd>
    3dd6:	1c29      	adds	r1, r5, #0
    3dd8:	f000 fd6a 	bl	48b0 <__aeabi_fmul>
    3ddc:	4949      	ldr	r1, [pc, #292]	; (3f04 <__ieee754_acosf+0x2b8>)
    3dde:	f000 fe87 	bl	4af0 <__aeabi_fsub>
    3de2:	1c29      	adds	r1, r5, #0
    3de4:	f000 fd64 	bl	48b0 <__aeabi_fmul>
    3de8:	21fe      	movs	r1, #254	; 0xfe
    3dea:	0589      	lsls	r1, r1, #22
    3dec:	f000 f9de 	bl	41ac <__aeabi_fadd>
    3df0:	1c01      	adds	r1, r0, #0
    3df2:	1c30      	adds	r0, r6, #0
    3df4:	f000 fb6c 	bl	44d0 <__aeabi_fdiv>
    3df8:	1c21      	adds	r1, r4, #0
    3dfa:	f000 fd59 	bl	48b0 <__aeabi_fmul>
    3dfe:	1c01      	adds	r1, r0, #0
    3e00:	4841      	ldr	r0, [pc, #260]	; (3f08 <__ieee754_acosf+0x2bc>)
    3e02:	f000 fe75 	bl	4af0 <__aeabi_fsub>
    3e06:	1c01      	adds	r1, r0, #0
    3e08:	1c20      	adds	r0, r4, #0
    3e0a:	f000 fe71 	bl	4af0 <__aeabi_fsub>
    3e0e:	1c01      	adds	r1, r0, #0
    3e10:	483e      	ldr	r0, [pc, #248]	; (3f0c <__ieee754_acosf+0x2c0>)
    3e12:	f000 fe6d 	bl	4af0 <__aeabi_fsub>
    3e16:	e732      	b.n	3c7e <__ieee754_acosf+0x32>
    3e18:	21fe      	movs	r1, #254	; 0xfe
    3e1a:	0589      	lsls	r1, r1, #22
    3e1c:	f000 f9c6 	bl	41ac <__aeabi_fadd>
    3e20:	21fc      	movs	r1, #252	; 0xfc
    3e22:	0589      	lsls	r1, r1, #22
    3e24:	f000 fd44 	bl	48b0 <__aeabi_fmul>
    3e28:	492d      	ldr	r1, [pc, #180]	; (3ee0 <__ieee754_acosf+0x294>)
    3e2a:	1c04      	adds	r4, r0, #0
    3e2c:	f000 fd40 	bl	48b0 <__aeabi_fmul>
    3e30:	492c      	ldr	r1, [pc, #176]	; (3ee4 <__ieee754_acosf+0x298>)
    3e32:	f000 f9bb 	bl	41ac <__aeabi_fadd>
    3e36:	1c21      	adds	r1, r4, #0
    3e38:	f000 fd3a 	bl	48b0 <__aeabi_fmul>
    3e3c:	492a      	ldr	r1, [pc, #168]	; (3ee8 <__ieee754_acosf+0x29c>)
    3e3e:	f000 fe57 	bl	4af0 <__aeabi_fsub>
    3e42:	1c21      	adds	r1, r4, #0
    3e44:	f000 fd34 	bl	48b0 <__aeabi_fmul>
    3e48:	4928      	ldr	r1, [pc, #160]	; (3eec <__ieee754_acosf+0x2a0>)
    3e4a:	f000 f9af 	bl	41ac <__aeabi_fadd>
    3e4e:	1c21      	adds	r1, r4, #0
    3e50:	f000 fd2e 	bl	48b0 <__aeabi_fmul>
    3e54:	4926      	ldr	r1, [pc, #152]	; (3ef0 <__ieee754_acosf+0x2a4>)
    3e56:	f000 fe4b 	bl	4af0 <__aeabi_fsub>
    3e5a:	1c21      	adds	r1, r4, #0
    3e5c:	f000 fd28 	bl	48b0 <__aeabi_fmul>
    3e60:	4924      	ldr	r1, [pc, #144]	; (3ef4 <__ieee754_acosf+0x2a8>)
    3e62:	f000 f9a3 	bl	41ac <__aeabi_fadd>
    3e66:	1c21      	adds	r1, r4, #0
    3e68:	f000 fd22 	bl	48b0 <__aeabi_fmul>
    3e6c:	1c06      	adds	r6, r0, #0
    3e6e:	1c20      	adds	r0, r4, #0
    3e70:	f000 f850 	bl	3f14 <__ieee754_sqrtf>
    3e74:	4920      	ldr	r1, [pc, #128]	; (3ef8 <__ieee754_acosf+0x2ac>)
    3e76:	1c05      	adds	r5, r0, #0
    3e78:	1c20      	adds	r0, r4, #0
    3e7a:	f000 fd19 	bl	48b0 <__aeabi_fmul>
    3e7e:	491f      	ldr	r1, [pc, #124]	; (3efc <__ieee754_acosf+0x2b0>)
    3e80:	f000 fe36 	bl	4af0 <__aeabi_fsub>
    3e84:	1c21      	adds	r1, r4, #0
    3e86:	f000 fd13 	bl	48b0 <__aeabi_fmul>
    3e8a:	491d      	ldr	r1, [pc, #116]	; (3f00 <__ieee754_acosf+0x2b4>)
    3e8c:	f000 f98e 	bl	41ac <__aeabi_fadd>
    3e90:	1c21      	adds	r1, r4, #0
    3e92:	f000 fd0d 	bl	48b0 <__aeabi_fmul>
    3e96:	491b      	ldr	r1, [pc, #108]	; (3f04 <__ieee754_acosf+0x2b8>)
    3e98:	f000 fe2a 	bl	4af0 <__aeabi_fsub>
    3e9c:	1c21      	adds	r1, r4, #0
    3e9e:	f000 fd07 	bl	48b0 <__aeabi_fmul>
    3ea2:	21fe      	movs	r1, #254	; 0xfe
    3ea4:	0589      	lsls	r1, r1, #22
    3ea6:	f000 f981 	bl	41ac <__aeabi_fadd>
    3eaa:	1c01      	adds	r1, r0, #0
    3eac:	1c30      	adds	r0, r6, #0
    3eae:	f000 fb0f 	bl	44d0 <__aeabi_fdiv>
    3eb2:	1c29      	adds	r1, r5, #0
    3eb4:	f000 fcfc 	bl	48b0 <__aeabi_fmul>
    3eb8:	4913      	ldr	r1, [pc, #76]	; (3f08 <__ieee754_acosf+0x2bc>)
    3eba:	f000 fe19 	bl	4af0 <__aeabi_fsub>
    3ebe:	1c29      	adds	r1, r5, #0
    3ec0:	f000 f974 	bl	41ac <__aeabi_fadd>
    3ec4:	1c01      	adds	r1, r0, #0
    3ec6:	f000 f971 	bl	41ac <__aeabi_fadd>
    3eca:	1c01      	adds	r1, r0, #0
    3ecc:	4810      	ldr	r0, [pc, #64]	; (3f10 <__ieee754_acosf+0x2c4>)
    3ece:	f000 fe0f 	bl	4af0 <__aeabi_fsub>
    3ed2:	e6d4      	b.n	3c7e <__ieee754_acosf+0x32>
    3ed4:	3effffff 	.word	0x3effffff
    3ed8:	3fc90fdb 	.word	0x3fc90fdb
    3edc:	40490fdb 	.word	0x40490fdb
    3ee0:	3811ef08 	.word	0x3811ef08
    3ee4:	3a4f7f04 	.word	0x3a4f7f04
    3ee8:	3d241146 	.word	0x3d241146
    3eec:	3e4e0aa8 	.word	0x3e4e0aa8
    3ef0:	3ea6b090 	.word	0x3ea6b090
    3ef4:	3e2aaaab 	.word	0x3e2aaaab
    3ef8:	3d9dc62e 	.word	0x3d9dc62e
    3efc:	3f303361 	.word	0x3f303361
    3f00:	4001572d 	.word	0x4001572d
    3f04:	4019d139 	.word	0x4019d139
    3f08:	33a22168 	.word	0x33a22168
    3f0c:	3fc90fda 	.word	0x3fc90fda
    3f10:	40490fda 	.word	0x40490fda

00003f14 <__ieee754_sqrtf>:
    3f14:	492b      	ldr	r1, [pc, #172]	; (3fc4 <__ieee754_sqrtf+0xb0>)
    3f16:	0042      	lsls	r2, r0, #1
    3f18:	b570      	push	{r4, r5, r6, lr}
    3f1a:	0003      	movs	r3, r0
    3f1c:	1c04      	adds	r4, r0, #0
    3f1e:	0852      	lsrs	r2, r2, #1
    3f20:	428a      	cmp	r2, r1
    3f22:	d83a      	bhi.n	3f9a <__ieee754_sqrtf+0x86>
    3f24:	2a00      	cmp	r2, #0
    3f26:	d037      	beq.n	3f98 <__ieee754_sqrtf+0x84>
    3f28:	2800      	cmp	r0, #0
    3f2a:	db3f      	blt.n	3fac <__ieee754_sqrtf+0x98>
    3f2c:	4926      	ldr	r1, [pc, #152]	; (3fc8 <__ieee754_sqrtf+0xb4>)
    3f2e:	15c6      	asrs	r6, r0, #23
    3f30:	428a      	cmp	r2, r1
    3f32:	d80b      	bhi.n	3f4c <__ieee754_sqrtf+0x38>
    3f34:	2080      	movs	r0, #128	; 0x80
    3f36:	0400      	lsls	r0, r0, #16
    3f38:	4220      	tst	r0, r4
    3f3a:	d13e      	bne.n	3fba <__ieee754_sqrtf+0xa6>
    3f3c:	2200      	movs	r2, #0
    3f3e:	e000      	b.n	3f42 <__ieee754_sqrtf+0x2e>
    3f40:	000a      	movs	r2, r1
    3f42:	005b      	lsls	r3, r3, #1
    3f44:	1c51      	adds	r1, r2, #1
    3f46:	4203      	tst	r3, r0
    3f48:	d0fa      	beq.n	3f40 <__ieee754_sqrtf+0x2c>
    3f4a:	1ab6      	subs	r6, r6, r2
    3f4c:	025b      	lsls	r3, r3, #9
    3f4e:	0a5a      	lsrs	r2, r3, #9
    3f50:	2380      	movs	r3, #128	; 0x80
    3f52:	3e7f      	subs	r6, #127	; 0x7f
    3f54:	041b      	lsls	r3, r3, #16
    3f56:	4313      	orrs	r3, r2
    3f58:	07f2      	lsls	r2, r6, #31
    3f5a:	d425      	bmi.n	3fa8 <__ieee754_sqrtf+0x94>
    3f5c:	2280      	movs	r2, #128	; 0x80
    3f5e:	1070      	asrs	r0, r6, #1
    3f60:	2119      	movs	r1, #25
    3f62:	2600      	movs	r6, #0
    3f64:	2500      	movs	r5, #0
    3f66:	005b      	lsls	r3, r3, #1
    3f68:	0452      	lsls	r2, r2, #17
    3f6a:	18ac      	adds	r4, r5, r2
    3f6c:	429c      	cmp	r4, r3
    3f6e:	dc02      	bgt.n	3f76 <__ieee754_sqrtf+0x62>
    3f70:	18a5      	adds	r5, r4, r2
    3f72:	1b1b      	subs	r3, r3, r4
    3f74:	18b6      	adds	r6, r6, r2
    3f76:	3901      	subs	r1, #1
    3f78:	005b      	lsls	r3, r3, #1
    3f7a:	0852      	lsrs	r2, r2, #1
    3f7c:	2900      	cmp	r1, #0
    3f7e:	d1f4      	bne.n	3f6a <__ieee754_sqrtf+0x56>
    3f80:	2b00      	cmp	r3, #0
    3f82:	d002      	beq.n	3f8a <__ieee754_sqrtf+0x76>
    3f84:	2301      	movs	r3, #1
    3f86:	3601      	adds	r6, #1
    3f88:	439e      	bics	r6, r3
    3f8a:	23fc      	movs	r3, #252	; 0xfc
    3f8c:	059b      	lsls	r3, r3, #22
    3f8e:	469c      	mov	ip, r3
    3f90:	1076      	asrs	r6, r6, #1
    3f92:	4466      	add	r6, ip
    3f94:	05c0      	lsls	r0, r0, #23
    3f96:	1980      	adds	r0, r0, r6
    3f98:	bd70      	pop	{r4, r5, r6, pc}
    3f9a:	1c01      	adds	r1, r0, #0
    3f9c:	f000 fc88 	bl	48b0 <__aeabi_fmul>
    3fa0:	1c21      	adds	r1, r4, #0
    3fa2:	f000 f903 	bl	41ac <__aeabi_fadd>
    3fa6:	e7f7      	b.n	3f98 <__ieee754_sqrtf+0x84>
    3fa8:	005b      	lsls	r3, r3, #1
    3faa:	e7d7      	b.n	3f5c <__ieee754_sqrtf+0x48>
    3fac:	1c01      	adds	r1, r0, #0
    3fae:	f000 fd9f 	bl	4af0 <__aeabi_fsub>
    3fb2:	1c01      	adds	r1, r0, #0
    3fb4:	f000 fa8c 	bl	44d0 <__aeabi_fdiv>
    3fb8:	e7ee      	b.n	3f98 <__ieee754_sqrtf+0x84>
    3fba:	2201      	movs	r2, #1
    3fbc:	4252      	negs	r2, r2
    3fbe:	1ab6      	subs	r6, r6, r2
    3fc0:	e7c4      	b.n	3f4c <__ieee754_sqrtf+0x38>
    3fc2:	46c0      	nop			; (mov r8, r8)
    3fc4:	7f7fffff 	.word	0x7f7fffff
    3fc8:	007fffff 	.word	0x007fffff

00003fcc <matherr>:
    3fcc:	2000      	movs	r0, #0
    3fce:	4770      	bx	lr

00003fd0 <nan>:
    3fd0:	2000      	movs	r0, #0
    3fd2:	4901      	ldr	r1, [pc, #4]	; (3fd8 <nan+0x8>)
    3fd4:	4770      	bx	lr
    3fd6:	46c0      	nop			; (mov r8, r8)
    3fd8:	7ff80000 	.word	0x7ff80000

00003fdc <fabsf>:
    3fdc:	0040      	lsls	r0, r0, #1
    3fde:	0840      	lsrs	r0, r0, #1
    3fe0:	4770      	bx	lr
    3fe2:	46c0      	nop			; (mov r8, r8)

00003fe4 <__udivsi3>:
    3fe4:	2200      	movs	r2, #0
    3fe6:	0843      	lsrs	r3, r0, #1
    3fe8:	428b      	cmp	r3, r1
    3fea:	d374      	bcc.n	40d6 <__udivsi3+0xf2>
    3fec:	0903      	lsrs	r3, r0, #4
    3fee:	428b      	cmp	r3, r1
    3ff0:	d35f      	bcc.n	40b2 <__udivsi3+0xce>
    3ff2:	0a03      	lsrs	r3, r0, #8
    3ff4:	428b      	cmp	r3, r1
    3ff6:	d344      	bcc.n	4082 <__udivsi3+0x9e>
    3ff8:	0b03      	lsrs	r3, r0, #12
    3ffa:	428b      	cmp	r3, r1
    3ffc:	d328      	bcc.n	4050 <__udivsi3+0x6c>
    3ffe:	0c03      	lsrs	r3, r0, #16
    4000:	428b      	cmp	r3, r1
    4002:	d30d      	bcc.n	4020 <__udivsi3+0x3c>
    4004:	22ff      	movs	r2, #255	; 0xff
    4006:	0209      	lsls	r1, r1, #8
    4008:	ba12      	rev	r2, r2
    400a:	0c03      	lsrs	r3, r0, #16
    400c:	428b      	cmp	r3, r1
    400e:	d302      	bcc.n	4016 <__udivsi3+0x32>
    4010:	1212      	asrs	r2, r2, #8
    4012:	0209      	lsls	r1, r1, #8
    4014:	d065      	beq.n	40e2 <__udivsi3+0xfe>
    4016:	0b03      	lsrs	r3, r0, #12
    4018:	428b      	cmp	r3, r1
    401a:	d319      	bcc.n	4050 <__udivsi3+0x6c>
    401c:	e000      	b.n	4020 <__udivsi3+0x3c>
    401e:	0a09      	lsrs	r1, r1, #8
    4020:	0bc3      	lsrs	r3, r0, #15
    4022:	428b      	cmp	r3, r1
    4024:	d301      	bcc.n	402a <__udivsi3+0x46>
    4026:	03cb      	lsls	r3, r1, #15
    4028:	1ac0      	subs	r0, r0, r3
    402a:	4152      	adcs	r2, r2
    402c:	0b83      	lsrs	r3, r0, #14
    402e:	428b      	cmp	r3, r1
    4030:	d301      	bcc.n	4036 <__udivsi3+0x52>
    4032:	038b      	lsls	r3, r1, #14
    4034:	1ac0      	subs	r0, r0, r3
    4036:	4152      	adcs	r2, r2
    4038:	0b43      	lsrs	r3, r0, #13
    403a:	428b      	cmp	r3, r1
    403c:	d301      	bcc.n	4042 <__udivsi3+0x5e>
    403e:	034b      	lsls	r3, r1, #13
    4040:	1ac0      	subs	r0, r0, r3
    4042:	4152      	adcs	r2, r2
    4044:	0b03      	lsrs	r3, r0, #12
    4046:	428b      	cmp	r3, r1
    4048:	d301      	bcc.n	404e <__udivsi3+0x6a>
    404a:	030b      	lsls	r3, r1, #12
    404c:	1ac0      	subs	r0, r0, r3
    404e:	4152      	adcs	r2, r2
    4050:	0ac3      	lsrs	r3, r0, #11
    4052:	428b      	cmp	r3, r1
    4054:	d301      	bcc.n	405a <__udivsi3+0x76>
    4056:	02cb      	lsls	r3, r1, #11
    4058:	1ac0      	subs	r0, r0, r3
    405a:	4152      	adcs	r2, r2
    405c:	0a83      	lsrs	r3, r0, #10
    405e:	428b      	cmp	r3, r1
    4060:	d301      	bcc.n	4066 <__udivsi3+0x82>
    4062:	028b      	lsls	r3, r1, #10
    4064:	1ac0      	subs	r0, r0, r3
    4066:	4152      	adcs	r2, r2
    4068:	0a43      	lsrs	r3, r0, #9
    406a:	428b      	cmp	r3, r1
    406c:	d301      	bcc.n	4072 <__udivsi3+0x8e>
    406e:	024b      	lsls	r3, r1, #9
    4070:	1ac0      	subs	r0, r0, r3
    4072:	4152      	adcs	r2, r2
    4074:	0a03      	lsrs	r3, r0, #8
    4076:	428b      	cmp	r3, r1
    4078:	d301      	bcc.n	407e <__udivsi3+0x9a>
    407a:	020b      	lsls	r3, r1, #8
    407c:	1ac0      	subs	r0, r0, r3
    407e:	4152      	adcs	r2, r2
    4080:	d2cd      	bcs.n	401e <__udivsi3+0x3a>
    4082:	09c3      	lsrs	r3, r0, #7
    4084:	428b      	cmp	r3, r1
    4086:	d301      	bcc.n	408c <__udivsi3+0xa8>
    4088:	01cb      	lsls	r3, r1, #7
    408a:	1ac0      	subs	r0, r0, r3
    408c:	4152      	adcs	r2, r2
    408e:	0983      	lsrs	r3, r0, #6
    4090:	428b      	cmp	r3, r1
    4092:	d301      	bcc.n	4098 <__udivsi3+0xb4>
    4094:	018b      	lsls	r3, r1, #6
    4096:	1ac0      	subs	r0, r0, r3
    4098:	4152      	adcs	r2, r2
    409a:	0943      	lsrs	r3, r0, #5
    409c:	428b      	cmp	r3, r1
    409e:	d301      	bcc.n	40a4 <__udivsi3+0xc0>
    40a0:	014b      	lsls	r3, r1, #5
    40a2:	1ac0      	subs	r0, r0, r3
    40a4:	4152      	adcs	r2, r2
    40a6:	0903      	lsrs	r3, r0, #4
    40a8:	428b      	cmp	r3, r1
    40aa:	d301      	bcc.n	40b0 <__udivsi3+0xcc>
    40ac:	010b      	lsls	r3, r1, #4
    40ae:	1ac0      	subs	r0, r0, r3
    40b0:	4152      	adcs	r2, r2
    40b2:	08c3      	lsrs	r3, r0, #3
    40b4:	428b      	cmp	r3, r1
    40b6:	d301      	bcc.n	40bc <__udivsi3+0xd8>
    40b8:	00cb      	lsls	r3, r1, #3
    40ba:	1ac0      	subs	r0, r0, r3
    40bc:	4152      	adcs	r2, r2
    40be:	0883      	lsrs	r3, r0, #2
    40c0:	428b      	cmp	r3, r1
    40c2:	d301      	bcc.n	40c8 <__udivsi3+0xe4>
    40c4:	008b      	lsls	r3, r1, #2
    40c6:	1ac0      	subs	r0, r0, r3
    40c8:	4152      	adcs	r2, r2
    40ca:	0843      	lsrs	r3, r0, #1
    40cc:	428b      	cmp	r3, r1
    40ce:	d301      	bcc.n	40d4 <__udivsi3+0xf0>
    40d0:	004b      	lsls	r3, r1, #1
    40d2:	1ac0      	subs	r0, r0, r3
    40d4:	4152      	adcs	r2, r2
    40d6:	1a41      	subs	r1, r0, r1
    40d8:	d200      	bcs.n	40dc <__udivsi3+0xf8>
    40da:	4601      	mov	r1, r0
    40dc:	4152      	adcs	r2, r2
    40de:	4610      	mov	r0, r2
    40e0:	4770      	bx	lr
    40e2:	e7ff      	b.n	40e4 <__udivsi3+0x100>
    40e4:	b501      	push	{r0, lr}
    40e6:	2000      	movs	r0, #0
    40e8:	f000 f806 	bl	40f8 <__aeabi_idiv0>
    40ec:	bd02      	pop	{r1, pc}
    40ee:	46c0      	nop			; (mov r8, r8)

000040f0 <__aeabi_uidivmod>:
    40f0:	2900      	cmp	r1, #0
    40f2:	d0f7      	beq.n	40e4 <__udivsi3+0x100>
    40f4:	e776      	b.n	3fe4 <__udivsi3>
    40f6:	4770      	bx	lr

000040f8 <__aeabi_idiv0>:
    40f8:	4770      	bx	lr
    40fa:	46c0      	nop			; (mov r8, r8)

000040fc <__aeabi_cfrcmple>:
    40fc:	4684      	mov	ip, r0
    40fe:	1c08      	adds	r0, r1, #0
    4100:	4661      	mov	r1, ip
    4102:	e7ff      	b.n	4104 <__aeabi_cfcmpeq>

00004104 <__aeabi_cfcmpeq>:
    4104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4106:	f000 fb91 	bl	482c <__lesf2>
    410a:	2800      	cmp	r0, #0
    410c:	d401      	bmi.n	4112 <__aeabi_cfcmpeq+0xe>
    410e:	2100      	movs	r1, #0
    4110:	42c8      	cmn	r0, r1
    4112:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004114 <__aeabi_fcmpeq>:
    4114:	b510      	push	{r4, lr}
    4116:	f000 fb23 	bl	4760 <__eqsf2>
    411a:	4240      	negs	r0, r0
    411c:	3001      	adds	r0, #1
    411e:	bd10      	pop	{r4, pc}

00004120 <__aeabi_fcmplt>:
    4120:	b510      	push	{r4, lr}
    4122:	f000 fb83 	bl	482c <__lesf2>
    4126:	2800      	cmp	r0, #0
    4128:	db01      	blt.n	412e <__aeabi_fcmplt+0xe>
    412a:	2000      	movs	r0, #0
    412c:	bd10      	pop	{r4, pc}
    412e:	2001      	movs	r0, #1
    4130:	bd10      	pop	{r4, pc}
    4132:	46c0      	nop			; (mov r8, r8)

00004134 <__aeabi_fcmple>:
    4134:	b510      	push	{r4, lr}
    4136:	f000 fb79 	bl	482c <__lesf2>
    413a:	2800      	cmp	r0, #0
    413c:	dd01      	ble.n	4142 <__aeabi_fcmple+0xe>
    413e:	2000      	movs	r0, #0
    4140:	bd10      	pop	{r4, pc}
    4142:	2001      	movs	r0, #1
    4144:	bd10      	pop	{r4, pc}
    4146:	46c0      	nop			; (mov r8, r8)

00004148 <__aeabi_fcmpgt>:
    4148:	b510      	push	{r4, lr}
    414a:	f000 fb2f 	bl	47ac <__gesf2>
    414e:	2800      	cmp	r0, #0
    4150:	dc01      	bgt.n	4156 <__aeabi_fcmpgt+0xe>
    4152:	2000      	movs	r0, #0
    4154:	bd10      	pop	{r4, pc}
    4156:	2001      	movs	r0, #1
    4158:	bd10      	pop	{r4, pc}
    415a:	46c0      	nop			; (mov r8, r8)

0000415c <__aeabi_fcmpge>:
    415c:	b510      	push	{r4, lr}
    415e:	f000 fb25 	bl	47ac <__gesf2>
    4162:	2800      	cmp	r0, #0
    4164:	da01      	bge.n	416a <__aeabi_fcmpge+0xe>
    4166:	2000      	movs	r0, #0
    4168:	bd10      	pop	{r4, pc}
    416a:	2001      	movs	r0, #1
    416c:	bd10      	pop	{r4, pc}
    416e:	46c0      	nop			; (mov r8, r8)

00004170 <__aeabi_d2uiz>:
    4170:	b570      	push	{r4, r5, r6, lr}
    4172:	2200      	movs	r2, #0
    4174:	4b0c      	ldr	r3, [pc, #48]	; (41a8 <__aeabi_d2uiz+0x38>)
    4176:	0004      	movs	r4, r0
    4178:	000d      	movs	r5, r1
    417a:	f001 fe83 	bl	5e84 <__aeabi_dcmpge>
    417e:	2800      	cmp	r0, #0
    4180:	d104      	bne.n	418c <__aeabi_d2uiz+0x1c>
    4182:	0020      	movs	r0, r4
    4184:	0029      	movs	r1, r5
    4186:	f001 fd01 	bl	5b8c <__aeabi_d2iz>
    418a:	bd70      	pop	{r4, r5, r6, pc}
    418c:	4b06      	ldr	r3, [pc, #24]	; (41a8 <__aeabi_d2uiz+0x38>)
    418e:	2200      	movs	r2, #0
    4190:	0020      	movs	r0, r4
    4192:	0029      	movs	r1, r5
    4194:	f001 f9e4 	bl	5560 <__aeabi_dsub>
    4198:	f001 fcf8 	bl	5b8c <__aeabi_d2iz>
    419c:	2380      	movs	r3, #128	; 0x80
    419e:	061b      	lsls	r3, r3, #24
    41a0:	469c      	mov	ip, r3
    41a2:	4460      	add	r0, ip
    41a4:	e7f1      	b.n	418a <__aeabi_d2uiz+0x1a>
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	41e00000 	.word	0x41e00000

000041ac <__aeabi_fadd>:
    41ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ae:	46c6      	mov	lr, r8
    41b0:	024e      	lsls	r6, r1, #9
    41b2:	0247      	lsls	r7, r0, #9
    41b4:	0a76      	lsrs	r6, r6, #9
    41b6:	0a7b      	lsrs	r3, r7, #9
    41b8:	0044      	lsls	r4, r0, #1
    41ba:	0fc5      	lsrs	r5, r0, #31
    41bc:	00f7      	lsls	r7, r6, #3
    41be:	0048      	lsls	r0, r1, #1
    41c0:	4698      	mov	r8, r3
    41c2:	b500      	push	{lr}
    41c4:	0e24      	lsrs	r4, r4, #24
    41c6:	002a      	movs	r2, r5
    41c8:	00db      	lsls	r3, r3, #3
    41ca:	0e00      	lsrs	r0, r0, #24
    41cc:	0fc9      	lsrs	r1, r1, #31
    41ce:	46bc      	mov	ip, r7
    41d0:	428d      	cmp	r5, r1
    41d2:	d067      	beq.n	42a4 <__aeabi_fadd+0xf8>
    41d4:	1a22      	subs	r2, r4, r0
    41d6:	2a00      	cmp	r2, #0
    41d8:	dc00      	bgt.n	41dc <__aeabi_fadd+0x30>
    41da:	e0a5      	b.n	4328 <__aeabi_fadd+0x17c>
    41dc:	2800      	cmp	r0, #0
    41de:	d13a      	bne.n	4256 <__aeabi_fadd+0xaa>
    41e0:	2f00      	cmp	r7, #0
    41e2:	d100      	bne.n	41e6 <__aeabi_fadd+0x3a>
    41e4:	e093      	b.n	430e <__aeabi_fadd+0x162>
    41e6:	1e51      	subs	r1, r2, #1
    41e8:	2900      	cmp	r1, #0
    41ea:	d000      	beq.n	41ee <__aeabi_fadd+0x42>
    41ec:	e0bc      	b.n	4368 <__aeabi_fadd+0x1bc>
    41ee:	2401      	movs	r4, #1
    41f0:	1bdb      	subs	r3, r3, r7
    41f2:	015a      	lsls	r2, r3, #5
    41f4:	d546      	bpl.n	4284 <__aeabi_fadd+0xd8>
    41f6:	019b      	lsls	r3, r3, #6
    41f8:	099e      	lsrs	r6, r3, #6
    41fa:	0030      	movs	r0, r6
    41fc:	f001 fe4c 	bl	5e98 <__clzsi2>
    4200:	3805      	subs	r0, #5
    4202:	4086      	lsls	r6, r0
    4204:	4284      	cmp	r4, r0
    4206:	dd00      	ble.n	420a <__aeabi_fadd+0x5e>
    4208:	e09d      	b.n	4346 <__aeabi_fadd+0x19a>
    420a:	1b04      	subs	r4, r0, r4
    420c:	0032      	movs	r2, r6
    420e:	2020      	movs	r0, #32
    4210:	3401      	adds	r4, #1
    4212:	40e2      	lsrs	r2, r4
    4214:	1b04      	subs	r4, r0, r4
    4216:	40a6      	lsls	r6, r4
    4218:	0033      	movs	r3, r6
    421a:	1e5e      	subs	r6, r3, #1
    421c:	41b3      	sbcs	r3, r6
    421e:	2400      	movs	r4, #0
    4220:	4313      	orrs	r3, r2
    4222:	075a      	lsls	r2, r3, #29
    4224:	d004      	beq.n	4230 <__aeabi_fadd+0x84>
    4226:	220f      	movs	r2, #15
    4228:	401a      	ands	r2, r3
    422a:	2a04      	cmp	r2, #4
    422c:	d000      	beq.n	4230 <__aeabi_fadd+0x84>
    422e:	3304      	adds	r3, #4
    4230:	015a      	lsls	r2, r3, #5
    4232:	d529      	bpl.n	4288 <__aeabi_fadd+0xdc>
    4234:	3401      	adds	r4, #1
    4236:	2cff      	cmp	r4, #255	; 0xff
    4238:	d100      	bne.n	423c <__aeabi_fadd+0x90>
    423a:	e081      	b.n	4340 <__aeabi_fadd+0x194>
    423c:	002a      	movs	r2, r5
    423e:	019b      	lsls	r3, r3, #6
    4240:	0a5b      	lsrs	r3, r3, #9
    4242:	b2e4      	uxtb	r4, r4
    4244:	025b      	lsls	r3, r3, #9
    4246:	05e4      	lsls	r4, r4, #23
    4248:	0a58      	lsrs	r0, r3, #9
    424a:	07d2      	lsls	r2, r2, #31
    424c:	4320      	orrs	r0, r4
    424e:	4310      	orrs	r0, r2
    4250:	bc04      	pop	{r2}
    4252:	4690      	mov	r8, r2
    4254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4256:	2cff      	cmp	r4, #255	; 0xff
    4258:	d0e3      	beq.n	4222 <__aeabi_fadd+0x76>
    425a:	2180      	movs	r1, #128	; 0x80
    425c:	0038      	movs	r0, r7
    425e:	04c9      	lsls	r1, r1, #19
    4260:	4308      	orrs	r0, r1
    4262:	4684      	mov	ip, r0
    4264:	2a1b      	cmp	r2, #27
    4266:	dd00      	ble.n	426a <__aeabi_fadd+0xbe>
    4268:	e082      	b.n	4370 <__aeabi_fadd+0x1c4>
    426a:	2020      	movs	r0, #32
    426c:	4661      	mov	r1, ip
    426e:	40d1      	lsrs	r1, r2
    4270:	1a82      	subs	r2, r0, r2
    4272:	4660      	mov	r0, ip
    4274:	4090      	lsls	r0, r2
    4276:	0002      	movs	r2, r0
    4278:	1e50      	subs	r0, r2, #1
    427a:	4182      	sbcs	r2, r0
    427c:	430a      	orrs	r2, r1
    427e:	1a9b      	subs	r3, r3, r2
    4280:	015a      	lsls	r2, r3, #5
    4282:	d4b8      	bmi.n	41f6 <__aeabi_fadd+0x4a>
    4284:	075a      	lsls	r2, r3, #29
    4286:	d1ce      	bne.n	4226 <__aeabi_fadd+0x7a>
    4288:	08de      	lsrs	r6, r3, #3
    428a:	002a      	movs	r2, r5
    428c:	2cff      	cmp	r4, #255	; 0xff
    428e:	d13a      	bne.n	4306 <__aeabi_fadd+0x15a>
    4290:	2e00      	cmp	r6, #0
    4292:	d100      	bne.n	4296 <__aeabi_fadd+0xea>
    4294:	e0ae      	b.n	43f4 <__aeabi_fadd+0x248>
    4296:	2380      	movs	r3, #128	; 0x80
    4298:	03db      	lsls	r3, r3, #15
    429a:	4333      	orrs	r3, r6
    429c:	025b      	lsls	r3, r3, #9
    429e:	0a5b      	lsrs	r3, r3, #9
    42a0:	24ff      	movs	r4, #255	; 0xff
    42a2:	e7cf      	b.n	4244 <__aeabi_fadd+0x98>
    42a4:	1a21      	subs	r1, r4, r0
    42a6:	2900      	cmp	r1, #0
    42a8:	dd52      	ble.n	4350 <__aeabi_fadd+0x1a4>
    42aa:	2800      	cmp	r0, #0
    42ac:	d031      	beq.n	4312 <__aeabi_fadd+0x166>
    42ae:	2cff      	cmp	r4, #255	; 0xff
    42b0:	d0b7      	beq.n	4222 <__aeabi_fadd+0x76>
    42b2:	2080      	movs	r0, #128	; 0x80
    42b4:	003e      	movs	r6, r7
    42b6:	04c0      	lsls	r0, r0, #19
    42b8:	4306      	orrs	r6, r0
    42ba:	46b4      	mov	ip, r6
    42bc:	291b      	cmp	r1, #27
    42be:	dd00      	ble.n	42c2 <__aeabi_fadd+0x116>
    42c0:	e0aa      	b.n	4418 <__aeabi_fadd+0x26c>
    42c2:	2620      	movs	r6, #32
    42c4:	4660      	mov	r0, ip
    42c6:	40c8      	lsrs	r0, r1
    42c8:	1a71      	subs	r1, r6, r1
    42ca:	4666      	mov	r6, ip
    42cc:	408e      	lsls	r6, r1
    42ce:	0031      	movs	r1, r6
    42d0:	1e4e      	subs	r6, r1, #1
    42d2:	41b1      	sbcs	r1, r6
    42d4:	4301      	orrs	r1, r0
    42d6:	185b      	adds	r3, r3, r1
    42d8:	0159      	lsls	r1, r3, #5
    42da:	d5d3      	bpl.n	4284 <__aeabi_fadd+0xd8>
    42dc:	3401      	adds	r4, #1
    42de:	2cff      	cmp	r4, #255	; 0xff
    42e0:	d100      	bne.n	42e4 <__aeabi_fadd+0x138>
    42e2:	e087      	b.n	43f4 <__aeabi_fadd+0x248>
    42e4:	2201      	movs	r2, #1
    42e6:	4978      	ldr	r1, [pc, #480]	; (44c8 <__aeabi_fadd+0x31c>)
    42e8:	401a      	ands	r2, r3
    42ea:	085b      	lsrs	r3, r3, #1
    42ec:	400b      	ands	r3, r1
    42ee:	4313      	orrs	r3, r2
    42f0:	e797      	b.n	4222 <__aeabi_fadd+0x76>
    42f2:	2c00      	cmp	r4, #0
    42f4:	d000      	beq.n	42f8 <__aeabi_fadd+0x14c>
    42f6:	e0a7      	b.n	4448 <__aeabi_fadd+0x29c>
    42f8:	2b00      	cmp	r3, #0
    42fa:	d000      	beq.n	42fe <__aeabi_fadd+0x152>
    42fc:	e0b6      	b.n	446c <__aeabi_fadd+0x2c0>
    42fe:	1e3b      	subs	r3, r7, #0
    4300:	d162      	bne.n	43c8 <__aeabi_fadd+0x21c>
    4302:	2600      	movs	r6, #0
    4304:	2200      	movs	r2, #0
    4306:	0273      	lsls	r3, r6, #9
    4308:	0a5b      	lsrs	r3, r3, #9
    430a:	b2e4      	uxtb	r4, r4
    430c:	e79a      	b.n	4244 <__aeabi_fadd+0x98>
    430e:	0014      	movs	r4, r2
    4310:	e787      	b.n	4222 <__aeabi_fadd+0x76>
    4312:	2f00      	cmp	r7, #0
    4314:	d04d      	beq.n	43b2 <__aeabi_fadd+0x206>
    4316:	1e48      	subs	r0, r1, #1
    4318:	2800      	cmp	r0, #0
    431a:	d157      	bne.n	43cc <__aeabi_fadd+0x220>
    431c:	4463      	add	r3, ip
    431e:	2401      	movs	r4, #1
    4320:	015a      	lsls	r2, r3, #5
    4322:	d5af      	bpl.n	4284 <__aeabi_fadd+0xd8>
    4324:	2402      	movs	r4, #2
    4326:	e7dd      	b.n	42e4 <__aeabi_fadd+0x138>
    4328:	2a00      	cmp	r2, #0
    432a:	d124      	bne.n	4376 <__aeabi_fadd+0x1ca>
    432c:	1c62      	adds	r2, r4, #1
    432e:	b2d2      	uxtb	r2, r2
    4330:	2a01      	cmp	r2, #1
    4332:	ddde      	ble.n	42f2 <__aeabi_fadd+0x146>
    4334:	1bde      	subs	r6, r3, r7
    4336:	0172      	lsls	r2, r6, #5
    4338:	d535      	bpl.n	43a6 <__aeabi_fadd+0x1fa>
    433a:	1afe      	subs	r6, r7, r3
    433c:	000d      	movs	r5, r1
    433e:	e75c      	b.n	41fa <__aeabi_fadd+0x4e>
    4340:	002a      	movs	r2, r5
    4342:	2300      	movs	r3, #0
    4344:	e77e      	b.n	4244 <__aeabi_fadd+0x98>
    4346:	0033      	movs	r3, r6
    4348:	4a60      	ldr	r2, [pc, #384]	; (44cc <__aeabi_fadd+0x320>)
    434a:	1a24      	subs	r4, r4, r0
    434c:	4013      	ands	r3, r2
    434e:	e768      	b.n	4222 <__aeabi_fadd+0x76>
    4350:	2900      	cmp	r1, #0
    4352:	d163      	bne.n	441c <__aeabi_fadd+0x270>
    4354:	1c61      	adds	r1, r4, #1
    4356:	b2c8      	uxtb	r0, r1
    4358:	2801      	cmp	r0, #1
    435a:	dd4e      	ble.n	43fa <__aeabi_fadd+0x24e>
    435c:	29ff      	cmp	r1, #255	; 0xff
    435e:	d049      	beq.n	43f4 <__aeabi_fadd+0x248>
    4360:	4463      	add	r3, ip
    4362:	085b      	lsrs	r3, r3, #1
    4364:	000c      	movs	r4, r1
    4366:	e75c      	b.n	4222 <__aeabi_fadd+0x76>
    4368:	2aff      	cmp	r2, #255	; 0xff
    436a:	d041      	beq.n	43f0 <__aeabi_fadd+0x244>
    436c:	000a      	movs	r2, r1
    436e:	e779      	b.n	4264 <__aeabi_fadd+0xb8>
    4370:	2201      	movs	r2, #1
    4372:	1a9b      	subs	r3, r3, r2
    4374:	e784      	b.n	4280 <__aeabi_fadd+0xd4>
    4376:	2c00      	cmp	r4, #0
    4378:	d01d      	beq.n	43b6 <__aeabi_fadd+0x20a>
    437a:	28ff      	cmp	r0, #255	; 0xff
    437c:	d022      	beq.n	43c4 <__aeabi_fadd+0x218>
    437e:	2480      	movs	r4, #128	; 0x80
    4380:	04e4      	lsls	r4, r4, #19
    4382:	4252      	negs	r2, r2
    4384:	4323      	orrs	r3, r4
    4386:	2a1b      	cmp	r2, #27
    4388:	dd00      	ble.n	438c <__aeabi_fadd+0x1e0>
    438a:	e08a      	b.n	44a2 <__aeabi_fadd+0x2f6>
    438c:	001c      	movs	r4, r3
    438e:	2520      	movs	r5, #32
    4390:	40d4      	lsrs	r4, r2
    4392:	1aaa      	subs	r2, r5, r2
    4394:	4093      	lsls	r3, r2
    4396:	1e5a      	subs	r2, r3, #1
    4398:	4193      	sbcs	r3, r2
    439a:	4323      	orrs	r3, r4
    439c:	4662      	mov	r2, ip
    439e:	0004      	movs	r4, r0
    43a0:	1ad3      	subs	r3, r2, r3
    43a2:	000d      	movs	r5, r1
    43a4:	e725      	b.n	41f2 <__aeabi_fadd+0x46>
    43a6:	2e00      	cmp	r6, #0
    43a8:	d000      	beq.n	43ac <__aeabi_fadd+0x200>
    43aa:	e726      	b.n	41fa <__aeabi_fadd+0x4e>
    43ac:	2200      	movs	r2, #0
    43ae:	2400      	movs	r4, #0
    43b0:	e7a9      	b.n	4306 <__aeabi_fadd+0x15a>
    43b2:	000c      	movs	r4, r1
    43b4:	e735      	b.n	4222 <__aeabi_fadd+0x76>
    43b6:	2b00      	cmp	r3, #0
    43b8:	d04d      	beq.n	4456 <__aeabi_fadd+0x2aa>
    43ba:	43d2      	mvns	r2, r2
    43bc:	2a00      	cmp	r2, #0
    43be:	d0ed      	beq.n	439c <__aeabi_fadd+0x1f0>
    43c0:	28ff      	cmp	r0, #255	; 0xff
    43c2:	d1e0      	bne.n	4386 <__aeabi_fadd+0x1da>
    43c4:	4663      	mov	r3, ip
    43c6:	24ff      	movs	r4, #255	; 0xff
    43c8:	000d      	movs	r5, r1
    43ca:	e72a      	b.n	4222 <__aeabi_fadd+0x76>
    43cc:	29ff      	cmp	r1, #255	; 0xff
    43ce:	d00f      	beq.n	43f0 <__aeabi_fadd+0x244>
    43d0:	0001      	movs	r1, r0
    43d2:	e773      	b.n	42bc <__aeabi_fadd+0x110>
    43d4:	2b00      	cmp	r3, #0
    43d6:	d061      	beq.n	449c <__aeabi_fadd+0x2f0>
    43d8:	24ff      	movs	r4, #255	; 0xff
    43da:	2f00      	cmp	r7, #0
    43dc:	d100      	bne.n	43e0 <__aeabi_fadd+0x234>
    43de:	e720      	b.n	4222 <__aeabi_fadd+0x76>
    43e0:	2280      	movs	r2, #128	; 0x80
    43e2:	4641      	mov	r1, r8
    43e4:	03d2      	lsls	r2, r2, #15
    43e6:	4211      	tst	r1, r2
    43e8:	d002      	beq.n	43f0 <__aeabi_fadd+0x244>
    43ea:	4216      	tst	r6, r2
    43ec:	d100      	bne.n	43f0 <__aeabi_fadd+0x244>
    43ee:	003b      	movs	r3, r7
    43f0:	24ff      	movs	r4, #255	; 0xff
    43f2:	e716      	b.n	4222 <__aeabi_fadd+0x76>
    43f4:	24ff      	movs	r4, #255	; 0xff
    43f6:	2300      	movs	r3, #0
    43f8:	e724      	b.n	4244 <__aeabi_fadd+0x98>
    43fa:	2c00      	cmp	r4, #0
    43fc:	d1ea      	bne.n	43d4 <__aeabi_fadd+0x228>
    43fe:	2b00      	cmp	r3, #0
    4400:	d058      	beq.n	44b4 <__aeabi_fadd+0x308>
    4402:	2f00      	cmp	r7, #0
    4404:	d100      	bne.n	4408 <__aeabi_fadd+0x25c>
    4406:	e70c      	b.n	4222 <__aeabi_fadd+0x76>
    4408:	4463      	add	r3, ip
    440a:	015a      	lsls	r2, r3, #5
    440c:	d400      	bmi.n	4410 <__aeabi_fadd+0x264>
    440e:	e739      	b.n	4284 <__aeabi_fadd+0xd8>
    4410:	4a2e      	ldr	r2, [pc, #184]	; (44cc <__aeabi_fadd+0x320>)
    4412:	000c      	movs	r4, r1
    4414:	4013      	ands	r3, r2
    4416:	e704      	b.n	4222 <__aeabi_fadd+0x76>
    4418:	2101      	movs	r1, #1
    441a:	e75c      	b.n	42d6 <__aeabi_fadd+0x12a>
    441c:	2c00      	cmp	r4, #0
    441e:	d11e      	bne.n	445e <__aeabi_fadd+0x2b2>
    4420:	2b00      	cmp	r3, #0
    4422:	d040      	beq.n	44a6 <__aeabi_fadd+0x2fa>
    4424:	43c9      	mvns	r1, r1
    4426:	2900      	cmp	r1, #0
    4428:	d00b      	beq.n	4442 <__aeabi_fadd+0x296>
    442a:	28ff      	cmp	r0, #255	; 0xff
    442c:	d036      	beq.n	449c <__aeabi_fadd+0x2f0>
    442e:	291b      	cmp	r1, #27
    4430:	dc47      	bgt.n	44c2 <__aeabi_fadd+0x316>
    4432:	001c      	movs	r4, r3
    4434:	2620      	movs	r6, #32
    4436:	40cc      	lsrs	r4, r1
    4438:	1a71      	subs	r1, r6, r1
    443a:	408b      	lsls	r3, r1
    443c:	1e59      	subs	r1, r3, #1
    443e:	418b      	sbcs	r3, r1
    4440:	4323      	orrs	r3, r4
    4442:	4463      	add	r3, ip
    4444:	0004      	movs	r4, r0
    4446:	e747      	b.n	42d8 <__aeabi_fadd+0x12c>
    4448:	2b00      	cmp	r3, #0
    444a:	d118      	bne.n	447e <__aeabi_fadd+0x2d2>
    444c:	1e3b      	subs	r3, r7, #0
    444e:	d02d      	beq.n	44ac <__aeabi_fadd+0x300>
    4450:	000d      	movs	r5, r1
    4452:	24ff      	movs	r4, #255	; 0xff
    4454:	e6e5      	b.n	4222 <__aeabi_fadd+0x76>
    4456:	003b      	movs	r3, r7
    4458:	0004      	movs	r4, r0
    445a:	000d      	movs	r5, r1
    445c:	e6e1      	b.n	4222 <__aeabi_fadd+0x76>
    445e:	28ff      	cmp	r0, #255	; 0xff
    4460:	d01c      	beq.n	449c <__aeabi_fadd+0x2f0>
    4462:	2480      	movs	r4, #128	; 0x80
    4464:	04e4      	lsls	r4, r4, #19
    4466:	4249      	negs	r1, r1
    4468:	4323      	orrs	r3, r4
    446a:	e7e0      	b.n	442e <__aeabi_fadd+0x282>
    446c:	2f00      	cmp	r7, #0
    446e:	d100      	bne.n	4472 <__aeabi_fadd+0x2c6>
    4470:	e6d7      	b.n	4222 <__aeabi_fadd+0x76>
    4472:	1bde      	subs	r6, r3, r7
    4474:	0172      	lsls	r2, r6, #5
    4476:	d51f      	bpl.n	44b8 <__aeabi_fadd+0x30c>
    4478:	1afb      	subs	r3, r7, r3
    447a:	000d      	movs	r5, r1
    447c:	e6d1      	b.n	4222 <__aeabi_fadd+0x76>
    447e:	24ff      	movs	r4, #255	; 0xff
    4480:	2f00      	cmp	r7, #0
    4482:	d100      	bne.n	4486 <__aeabi_fadd+0x2da>
    4484:	e6cd      	b.n	4222 <__aeabi_fadd+0x76>
    4486:	2280      	movs	r2, #128	; 0x80
    4488:	4640      	mov	r0, r8
    448a:	03d2      	lsls	r2, r2, #15
    448c:	4210      	tst	r0, r2
    448e:	d0af      	beq.n	43f0 <__aeabi_fadd+0x244>
    4490:	4216      	tst	r6, r2
    4492:	d1ad      	bne.n	43f0 <__aeabi_fadd+0x244>
    4494:	003b      	movs	r3, r7
    4496:	000d      	movs	r5, r1
    4498:	24ff      	movs	r4, #255	; 0xff
    449a:	e6c2      	b.n	4222 <__aeabi_fadd+0x76>
    449c:	4663      	mov	r3, ip
    449e:	24ff      	movs	r4, #255	; 0xff
    44a0:	e6bf      	b.n	4222 <__aeabi_fadd+0x76>
    44a2:	2301      	movs	r3, #1
    44a4:	e77a      	b.n	439c <__aeabi_fadd+0x1f0>
    44a6:	003b      	movs	r3, r7
    44a8:	0004      	movs	r4, r0
    44aa:	e6ba      	b.n	4222 <__aeabi_fadd+0x76>
    44ac:	2680      	movs	r6, #128	; 0x80
    44ae:	2200      	movs	r2, #0
    44b0:	03f6      	lsls	r6, r6, #15
    44b2:	e6f0      	b.n	4296 <__aeabi_fadd+0xea>
    44b4:	003b      	movs	r3, r7
    44b6:	e6b4      	b.n	4222 <__aeabi_fadd+0x76>
    44b8:	1e33      	subs	r3, r6, #0
    44ba:	d000      	beq.n	44be <__aeabi_fadd+0x312>
    44bc:	e6e2      	b.n	4284 <__aeabi_fadd+0xd8>
    44be:	2200      	movs	r2, #0
    44c0:	e721      	b.n	4306 <__aeabi_fadd+0x15a>
    44c2:	2301      	movs	r3, #1
    44c4:	e7bd      	b.n	4442 <__aeabi_fadd+0x296>
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	7dffffff 	.word	0x7dffffff
    44cc:	fbffffff 	.word	0xfbffffff

000044d0 <__aeabi_fdiv>:
    44d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    44d2:	4657      	mov	r7, sl
    44d4:	464e      	mov	r6, r9
    44d6:	46de      	mov	lr, fp
    44d8:	4645      	mov	r5, r8
    44da:	b5e0      	push	{r5, r6, r7, lr}
    44dc:	0244      	lsls	r4, r0, #9
    44de:	0043      	lsls	r3, r0, #1
    44e0:	0fc6      	lsrs	r6, r0, #31
    44e2:	b083      	sub	sp, #12
    44e4:	1c0f      	adds	r7, r1, #0
    44e6:	0a64      	lsrs	r4, r4, #9
    44e8:	0e1b      	lsrs	r3, r3, #24
    44ea:	46b2      	mov	sl, r6
    44ec:	d053      	beq.n	4596 <__aeabi_fdiv+0xc6>
    44ee:	2bff      	cmp	r3, #255	; 0xff
    44f0:	d027      	beq.n	4542 <__aeabi_fdiv+0x72>
    44f2:	2280      	movs	r2, #128	; 0x80
    44f4:	00e4      	lsls	r4, r4, #3
    44f6:	04d2      	lsls	r2, r2, #19
    44f8:	4314      	orrs	r4, r2
    44fa:	227f      	movs	r2, #127	; 0x7f
    44fc:	4252      	negs	r2, r2
    44fe:	4690      	mov	r8, r2
    4500:	4498      	add	r8, r3
    4502:	2300      	movs	r3, #0
    4504:	4699      	mov	r9, r3
    4506:	469b      	mov	fp, r3
    4508:	027d      	lsls	r5, r7, #9
    450a:	0078      	lsls	r0, r7, #1
    450c:	0ffb      	lsrs	r3, r7, #31
    450e:	0a6d      	lsrs	r5, r5, #9
    4510:	0e00      	lsrs	r0, r0, #24
    4512:	9300      	str	r3, [sp, #0]
    4514:	d024      	beq.n	4560 <__aeabi_fdiv+0x90>
    4516:	28ff      	cmp	r0, #255	; 0xff
    4518:	d046      	beq.n	45a8 <__aeabi_fdiv+0xd8>
    451a:	2380      	movs	r3, #128	; 0x80
    451c:	2100      	movs	r1, #0
    451e:	00ed      	lsls	r5, r5, #3
    4520:	04db      	lsls	r3, r3, #19
    4522:	431d      	orrs	r5, r3
    4524:	387f      	subs	r0, #127	; 0x7f
    4526:	4647      	mov	r7, r8
    4528:	1a38      	subs	r0, r7, r0
    452a:	464f      	mov	r7, r9
    452c:	430f      	orrs	r7, r1
    452e:	00bf      	lsls	r7, r7, #2
    4530:	46b9      	mov	r9, r7
    4532:	0033      	movs	r3, r6
    4534:	9a00      	ldr	r2, [sp, #0]
    4536:	4f87      	ldr	r7, [pc, #540]	; (4754 <__aeabi_fdiv+0x284>)
    4538:	4053      	eors	r3, r2
    453a:	464a      	mov	r2, r9
    453c:	58ba      	ldr	r2, [r7, r2]
    453e:	9301      	str	r3, [sp, #4]
    4540:	4697      	mov	pc, r2
    4542:	2c00      	cmp	r4, #0
    4544:	d14e      	bne.n	45e4 <__aeabi_fdiv+0x114>
    4546:	2308      	movs	r3, #8
    4548:	4699      	mov	r9, r3
    454a:	33f7      	adds	r3, #247	; 0xf7
    454c:	4698      	mov	r8, r3
    454e:	3bfd      	subs	r3, #253	; 0xfd
    4550:	469b      	mov	fp, r3
    4552:	027d      	lsls	r5, r7, #9
    4554:	0078      	lsls	r0, r7, #1
    4556:	0ffb      	lsrs	r3, r7, #31
    4558:	0a6d      	lsrs	r5, r5, #9
    455a:	0e00      	lsrs	r0, r0, #24
    455c:	9300      	str	r3, [sp, #0]
    455e:	d1da      	bne.n	4516 <__aeabi_fdiv+0x46>
    4560:	2d00      	cmp	r5, #0
    4562:	d126      	bne.n	45b2 <__aeabi_fdiv+0xe2>
    4564:	2000      	movs	r0, #0
    4566:	2101      	movs	r1, #1
    4568:	0033      	movs	r3, r6
    456a:	9a00      	ldr	r2, [sp, #0]
    456c:	4f7a      	ldr	r7, [pc, #488]	; (4758 <__aeabi_fdiv+0x288>)
    456e:	4053      	eors	r3, r2
    4570:	4642      	mov	r2, r8
    4572:	1a10      	subs	r0, r2, r0
    4574:	464a      	mov	r2, r9
    4576:	430a      	orrs	r2, r1
    4578:	0092      	lsls	r2, r2, #2
    457a:	58ba      	ldr	r2, [r7, r2]
    457c:	001d      	movs	r5, r3
    457e:	4697      	mov	pc, r2
    4580:	9b00      	ldr	r3, [sp, #0]
    4582:	002c      	movs	r4, r5
    4584:	469a      	mov	sl, r3
    4586:	468b      	mov	fp, r1
    4588:	465b      	mov	r3, fp
    458a:	2b02      	cmp	r3, #2
    458c:	d131      	bne.n	45f2 <__aeabi_fdiv+0x122>
    458e:	4653      	mov	r3, sl
    4590:	21ff      	movs	r1, #255	; 0xff
    4592:	2400      	movs	r4, #0
    4594:	e038      	b.n	4608 <__aeabi_fdiv+0x138>
    4596:	2c00      	cmp	r4, #0
    4598:	d117      	bne.n	45ca <__aeabi_fdiv+0xfa>
    459a:	2304      	movs	r3, #4
    459c:	4699      	mov	r9, r3
    459e:	2300      	movs	r3, #0
    45a0:	4698      	mov	r8, r3
    45a2:	3301      	adds	r3, #1
    45a4:	469b      	mov	fp, r3
    45a6:	e7af      	b.n	4508 <__aeabi_fdiv+0x38>
    45a8:	20ff      	movs	r0, #255	; 0xff
    45aa:	2d00      	cmp	r5, #0
    45ac:	d10b      	bne.n	45c6 <__aeabi_fdiv+0xf6>
    45ae:	2102      	movs	r1, #2
    45b0:	e7da      	b.n	4568 <__aeabi_fdiv+0x98>
    45b2:	0028      	movs	r0, r5
    45b4:	f001 fc70 	bl	5e98 <__clzsi2>
    45b8:	1f43      	subs	r3, r0, #5
    45ba:	409d      	lsls	r5, r3
    45bc:	2376      	movs	r3, #118	; 0x76
    45be:	425b      	negs	r3, r3
    45c0:	1a18      	subs	r0, r3, r0
    45c2:	2100      	movs	r1, #0
    45c4:	e7af      	b.n	4526 <__aeabi_fdiv+0x56>
    45c6:	2103      	movs	r1, #3
    45c8:	e7ad      	b.n	4526 <__aeabi_fdiv+0x56>
    45ca:	0020      	movs	r0, r4
    45cc:	f001 fc64 	bl	5e98 <__clzsi2>
    45d0:	1f43      	subs	r3, r0, #5
    45d2:	409c      	lsls	r4, r3
    45d4:	2376      	movs	r3, #118	; 0x76
    45d6:	425b      	negs	r3, r3
    45d8:	1a1b      	subs	r3, r3, r0
    45da:	4698      	mov	r8, r3
    45dc:	2300      	movs	r3, #0
    45de:	4699      	mov	r9, r3
    45e0:	469b      	mov	fp, r3
    45e2:	e791      	b.n	4508 <__aeabi_fdiv+0x38>
    45e4:	230c      	movs	r3, #12
    45e6:	4699      	mov	r9, r3
    45e8:	33f3      	adds	r3, #243	; 0xf3
    45ea:	4698      	mov	r8, r3
    45ec:	3bfc      	subs	r3, #252	; 0xfc
    45ee:	469b      	mov	fp, r3
    45f0:	e78a      	b.n	4508 <__aeabi_fdiv+0x38>
    45f2:	2b03      	cmp	r3, #3
    45f4:	d100      	bne.n	45f8 <__aeabi_fdiv+0x128>
    45f6:	e0a5      	b.n	4744 <__aeabi_fdiv+0x274>
    45f8:	4655      	mov	r5, sl
    45fa:	2b01      	cmp	r3, #1
    45fc:	d000      	beq.n	4600 <__aeabi_fdiv+0x130>
    45fe:	e081      	b.n	4704 <__aeabi_fdiv+0x234>
    4600:	2301      	movs	r3, #1
    4602:	2100      	movs	r1, #0
    4604:	2400      	movs	r4, #0
    4606:	402b      	ands	r3, r5
    4608:	0264      	lsls	r4, r4, #9
    460a:	05c9      	lsls	r1, r1, #23
    460c:	0a60      	lsrs	r0, r4, #9
    460e:	07db      	lsls	r3, r3, #31
    4610:	4308      	orrs	r0, r1
    4612:	4318      	orrs	r0, r3
    4614:	b003      	add	sp, #12
    4616:	bc3c      	pop	{r2, r3, r4, r5}
    4618:	4690      	mov	r8, r2
    461a:	4699      	mov	r9, r3
    461c:	46a2      	mov	sl, r4
    461e:	46ab      	mov	fp, r5
    4620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4622:	2480      	movs	r4, #128	; 0x80
    4624:	2300      	movs	r3, #0
    4626:	03e4      	lsls	r4, r4, #15
    4628:	21ff      	movs	r1, #255	; 0xff
    462a:	e7ed      	b.n	4608 <__aeabi_fdiv+0x138>
    462c:	21ff      	movs	r1, #255	; 0xff
    462e:	2400      	movs	r4, #0
    4630:	e7ea      	b.n	4608 <__aeabi_fdiv+0x138>
    4632:	2301      	movs	r3, #1
    4634:	1a59      	subs	r1, r3, r1
    4636:	291b      	cmp	r1, #27
    4638:	dd66      	ble.n	4708 <__aeabi_fdiv+0x238>
    463a:	9a01      	ldr	r2, [sp, #4]
    463c:	4013      	ands	r3, r2
    463e:	2100      	movs	r1, #0
    4640:	2400      	movs	r4, #0
    4642:	e7e1      	b.n	4608 <__aeabi_fdiv+0x138>
    4644:	2380      	movs	r3, #128	; 0x80
    4646:	03db      	lsls	r3, r3, #15
    4648:	421c      	tst	r4, r3
    464a:	d038      	beq.n	46be <__aeabi_fdiv+0x1ee>
    464c:	421d      	tst	r5, r3
    464e:	d051      	beq.n	46f4 <__aeabi_fdiv+0x224>
    4650:	431c      	orrs	r4, r3
    4652:	0264      	lsls	r4, r4, #9
    4654:	0a64      	lsrs	r4, r4, #9
    4656:	0033      	movs	r3, r6
    4658:	21ff      	movs	r1, #255	; 0xff
    465a:	e7d5      	b.n	4608 <__aeabi_fdiv+0x138>
    465c:	0163      	lsls	r3, r4, #5
    465e:	016c      	lsls	r4, r5, #5
    4660:	42a3      	cmp	r3, r4
    4662:	d23b      	bcs.n	46dc <__aeabi_fdiv+0x20c>
    4664:	261b      	movs	r6, #27
    4666:	2100      	movs	r1, #0
    4668:	3801      	subs	r0, #1
    466a:	2501      	movs	r5, #1
    466c:	001f      	movs	r7, r3
    466e:	0049      	lsls	r1, r1, #1
    4670:	005b      	lsls	r3, r3, #1
    4672:	2f00      	cmp	r7, #0
    4674:	db01      	blt.n	467a <__aeabi_fdiv+0x1aa>
    4676:	429c      	cmp	r4, r3
    4678:	d801      	bhi.n	467e <__aeabi_fdiv+0x1ae>
    467a:	1b1b      	subs	r3, r3, r4
    467c:	4329      	orrs	r1, r5
    467e:	3e01      	subs	r6, #1
    4680:	2e00      	cmp	r6, #0
    4682:	d1f3      	bne.n	466c <__aeabi_fdiv+0x19c>
    4684:	001c      	movs	r4, r3
    4686:	1e63      	subs	r3, r4, #1
    4688:	419c      	sbcs	r4, r3
    468a:	430c      	orrs	r4, r1
    468c:	0001      	movs	r1, r0
    468e:	317f      	adds	r1, #127	; 0x7f
    4690:	2900      	cmp	r1, #0
    4692:	ddce      	ble.n	4632 <__aeabi_fdiv+0x162>
    4694:	0763      	lsls	r3, r4, #29
    4696:	d004      	beq.n	46a2 <__aeabi_fdiv+0x1d2>
    4698:	230f      	movs	r3, #15
    469a:	4023      	ands	r3, r4
    469c:	2b04      	cmp	r3, #4
    469e:	d000      	beq.n	46a2 <__aeabi_fdiv+0x1d2>
    46a0:	3404      	adds	r4, #4
    46a2:	0123      	lsls	r3, r4, #4
    46a4:	d503      	bpl.n	46ae <__aeabi_fdiv+0x1de>
    46a6:	0001      	movs	r1, r0
    46a8:	4b2c      	ldr	r3, [pc, #176]	; (475c <__aeabi_fdiv+0x28c>)
    46aa:	3180      	adds	r1, #128	; 0x80
    46ac:	401c      	ands	r4, r3
    46ae:	29fe      	cmp	r1, #254	; 0xfe
    46b0:	dd0d      	ble.n	46ce <__aeabi_fdiv+0x1fe>
    46b2:	2301      	movs	r3, #1
    46b4:	9a01      	ldr	r2, [sp, #4]
    46b6:	21ff      	movs	r1, #255	; 0xff
    46b8:	4013      	ands	r3, r2
    46ba:	2400      	movs	r4, #0
    46bc:	e7a4      	b.n	4608 <__aeabi_fdiv+0x138>
    46be:	2380      	movs	r3, #128	; 0x80
    46c0:	03db      	lsls	r3, r3, #15
    46c2:	431c      	orrs	r4, r3
    46c4:	0264      	lsls	r4, r4, #9
    46c6:	0a64      	lsrs	r4, r4, #9
    46c8:	0033      	movs	r3, r6
    46ca:	21ff      	movs	r1, #255	; 0xff
    46cc:	e79c      	b.n	4608 <__aeabi_fdiv+0x138>
    46ce:	2301      	movs	r3, #1
    46d0:	9a01      	ldr	r2, [sp, #4]
    46d2:	01a4      	lsls	r4, r4, #6
    46d4:	0a64      	lsrs	r4, r4, #9
    46d6:	b2c9      	uxtb	r1, r1
    46d8:	4013      	ands	r3, r2
    46da:	e795      	b.n	4608 <__aeabi_fdiv+0x138>
    46dc:	1b1b      	subs	r3, r3, r4
    46de:	261a      	movs	r6, #26
    46e0:	2101      	movs	r1, #1
    46e2:	e7c2      	b.n	466a <__aeabi_fdiv+0x19a>
    46e4:	9b00      	ldr	r3, [sp, #0]
    46e6:	468b      	mov	fp, r1
    46e8:	469a      	mov	sl, r3
    46ea:	2400      	movs	r4, #0
    46ec:	e74c      	b.n	4588 <__aeabi_fdiv+0xb8>
    46ee:	0263      	lsls	r3, r4, #9
    46f0:	d5e5      	bpl.n	46be <__aeabi_fdiv+0x1ee>
    46f2:	2500      	movs	r5, #0
    46f4:	2480      	movs	r4, #128	; 0x80
    46f6:	03e4      	lsls	r4, r4, #15
    46f8:	432c      	orrs	r4, r5
    46fa:	0264      	lsls	r4, r4, #9
    46fc:	0a64      	lsrs	r4, r4, #9
    46fe:	9b00      	ldr	r3, [sp, #0]
    4700:	21ff      	movs	r1, #255	; 0xff
    4702:	e781      	b.n	4608 <__aeabi_fdiv+0x138>
    4704:	9501      	str	r5, [sp, #4]
    4706:	e7c1      	b.n	468c <__aeabi_fdiv+0x1bc>
    4708:	0023      	movs	r3, r4
    470a:	2020      	movs	r0, #32
    470c:	40cb      	lsrs	r3, r1
    470e:	1a41      	subs	r1, r0, r1
    4710:	408c      	lsls	r4, r1
    4712:	1e61      	subs	r1, r4, #1
    4714:	418c      	sbcs	r4, r1
    4716:	431c      	orrs	r4, r3
    4718:	0763      	lsls	r3, r4, #29
    471a:	d004      	beq.n	4726 <__aeabi_fdiv+0x256>
    471c:	230f      	movs	r3, #15
    471e:	4023      	ands	r3, r4
    4720:	2b04      	cmp	r3, #4
    4722:	d000      	beq.n	4726 <__aeabi_fdiv+0x256>
    4724:	3404      	adds	r4, #4
    4726:	0163      	lsls	r3, r4, #5
    4728:	d505      	bpl.n	4736 <__aeabi_fdiv+0x266>
    472a:	2301      	movs	r3, #1
    472c:	9a01      	ldr	r2, [sp, #4]
    472e:	2101      	movs	r1, #1
    4730:	4013      	ands	r3, r2
    4732:	2400      	movs	r4, #0
    4734:	e768      	b.n	4608 <__aeabi_fdiv+0x138>
    4736:	2301      	movs	r3, #1
    4738:	9a01      	ldr	r2, [sp, #4]
    473a:	01a4      	lsls	r4, r4, #6
    473c:	0a64      	lsrs	r4, r4, #9
    473e:	4013      	ands	r3, r2
    4740:	2100      	movs	r1, #0
    4742:	e761      	b.n	4608 <__aeabi_fdiv+0x138>
    4744:	2380      	movs	r3, #128	; 0x80
    4746:	03db      	lsls	r3, r3, #15
    4748:	431c      	orrs	r4, r3
    474a:	0264      	lsls	r4, r4, #9
    474c:	0a64      	lsrs	r4, r4, #9
    474e:	4653      	mov	r3, sl
    4750:	21ff      	movs	r1, #255	; 0xff
    4752:	e759      	b.n	4608 <__aeabi_fdiv+0x138>
    4754:	00006420 	.word	0x00006420
    4758:	00006460 	.word	0x00006460
    475c:	f7ffffff 	.word	0xf7ffffff

00004760 <__eqsf2>:
    4760:	b570      	push	{r4, r5, r6, lr}
    4762:	0042      	lsls	r2, r0, #1
    4764:	0245      	lsls	r5, r0, #9
    4766:	024e      	lsls	r6, r1, #9
    4768:	004c      	lsls	r4, r1, #1
    476a:	0fc3      	lsrs	r3, r0, #31
    476c:	0a6d      	lsrs	r5, r5, #9
    476e:	0e12      	lsrs	r2, r2, #24
    4770:	0a76      	lsrs	r6, r6, #9
    4772:	0e24      	lsrs	r4, r4, #24
    4774:	0fc9      	lsrs	r1, r1, #31
    4776:	2001      	movs	r0, #1
    4778:	2aff      	cmp	r2, #255	; 0xff
    477a:	d006      	beq.n	478a <__eqsf2+0x2a>
    477c:	2cff      	cmp	r4, #255	; 0xff
    477e:	d003      	beq.n	4788 <__eqsf2+0x28>
    4780:	42a2      	cmp	r2, r4
    4782:	d101      	bne.n	4788 <__eqsf2+0x28>
    4784:	42b5      	cmp	r5, r6
    4786:	d006      	beq.n	4796 <__eqsf2+0x36>
    4788:	bd70      	pop	{r4, r5, r6, pc}
    478a:	2d00      	cmp	r5, #0
    478c:	d1fc      	bne.n	4788 <__eqsf2+0x28>
    478e:	2cff      	cmp	r4, #255	; 0xff
    4790:	d1fa      	bne.n	4788 <__eqsf2+0x28>
    4792:	2e00      	cmp	r6, #0
    4794:	d1f8      	bne.n	4788 <__eqsf2+0x28>
    4796:	428b      	cmp	r3, r1
    4798:	d006      	beq.n	47a8 <__eqsf2+0x48>
    479a:	2001      	movs	r0, #1
    479c:	2a00      	cmp	r2, #0
    479e:	d1f3      	bne.n	4788 <__eqsf2+0x28>
    47a0:	0028      	movs	r0, r5
    47a2:	1e45      	subs	r5, r0, #1
    47a4:	41a8      	sbcs	r0, r5
    47a6:	e7ef      	b.n	4788 <__eqsf2+0x28>
    47a8:	2000      	movs	r0, #0
    47aa:	e7ed      	b.n	4788 <__eqsf2+0x28>

000047ac <__gesf2>:
    47ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ae:	0042      	lsls	r2, r0, #1
    47b0:	0245      	lsls	r5, r0, #9
    47b2:	024c      	lsls	r4, r1, #9
    47b4:	0fc3      	lsrs	r3, r0, #31
    47b6:	0048      	lsls	r0, r1, #1
    47b8:	0a6d      	lsrs	r5, r5, #9
    47ba:	0e12      	lsrs	r2, r2, #24
    47bc:	0a64      	lsrs	r4, r4, #9
    47be:	0e00      	lsrs	r0, r0, #24
    47c0:	0fc9      	lsrs	r1, r1, #31
    47c2:	2aff      	cmp	r2, #255	; 0xff
    47c4:	d01e      	beq.n	4804 <__gesf2+0x58>
    47c6:	28ff      	cmp	r0, #255	; 0xff
    47c8:	d021      	beq.n	480e <__gesf2+0x62>
    47ca:	2a00      	cmp	r2, #0
    47cc:	d10a      	bne.n	47e4 <__gesf2+0x38>
    47ce:	426e      	negs	r6, r5
    47d0:	416e      	adcs	r6, r5
    47d2:	b2f6      	uxtb	r6, r6
    47d4:	2800      	cmp	r0, #0
    47d6:	d10f      	bne.n	47f8 <__gesf2+0x4c>
    47d8:	2c00      	cmp	r4, #0
    47da:	d10d      	bne.n	47f8 <__gesf2+0x4c>
    47dc:	2000      	movs	r0, #0
    47de:	2d00      	cmp	r5, #0
    47e0:	d009      	beq.n	47f6 <__gesf2+0x4a>
    47e2:	e005      	b.n	47f0 <__gesf2+0x44>
    47e4:	2800      	cmp	r0, #0
    47e6:	d101      	bne.n	47ec <__gesf2+0x40>
    47e8:	2c00      	cmp	r4, #0
    47ea:	d001      	beq.n	47f0 <__gesf2+0x44>
    47ec:	428b      	cmp	r3, r1
    47ee:	d011      	beq.n	4814 <__gesf2+0x68>
    47f0:	2101      	movs	r1, #1
    47f2:	4258      	negs	r0, r3
    47f4:	4308      	orrs	r0, r1
    47f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47f8:	2e00      	cmp	r6, #0
    47fa:	d0f7      	beq.n	47ec <__gesf2+0x40>
    47fc:	2001      	movs	r0, #1
    47fe:	3901      	subs	r1, #1
    4800:	4308      	orrs	r0, r1
    4802:	e7f8      	b.n	47f6 <__gesf2+0x4a>
    4804:	2d00      	cmp	r5, #0
    4806:	d0de      	beq.n	47c6 <__gesf2+0x1a>
    4808:	2002      	movs	r0, #2
    480a:	4240      	negs	r0, r0
    480c:	e7f3      	b.n	47f6 <__gesf2+0x4a>
    480e:	2c00      	cmp	r4, #0
    4810:	d0db      	beq.n	47ca <__gesf2+0x1e>
    4812:	e7f9      	b.n	4808 <__gesf2+0x5c>
    4814:	4282      	cmp	r2, r0
    4816:	dceb      	bgt.n	47f0 <__gesf2+0x44>
    4818:	db04      	blt.n	4824 <__gesf2+0x78>
    481a:	42a5      	cmp	r5, r4
    481c:	d8e8      	bhi.n	47f0 <__gesf2+0x44>
    481e:	2000      	movs	r0, #0
    4820:	42a5      	cmp	r5, r4
    4822:	d2e8      	bcs.n	47f6 <__gesf2+0x4a>
    4824:	2101      	movs	r1, #1
    4826:	1e58      	subs	r0, r3, #1
    4828:	4308      	orrs	r0, r1
    482a:	e7e4      	b.n	47f6 <__gesf2+0x4a>

0000482c <__lesf2>:
    482c:	b5f0      	push	{r4, r5, r6, r7, lr}
    482e:	0042      	lsls	r2, r0, #1
    4830:	024d      	lsls	r5, r1, #9
    4832:	004c      	lsls	r4, r1, #1
    4834:	0246      	lsls	r6, r0, #9
    4836:	0a76      	lsrs	r6, r6, #9
    4838:	0e12      	lsrs	r2, r2, #24
    483a:	0fc3      	lsrs	r3, r0, #31
    483c:	0a6d      	lsrs	r5, r5, #9
    483e:	0e24      	lsrs	r4, r4, #24
    4840:	0fc9      	lsrs	r1, r1, #31
    4842:	2aff      	cmp	r2, #255	; 0xff
    4844:	d016      	beq.n	4874 <__lesf2+0x48>
    4846:	2cff      	cmp	r4, #255	; 0xff
    4848:	d018      	beq.n	487c <__lesf2+0x50>
    484a:	2a00      	cmp	r2, #0
    484c:	d10a      	bne.n	4864 <__lesf2+0x38>
    484e:	4270      	negs	r0, r6
    4850:	4170      	adcs	r0, r6
    4852:	b2c0      	uxtb	r0, r0
    4854:	2c00      	cmp	r4, #0
    4856:	d015      	beq.n	4884 <__lesf2+0x58>
    4858:	2800      	cmp	r0, #0
    485a:	d005      	beq.n	4868 <__lesf2+0x3c>
    485c:	2001      	movs	r0, #1
    485e:	3901      	subs	r1, #1
    4860:	4308      	orrs	r0, r1
    4862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4864:	2c00      	cmp	r4, #0
    4866:	d013      	beq.n	4890 <__lesf2+0x64>
    4868:	4299      	cmp	r1, r3
    486a:	d014      	beq.n	4896 <__lesf2+0x6a>
    486c:	2001      	movs	r0, #1
    486e:	425b      	negs	r3, r3
    4870:	4318      	orrs	r0, r3
    4872:	e7f6      	b.n	4862 <__lesf2+0x36>
    4874:	2002      	movs	r0, #2
    4876:	2e00      	cmp	r6, #0
    4878:	d1f3      	bne.n	4862 <__lesf2+0x36>
    487a:	e7e4      	b.n	4846 <__lesf2+0x1a>
    487c:	2002      	movs	r0, #2
    487e:	2d00      	cmp	r5, #0
    4880:	d1ef      	bne.n	4862 <__lesf2+0x36>
    4882:	e7e2      	b.n	484a <__lesf2+0x1e>
    4884:	2d00      	cmp	r5, #0
    4886:	d1e7      	bne.n	4858 <__lesf2+0x2c>
    4888:	2000      	movs	r0, #0
    488a:	2e00      	cmp	r6, #0
    488c:	d0e9      	beq.n	4862 <__lesf2+0x36>
    488e:	e7ed      	b.n	486c <__lesf2+0x40>
    4890:	2d00      	cmp	r5, #0
    4892:	d1e9      	bne.n	4868 <__lesf2+0x3c>
    4894:	e7ea      	b.n	486c <__lesf2+0x40>
    4896:	42a2      	cmp	r2, r4
    4898:	dc06      	bgt.n	48a8 <__lesf2+0x7c>
    489a:	dbdf      	blt.n	485c <__lesf2+0x30>
    489c:	42ae      	cmp	r6, r5
    489e:	d803      	bhi.n	48a8 <__lesf2+0x7c>
    48a0:	2000      	movs	r0, #0
    48a2:	42ae      	cmp	r6, r5
    48a4:	d3da      	bcc.n	485c <__lesf2+0x30>
    48a6:	e7dc      	b.n	4862 <__lesf2+0x36>
    48a8:	2001      	movs	r0, #1
    48aa:	4249      	negs	r1, r1
    48ac:	4308      	orrs	r0, r1
    48ae:	e7d8      	b.n	4862 <__lesf2+0x36>

000048b0 <__aeabi_fmul>:
    48b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b2:	4657      	mov	r7, sl
    48b4:	464e      	mov	r6, r9
    48b6:	4645      	mov	r5, r8
    48b8:	46de      	mov	lr, fp
    48ba:	b5e0      	push	{r5, r6, r7, lr}
    48bc:	0247      	lsls	r7, r0, #9
    48be:	0046      	lsls	r6, r0, #1
    48c0:	4688      	mov	r8, r1
    48c2:	0a7f      	lsrs	r7, r7, #9
    48c4:	0e36      	lsrs	r6, r6, #24
    48c6:	0fc4      	lsrs	r4, r0, #31
    48c8:	2e00      	cmp	r6, #0
    48ca:	d047      	beq.n	495c <__aeabi_fmul+0xac>
    48cc:	2eff      	cmp	r6, #255	; 0xff
    48ce:	d024      	beq.n	491a <__aeabi_fmul+0x6a>
    48d0:	00fb      	lsls	r3, r7, #3
    48d2:	2780      	movs	r7, #128	; 0x80
    48d4:	04ff      	lsls	r7, r7, #19
    48d6:	431f      	orrs	r7, r3
    48d8:	2300      	movs	r3, #0
    48da:	4699      	mov	r9, r3
    48dc:	469a      	mov	sl, r3
    48de:	3e7f      	subs	r6, #127	; 0x7f
    48e0:	4643      	mov	r3, r8
    48e2:	025d      	lsls	r5, r3, #9
    48e4:	0058      	lsls	r0, r3, #1
    48e6:	0fdb      	lsrs	r3, r3, #31
    48e8:	0a6d      	lsrs	r5, r5, #9
    48ea:	0e00      	lsrs	r0, r0, #24
    48ec:	4698      	mov	r8, r3
    48ee:	d043      	beq.n	4978 <__aeabi_fmul+0xc8>
    48f0:	28ff      	cmp	r0, #255	; 0xff
    48f2:	d03b      	beq.n	496c <__aeabi_fmul+0xbc>
    48f4:	00eb      	lsls	r3, r5, #3
    48f6:	2580      	movs	r5, #128	; 0x80
    48f8:	2200      	movs	r2, #0
    48fa:	04ed      	lsls	r5, r5, #19
    48fc:	431d      	orrs	r5, r3
    48fe:	387f      	subs	r0, #127	; 0x7f
    4900:	1836      	adds	r6, r6, r0
    4902:	1c73      	adds	r3, r6, #1
    4904:	4641      	mov	r1, r8
    4906:	469b      	mov	fp, r3
    4908:	464b      	mov	r3, r9
    490a:	4061      	eors	r1, r4
    490c:	4313      	orrs	r3, r2
    490e:	2b0f      	cmp	r3, #15
    4910:	d864      	bhi.n	49dc <__aeabi_fmul+0x12c>
    4912:	4875      	ldr	r0, [pc, #468]	; (4ae8 <__aeabi_fmul+0x238>)
    4914:	009b      	lsls	r3, r3, #2
    4916:	58c3      	ldr	r3, [r0, r3]
    4918:	469f      	mov	pc, r3
    491a:	2f00      	cmp	r7, #0
    491c:	d142      	bne.n	49a4 <__aeabi_fmul+0xf4>
    491e:	2308      	movs	r3, #8
    4920:	4699      	mov	r9, r3
    4922:	3b06      	subs	r3, #6
    4924:	26ff      	movs	r6, #255	; 0xff
    4926:	469a      	mov	sl, r3
    4928:	e7da      	b.n	48e0 <__aeabi_fmul+0x30>
    492a:	4641      	mov	r1, r8
    492c:	2a02      	cmp	r2, #2
    492e:	d028      	beq.n	4982 <__aeabi_fmul+0xd2>
    4930:	2a03      	cmp	r2, #3
    4932:	d100      	bne.n	4936 <__aeabi_fmul+0x86>
    4934:	e0ce      	b.n	4ad4 <__aeabi_fmul+0x224>
    4936:	2a01      	cmp	r2, #1
    4938:	d000      	beq.n	493c <__aeabi_fmul+0x8c>
    493a:	e0ac      	b.n	4a96 <__aeabi_fmul+0x1e6>
    493c:	4011      	ands	r1, r2
    493e:	2000      	movs	r0, #0
    4940:	2200      	movs	r2, #0
    4942:	b2cc      	uxtb	r4, r1
    4944:	0240      	lsls	r0, r0, #9
    4946:	05d2      	lsls	r2, r2, #23
    4948:	0a40      	lsrs	r0, r0, #9
    494a:	07e4      	lsls	r4, r4, #31
    494c:	4310      	orrs	r0, r2
    494e:	4320      	orrs	r0, r4
    4950:	bc3c      	pop	{r2, r3, r4, r5}
    4952:	4690      	mov	r8, r2
    4954:	4699      	mov	r9, r3
    4956:	46a2      	mov	sl, r4
    4958:	46ab      	mov	fp, r5
    495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    495c:	2f00      	cmp	r7, #0
    495e:	d115      	bne.n	498c <__aeabi_fmul+0xdc>
    4960:	2304      	movs	r3, #4
    4962:	4699      	mov	r9, r3
    4964:	3b03      	subs	r3, #3
    4966:	2600      	movs	r6, #0
    4968:	469a      	mov	sl, r3
    496a:	e7b9      	b.n	48e0 <__aeabi_fmul+0x30>
    496c:	20ff      	movs	r0, #255	; 0xff
    496e:	2202      	movs	r2, #2
    4970:	2d00      	cmp	r5, #0
    4972:	d0c5      	beq.n	4900 <__aeabi_fmul+0x50>
    4974:	2203      	movs	r2, #3
    4976:	e7c3      	b.n	4900 <__aeabi_fmul+0x50>
    4978:	2d00      	cmp	r5, #0
    497a:	d119      	bne.n	49b0 <__aeabi_fmul+0x100>
    497c:	2000      	movs	r0, #0
    497e:	2201      	movs	r2, #1
    4980:	e7be      	b.n	4900 <__aeabi_fmul+0x50>
    4982:	2401      	movs	r4, #1
    4984:	22ff      	movs	r2, #255	; 0xff
    4986:	400c      	ands	r4, r1
    4988:	2000      	movs	r0, #0
    498a:	e7db      	b.n	4944 <__aeabi_fmul+0x94>
    498c:	0038      	movs	r0, r7
    498e:	f001 fa83 	bl	5e98 <__clzsi2>
    4992:	2676      	movs	r6, #118	; 0x76
    4994:	1f43      	subs	r3, r0, #5
    4996:	409f      	lsls	r7, r3
    4998:	2300      	movs	r3, #0
    499a:	4276      	negs	r6, r6
    499c:	1a36      	subs	r6, r6, r0
    499e:	4699      	mov	r9, r3
    49a0:	469a      	mov	sl, r3
    49a2:	e79d      	b.n	48e0 <__aeabi_fmul+0x30>
    49a4:	230c      	movs	r3, #12
    49a6:	4699      	mov	r9, r3
    49a8:	3b09      	subs	r3, #9
    49aa:	26ff      	movs	r6, #255	; 0xff
    49ac:	469a      	mov	sl, r3
    49ae:	e797      	b.n	48e0 <__aeabi_fmul+0x30>
    49b0:	0028      	movs	r0, r5
    49b2:	f001 fa71 	bl	5e98 <__clzsi2>
    49b6:	1f43      	subs	r3, r0, #5
    49b8:	409d      	lsls	r5, r3
    49ba:	2376      	movs	r3, #118	; 0x76
    49bc:	425b      	negs	r3, r3
    49be:	1a18      	subs	r0, r3, r0
    49c0:	2200      	movs	r2, #0
    49c2:	e79d      	b.n	4900 <__aeabi_fmul+0x50>
    49c4:	2080      	movs	r0, #128	; 0x80
    49c6:	2400      	movs	r4, #0
    49c8:	03c0      	lsls	r0, r0, #15
    49ca:	22ff      	movs	r2, #255	; 0xff
    49cc:	e7ba      	b.n	4944 <__aeabi_fmul+0x94>
    49ce:	003d      	movs	r5, r7
    49d0:	4652      	mov	r2, sl
    49d2:	e7ab      	b.n	492c <__aeabi_fmul+0x7c>
    49d4:	003d      	movs	r5, r7
    49d6:	0021      	movs	r1, r4
    49d8:	4652      	mov	r2, sl
    49da:	e7a7      	b.n	492c <__aeabi_fmul+0x7c>
    49dc:	0c3b      	lsrs	r3, r7, #16
    49de:	469c      	mov	ip, r3
    49e0:	042a      	lsls	r2, r5, #16
    49e2:	0c12      	lsrs	r2, r2, #16
    49e4:	0c2b      	lsrs	r3, r5, #16
    49e6:	0014      	movs	r4, r2
    49e8:	4660      	mov	r0, ip
    49ea:	4665      	mov	r5, ip
    49ec:	043f      	lsls	r7, r7, #16
    49ee:	0c3f      	lsrs	r7, r7, #16
    49f0:	437c      	muls	r4, r7
    49f2:	4342      	muls	r2, r0
    49f4:	435d      	muls	r5, r3
    49f6:	437b      	muls	r3, r7
    49f8:	0c27      	lsrs	r7, r4, #16
    49fa:	189b      	adds	r3, r3, r2
    49fc:	18ff      	adds	r7, r7, r3
    49fe:	42ba      	cmp	r2, r7
    4a00:	d903      	bls.n	4a0a <__aeabi_fmul+0x15a>
    4a02:	2380      	movs	r3, #128	; 0x80
    4a04:	025b      	lsls	r3, r3, #9
    4a06:	469c      	mov	ip, r3
    4a08:	4465      	add	r5, ip
    4a0a:	0424      	lsls	r4, r4, #16
    4a0c:	043a      	lsls	r2, r7, #16
    4a0e:	0c24      	lsrs	r4, r4, #16
    4a10:	1912      	adds	r2, r2, r4
    4a12:	0193      	lsls	r3, r2, #6
    4a14:	1e5c      	subs	r4, r3, #1
    4a16:	41a3      	sbcs	r3, r4
    4a18:	0c3f      	lsrs	r7, r7, #16
    4a1a:	0e92      	lsrs	r2, r2, #26
    4a1c:	197d      	adds	r5, r7, r5
    4a1e:	431a      	orrs	r2, r3
    4a20:	01ad      	lsls	r5, r5, #6
    4a22:	4315      	orrs	r5, r2
    4a24:	012b      	lsls	r3, r5, #4
    4a26:	d504      	bpl.n	4a32 <__aeabi_fmul+0x182>
    4a28:	2301      	movs	r3, #1
    4a2a:	465e      	mov	r6, fp
    4a2c:	086a      	lsrs	r2, r5, #1
    4a2e:	401d      	ands	r5, r3
    4a30:	4315      	orrs	r5, r2
    4a32:	0032      	movs	r2, r6
    4a34:	327f      	adds	r2, #127	; 0x7f
    4a36:	2a00      	cmp	r2, #0
    4a38:	dd25      	ble.n	4a86 <__aeabi_fmul+0x1d6>
    4a3a:	076b      	lsls	r3, r5, #29
    4a3c:	d004      	beq.n	4a48 <__aeabi_fmul+0x198>
    4a3e:	230f      	movs	r3, #15
    4a40:	402b      	ands	r3, r5
    4a42:	2b04      	cmp	r3, #4
    4a44:	d000      	beq.n	4a48 <__aeabi_fmul+0x198>
    4a46:	3504      	adds	r5, #4
    4a48:	012b      	lsls	r3, r5, #4
    4a4a:	d503      	bpl.n	4a54 <__aeabi_fmul+0x1a4>
    4a4c:	0032      	movs	r2, r6
    4a4e:	4b27      	ldr	r3, [pc, #156]	; (4aec <__aeabi_fmul+0x23c>)
    4a50:	3280      	adds	r2, #128	; 0x80
    4a52:	401d      	ands	r5, r3
    4a54:	2afe      	cmp	r2, #254	; 0xfe
    4a56:	dc94      	bgt.n	4982 <__aeabi_fmul+0xd2>
    4a58:	2401      	movs	r4, #1
    4a5a:	01a8      	lsls	r0, r5, #6
    4a5c:	0a40      	lsrs	r0, r0, #9
    4a5e:	b2d2      	uxtb	r2, r2
    4a60:	400c      	ands	r4, r1
    4a62:	e76f      	b.n	4944 <__aeabi_fmul+0x94>
    4a64:	2080      	movs	r0, #128	; 0x80
    4a66:	03c0      	lsls	r0, r0, #15
    4a68:	4207      	tst	r7, r0
    4a6a:	d007      	beq.n	4a7c <__aeabi_fmul+0x1cc>
    4a6c:	4205      	tst	r5, r0
    4a6e:	d105      	bne.n	4a7c <__aeabi_fmul+0x1cc>
    4a70:	4328      	orrs	r0, r5
    4a72:	0240      	lsls	r0, r0, #9
    4a74:	0a40      	lsrs	r0, r0, #9
    4a76:	4644      	mov	r4, r8
    4a78:	22ff      	movs	r2, #255	; 0xff
    4a7a:	e763      	b.n	4944 <__aeabi_fmul+0x94>
    4a7c:	4338      	orrs	r0, r7
    4a7e:	0240      	lsls	r0, r0, #9
    4a80:	0a40      	lsrs	r0, r0, #9
    4a82:	22ff      	movs	r2, #255	; 0xff
    4a84:	e75e      	b.n	4944 <__aeabi_fmul+0x94>
    4a86:	2401      	movs	r4, #1
    4a88:	1aa3      	subs	r3, r4, r2
    4a8a:	2b1b      	cmp	r3, #27
    4a8c:	dd05      	ble.n	4a9a <__aeabi_fmul+0x1ea>
    4a8e:	400c      	ands	r4, r1
    4a90:	2200      	movs	r2, #0
    4a92:	2000      	movs	r0, #0
    4a94:	e756      	b.n	4944 <__aeabi_fmul+0x94>
    4a96:	465e      	mov	r6, fp
    4a98:	e7cb      	b.n	4a32 <__aeabi_fmul+0x182>
    4a9a:	002a      	movs	r2, r5
    4a9c:	2020      	movs	r0, #32
    4a9e:	40da      	lsrs	r2, r3
    4aa0:	1ac3      	subs	r3, r0, r3
    4aa2:	409d      	lsls	r5, r3
    4aa4:	002b      	movs	r3, r5
    4aa6:	1e5d      	subs	r5, r3, #1
    4aa8:	41ab      	sbcs	r3, r5
    4aaa:	4313      	orrs	r3, r2
    4aac:	075a      	lsls	r2, r3, #29
    4aae:	d004      	beq.n	4aba <__aeabi_fmul+0x20a>
    4ab0:	220f      	movs	r2, #15
    4ab2:	401a      	ands	r2, r3
    4ab4:	2a04      	cmp	r2, #4
    4ab6:	d000      	beq.n	4aba <__aeabi_fmul+0x20a>
    4ab8:	3304      	adds	r3, #4
    4aba:	015a      	lsls	r2, r3, #5
    4abc:	d504      	bpl.n	4ac8 <__aeabi_fmul+0x218>
    4abe:	2401      	movs	r4, #1
    4ac0:	2201      	movs	r2, #1
    4ac2:	400c      	ands	r4, r1
    4ac4:	2000      	movs	r0, #0
    4ac6:	e73d      	b.n	4944 <__aeabi_fmul+0x94>
    4ac8:	2401      	movs	r4, #1
    4aca:	019b      	lsls	r3, r3, #6
    4acc:	0a58      	lsrs	r0, r3, #9
    4ace:	400c      	ands	r4, r1
    4ad0:	2200      	movs	r2, #0
    4ad2:	e737      	b.n	4944 <__aeabi_fmul+0x94>
    4ad4:	2080      	movs	r0, #128	; 0x80
    4ad6:	2401      	movs	r4, #1
    4ad8:	03c0      	lsls	r0, r0, #15
    4ada:	4328      	orrs	r0, r5
    4adc:	0240      	lsls	r0, r0, #9
    4ade:	0a40      	lsrs	r0, r0, #9
    4ae0:	400c      	ands	r4, r1
    4ae2:	22ff      	movs	r2, #255	; 0xff
    4ae4:	e72e      	b.n	4944 <__aeabi_fmul+0x94>
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	000064a0 	.word	0x000064a0
    4aec:	f7ffffff 	.word	0xf7ffffff

00004af0 <__aeabi_fsub>:
    4af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4af2:	464f      	mov	r7, r9
    4af4:	46d6      	mov	lr, sl
    4af6:	4646      	mov	r6, r8
    4af8:	0044      	lsls	r4, r0, #1
    4afa:	b5c0      	push	{r6, r7, lr}
    4afc:	0fc2      	lsrs	r2, r0, #31
    4afe:	0247      	lsls	r7, r0, #9
    4b00:	0248      	lsls	r0, r1, #9
    4b02:	0a40      	lsrs	r0, r0, #9
    4b04:	4684      	mov	ip, r0
    4b06:	4666      	mov	r6, ip
    4b08:	0a7b      	lsrs	r3, r7, #9
    4b0a:	0048      	lsls	r0, r1, #1
    4b0c:	0fc9      	lsrs	r1, r1, #31
    4b0e:	469a      	mov	sl, r3
    4b10:	0e24      	lsrs	r4, r4, #24
    4b12:	0015      	movs	r5, r2
    4b14:	00db      	lsls	r3, r3, #3
    4b16:	0e00      	lsrs	r0, r0, #24
    4b18:	4689      	mov	r9, r1
    4b1a:	00f6      	lsls	r6, r6, #3
    4b1c:	28ff      	cmp	r0, #255	; 0xff
    4b1e:	d100      	bne.n	4b22 <__aeabi_fsub+0x32>
    4b20:	e08f      	b.n	4c42 <__aeabi_fsub+0x152>
    4b22:	2101      	movs	r1, #1
    4b24:	464f      	mov	r7, r9
    4b26:	404f      	eors	r7, r1
    4b28:	0039      	movs	r1, r7
    4b2a:	4291      	cmp	r1, r2
    4b2c:	d066      	beq.n	4bfc <__aeabi_fsub+0x10c>
    4b2e:	1a22      	subs	r2, r4, r0
    4b30:	2a00      	cmp	r2, #0
    4b32:	dc00      	bgt.n	4b36 <__aeabi_fsub+0x46>
    4b34:	e09d      	b.n	4c72 <__aeabi_fsub+0x182>
    4b36:	2800      	cmp	r0, #0
    4b38:	d13d      	bne.n	4bb6 <__aeabi_fsub+0xc6>
    4b3a:	2e00      	cmp	r6, #0
    4b3c:	d100      	bne.n	4b40 <__aeabi_fsub+0x50>
    4b3e:	e08b      	b.n	4c58 <__aeabi_fsub+0x168>
    4b40:	1e51      	subs	r1, r2, #1
    4b42:	2900      	cmp	r1, #0
    4b44:	d000      	beq.n	4b48 <__aeabi_fsub+0x58>
    4b46:	e0b5      	b.n	4cb4 <__aeabi_fsub+0x1c4>
    4b48:	2401      	movs	r4, #1
    4b4a:	1b9b      	subs	r3, r3, r6
    4b4c:	015a      	lsls	r2, r3, #5
    4b4e:	d544      	bpl.n	4bda <__aeabi_fsub+0xea>
    4b50:	019b      	lsls	r3, r3, #6
    4b52:	099f      	lsrs	r7, r3, #6
    4b54:	0038      	movs	r0, r7
    4b56:	f001 f99f 	bl	5e98 <__clzsi2>
    4b5a:	3805      	subs	r0, #5
    4b5c:	4087      	lsls	r7, r0
    4b5e:	4284      	cmp	r4, r0
    4b60:	dd00      	ble.n	4b64 <__aeabi_fsub+0x74>
    4b62:	e096      	b.n	4c92 <__aeabi_fsub+0x1a2>
    4b64:	1b04      	subs	r4, r0, r4
    4b66:	003a      	movs	r2, r7
    4b68:	2020      	movs	r0, #32
    4b6a:	3401      	adds	r4, #1
    4b6c:	40e2      	lsrs	r2, r4
    4b6e:	1b04      	subs	r4, r0, r4
    4b70:	40a7      	lsls	r7, r4
    4b72:	003b      	movs	r3, r7
    4b74:	1e5f      	subs	r7, r3, #1
    4b76:	41bb      	sbcs	r3, r7
    4b78:	2400      	movs	r4, #0
    4b7a:	4313      	orrs	r3, r2
    4b7c:	075a      	lsls	r2, r3, #29
    4b7e:	d004      	beq.n	4b8a <__aeabi_fsub+0x9a>
    4b80:	220f      	movs	r2, #15
    4b82:	401a      	ands	r2, r3
    4b84:	2a04      	cmp	r2, #4
    4b86:	d000      	beq.n	4b8a <__aeabi_fsub+0x9a>
    4b88:	3304      	adds	r3, #4
    4b8a:	015a      	lsls	r2, r3, #5
    4b8c:	d527      	bpl.n	4bde <__aeabi_fsub+0xee>
    4b8e:	3401      	adds	r4, #1
    4b90:	2cff      	cmp	r4, #255	; 0xff
    4b92:	d100      	bne.n	4b96 <__aeabi_fsub+0xa6>
    4b94:	e079      	b.n	4c8a <__aeabi_fsub+0x19a>
    4b96:	2201      	movs	r2, #1
    4b98:	019b      	lsls	r3, r3, #6
    4b9a:	0a5b      	lsrs	r3, r3, #9
    4b9c:	b2e4      	uxtb	r4, r4
    4b9e:	402a      	ands	r2, r5
    4ba0:	025b      	lsls	r3, r3, #9
    4ba2:	05e4      	lsls	r4, r4, #23
    4ba4:	0a58      	lsrs	r0, r3, #9
    4ba6:	07d2      	lsls	r2, r2, #31
    4ba8:	4320      	orrs	r0, r4
    4baa:	4310      	orrs	r0, r2
    4bac:	bc1c      	pop	{r2, r3, r4}
    4bae:	4690      	mov	r8, r2
    4bb0:	4699      	mov	r9, r3
    4bb2:	46a2      	mov	sl, r4
    4bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bb6:	2cff      	cmp	r4, #255	; 0xff
    4bb8:	d0e0      	beq.n	4b7c <__aeabi_fsub+0x8c>
    4bba:	2180      	movs	r1, #128	; 0x80
    4bbc:	04c9      	lsls	r1, r1, #19
    4bbe:	430e      	orrs	r6, r1
    4bc0:	2a1b      	cmp	r2, #27
    4bc2:	dc7b      	bgt.n	4cbc <__aeabi_fsub+0x1cc>
    4bc4:	0031      	movs	r1, r6
    4bc6:	2020      	movs	r0, #32
    4bc8:	40d1      	lsrs	r1, r2
    4bca:	1a82      	subs	r2, r0, r2
    4bcc:	4096      	lsls	r6, r2
    4bce:	1e72      	subs	r2, r6, #1
    4bd0:	4196      	sbcs	r6, r2
    4bd2:	430e      	orrs	r6, r1
    4bd4:	1b9b      	subs	r3, r3, r6
    4bd6:	015a      	lsls	r2, r3, #5
    4bd8:	d4ba      	bmi.n	4b50 <__aeabi_fsub+0x60>
    4bda:	075a      	lsls	r2, r3, #29
    4bdc:	d1d0      	bne.n	4b80 <__aeabi_fsub+0x90>
    4bde:	2201      	movs	r2, #1
    4be0:	08df      	lsrs	r7, r3, #3
    4be2:	402a      	ands	r2, r5
    4be4:	2cff      	cmp	r4, #255	; 0xff
    4be6:	d133      	bne.n	4c50 <__aeabi_fsub+0x160>
    4be8:	2f00      	cmp	r7, #0
    4bea:	d100      	bne.n	4bee <__aeabi_fsub+0xfe>
    4bec:	e0a8      	b.n	4d40 <__aeabi_fsub+0x250>
    4bee:	2380      	movs	r3, #128	; 0x80
    4bf0:	03db      	lsls	r3, r3, #15
    4bf2:	433b      	orrs	r3, r7
    4bf4:	025b      	lsls	r3, r3, #9
    4bf6:	0a5b      	lsrs	r3, r3, #9
    4bf8:	24ff      	movs	r4, #255	; 0xff
    4bfa:	e7d1      	b.n	4ba0 <__aeabi_fsub+0xb0>
    4bfc:	1a21      	subs	r1, r4, r0
    4bfe:	2900      	cmp	r1, #0
    4c00:	dd4c      	ble.n	4c9c <__aeabi_fsub+0x1ac>
    4c02:	2800      	cmp	r0, #0
    4c04:	d02a      	beq.n	4c5c <__aeabi_fsub+0x16c>
    4c06:	2cff      	cmp	r4, #255	; 0xff
    4c08:	d0b8      	beq.n	4b7c <__aeabi_fsub+0x8c>
    4c0a:	2080      	movs	r0, #128	; 0x80
    4c0c:	04c0      	lsls	r0, r0, #19
    4c0e:	4306      	orrs	r6, r0
    4c10:	291b      	cmp	r1, #27
    4c12:	dd00      	ble.n	4c16 <__aeabi_fsub+0x126>
    4c14:	e0af      	b.n	4d76 <__aeabi_fsub+0x286>
    4c16:	0030      	movs	r0, r6
    4c18:	2720      	movs	r7, #32
    4c1a:	40c8      	lsrs	r0, r1
    4c1c:	1a79      	subs	r1, r7, r1
    4c1e:	408e      	lsls	r6, r1
    4c20:	1e71      	subs	r1, r6, #1
    4c22:	418e      	sbcs	r6, r1
    4c24:	4306      	orrs	r6, r0
    4c26:	199b      	adds	r3, r3, r6
    4c28:	0159      	lsls	r1, r3, #5
    4c2a:	d5d6      	bpl.n	4bda <__aeabi_fsub+0xea>
    4c2c:	3401      	adds	r4, #1
    4c2e:	2cff      	cmp	r4, #255	; 0xff
    4c30:	d100      	bne.n	4c34 <__aeabi_fsub+0x144>
    4c32:	e085      	b.n	4d40 <__aeabi_fsub+0x250>
    4c34:	2201      	movs	r2, #1
    4c36:	497a      	ldr	r1, [pc, #488]	; (4e20 <__aeabi_fsub+0x330>)
    4c38:	401a      	ands	r2, r3
    4c3a:	085b      	lsrs	r3, r3, #1
    4c3c:	400b      	ands	r3, r1
    4c3e:	4313      	orrs	r3, r2
    4c40:	e79c      	b.n	4b7c <__aeabi_fsub+0x8c>
    4c42:	2e00      	cmp	r6, #0
    4c44:	d000      	beq.n	4c48 <__aeabi_fsub+0x158>
    4c46:	e770      	b.n	4b2a <__aeabi_fsub+0x3a>
    4c48:	e76b      	b.n	4b22 <__aeabi_fsub+0x32>
    4c4a:	1e3b      	subs	r3, r7, #0
    4c4c:	d1c5      	bne.n	4bda <__aeabi_fsub+0xea>
    4c4e:	2200      	movs	r2, #0
    4c50:	027b      	lsls	r3, r7, #9
    4c52:	0a5b      	lsrs	r3, r3, #9
    4c54:	b2e4      	uxtb	r4, r4
    4c56:	e7a3      	b.n	4ba0 <__aeabi_fsub+0xb0>
    4c58:	0014      	movs	r4, r2
    4c5a:	e78f      	b.n	4b7c <__aeabi_fsub+0x8c>
    4c5c:	2e00      	cmp	r6, #0
    4c5e:	d04d      	beq.n	4cfc <__aeabi_fsub+0x20c>
    4c60:	1e48      	subs	r0, r1, #1
    4c62:	2800      	cmp	r0, #0
    4c64:	d157      	bne.n	4d16 <__aeabi_fsub+0x226>
    4c66:	199b      	adds	r3, r3, r6
    4c68:	2401      	movs	r4, #1
    4c6a:	015a      	lsls	r2, r3, #5
    4c6c:	d5b5      	bpl.n	4bda <__aeabi_fsub+0xea>
    4c6e:	2402      	movs	r4, #2
    4c70:	e7e0      	b.n	4c34 <__aeabi_fsub+0x144>
    4c72:	2a00      	cmp	r2, #0
    4c74:	d125      	bne.n	4cc2 <__aeabi_fsub+0x1d2>
    4c76:	1c62      	adds	r2, r4, #1
    4c78:	b2d2      	uxtb	r2, r2
    4c7a:	2a01      	cmp	r2, #1
    4c7c:	dd72      	ble.n	4d64 <__aeabi_fsub+0x274>
    4c7e:	1b9f      	subs	r7, r3, r6
    4c80:	017a      	lsls	r2, r7, #5
    4c82:	d535      	bpl.n	4cf0 <__aeabi_fsub+0x200>
    4c84:	1af7      	subs	r7, r6, r3
    4c86:	000d      	movs	r5, r1
    4c88:	e764      	b.n	4b54 <__aeabi_fsub+0x64>
    4c8a:	2201      	movs	r2, #1
    4c8c:	2300      	movs	r3, #0
    4c8e:	402a      	ands	r2, r5
    4c90:	e786      	b.n	4ba0 <__aeabi_fsub+0xb0>
    4c92:	003b      	movs	r3, r7
    4c94:	4a63      	ldr	r2, [pc, #396]	; (4e24 <__aeabi_fsub+0x334>)
    4c96:	1a24      	subs	r4, r4, r0
    4c98:	4013      	ands	r3, r2
    4c9a:	e76f      	b.n	4b7c <__aeabi_fsub+0x8c>
    4c9c:	2900      	cmp	r1, #0
    4c9e:	d16c      	bne.n	4d7a <__aeabi_fsub+0x28a>
    4ca0:	1c61      	adds	r1, r4, #1
    4ca2:	b2c8      	uxtb	r0, r1
    4ca4:	2801      	cmp	r0, #1
    4ca6:	dd4e      	ble.n	4d46 <__aeabi_fsub+0x256>
    4ca8:	29ff      	cmp	r1, #255	; 0xff
    4caa:	d049      	beq.n	4d40 <__aeabi_fsub+0x250>
    4cac:	199b      	adds	r3, r3, r6
    4cae:	085b      	lsrs	r3, r3, #1
    4cb0:	000c      	movs	r4, r1
    4cb2:	e763      	b.n	4b7c <__aeabi_fsub+0x8c>
    4cb4:	2aff      	cmp	r2, #255	; 0xff
    4cb6:	d041      	beq.n	4d3c <__aeabi_fsub+0x24c>
    4cb8:	000a      	movs	r2, r1
    4cba:	e781      	b.n	4bc0 <__aeabi_fsub+0xd0>
    4cbc:	2601      	movs	r6, #1
    4cbe:	1b9b      	subs	r3, r3, r6
    4cc0:	e789      	b.n	4bd6 <__aeabi_fsub+0xe6>
    4cc2:	2c00      	cmp	r4, #0
    4cc4:	d01c      	beq.n	4d00 <__aeabi_fsub+0x210>
    4cc6:	28ff      	cmp	r0, #255	; 0xff
    4cc8:	d021      	beq.n	4d0e <__aeabi_fsub+0x21e>
    4cca:	2480      	movs	r4, #128	; 0x80
    4ccc:	04e4      	lsls	r4, r4, #19
    4cce:	4252      	negs	r2, r2
    4cd0:	4323      	orrs	r3, r4
    4cd2:	2a1b      	cmp	r2, #27
    4cd4:	dd00      	ble.n	4cd8 <__aeabi_fsub+0x1e8>
    4cd6:	e096      	b.n	4e06 <__aeabi_fsub+0x316>
    4cd8:	001c      	movs	r4, r3
    4cda:	2520      	movs	r5, #32
    4cdc:	40d4      	lsrs	r4, r2
    4cde:	1aaa      	subs	r2, r5, r2
    4ce0:	4093      	lsls	r3, r2
    4ce2:	1e5a      	subs	r2, r3, #1
    4ce4:	4193      	sbcs	r3, r2
    4ce6:	4323      	orrs	r3, r4
    4ce8:	1af3      	subs	r3, r6, r3
    4cea:	0004      	movs	r4, r0
    4cec:	000d      	movs	r5, r1
    4cee:	e72d      	b.n	4b4c <__aeabi_fsub+0x5c>
    4cf0:	2f00      	cmp	r7, #0
    4cf2:	d000      	beq.n	4cf6 <__aeabi_fsub+0x206>
    4cf4:	e72e      	b.n	4b54 <__aeabi_fsub+0x64>
    4cf6:	2200      	movs	r2, #0
    4cf8:	2400      	movs	r4, #0
    4cfa:	e7a9      	b.n	4c50 <__aeabi_fsub+0x160>
    4cfc:	000c      	movs	r4, r1
    4cfe:	e73d      	b.n	4b7c <__aeabi_fsub+0x8c>
    4d00:	2b00      	cmp	r3, #0
    4d02:	d058      	beq.n	4db6 <__aeabi_fsub+0x2c6>
    4d04:	43d2      	mvns	r2, r2
    4d06:	2a00      	cmp	r2, #0
    4d08:	d0ee      	beq.n	4ce8 <__aeabi_fsub+0x1f8>
    4d0a:	28ff      	cmp	r0, #255	; 0xff
    4d0c:	d1e1      	bne.n	4cd2 <__aeabi_fsub+0x1e2>
    4d0e:	0033      	movs	r3, r6
    4d10:	24ff      	movs	r4, #255	; 0xff
    4d12:	000d      	movs	r5, r1
    4d14:	e732      	b.n	4b7c <__aeabi_fsub+0x8c>
    4d16:	29ff      	cmp	r1, #255	; 0xff
    4d18:	d010      	beq.n	4d3c <__aeabi_fsub+0x24c>
    4d1a:	0001      	movs	r1, r0
    4d1c:	e778      	b.n	4c10 <__aeabi_fsub+0x120>
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d06e      	beq.n	4e00 <__aeabi_fsub+0x310>
    4d22:	24ff      	movs	r4, #255	; 0xff
    4d24:	2e00      	cmp	r6, #0
    4d26:	d100      	bne.n	4d2a <__aeabi_fsub+0x23a>
    4d28:	e728      	b.n	4b7c <__aeabi_fsub+0x8c>
    4d2a:	2280      	movs	r2, #128	; 0x80
    4d2c:	4651      	mov	r1, sl
    4d2e:	03d2      	lsls	r2, r2, #15
    4d30:	4211      	tst	r1, r2
    4d32:	d003      	beq.n	4d3c <__aeabi_fsub+0x24c>
    4d34:	4661      	mov	r1, ip
    4d36:	4211      	tst	r1, r2
    4d38:	d100      	bne.n	4d3c <__aeabi_fsub+0x24c>
    4d3a:	0033      	movs	r3, r6
    4d3c:	24ff      	movs	r4, #255	; 0xff
    4d3e:	e71d      	b.n	4b7c <__aeabi_fsub+0x8c>
    4d40:	24ff      	movs	r4, #255	; 0xff
    4d42:	2300      	movs	r3, #0
    4d44:	e72c      	b.n	4ba0 <__aeabi_fsub+0xb0>
    4d46:	2c00      	cmp	r4, #0
    4d48:	d1e9      	bne.n	4d1e <__aeabi_fsub+0x22e>
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d063      	beq.n	4e16 <__aeabi_fsub+0x326>
    4d4e:	2e00      	cmp	r6, #0
    4d50:	d100      	bne.n	4d54 <__aeabi_fsub+0x264>
    4d52:	e713      	b.n	4b7c <__aeabi_fsub+0x8c>
    4d54:	199b      	adds	r3, r3, r6
    4d56:	015a      	lsls	r2, r3, #5
    4d58:	d400      	bmi.n	4d5c <__aeabi_fsub+0x26c>
    4d5a:	e73e      	b.n	4bda <__aeabi_fsub+0xea>
    4d5c:	4a31      	ldr	r2, [pc, #196]	; (4e24 <__aeabi_fsub+0x334>)
    4d5e:	000c      	movs	r4, r1
    4d60:	4013      	ands	r3, r2
    4d62:	e70b      	b.n	4b7c <__aeabi_fsub+0x8c>
    4d64:	2c00      	cmp	r4, #0
    4d66:	d11e      	bne.n	4da6 <__aeabi_fsub+0x2b6>
    4d68:	2b00      	cmp	r3, #0
    4d6a:	d12f      	bne.n	4dcc <__aeabi_fsub+0x2dc>
    4d6c:	2e00      	cmp	r6, #0
    4d6e:	d04f      	beq.n	4e10 <__aeabi_fsub+0x320>
    4d70:	0033      	movs	r3, r6
    4d72:	000d      	movs	r5, r1
    4d74:	e702      	b.n	4b7c <__aeabi_fsub+0x8c>
    4d76:	2601      	movs	r6, #1
    4d78:	e755      	b.n	4c26 <__aeabi_fsub+0x136>
    4d7a:	2c00      	cmp	r4, #0
    4d7c:	d11f      	bne.n	4dbe <__aeabi_fsub+0x2ce>
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d043      	beq.n	4e0a <__aeabi_fsub+0x31a>
    4d82:	43c9      	mvns	r1, r1
    4d84:	2900      	cmp	r1, #0
    4d86:	d00b      	beq.n	4da0 <__aeabi_fsub+0x2b0>
    4d88:	28ff      	cmp	r0, #255	; 0xff
    4d8a:	d039      	beq.n	4e00 <__aeabi_fsub+0x310>
    4d8c:	291b      	cmp	r1, #27
    4d8e:	dc44      	bgt.n	4e1a <__aeabi_fsub+0x32a>
    4d90:	001c      	movs	r4, r3
    4d92:	2720      	movs	r7, #32
    4d94:	40cc      	lsrs	r4, r1
    4d96:	1a79      	subs	r1, r7, r1
    4d98:	408b      	lsls	r3, r1
    4d9a:	1e59      	subs	r1, r3, #1
    4d9c:	418b      	sbcs	r3, r1
    4d9e:	4323      	orrs	r3, r4
    4da0:	199b      	adds	r3, r3, r6
    4da2:	0004      	movs	r4, r0
    4da4:	e740      	b.n	4c28 <__aeabi_fsub+0x138>
    4da6:	2b00      	cmp	r3, #0
    4da8:	d11a      	bne.n	4de0 <__aeabi_fsub+0x2f0>
    4daa:	2e00      	cmp	r6, #0
    4dac:	d124      	bne.n	4df8 <__aeabi_fsub+0x308>
    4dae:	2780      	movs	r7, #128	; 0x80
    4db0:	2200      	movs	r2, #0
    4db2:	03ff      	lsls	r7, r7, #15
    4db4:	e71b      	b.n	4bee <__aeabi_fsub+0xfe>
    4db6:	0033      	movs	r3, r6
    4db8:	0004      	movs	r4, r0
    4dba:	000d      	movs	r5, r1
    4dbc:	e6de      	b.n	4b7c <__aeabi_fsub+0x8c>
    4dbe:	28ff      	cmp	r0, #255	; 0xff
    4dc0:	d01e      	beq.n	4e00 <__aeabi_fsub+0x310>
    4dc2:	2480      	movs	r4, #128	; 0x80
    4dc4:	04e4      	lsls	r4, r4, #19
    4dc6:	4249      	negs	r1, r1
    4dc8:	4323      	orrs	r3, r4
    4dca:	e7df      	b.n	4d8c <__aeabi_fsub+0x29c>
    4dcc:	2e00      	cmp	r6, #0
    4dce:	d100      	bne.n	4dd2 <__aeabi_fsub+0x2e2>
    4dd0:	e6d4      	b.n	4b7c <__aeabi_fsub+0x8c>
    4dd2:	1b9f      	subs	r7, r3, r6
    4dd4:	017a      	lsls	r2, r7, #5
    4dd6:	d400      	bmi.n	4dda <__aeabi_fsub+0x2ea>
    4dd8:	e737      	b.n	4c4a <__aeabi_fsub+0x15a>
    4dda:	1af3      	subs	r3, r6, r3
    4ddc:	000d      	movs	r5, r1
    4dde:	e6cd      	b.n	4b7c <__aeabi_fsub+0x8c>
    4de0:	24ff      	movs	r4, #255	; 0xff
    4de2:	2e00      	cmp	r6, #0
    4de4:	d100      	bne.n	4de8 <__aeabi_fsub+0x2f8>
    4de6:	e6c9      	b.n	4b7c <__aeabi_fsub+0x8c>
    4de8:	2280      	movs	r2, #128	; 0x80
    4dea:	4650      	mov	r0, sl
    4dec:	03d2      	lsls	r2, r2, #15
    4dee:	4210      	tst	r0, r2
    4df0:	d0a4      	beq.n	4d3c <__aeabi_fsub+0x24c>
    4df2:	4660      	mov	r0, ip
    4df4:	4210      	tst	r0, r2
    4df6:	d1a1      	bne.n	4d3c <__aeabi_fsub+0x24c>
    4df8:	0033      	movs	r3, r6
    4dfa:	000d      	movs	r5, r1
    4dfc:	24ff      	movs	r4, #255	; 0xff
    4dfe:	e6bd      	b.n	4b7c <__aeabi_fsub+0x8c>
    4e00:	0033      	movs	r3, r6
    4e02:	24ff      	movs	r4, #255	; 0xff
    4e04:	e6ba      	b.n	4b7c <__aeabi_fsub+0x8c>
    4e06:	2301      	movs	r3, #1
    4e08:	e76e      	b.n	4ce8 <__aeabi_fsub+0x1f8>
    4e0a:	0033      	movs	r3, r6
    4e0c:	0004      	movs	r4, r0
    4e0e:	e6b5      	b.n	4b7c <__aeabi_fsub+0x8c>
    4e10:	2700      	movs	r7, #0
    4e12:	2200      	movs	r2, #0
    4e14:	e71c      	b.n	4c50 <__aeabi_fsub+0x160>
    4e16:	0033      	movs	r3, r6
    4e18:	e6b0      	b.n	4b7c <__aeabi_fsub+0x8c>
    4e1a:	2301      	movs	r3, #1
    4e1c:	e7c0      	b.n	4da0 <__aeabi_fsub+0x2b0>
    4e1e:	46c0      	nop			; (mov r8, r8)
    4e20:	7dffffff 	.word	0x7dffffff
    4e24:	fbffffff 	.word	0xfbffffff

00004e28 <__aeabi_fcmpun>:
    4e28:	0242      	lsls	r2, r0, #9
    4e2a:	024b      	lsls	r3, r1, #9
    4e2c:	0040      	lsls	r0, r0, #1
    4e2e:	0049      	lsls	r1, r1, #1
    4e30:	0a52      	lsrs	r2, r2, #9
    4e32:	0e00      	lsrs	r0, r0, #24
    4e34:	0a5b      	lsrs	r3, r3, #9
    4e36:	0e09      	lsrs	r1, r1, #24
    4e38:	28ff      	cmp	r0, #255	; 0xff
    4e3a:	d003      	beq.n	4e44 <__aeabi_fcmpun+0x1c>
    4e3c:	2000      	movs	r0, #0
    4e3e:	29ff      	cmp	r1, #255	; 0xff
    4e40:	d006      	beq.n	4e50 <__aeabi_fcmpun+0x28>
    4e42:	4770      	bx	lr
    4e44:	38fe      	subs	r0, #254	; 0xfe
    4e46:	2a00      	cmp	r2, #0
    4e48:	d1fb      	bne.n	4e42 <__aeabi_fcmpun+0x1a>
    4e4a:	2000      	movs	r0, #0
    4e4c:	29ff      	cmp	r1, #255	; 0xff
    4e4e:	d1f8      	bne.n	4e42 <__aeabi_fcmpun+0x1a>
    4e50:	0018      	movs	r0, r3
    4e52:	1e43      	subs	r3, r0, #1
    4e54:	4198      	sbcs	r0, r3
    4e56:	e7f4      	b.n	4e42 <__aeabi_fcmpun+0x1a>

00004e58 <__aeabi_i2f>:
    4e58:	b570      	push	{r4, r5, r6, lr}
    4e5a:	2800      	cmp	r0, #0
    4e5c:	d030      	beq.n	4ec0 <__aeabi_i2f+0x68>
    4e5e:	17c3      	asrs	r3, r0, #31
    4e60:	18c4      	adds	r4, r0, r3
    4e62:	405c      	eors	r4, r3
    4e64:	0fc5      	lsrs	r5, r0, #31
    4e66:	0020      	movs	r0, r4
    4e68:	f001 f816 	bl	5e98 <__clzsi2>
    4e6c:	239e      	movs	r3, #158	; 0x9e
    4e6e:	1a1b      	subs	r3, r3, r0
    4e70:	2b96      	cmp	r3, #150	; 0x96
    4e72:	dc0d      	bgt.n	4e90 <__aeabi_i2f+0x38>
    4e74:	2296      	movs	r2, #150	; 0x96
    4e76:	1ad2      	subs	r2, r2, r3
    4e78:	4094      	lsls	r4, r2
    4e7a:	002a      	movs	r2, r5
    4e7c:	0264      	lsls	r4, r4, #9
    4e7e:	0a64      	lsrs	r4, r4, #9
    4e80:	b2db      	uxtb	r3, r3
    4e82:	0264      	lsls	r4, r4, #9
    4e84:	05db      	lsls	r3, r3, #23
    4e86:	0a60      	lsrs	r0, r4, #9
    4e88:	07d2      	lsls	r2, r2, #31
    4e8a:	4318      	orrs	r0, r3
    4e8c:	4310      	orrs	r0, r2
    4e8e:	bd70      	pop	{r4, r5, r6, pc}
    4e90:	2b99      	cmp	r3, #153	; 0x99
    4e92:	dc19      	bgt.n	4ec8 <__aeabi_i2f+0x70>
    4e94:	2299      	movs	r2, #153	; 0x99
    4e96:	1ad2      	subs	r2, r2, r3
    4e98:	2a00      	cmp	r2, #0
    4e9a:	dd29      	ble.n	4ef0 <__aeabi_i2f+0x98>
    4e9c:	4094      	lsls	r4, r2
    4e9e:	0022      	movs	r2, r4
    4ea0:	4c14      	ldr	r4, [pc, #80]	; (4ef4 <__aeabi_i2f+0x9c>)
    4ea2:	4014      	ands	r4, r2
    4ea4:	0751      	lsls	r1, r2, #29
    4ea6:	d004      	beq.n	4eb2 <__aeabi_i2f+0x5a>
    4ea8:	210f      	movs	r1, #15
    4eaa:	400a      	ands	r2, r1
    4eac:	2a04      	cmp	r2, #4
    4eae:	d000      	beq.n	4eb2 <__aeabi_i2f+0x5a>
    4eb0:	3404      	adds	r4, #4
    4eb2:	0162      	lsls	r2, r4, #5
    4eb4:	d413      	bmi.n	4ede <__aeabi_i2f+0x86>
    4eb6:	01a4      	lsls	r4, r4, #6
    4eb8:	0a64      	lsrs	r4, r4, #9
    4eba:	b2db      	uxtb	r3, r3
    4ebc:	002a      	movs	r2, r5
    4ebe:	e7e0      	b.n	4e82 <__aeabi_i2f+0x2a>
    4ec0:	2200      	movs	r2, #0
    4ec2:	2300      	movs	r3, #0
    4ec4:	2400      	movs	r4, #0
    4ec6:	e7dc      	b.n	4e82 <__aeabi_i2f+0x2a>
    4ec8:	2205      	movs	r2, #5
    4eca:	0021      	movs	r1, r4
    4ecc:	1a12      	subs	r2, r2, r0
    4ece:	40d1      	lsrs	r1, r2
    4ed0:	22b9      	movs	r2, #185	; 0xb9
    4ed2:	1ad2      	subs	r2, r2, r3
    4ed4:	4094      	lsls	r4, r2
    4ed6:	1e62      	subs	r2, r4, #1
    4ed8:	4194      	sbcs	r4, r2
    4eda:	430c      	orrs	r4, r1
    4edc:	e7da      	b.n	4e94 <__aeabi_i2f+0x3c>
    4ede:	4b05      	ldr	r3, [pc, #20]	; (4ef4 <__aeabi_i2f+0x9c>)
    4ee0:	002a      	movs	r2, r5
    4ee2:	401c      	ands	r4, r3
    4ee4:	239f      	movs	r3, #159	; 0x9f
    4ee6:	01a4      	lsls	r4, r4, #6
    4ee8:	1a1b      	subs	r3, r3, r0
    4eea:	0a64      	lsrs	r4, r4, #9
    4eec:	b2db      	uxtb	r3, r3
    4eee:	e7c8      	b.n	4e82 <__aeabi_i2f+0x2a>
    4ef0:	0022      	movs	r2, r4
    4ef2:	e7d5      	b.n	4ea0 <__aeabi_i2f+0x48>
    4ef4:	fbffffff 	.word	0xfbffffff

00004ef8 <__aeabi_ddiv>:
    4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4efa:	4657      	mov	r7, sl
    4efc:	4645      	mov	r5, r8
    4efe:	46de      	mov	lr, fp
    4f00:	464e      	mov	r6, r9
    4f02:	b5e0      	push	{r5, r6, r7, lr}
    4f04:	004c      	lsls	r4, r1, #1
    4f06:	030e      	lsls	r6, r1, #12
    4f08:	b087      	sub	sp, #28
    4f0a:	4683      	mov	fp, r0
    4f0c:	4692      	mov	sl, r2
    4f0e:	001d      	movs	r5, r3
    4f10:	4680      	mov	r8, r0
    4f12:	0b36      	lsrs	r6, r6, #12
    4f14:	0d64      	lsrs	r4, r4, #21
    4f16:	0fcf      	lsrs	r7, r1, #31
    4f18:	2c00      	cmp	r4, #0
    4f1a:	d04f      	beq.n	4fbc <__aeabi_ddiv+0xc4>
    4f1c:	4b6f      	ldr	r3, [pc, #444]	; (50dc <__aeabi_ddiv+0x1e4>)
    4f1e:	429c      	cmp	r4, r3
    4f20:	d035      	beq.n	4f8e <__aeabi_ddiv+0x96>
    4f22:	2380      	movs	r3, #128	; 0x80
    4f24:	0f42      	lsrs	r2, r0, #29
    4f26:	041b      	lsls	r3, r3, #16
    4f28:	00f6      	lsls	r6, r6, #3
    4f2a:	4313      	orrs	r3, r2
    4f2c:	4333      	orrs	r3, r6
    4f2e:	4699      	mov	r9, r3
    4f30:	00c3      	lsls	r3, r0, #3
    4f32:	4698      	mov	r8, r3
    4f34:	4b6a      	ldr	r3, [pc, #424]	; (50e0 <__aeabi_ddiv+0x1e8>)
    4f36:	2600      	movs	r6, #0
    4f38:	469c      	mov	ip, r3
    4f3a:	2300      	movs	r3, #0
    4f3c:	4464      	add	r4, ip
    4f3e:	9303      	str	r3, [sp, #12]
    4f40:	032b      	lsls	r3, r5, #12
    4f42:	0b1b      	lsrs	r3, r3, #12
    4f44:	469b      	mov	fp, r3
    4f46:	006b      	lsls	r3, r5, #1
    4f48:	0fed      	lsrs	r5, r5, #31
    4f4a:	4650      	mov	r0, sl
    4f4c:	0d5b      	lsrs	r3, r3, #21
    4f4e:	9501      	str	r5, [sp, #4]
    4f50:	d05e      	beq.n	5010 <__aeabi_ddiv+0x118>
    4f52:	4a62      	ldr	r2, [pc, #392]	; (50dc <__aeabi_ddiv+0x1e4>)
    4f54:	4293      	cmp	r3, r2
    4f56:	d053      	beq.n	5000 <__aeabi_ddiv+0x108>
    4f58:	465a      	mov	r2, fp
    4f5a:	00d1      	lsls	r1, r2, #3
    4f5c:	2280      	movs	r2, #128	; 0x80
    4f5e:	0f40      	lsrs	r0, r0, #29
    4f60:	0412      	lsls	r2, r2, #16
    4f62:	4302      	orrs	r2, r0
    4f64:	430a      	orrs	r2, r1
    4f66:	4693      	mov	fp, r2
    4f68:	4652      	mov	r2, sl
    4f6a:	00d1      	lsls	r1, r2, #3
    4f6c:	4a5c      	ldr	r2, [pc, #368]	; (50e0 <__aeabi_ddiv+0x1e8>)
    4f6e:	4694      	mov	ip, r2
    4f70:	2200      	movs	r2, #0
    4f72:	4463      	add	r3, ip
    4f74:	0038      	movs	r0, r7
    4f76:	4068      	eors	r0, r5
    4f78:	4684      	mov	ip, r0
    4f7a:	9002      	str	r0, [sp, #8]
    4f7c:	1ae4      	subs	r4, r4, r3
    4f7e:	4316      	orrs	r6, r2
    4f80:	2e0f      	cmp	r6, #15
    4f82:	d900      	bls.n	4f86 <__aeabi_ddiv+0x8e>
    4f84:	e0b4      	b.n	50f0 <__aeabi_ddiv+0x1f8>
    4f86:	4b57      	ldr	r3, [pc, #348]	; (50e4 <__aeabi_ddiv+0x1ec>)
    4f88:	00b6      	lsls	r6, r6, #2
    4f8a:	599b      	ldr	r3, [r3, r6]
    4f8c:	469f      	mov	pc, r3
    4f8e:	0003      	movs	r3, r0
    4f90:	4333      	orrs	r3, r6
    4f92:	4699      	mov	r9, r3
    4f94:	d16c      	bne.n	5070 <__aeabi_ddiv+0x178>
    4f96:	2300      	movs	r3, #0
    4f98:	4698      	mov	r8, r3
    4f9a:	3302      	adds	r3, #2
    4f9c:	2608      	movs	r6, #8
    4f9e:	9303      	str	r3, [sp, #12]
    4fa0:	e7ce      	b.n	4f40 <__aeabi_ddiv+0x48>
    4fa2:	46cb      	mov	fp, r9
    4fa4:	4641      	mov	r1, r8
    4fa6:	9a03      	ldr	r2, [sp, #12]
    4fa8:	9701      	str	r7, [sp, #4]
    4faa:	2a02      	cmp	r2, #2
    4fac:	d165      	bne.n	507a <__aeabi_ddiv+0x182>
    4fae:	9b01      	ldr	r3, [sp, #4]
    4fb0:	4c4a      	ldr	r4, [pc, #296]	; (50dc <__aeabi_ddiv+0x1e4>)
    4fb2:	469c      	mov	ip, r3
    4fb4:	2300      	movs	r3, #0
    4fb6:	2200      	movs	r2, #0
    4fb8:	4698      	mov	r8, r3
    4fba:	e06b      	b.n	5094 <__aeabi_ddiv+0x19c>
    4fbc:	0003      	movs	r3, r0
    4fbe:	4333      	orrs	r3, r6
    4fc0:	4699      	mov	r9, r3
    4fc2:	d04e      	beq.n	5062 <__aeabi_ddiv+0x16a>
    4fc4:	2e00      	cmp	r6, #0
    4fc6:	d100      	bne.n	4fca <__aeabi_ddiv+0xd2>
    4fc8:	e1bc      	b.n	5344 <__aeabi_ddiv+0x44c>
    4fca:	0030      	movs	r0, r6
    4fcc:	f000 ff64 	bl	5e98 <__clzsi2>
    4fd0:	0003      	movs	r3, r0
    4fd2:	3b0b      	subs	r3, #11
    4fd4:	2b1c      	cmp	r3, #28
    4fd6:	dd00      	ble.n	4fda <__aeabi_ddiv+0xe2>
    4fd8:	e1ac      	b.n	5334 <__aeabi_ddiv+0x43c>
    4fda:	221d      	movs	r2, #29
    4fdc:	1ad3      	subs	r3, r2, r3
    4fde:	465a      	mov	r2, fp
    4fe0:	0001      	movs	r1, r0
    4fe2:	40da      	lsrs	r2, r3
    4fe4:	3908      	subs	r1, #8
    4fe6:	408e      	lsls	r6, r1
    4fe8:	0013      	movs	r3, r2
    4fea:	4333      	orrs	r3, r6
    4fec:	4699      	mov	r9, r3
    4fee:	465b      	mov	r3, fp
    4ff0:	408b      	lsls	r3, r1
    4ff2:	4698      	mov	r8, r3
    4ff4:	2300      	movs	r3, #0
    4ff6:	4c3c      	ldr	r4, [pc, #240]	; (50e8 <__aeabi_ddiv+0x1f0>)
    4ff8:	2600      	movs	r6, #0
    4ffa:	1a24      	subs	r4, r4, r0
    4ffc:	9303      	str	r3, [sp, #12]
    4ffe:	e79f      	b.n	4f40 <__aeabi_ddiv+0x48>
    5000:	4651      	mov	r1, sl
    5002:	465a      	mov	r2, fp
    5004:	4311      	orrs	r1, r2
    5006:	d129      	bne.n	505c <__aeabi_ddiv+0x164>
    5008:	2200      	movs	r2, #0
    500a:	4693      	mov	fp, r2
    500c:	3202      	adds	r2, #2
    500e:	e7b1      	b.n	4f74 <__aeabi_ddiv+0x7c>
    5010:	4659      	mov	r1, fp
    5012:	4301      	orrs	r1, r0
    5014:	d01e      	beq.n	5054 <__aeabi_ddiv+0x15c>
    5016:	465b      	mov	r3, fp
    5018:	2b00      	cmp	r3, #0
    501a:	d100      	bne.n	501e <__aeabi_ddiv+0x126>
    501c:	e19e      	b.n	535c <__aeabi_ddiv+0x464>
    501e:	4658      	mov	r0, fp
    5020:	f000 ff3a 	bl	5e98 <__clzsi2>
    5024:	0003      	movs	r3, r0
    5026:	3b0b      	subs	r3, #11
    5028:	2b1c      	cmp	r3, #28
    502a:	dd00      	ble.n	502e <__aeabi_ddiv+0x136>
    502c:	e18f      	b.n	534e <__aeabi_ddiv+0x456>
    502e:	0002      	movs	r2, r0
    5030:	4659      	mov	r1, fp
    5032:	3a08      	subs	r2, #8
    5034:	4091      	lsls	r1, r2
    5036:	468b      	mov	fp, r1
    5038:	211d      	movs	r1, #29
    503a:	1acb      	subs	r3, r1, r3
    503c:	4651      	mov	r1, sl
    503e:	40d9      	lsrs	r1, r3
    5040:	000b      	movs	r3, r1
    5042:	4659      	mov	r1, fp
    5044:	430b      	orrs	r3, r1
    5046:	4651      	mov	r1, sl
    5048:	469b      	mov	fp, r3
    504a:	4091      	lsls	r1, r2
    504c:	4b26      	ldr	r3, [pc, #152]	; (50e8 <__aeabi_ddiv+0x1f0>)
    504e:	2200      	movs	r2, #0
    5050:	1a1b      	subs	r3, r3, r0
    5052:	e78f      	b.n	4f74 <__aeabi_ddiv+0x7c>
    5054:	2300      	movs	r3, #0
    5056:	2201      	movs	r2, #1
    5058:	469b      	mov	fp, r3
    505a:	e78b      	b.n	4f74 <__aeabi_ddiv+0x7c>
    505c:	4651      	mov	r1, sl
    505e:	2203      	movs	r2, #3
    5060:	e788      	b.n	4f74 <__aeabi_ddiv+0x7c>
    5062:	2300      	movs	r3, #0
    5064:	4698      	mov	r8, r3
    5066:	3301      	adds	r3, #1
    5068:	2604      	movs	r6, #4
    506a:	2400      	movs	r4, #0
    506c:	9303      	str	r3, [sp, #12]
    506e:	e767      	b.n	4f40 <__aeabi_ddiv+0x48>
    5070:	2303      	movs	r3, #3
    5072:	46b1      	mov	r9, r6
    5074:	9303      	str	r3, [sp, #12]
    5076:	260c      	movs	r6, #12
    5078:	e762      	b.n	4f40 <__aeabi_ddiv+0x48>
    507a:	2a03      	cmp	r2, #3
    507c:	d100      	bne.n	5080 <__aeabi_ddiv+0x188>
    507e:	e25c      	b.n	553a <__aeabi_ddiv+0x642>
    5080:	9b01      	ldr	r3, [sp, #4]
    5082:	2a01      	cmp	r2, #1
    5084:	d000      	beq.n	5088 <__aeabi_ddiv+0x190>
    5086:	e1e4      	b.n	5452 <__aeabi_ddiv+0x55a>
    5088:	4013      	ands	r3, r2
    508a:	469c      	mov	ip, r3
    508c:	2300      	movs	r3, #0
    508e:	2400      	movs	r4, #0
    5090:	2200      	movs	r2, #0
    5092:	4698      	mov	r8, r3
    5094:	2100      	movs	r1, #0
    5096:	0312      	lsls	r2, r2, #12
    5098:	0b13      	lsrs	r3, r2, #12
    509a:	0d0a      	lsrs	r2, r1, #20
    509c:	0512      	lsls	r2, r2, #20
    509e:	431a      	orrs	r2, r3
    50a0:	0523      	lsls	r3, r4, #20
    50a2:	4c12      	ldr	r4, [pc, #72]	; (50ec <__aeabi_ddiv+0x1f4>)
    50a4:	4640      	mov	r0, r8
    50a6:	4022      	ands	r2, r4
    50a8:	4313      	orrs	r3, r2
    50aa:	4662      	mov	r2, ip
    50ac:	005b      	lsls	r3, r3, #1
    50ae:	07d2      	lsls	r2, r2, #31
    50b0:	085b      	lsrs	r3, r3, #1
    50b2:	4313      	orrs	r3, r2
    50b4:	0019      	movs	r1, r3
    50b6:	b007      	add	sp, #28
    50b8:	bc3c      	pop	{r2, r3, r4, r5}
    50ba:	4690      	mov	r8, r2
    50bc:	4699      	mov	r9, r3
    50be:	46a2      	mov	sl, r4
    50c0:	46ab      	mov	fp, r5
    50c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50c4:	2300      	movs	r3, #0
    50c6:	2280      	movs	r2, #128	; 0x80
    50c8:	469c      	mov	ip, r3
    50ca:	0312      	lsls	r2, r2, #12
    50cc:	4698      	mov	r8, r3
    50ce:	4c03      	ldr	r4, [pc, #12]	; (50dc <__aeabi_ddiv+0x1e4>)
    50d0:	e7e0      	b.n	5094 <__aeabi_ddiv+0x19c>
    50d2:	2300      	movs	r3, #0
    50d4:	4c01      	ldr	r4, [pc, #4]	; (50dc <__aeabi_ddiv+0x1e4>)
    50d6:	2200      	movs	r2, #0
    50d8:	4698      	mov	r8, r3
    50da:	e7db      	b.n	5094 <__aeabi_ddiv+0x19c>
    50dc:	000007ff 	.word	0x000007ff
    50e0:	fffffc01 	.word	0xfffffc01
    50e4:	000064e0 	.word	0x000064e0
    50e8:	fffffc0d 	.word	0xfffffc0d
    50ec:	800fffff 	.word	0x800fffff
    50f0:	45d9      	cmp	r9, fp
    50f2:	d900      	bls.n	50f6 <__aeabi_ddiv+0x1fe>
    50f4:	e139      	b.n	536a <__aeabi_ddiv+0x472>
    50f6:	d100      	bne.n	50fa <__aeabi_ddiv+0x202>
    50f8:	e134      	b.n	5364 <__aeabi_ddiv+0x46c>
    50fa:	2300      	movs	r3, #0
    50fc:	4646      	mov	r6, r8
    50fe:	464d      	mov	r5, r9
    5100:	469a      	mov	sl, r3
    5102:	3c01      	subs	r4, #1
    5104:	465b      	mov	r3, fp
    5106:	0e0a      	lsrs	r2, r1, #24
    5108:	021b      	lsls	r3, r3, #8
    510a:	431a      	orrs	r2, r3
    510c:	020b      	lsls	r3, r1, #8
    510e:	0c17      	lsrs	r7, r2, #16
    5110:	9303      	str	r3, [sp, #12]
    5112:	0413      	lsls	r3, r2, #16
    5114:	0c1b      	lsrs	r3, r3, #16
    5116:	0039      	movs	r1, r7
    5118:	0028      	movs	r0, r5
    511a:	4690      	mov	r8, r2
    511c:	9301      	str	r3, [sp, #4]
    511e:	f7fe ff61 	bl	3fe4 <__udivsi3>
    5122:	0002      	movs	r2, r0
    5124:	9b01      	ldr	r3, [sp, #4]
    5126:	4683      	mov	fp, r0
    5128:	435a      	muls	r2, r3
    512a:	0028      	movs	r0, r5
    512c:	0039      	movs	r1, r7
    512e:	4691      	mov	r9, r2
    5130:	f7fe ffde 	bl	40f0 <__aeabi_uidivmod>
    5134:	0c35      	lsrs	r5, r6, #16
    5136:	0409      	lsls	r1, r1, #16
    5138:	430d      	orrs	r5, r1
    513a:	45a9      	cmp	r9, r5
    513c:	d90d      	bls.n	515a <__aeabi_ddiv+0x262>
    513e:	465b      	mov	r3, fp
    5140:	4445      	add	r5, r8
    5142:	3b01      	subs	r3, #1
    5144:	45a8      	cmp	r8, r5
    5146:	d900      	bls.n	514a <__aeabi_ddiv+0x252>
    5148:	e13a      	b.n	53c0 <__aeabi_ddiv+0x4c8>
    514a:	45a9      	cmp	r9, r5
    514c:	d800      	bhi.n	5150 <__aeabi_ddiv+0x258>
    514e:	e137      	b.n	53c0 <__aeabi_ddiv+0x4c8>
    5150:	2302      	movs	r3, #2
    5152:	425b      	negs	r3, r3
    5154:	469c      	mov	ip, r3
    5156:	4445      	add	r5, r8
    5158:	44e3      	add	fp, ip
    515a:	464b      	mov	r3, r9
    515c:	1aeb      	subs	r3, r5, r3
    515e:	0039      	movs	r1, r7
    5160:	0018      	movs	r0, r3
    5162:	9304      	str	r3, [sp, #16]
    5164:	f7fe ff3e 	bl	3fe4 <__udivsi3>
    5168:	9b01      	ldr	r3, [sp, #4]
    516a:	0005      	movs	r5, r0
    516c:	4343      	muls	r3, r0
    516e:	0039      	movs	r1, r7
    5170:	9804      	ldr	r0, [sp, #16]
    5172:	4699      	mov	r9, r3
    5174:	f7fe ffbc 	bl	40f0 <__aeabi_uidivmod>
    5178:	0433      	lsls	r3, r6, #16
    517a:	0409      	lsls	r1, r1, #16
    517c:	0c1b      	lsrs	r3, r3, #16
    517e:	430b      	orrs	r3, r1
    5180:	4599      	cmp	r9, r3
    5182:	d909      	bls.n	5198 <__aeabi_ddiv+0x2a0>
    5184:	4443      	add	r3, r8
    5186:	1e6a      	subs	r2, r5, #1
    5188:	4598      	cmp	r8, r3
    518a:	d900      	bls.n	518e <__aeabi_ddiv+0x296>
    518c:	e11a      	b.n	53c4 <__aeabi_ddiv+0x4cc>
    518e:	4599      	cmp	r9, r3
    5190:	d800      	bhi.n	5194 <__aeabi_ddiv+0x29c>
    5192:	e117      	b.n	53c4 <__aeabi_ddiv+0x4cc>
    5194:	3d02      	subs	r5, #2
    5196:	4443      	add	r3, r8
    5198:	464a      	mov	r2, r9
    519a:	1a9b      	subs	r3, r3, r2
    519c:	465a      	mov	r2, fp
    519e:	0412      	lsls	r2, r2, #16
    51a0:	432a      	orrs	r2, r5
    51a2:	9903      	ldr	r1, [sp, #12]
    51a4:	4693      	mov	fp, r2
    51a6:	0c10      	lsrs	r0, r2, #16
    51a8:	0c0a      	lsrs	r2, r1, #16
    51aa:	4691      	mov	r9, r2
    51ac:	0409      	lsls	r1, r1, #16
    51ae:	465a      	mov	r2, fp
    51b0:	0c09      	lsrs	r1, r1, #16
    51b2:	464e      	mov	r6, r9
    51b4:	000d      	movs	r5, r1
    51b6:	0412      	lsls	r2, r2, #16
    51b8:	0c12      	lsrs	r2, r2, #16
    51ba:	4345      	muls	r5, r0
    51bc:	9105      	str	r1, [sp, #20]
    51be:	4351      	muls	r1, r2
    51c0:	4372      	muls	r2, r6
    51c2:	4370      	muls	r0, r6
    51c4:	1952      	adds	r2, r2, r5
    51c6:	0c0e      	lsrs	r6, r1, #16
    51c8:	18b2      	adds	r2, r6, r2
    51ca:	4295      	cmp	r5, r2
    51cc:	d903      	bls.n	51d6 <__aeabi_ddiv+0x2de>
    51ce:	2580      	movs	r5, #128	; 0x80
    51d0:	026d      	lsls	r5, r5, #9
    51d2:	46ac      	mov	ip, r5
    51d4:	4460      	add	r0, ip
    51d6:	0c15      	lsrs	r5, r2, #16
    51d8:	0409      	lsls	r1, r1, #16
    51da:	0412      	lsls	r2, r2, #16
    51dc:	0c09      	lsrs	r1, r1, #16
    51de:	1828      	adds	r0, r5, r0
    51e0:	1852      	adds	r2, r2, r1
    51e2:	4283      	cmp	r3, r0
    51e4:	d200      	bcs.n	51e8 <__aeabi_ddiv+0x2f0>
    51e6:	e0ce      	b.n	5386 <__aeabi_ddiv+0x48e>
    51e8:	d100      	bne.n	51ec <__aeabi_ddiv+0x2f4>
    51ea:	e0c8      	b.n	537e <__aeabi_ddiv+0x486>
    51ec:	1a1d      	subs	r5, r3, r0
    51ee:	4653      	mov	r3, sl
    51f0:	1a9e      	subs	r6, r3, r2
    51f2:	45b2      	cmp	sl, r6
    51f4:	4192      	sbcs	r2, r2
    51f6:	4252      	negs	r2, r2
    51f8:	1aab      	subs	r3, r5, r2
    51fa:	469a      	mov	sl, r3
    51fc:	4598      	cmp	r8, r3
    51fe:	d100      	bne.n	5202 <__aeabi_ddiv+0x30a>
    5200:	e117      	b.n	5432 <__aeabi_ddiv+0x53a>
    5202:	0039      	movs	r1, r7
    5204:	0018      	movs	r0, r3
    5206:	f7fe feed 	bl	3fe4 <__udivsi3>
    520a:	9b01      	ldr	r3, [sp, #4]
    520c:	0005      	movs	r5, r0
    520e:	4343      	muls	r3, r0
    5210:	0039      	movs	r1, r7
    5212:	4650      	mov	r0, sl
    5214:	9304      	str	r3, [sp, #16]
    5216:	f7fe ff6b 	bl	40f0 <__aeabi_uidivmod>
    521a:	9804      	ldr	r0, [sp, #16]
    521c:	040b      	lsls	r3, r1, #16
    521e:	0c31      	lsrs	r1, r6, #16
    5220:	4319      	orrs	r1, r3
    5222:	4288      	cmp	r0, r1
    5224:	d909      	bls.n	523a <__aeabi_ddiv+0x342>
    5226:	4441      	add	r1, r8
    5228:	1e6b      	subs	r3, r5, #1
    522a:	4588      	cmp	r8, r1
    522c:	d900      	bls.n	5230 <__aeabi_ddiv+0x338>
    522e:	e107      	b.n	5440 <__aeabi_ddiv+0x548>
    5230:	4288      	cmp	r0, r1
    5232:	d800      	bhi.n	5236 <__aeabi_ddiv+0x33e>
    5234:	e104      	b.n	5440 <__aeabi_ddiv+0x548>
    5236:	3d02      	subs	r5, #2
    5238:	4441      	add	r1, r8
    523a:	9b04      	ldr	r3, [sp, #16]
    523c:	1acb      	subs	r3, r1, r3
    523e:	0018      	movs	r0, r3
    5240:	0039      	movs	r1, r7
    5242:	9304      	str	r3, [sp, #16]
    5244:	f7fe fece 	bl	3fe4 <__udivsi3>
    5248:	9b01      	ldr	r3, [sp, #4]
    524a:	4682      	mov	sl, r0
    524c:	4343      	muls	r3, r0
    524e:	0039      	movs	r1, r7
    5250:	9804      	ldr	r0, [sp, #16]
    5252:	9301      	str	r3, [sp, #4]
    5254:	f7fe ff4c 	bl	40f0 <__aeabi_uidivmod>
    5258:	9801      	ldr	r0, [sp, #4]
    525a:	040b      	lsls	r3, r1, #16
    525c:	0431      	lsls	r1, r6, #16
    525e:	0c09      	lsrs	r1, r1, #16
    5260:	4319      	orrs	r1, r3
    5262:	4288      	cmp	r0, r1
    5264:	d90d      	bls.n	5282 <__aeabi_ddiv+0x38a>
    5266:	4653      	mov	r3, sl
    5268:	4441      	add	r1, r8
    526a:	3b01      	subs	r3, #1
    526c:	4588      	cmp	r8, r1
    526e:	d900      	bls.n	5272 <__aeabi_ddiv+0x37a>
    5270:	e0e8      	b.n	5444 <__aeabi_ddiv+0x54c>
    5272:	4288      	cmp	r0, r1
    5274:	d800      	bhi.n	5278 <__aeabi_ddiv+0x380>
    5276:	e0e5      	b.n	5444 <__aeabi_ddiv+0x54c>
    5278:	2302      	movs	r3, #2
    527a:	425b      	negs	r3, r3
    527c:	469c      	mov	ip, r3
    527e:	4441      	add	r1, r8
    5280:	44e2      	add	sl, ip
    5282:	9b01      	ldr	r3, [sp, #4]
    5284:	042d      	lsls	r5, r5, #16
    5286:	1ace      	subs	r6, r1, r3
    5288:	4651      	mov	r1, sl
    528a:	4329      	orrs	r1, r5
    528c:	9d05      	ldr	r5, [sp, #20]
    528e:	464f      	mov	r7, r9
    5290:	002a      	movs	r2, r5
    5292:	040b      	lsls	r3, r1, #16
    5294:	0c08      	lsrs	r0, r1, #16
    5296:	0c1b      	lsrs	r3, r3, #16
    5298:	435a      	muls	r2, r3
    529a:	4345      	muls	r5, r0
    529c:	437b      	muls	r3, r7
    529e:	4378      	muls	r0, r7
    52a0:	195b      	adds	r3, r3, r5
    52a2:	0c17      	lsrs	r7, r2, #16
    52a4:	18fb      	adds	r3, r7, r3
    52a6:	429d      	cmp	r5, r3
    52a8:	d903      	bls.n	52b2 <__aeabi_ddiv+0x3ba>
    52aa:	2580      	movs	r5, #128	; 0x80
    52ac:	026d      	lsls	r5, r5, #9
    52ae:	46ac      	mov	ip, r5
    52b0:	4460      	add	r0, ip
    52b2:	0c1d      	lsrs	r5, r3, #16
    52b4:	0412      	lsls	r2, r2, #16
    52b6:	041b      	lsls	r3, r3, #16
    52b8:	0c12      	lsrs	r2, r2, #16
    52ba:	1828      	adds	r0, r5, r0
    52bc:	189b      	adds	r3, r3, r2
    52be:	4286      	cmp	r6, r0
    52c0:	d200      	bcs.n	52c4 <__aeabi_ddiv+0x3cc>
    52c2:	e093      	b.n	53ec <__aeabi_ddiv+0x4f4>
    52c4:	d100      	bne.n	52c8 <__aeabi_ddiv+0x3d0>
    52c6:	e08e      	b.n	53e6 <__aeabi_ddiv+0x4ee>
    52c8:	2301      	movs	r3, #1
    52ca:	4319      	orrs	r1, r3
    52cc:	4ba0      	ldr	r3, [pc, #640]	; (5550 <__aeabi_ddiv+0x658>)
    52ce:	18e3      	adds	r3, r4, r3
    52d0:	2b00      	cmp	r3, #0
    52d2:	dc00      	bgt.n	52d6 <__aeabi_ddiv+0x3de>
    52d4:	e099      	b.n	540a <__aeabi_ddiv+0x512>
    52d6:	074a      	lsls	r2, r1, #29
    52d8:	d000      	beq.n	52dc <__aeabi_ddiv+0x3e4>
    52da:	e09e      	b.n	541a <__aeabi_ddiv+0x522>
    52dc:	465a      	mov	r2, fp
    52de:	01d2      	lsls	r2, r2, #7
    52e0:	d506      	bpl.n	52f0 <__aeabi_ddiv+0x3f8>
    52e2:	465a      	mov	r2, fp
    52e4:	4b9b      	ldr	r3, [pc, #620]	; (5554 <__aeabi_ddiv+0x65c>)
    52e6:	401a      	ands	r2, r3
    52e8:	2380      	movs	r3, #128	; 0x80
    52ea:	4693      	mov	fp, r2
    52ec:	00db      	lsls	r3, r3, #3
    52ee:	18e3      	adds	r3, r4, r3
    52f0:	4a99      	ldr	r2, [pc, #612]	; (5558 <__aeabi_ddiv+0x660>)
    52f2:	4293      	cmp	r3, r2
    52f4:	dd68      	ble.n	53c8 <__aeabi_ddiv+0x4d0>
    52f6:	2301      	movs	r3, #1
    52f8:	9a02      	ldr	r2, [sp, #8]
    52fa:	4c98      	ldr	r4, [pc, #608]	; (555c <__aeabi_ddiv+0x664>)
    52fc:	401a      	ands	r2, r3
    52fe:	2300      	movs	r3, #0
    5300:	4694      	mov	ip, r2
    5302:	4698      	mov	r8, r3
    5304:	2200      	movs	r2, #0
    5306:	e6c5      	b.n	5094 <__aeabi_ddiv+0x19c>
    5308:	2280      	movs	r2, #128	; 0x80
    530a:	464b      	mov	r3, r9
    530c:	0312      	lsls	r2, r2, #12
    530e:	4213      	tst	r3, r2
    5310:	d00a      	beq.n	5328 <__aeabi_ddiv+0x430>
    5312:	465b      	mov	r3, fp
    5314:	4213      	tst	r3, r2
    5316:	d106      	bne.n	5326 <__aeabi_ddiv+0x42e>
    5318:	431a      	orrs	r2, r3
    531a:	0312      	lsls	r2, r2, #12
    531c:	0b12      	lsrs	r2, r2, #12
    531e:	46ac      	mov	ip, r5
    5320:	4688      	mov	r8, r1
    5322:	4c8e      	ldr	r4, [pc, #568]	; (555c <__aeabi_ddiv+0x664>)
    5324:	e6b6      	b.n	5094 <__aeabi_ddiv+0x19c>
    5326:	464b      	mov	r3, r9
    5328:	431a      	orrs	r2, r3
    532a:	0312      	lsls	r2, r2, #12
    532c:	0b12      	lsrs	r2, r2, #12
    532e:	46bc      	mov	ip, r7
    5330:	4c8a      	ldr	r4, [pc, #552]	; (555c <__aeabi_ddiv+0x664>)
    5332:	e6af      	b.n	5094 <__aeabi_ddiv+0x19c>
    5334:	0003      	movs	r3, r0
    5336:	465a      	mov	r2, fp
    5338:	3b28      	subs	r3, #40	; 0x28
    533a:	409a      	lsls	r2, r3
    533c:	2300      	movs	r3, #0
    533e:	4691      	mov	r9, r2
    5340:	4698      	mov	r8, r3
    5342:	e657      	b.n	4ff4 <__aeabi_ddiv+0xfc>
    5344:	4658      	mov	r0, fp
    5346:	f000 fda7 	bl	5e98 <__clzsi2>
    534a:	3020      	adds	r0, #32
    534c:	e640      	b.n	4fd0 <__aeabi_ddiv+0xd8>
    534e:	0003      	movs	r3, r0
    5350:	4652      	mov	r2, sl
    5352:	3b28      	subs	r3, #40	; 0x28
    5354:	409a      	lsls	r2, r3
    5356:	2100      	movs	r1, #0
    5358:	4693      	mov	fp, r2
    535a:	e677      	b.n	504c <__aeabi_ddiv+0x154>
    535c:	f000 fd9c 	bl	5e98 <__clzsi2>
    5360:	3020      	adds	r0, #32
    5362:	e65f      	b.n	5024 <__aeabi_ddiv+0x12c>
    5364:	4588      	cmp	r8, r1
    5366:	d200      	bcs.n	536a <__aeabi_ddiv+0x472>
    5368:	e6c7      	b.n	50fa <__aeabi_ddiv+0x202>
    536a:	464b      	mov	r3, r9
    536c:	07de      	lsls	r6, r3, #31
    536e:	085d      	lsrs	r5, r3, #1
    5370:	4643      	mov	r3, r8
    5372:	085b      	lsrs	r3, r3, #1
    5374:	431e      	orrs	r6, r3
    5376:	4643      	mov	r3, r8
    5378:	07db      	lsls	r3, r3, #31
    537a:	469a      	mov	sl, r3
    537c:	e6c2      	b.n	5104 <__aeabi_ddiv+0x20c>
    537e:	2500      	movs	r5, #0
    5380:	4592      	cmp	sl, r2
    5382:	d300      	bcc.n	5386 <__aeabi_ddiv+0x48e>
    5384:	e733      	b.n	51ee <__aeabi_ddiv+0x2f6>
    5386:	9e03      	ldr	r6, [sp, #12]
    5388:	4659      	mov	r1, fp
    538a:	46b4      	mov	ip, r6
    538c:	44e2      	add	sl, ip
    538e:	45b2      	cmp	sl, r6
    5390:	41ad      	sbcs	r5, r5
    5392:	426d      	negs	r5, r5
    5394:	4445      	add	r5, r8
    5396:	18eb      	adds	r3, r5, r3
    5398:	3901      	subs	r1, #1
    539a:	4598      	cmp	r8, r3
    539c:	d207      	bcs.n	53ae <__aeabi_ddiv+0x4b6>
    539e:	4298      	cmp	r0, r3
    53a0:	d900      	bls.n	53a4 <__aeabi_ddiv+0x4ac>
    53a2:	e07f      	b.n	54a4 <__aeabi_ddiv+0x5ac>
    53a4:	d100      	bne.n	53a8 <__aeabi_ddiv+0x4b0>
    53a6:	e0bc      	b.n	5522 <__aeabi_ddiv+0x62a>
    53a8:	1a1d      	subs	r5, r3, r0
    53aa:	468b      	mov	fp, r1
    53ac:	e71f      	b.n	51ee <__aeabi_ddiv+0x2f6>
    53ae:	4598      	cmp	r8, r3
    53b0:	d1fa      	bne.n	53a8 <__aeabi_ddiv+0x4b0>
    53b2:	9d03      	ldr	r5, [sp, #12]
    53b4:	4555      	cmp	r5, sl
    53b6:	d9f2      	bls.n	539e <__aeabi_ddiv+0x4a6>
    53b8:	4643      	mov	r3, r8
    53ba:	468b      	mov	fp, r1
    53bc:	1a1d      	subs	r5, r3, r0
    53be:	e716      	b.n	51ee <__aeabi_ddiv+0x2f6>
    53c0:	469b      	mov	fp, r3
    53c2:	e6ca      	b.n	515a <__aeabi_ddiv+0x262>
    53c4:	0015      	movs	r5, r2
    53c6:	e6e7      	b.n	5198 <__aeabi_ddiv+0x2a0>
    53c8:	465a      	mov	r2, fp
    53ca:	08c9      	lsrs	r1, r1, #3
    53cc:	0752      	lsls	r2, r2, #29
    53ce:	430a      	orrs	r2, r1
    53d0:	055b      	lsls	r3, r3, #21
    53d2:	4690      	mov	r8, r2
    53d4:	0d5c      	lsrs	r4, r3, #21
    53d6:	465a      	mov	r2, fp
    53d8:	2301      	movs	r3, #1
    53da:	9902      	ldr	r1, [sp, #8]
    53dc:	0252      	lsls	r2, r2, #9
    53de:	4019      	ands	r1, r3
    53e0:	0b12      	lsrs	r2, r2, #12
    53e2:	468c      	mov	ip, r1
    53e4:	e656      	b.n	5094 <__aeabi_ddiv+0x19c>
    53e6:	2b00      	cmp	r3, #0
    53e8:	d100      	bne.n	53ec <__aeabi_ddiv+0x4f4>
    53ea:	e76f      	b.n	52cc <__aeabi_ddiv+0x3d4>
    53ec:	4446      	add	r6, r8
    53ee:	1e4a      	subs	r2, r1, #1
    53f0:	45b0      	cmp	r8, r6
    53f2:	d929      	bls.n	5448 <__aeabi_ddiv+0x550>
    53f4:	0011      	movs	r1, r2
    53f6:	4286      	cmp	r6, r0
    53f8:	d000      	beq.n	53fc <__aeabi_ddiv+0x504>
    53fa:	e765      	b.n	52c8 <__aeabi_ddiv+0x3d0>
    53fc:	9a03      	ldr	r2, [sp, #12]
    53fe:	4293      	cmp	r3, r2
    5400:	d000      	beq.n	5404 <__aeabi_ddiv+0x50c>
    5402:	e761      	b.n	52c8 <__aeabi_ddiv+0x3d0>
    5404:	e762      	b.n	52cc <__aeabi_ddiv+0x3d4>
    5406:	2101      	movs	r1, #1
    5408:	4249      	negs	r1, r1
    540a:	2001      	movs	r0, #1
    540c:	1ac2      	subs	r2, r0, r3
    540e:	2a38      	cmp	r2, #56	; 0x38
    5410:	dd21      	ble.n	5456 <__aeabi_ddiv+0x55e>
    5412:	9b02      	ldr	r3, [sp, #8]
    5414:	4003      	ands	r3, r0
    5416:	469c      	mov	ip, r3
    5418:	e638      	b.n	508c <__aeabi_ddiv+0x194>
    541a:	220f      	movs	r2, #15
    541c:	400a      	ands	r2, r1
    541e:	2a04      	cmp	r2, #4
    5420:	d100      	bne.n	5424 <__aeabi_ddiv+0x52c>
    5422:	e75b      	b.n	52dc <__aeabi_ddiv+0x3e4>
    5424:	000a      	movs	r2, r1
    5426:	1d11      	adds	r1, r2, #4
    5428:	4291      	cmp	r1, r2
    542a:	4192      	sbcs	r2, r2
    542c:	4252      	negs	r2, r2
    542e:	4493      	add	fp, r2
    5430:	e754      	b.n	52dc <__aeabi_ddiv+0x3e4>
    5432:	4b47      	ldr	r3, [pc, #284]	; (5550 <__aeabi_ddiv+0x658>)
    5434:	18e3      	adds	r3, r4, r3
    5436:	2b00      	cmp	r3, #0
    5438:	dde5      	ble.n	5406 <__aeabi_ddiv+0x50e>
    543a:	2201      	movs	r2, #1
    543c:	4252      	negs	r2, r2
    543e:	e7f2      	b.n	5426 <__aeabi_ddiv+0x52e>
    5440:	001d      	movs	r5, r3
    5442:	e6fa      	b.n	523a <__aeabi_ddiv+0x342>
    5444:	469a      	mov	sl, r3
    5446:	e71c      	b.n	5282 <__aeabi_ddiv+0x38a>
    5448:	42b0      	cmp	r0, r6
    544a:	d839      	bhi.n	54c0 <__aeabi_ddiv+0x5c8>
    544c:	d06e      	beq.n	552c <__aeabi_ddiv+0x634>
    544e:	0011      	movs	r1, r2
    5450:	e73a      	b.n	52c8 <__aeabi_ddiv+0x3d0>
    5452:	9302      	str	r3, [sp, #8]
    5454:	e73a      	b.n	52cc <__aeabi_ddiv+0x3d4>
    5456:	2a1f      	cmp	r2, #31
    5458:	dc3c      	bgt.n	54d4 <__aeabi_ddiv+0x5dc>
    545a:	2320      	movs	r3, #32
    545c:	1a9b      	subs	r3, r3, r2
    545e:	000c      	movs	r4, r1
    5460:	4658      	mov	r0, fp
    5462:	4099      	lsls	r1, r3
    5464:	4098      	lsls	r0, r3
    5466:	1e4b      	subs	r3, r1, #1
    5468:	4199      	sbcs	r1, r3
    546a:	465b      	mov	r3, fp
    546c:	40d4      	lsrs	r4, r2
    546e:	40d3      	lsrs	r3, r2
    5470:	4320      	orrs	r0, r4
    5472:	4308      	orrs	r0, r1
    5474:	001a      	movs	r2, r3
    5476:	0743      	lsls	r3, r0, #29
    5478:	d009      	beq.n	548e <__aeabi_ddiv+0x596>
    547a:	230f      	movs	r3, #15
    547c:	4003      	ands	r3, r0
    547e:	2b04      	cmp	r3, #4
    5480:	d005      	beq.n	548e <__aeabi_ddiv+0x596>
    5482:	0001      	movs	r1, r0
    5484:	1d08      	adds	r0, r1, #4
    5486:	4288      	cmp	r0, r1
    5488:	419b      	sbcs	r3, r3
    548a:	425b      	negs	r3, r3
    548c:	18d2      	adds	r2, r2, r3
    548e:	0213      	lsls	r3, r2, #8
    5490:	d53a      	bpl.n	5508 <__aeabi_ddiv+0x610>
    5492:	2301      	movs	r3, #1
    5494:	9a02      	ldr	r2, [sp, #8]
    5496:	2401      	movs	r4, #1
    5498:	401a      	ands	r2, r3
    549a:	2300      	movs	r3, #0
    549c:	4694      	mov	ip, r2
    549e:	4698      	mov	r8, r3
    54a0:	2200      	movs	r2, #0
    54a2:	e5f7      	b.n	5094 <__aeabi_ddiv+0x19c>
    54a4:	2102      	movs	r1, #2
    54a6:	4249      	negs	r1, r1
    54a8:	468c      	mov	ip, r1
    54aa:	9d03      	ldr	r5, [sp, #12]
    54ac:	44e3      	add	fp, ip
    54ae:	46ac      	mov	ip, r5
    54b0:	44e2      	add	sl, ip
    54b2:	45aa      	cmp	sl, r5
    54b4:	41ad      	sbcs	r5, r5
    54b6:	426d      	negs	r5, r5
    54b8:	4445      	add	r5, r8
    54ba:	18ed      	adds	r5, r5, r3
    54bc:	1a2d      	subs	r5, r5, r0
    54be:	e696      	b.n	51ee <__aeabi_ddiv+0x2f6>
    54c0:	1e8a      	subs	r2, r1, #2
    54c2:	9903      	ldr	r1, [sp, #12]
    54c4:	004d      	lsls	r5, r1, #1
    54c6:	428d      	cmp	r5, r1
    54c8:	4189      	sbcs	r1, r1
    54ca:	4249      	negs	r1, r1
    54cc:	4441      	add	r1, r8
    54ce:	1876      	adds	r6, r6, r1
    54d0:	9503      	str	r5, [sp, #12]
    54d2:	e78f      	b.n	53f4 <__aeabi_ddiv+0x4fc>
    54d4:	201f      	movs	r0, #31
    54d6:	4240      	negs	r0, r0
    54d8:	1ac3      	subs	r3, r0, r3
    54da:	4658      	mov	r0, fp
    54dc:	40d8      	lsrs	r0, r3
    54de:	0003      	movs	r3, r0
    54e0:	2a20      	cmp	r2, #32
    54e2:	d028      	beq.n	5536 <__aeabi_ddiv+0x63e>
    54e4:	2040      	movs	r0, #64	; 0x40
    54e6:	465d      	mov	r5, fp
    54e8:	1a82      	subs	r2, r0, r2
    54ea:	4095      	lsls	r5, r2
    54ec:	4329      	orrs	r1, r5
    54ee:	1e4a      	subs	r2, r1, #1
    54f0:	4191      	sbcs	r1, r2
    54f2:	4319      	orrs	r1, r3
    54f4:	2307      	movs	r3, #7
    54f6:	2200      	movs	r2, #0
    54f8:	400b      	ands	r3, r1
    54fa:	d009      	beq.n	5510 <__aeabi_ddiv+0x618>
    54fc:	230f      	movs	r3, #15
    54fe:	2200      	movs	r2, #0
    5500:	400b      	ands	r3, r1
    5502:	0008      	movs	r0, r1
    5504:	2b04      	cmp	r3, #4
    5506:	d1bd      	bne.n	5484 <__aeabi_ddiv+0x58c>
    5508:	0001      	movs	r1, r0
    550a:	0753      	lsls	r3, r2, #29
    550c:	0252      	lsls	r2, r2, #9
    550e:	0b12      	lsrs	r2, r2, #12
    5510:	08c9      	lsrs	r1, r1, #3
    5512:	4319      	orrs	r1, r3
    5514:	2301      	movs	r3, #1
    5516:	4688      	mov	r8, r1
    5518:	9902      	ldr	r1, [sp, #8]
    551a:	2400      	movs	r4, #0
    551c:	4019      	ands	r1, r3
    551e:	468c      	mov	ip, r1
    5520:	e5b8      	b.n	5094 <__aeabi_ddiv+0x19c>
    5522:	4552      	cmp	r2, sl
    5524:	d8be      	bhi.n	54a4 <__aeabi_ddiv+0x5ac>
    5526:	468b      	mov	fp, r1
    5528:	2500      	movs	r5, #0
    552a:	e660      	b.n	51ee <__aeabi_ddiv+0x2f6>
    552c:	9d03      	ldr	r5, [sp, #12]
    552e:	429d      	cmp	r5, r3
    5530:	d3c6      	bcc.n	54c0 <__aeabi_ddiv+0x5c8>
    5532:	0011      	movs	r1, r2
    5534:	e762      	b.n	53fc <__aeabi_ddiv+0x504>
    5536:	2500      	movs	r5, #0
    5538:	e7d8      	b.n	54ec <__aeabi_ddiv+0x5f4>
    553a:	2280      	movs	r2, #128	; 0x80
    553c:	465b      	mov	r3, fp
    553e:	0312      	lsls	r2, r2, #12
    5540:	431a      	orrs	r2, r3
    5542:	9b01      	ldr	r3, [sp, #4]
    5544:	0312      	lsls	r2, r2, #12
    5546:	0b12      	lsrs	r2, r2, #12
    5548:	469c      	mov	ip, r3
    554a:	4688      	mov	r8, r1
    554c:	4c03      	ldr	r4, [pc, #12]	; (555c <__aeabi_ddiv+0x664>)
    554e:	e5a1      	b.n	5094 <__aeabi_ddiv+0x19c>
    5550:	000003ff 	.word	0x000003ff
    5554:	feffffff 	.word	0xfeffffff
    5558:	000007fe 	.word	0x000007fe
    555c:	000007ff 	.word	0x000007ff

00005560 <__aeabi_dsub>:
    5560:	b5f0      	push	{r4, r5, r6, r7, lr}
    5562:	4646      	mov	r6, r8
    5564:	46d6      	mov	lr, sl
    5566:	464f      	mov	r7, r9
    5568:	030c      	lsls	r4, r1, #12
    556a:	b5c0      	push	{r6, r7, lr}
    556c:	0fcd      	lsrs	r5, r1, #31
    556e:	004e      	lsls	r6, r1, #1
    5570:	0a61      	lsrs	r1, r4, #9
    5572:	0f44      	lsrs	r4, r0, #29
    5574:	430c      	orrs	r4, r1
    5576:	00c1      	lsls	r1, r0, #3
    5578:	0058      	lsls	r0, r3, #1
    557a:	0d40      	lsrs	r0, r0, #21
    557c:	4684      	mov	ip, r0
    557e:	468a      	mov	sl, r1
    5580:	000f      	movs	r7, r1
    5582:	0319      	lsls	r1, r3, #12
    5584:	0f50      	lsrs	r0, r2, #29
    5586:	0a49      	lsrs	r1, r1, #9
    5588:	4301      	orrs	r1, r0
    558a:	48c6      	ldr	r0, [pc, #792]	; (58a4 <__aeabi_dsub+0x344>)
    558c:	0d76      	lsrs	r6, r6, #21
    558e:	46a8      	mov	r8, r5
    5590:	0fdb      	lsrs	r3, r3, #31
    5592:	00d2      	lsls	r2, r2, #3
    5594:	4584      	cmp	ip, r0
    5596:	d100      	bne.n	559a <__aeabi_dsub+0x3a>
    5598:	e0d8      	b.n	574c <__aeabi_dsub+0x1ec>
    559a:	2001      	movs	r0, #1
    559c:	4043      	eors	r3, r0
    559e:	42ab      	cmp	r3, r5
    55a0:	d100      	bne.n	55a4 <__aeabi_dsub+0x44>
    55a2:	e0a6      	b.n	56f2 <__aeabi_dsub+0x192>
    55a4:	4660      	mov	r0, ip
    55a6:	1a35      	subs	r5, r6, r0
    55a8:	2d00      	cmp	r5, #0
    55aa:	dc00      	bgt.n	55ae <__aeabi_dsub+0x4e>
    55ac:	e105      	b.n	57ba <__aeabi_dsub+0x25a>
    55ae:	2800      	cmp	r0, #0
    55b0:	d110      	bne.n	55d4 <__aeabi_dsub+0x74>
    55b2:	000b      	movs	r3, r1
    55b4:	4313      	orrs	r3, r2
    55b6:	d100      	bne.n	55ba <__aeabi_dsub+0x5a>
    55b8:	e0d7      	b.n	576a <__aeabi_dsub+0x20a>
    55ba:	1e6b      	subs	r3, r5, #1
    55bc:	2b00      	cmp	r3, #0
    55be:	d000      	beq.n	55c2 <__aeabi_dsub+0x62>
    55c0:	e14b      	b.n	585a <__aeabi_dsub+0x2fa>
    55c2:	4653      	mov	r3, sl
    55c4:	1a9f      	subs	r7, r3, r2
    55c6:	45ba      	cmp	sl, r7
    55c8:	4180      	sbcs	r0, r0
    55ca:	1a64      	subs	r4, r4, r1
    55cc:	4240      	negs	r0, r0
    55ce:	1a24      	subs	r4, r4, r0
    55d0:	2601      	movs	r6, #1
    55d2:	e01e      	b.n	5612 <__aeabi_dsub+0xb2>
    55d4:	4bb3      	ldr	r3, [pc, #716]	; (58a4 <__aeabi_dsub+0x344>)
    55d6:	429e      	cmp	r6, r3
    55d8:	d048      	beq.n	566c <__aeabi_dsub+0x10c>
    55da:	2380      	movs	r3, #128	; 0x80
    55dc:	041b      	lsls	r3, r3, #16
    55de:	4319      	orrs	r1, r3
    55e0:	2d38      	cmp	r5, #56	; 0x38
    55e2:	dd00      	ble.n	55e6 <__aeabi_dsub+0x86>
    55e4:	e119      	b.n	581a <__aeabi_dsub+0x2ba>
    55e6:	2d1f      	cmp	r5, #31
    55e8:	dd00      	ble.n	55ec <__aeabi_dsub+0x8c>
    55ea:	e14c      	b.n	5886 <__aeabi_dsub+0x326>
    55ec:	2320      	movs	r3, #32
    55ee:	000f      	movs	r7, r1
    55f0:	1b5b      	subs	r3, r3, r5
    55f2:	0010      	movs	r0, r2
    55f4:	409a      	lsls	r2, r3
    55f6:	409f      	lsls	r7, r3
    55f8:	40e8      	lsrs	r0, r5
    55fa:	1e53      	subs	r3, r2, #1
    55fc:	419a      	sbcs	r2, r3
    55fe:	40e9      	lsrs	r1, r5
    5600:	4307      	orrs	r7, r0
    5602:	4317      	orrs	r7, r2
    5604:	4653      	mov	r3, sl
    5606:	1bdf      	subs	r7, r3, r7
    5608:	1a61      	subs	r1, r4, r1
    560a:	45ba      	cmp	sl, r7
    560c:	41a4      	sbcs	r4, r4
    560e:	4264      	negs	r4, r4
    5610:	1b0c      	subs	r4, r1, r4
    5612:	0223      	lsls	r3, r4, #8
    5614:	d400      	bmi.n	5618 <__aeabi_dsub+0xb8>
    5616:	e0c5      	b.n	57a4 <__aeabi_dsub+0x244>
    5618:	0264      	lsls	r4, r4, #9
    561a:	0a65      	lsrs	r5, r4, #9
    561c:	2d00      	cmp	r5, #0
    561e:	d100      	bne.n	5622 <__aeabi_dsub+0xc2>
    5620:	e0f6      	b.n	5810 <__aeabi_dsub+0x2b0>
    5622:	0028      	movs	r0, r5
    5624:	f000 fc38 	bl	5e98 <__clzsi2>
    5628:	0003      	movs	r3, r0
    562a:	3b08      	subs	r3, #8
    562c:	2b1f      	cmp	r3, #31
    562e:	dd00      	ble.n	5632 <__aeabi_dsub+0xd2>
    5630:	e0e9      	b.n	5806 <__aeabi_dsub+0x2a6>
    5632:	2220      	movs	r2, #32
    5634:	003c      	movs	r4, r7
    5636:	1ad2      	subs	r2, r2, r3
    5638:	409d      	lsls	r5, r3
    563a:	40d4      	lsrs	r4, r2
    563c:	409f      	lsls	r7, r3
    563e:	4325      	orrs	r5, r4
    5640:	429e      	cmp	r6, r3
    5642:	dd00      	ble.n	5646 <__aeabi_dsub+0xe6>
    5644:	e0db      	b.n	57fe <__aeabi_dsub+0x29e>
    5646:	1b9e      	subs	r6, r3, r6
    5648:	1c73      	adds	r3, r6, #1
    564a:	2b1f      	cmp	r3, #31
    564c:	dd00      	ble.n	5650 <__aeabi_dsub+0xf0>
    564e:	e10a      	b.n	5866 <__aeabi_dsub+0x306>
    5650:	2220      	movs	r2, #32
    5652:	0038      	movs	r0, r7
    5654:	1ad2      	subs	r2, r2, r3
    5656:	0029      	movs	r1, r5
    5658:	4097      	lsls	r7, r2
    565a:	002c      	movs	r4, r5
    565c:	4091      	lsls	r1, r2
    565e:	40d8      	lsrs	r0, r3
    5660:	1e7a      	subs	r2, r7, #1
    5662:	4197      	sbcs	r7, r2
    5664:	40dc      	lsrs	r4, r3
    5666:	2600      	movs	r6, #0
    5668:	4301      	orrs	r1, r0
    566a:	430f      	orrs	r7, r1
    566c:	077b      	lsls	r3, r7, #29
    566e:	d009      	beq.n	5684 <__aeabi_dsub+0x124>
    5670:	230f      	movs	r3, #15
    5672:	403b      	ands	r3, r7
    5674:	2b04      	cmp	r3, #4
    5676:	d005      	beq.n	5684 <__aeabi_dsub+0x124>
    5678:	1d3b      	adds	r3, r7, #4
    567a:	42bb      	cmp	r3, r7
    567c:	41bf      	sbcs	r7, r7
    567e:	427f      	negs	r7, r7
    5680:	19e4      	adds	r4, r4, r7
    5682:	001f      	movs	r7, r3
    5684:	0223      	lsls	r3, r4, #8
    5686:	d525      	bpl.n	56d4 <__aeabi_dsub+0x174>
    5688:	4b86      	ldr	r3, [pc, #536]	; (58a4 <__aeabi_dsub+0x344>)
    568a:	3601      	adds	r6, #1
    568c:	429e      	cmp	r6, r3
    568e:	d100      	bne.n	5692 <__aeabi_dsub+0x132>
    5690:	e0af      	b.n	57f2 <__aeabi_dsub+0x292>
    5692:	4b85      	ldr	r3, [pc, #532]	; (58a8 <__aeabi_dsub+0x348>)
    5694:	2501      	movs	r5, #1
    5696:	401c      	ands	r4, r3
    5698:	4643      	mov	r3, r8
    569a:	0762      	lsls	r2, r4, #29
    569c:	08ff      	lsrs	r7, r7, #3
    569e:	0264      	lsls	r4, r4, #9
    56a0:	0576      	lsls	r6, r6, #21
    56a2:	4317      	orrs	r7, r2
    56a4:	0b24      	lsrs	r4, r4, #12
    56a6:	0d76      	lsrs	r6, r6, #21
    56a8:	401d      	ands	r5, r3
    56aa:	2100      	movs	r1, #0
    56ac:	0324      	lsls	r4, r4, #12
    56ae:	0b23      	lsrs	r3, r4, #12
    56b0:	0d0c      	lsrs	r4, r1, #20
    56b2:	4a7e      	ldr	r2, [pc, #504]	; (58ac <__aeabi_dsub+0x34c>)
    56b4:	0524      	lsls	r4, r4, #20
    56b6:	431c      	orrs	r4, r3
    56b8:	4014      	ands	r4, r2
    56ba:	0533      	lsls	r3, r6, #20
    56bc:	4323      	orrs	r3, r4
    56be:	005b      	lsls	r3, r3, #1
    56c0:	07ed      	lsls	r5, r5, #31
    56c2:	085b      	lsrs	r3, r3, #1
    56c4:	432b      	orrs	r3, r5
    56c6:	0038      	movs	r0, r7
    56c8:	0019      	movs	r1, r3
    56ca:	bc1c      	pop	{r2, r3, r4}
    56cc:	4690      	mov	r8, r2
    56ce:	4699      	mov	r9, r3
    56d0:	46a2      	mov	sl, r4
    56d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56d4:	2501      	movs	r5, #1
    56d6:	4643      	mov	r3, r8
    56d8:	0762      	lsls	r2, r4, #29
    56da:	08ff      	lsrs	r7, r7, #3
    56dc:	4317      	orrs	r7, r2
    56de:	08e4      	lsrs	r4, r4, #3
    56e0:	401d      	ands	r5, r3
    56e2:	4b70      	ldr	r3, [pc, #448]	; (58a4 <__aeabi_dsub+0x344>)
    56e4:	429e      	cmp	r6, r3
    56e6:	d036      	beq.n	5756 <__aeabi_dsub+0x1f6>
    56e8:	0324      	lsls	r4, r4, #12
    56ea:	0576      	lsls	r6, r6, #21
    56ec:	0b24      	lsrs	r4, r4, #12
    56ee:	0d76      	lsrs	r6, r6, #21
    56f0:	e7db      	b.n	56aa <__aeabi_dsub+0x14a>
    56f2:	4663      	mov	r3, ip
    56f4:	1af3      	subs	r3, r6, r3
    56f6:	2b00      	cmp	r3, #0
    56f8:	dc00      	bgt.n	56fc <__aeabi_dsub+0x19c>
    56fa:	e094      	b.n	5826 <__aeabi_dsub+0x2c6>
    56fc:	4660      	mov	r0, ip
    56fe:	2800      	cmp	r0, #0
    5700:	d035      	beq.n	576e <__aeabi_dsub+0x20e>
    5702:	4868      	ldr	r0, [pc, #416]	; (58a4 <__aeabi_dsub+0x344>)
    5704:	4286      	cmp	r6, r0
    5706:	d0b1      	beq.n	566c <__aeabi_dsub+0x10c>
    5708:	2780      	movs	r7, #128	; 0x80
    570a:	043f      	lsls	r7, r7, #16
    570c:	4339      	orrs	r1, r7
    570e:	2b38      	cmp	r3, #56	; 0x38
    5710:	dc00      	bgt.n	5714 <__aeabi_dsub+0x1b4>
    5712:	e0fd      	b.n	5910 <__aeabi_dsub+0x3b0>
    5714:	430a      	orrs	r2, r1
    5716:	0017      	movs	r7, r2
    5718:	2100      	movs	r1, #0
    571a:	1e7a      	subs	r2, r7, #1
    571c:	4197      	sbcs	r7, r2
    571e:	4457      	add	r7, sl
    5720:	4557      	cmp	r7, sl
    5722:	4180      	sbcs	r0, r0
    5724:	1909      	adds	r1, r1, r4
    5726:	4244      	negs	r4, r0
    5728:	190c      	adds	r4, r1, r4
    572a:	0223      	lsls	r3, r4, #8
    572c:	d53a      	bpl.n	57a4 <__aeabi_dsub+0x244>
    572e:	4b5d      	ldr	r3, [pc, #372]	; (58a4 <__aeabi_dsub+0x344>)
    5730:	3601      	adds	r6, #1
    5732:	429e      	cmp	r6, r3
    5734:	d100      	bne.n	5738 <__aeabi_dsub+0x1d8>
    5736:	e14b      	b.n	59d0 <__aeabi_dsub+0x470>
    5738:	2201      	movs	r2, #1
    573a:	4b5b      	ldr	r3, [pc, #364]	; (58a8 <__aeabi_dsub+0x348>)
    573c:	401c      	ands	r4, r3
    573e:	087b      	lsrs	r3, r7, #1
    5740:	4017      	ands	r7, r2
    5742:	431f      	orrs	r7, r3
    5744:	07e2      	lsls	r2, r4, #31
    5746:	4317      	orrs	r7, r2
    5748:	0864      	lsrs	r4, r4, #1
    574a:	e78f      	b.n	566c <__aeabi_dsub+0x10c>
    574c:	0008      	movs	r0, r1
    574e:	4310      	orrs	r0, r2
    5750:	d000      	beq.n	5754 <__aeabi_dsub+0x1f4>
    5752:	e724      	b.n	559e <__aeabi_dsub+0x3e>
    5754:	e721      	b.n	559a <__aeabi_dsub+0x3a>
    5756:	0023      	movs	r3, r4
    5758:	433b      	orrs	r3, r7
    575a:	d100      	bne.n	575e <__aeabi_dsub+0x1fe>
    575c:	e1b9      	b.n	5ad2 <__aeabi_dsub+0x572>
    575e:	2280      	movs	r2, #128	; 0x80
    5760:	0312      	lsls	r2, r2, #12
    5762:	4314      	orrs	r4, r2
    5764:	0324      	lsls	r4, r4, #12
    5766:	0b24      	lsrs	r4, r4, #12
    5768:	e79f      	b.n	56aa <__aeabi_dsub+0x14a>
    576a:	002e      	movs	r6, r5
    576c:	e77e      	b.n	566c <__aeabi_dsub+0x10c>
    576e:	0008      	movs	r0, r1
    5770:	4310      	orrs	r0, r2
    5772:	d100      	bne.n	5776 <__aeabi_dsub+0x216>
    5774:	e0ca      	b.n	590c <__aeabi_dsub+0x3ac>
    5776:	1e58      	subs	r0, r3, #1
    5778:	4684      	mov	ip, r0
    577a:	2800      	cmp	r0, #0
    577c:	d000      	beq.n	5780 <__aeabi_dsub+0x220>
    577e:	e0e7      	b.n	5950 <__aeabi_dsub+0x3f0>
    5780:	4452      	add	r2, sl
    5782:	4552      	cmp	r2, sl
    5784:	4180      	sbcs	r0, r0
    5786:	1864      	adds	r4, r4, r1
    5788:	4240      	negs	r0, r0
    578a:	1824      	adds	r4, r4, r0
    578c:	0017      	movs	r7, r2
    578e:	2601      	movs	r6, #1
    5790:	0223      	lsls	r3, r4, #8
    5792:	d507      	bpl.n	57a4 <__aeabi_dsub+0x244>
    5794:	2602      	movs	r6, #2
    5796:	e7cf      	b.n	5738 <__aeabi_dsub+0x1d8>
    5798:	4664      	mov	r4, ip
    579a:	432c      	orrs	r4, r5
    579c:	d100      	bne.n	57a0 <__aeabi_dsub+0x240>
    579e:	e1b3      	b.n	5b08 <__aeabi_dsub+0x5a8>
    57a0:	002c      	movs	r4, r5
    57a2:	4667      	mov	r7, ip
    57a4:	077b      	lsls	r3, r7, #29
    57a6:	d000      	beq.n	57aa <__aeabi_dsub+0x24a>
    57a8:	e762      	b.n	5670 <__aeabi_dsub+0x110>
    57aa:	0763      	lsls	r3, r4, #29
    57ac:	08ff      	lsrs	r7, r7, #3
    57ae:	431f      	orrs	r7, r3
    57b0:	2501      	movs	r5, #1
    57b2:	4643      	mov	r3, r8
    57b4:	08e4      	lsrs	r4, r4, #3
    57b6:	401d      	ands	r5, r3
    57b8:	e793      	b.n	56e2 <__aeabi_dsub+0x182>
    57ba:	2d00      	cmp	r5, #0
    57bc:	d178      	bne.n	58b0 <__aeabi_dsub+0x350>
    57be:	1c75      	adds	r5, r6, #1
    57c0:	056d      	lsls	r5, r5, #21
    57c2:	0d6d      	lsrs	r5, r5, #21
    57c4:	2d01      	cmp	r5, #1
    57c6:	dc00      	bgt.n	57ca <__aeabi_dsub+0x26a>
    57c8:	e0f2      	b.n	59b0 <__aeabi_dsub+0x450>
    57ca:	4650      	mov	r0, sl
    57cc:	1a80      	subs	r0, r0, r2
    57ce:	4582      	cmp	sl, r0
    57d0:	41bf      	sbcs	r7, r7
    57d2:	1a65      	subs	r5, r4, r1
    57d4:	427f      	negs	r7, r7
    57d6:	1bed      	subs	r5, r5, r7
    57d8:	4684      	mov	ip, r0
    57da:	0228      	lsls	r0, r5, #8
    57dc:	d400      	bmi.n	57e0 <__aeabi_dsub+0x280>
    57de:	e08c      	b.n	58fa <__aeabi_dsub+0x39a>
    57e0:	4650      	mov	r0, sl
    57e2:	1a17      	subs	r7, r2, r0
    57e4:	42ba      	cmp	r2, r7
    57e6:	4192      	sbcs	r2, r2
    57e8:	1b0c      	subs	r4, r1, r4
    57ea:	4255      	negs	r5, r2
    57ec:	1b65      	subs	r5, r4, r5
    57ee:	4698      	mov	r8, r3
    57f0:	e714      	b.n	561c <__aeabi_dsub+0xbc>
    57f2:	2501      	movs	r5, #1
    57f4:	4643      	mov	r3, r8
    57f6:	2400      	movs	r4, #0
    57f8:	401d      	ands	r5, r3
    57fa:	2700      	movs	r7, #0
    57fc:	e755      	b.n	56aa <__aeabi_dsub+0x14a>
    57fe:	4c2a      	ldr	r4, [pc, #168]	; (58a8 <__aeabi_dsub+0x348>)
    5800:	1af6      	subs	r6, r6, r3
    5802:	402c      	ands	r4, r5
    5804:	e732      	b.n	566c <__aeabi_dsub+0x10c>
    5806:	003d      	movs	r5, r7
    5808:	3828      	subs	r0, #40	; 0x28
    580a:	4085      	lsls	r5, r0
    580c:	2700      	movs	r7, #0
    580e:	e717      	b.n	5640 <__aeabi_dsub+0xe0>
    5810:	0038      	movs	r0, r7
    5812:	f000 fb41 	bl	5e98 <__clzsi2>
    5816:	3020      	adds	r0, #32
    5818:	e706      	b.n	5628 <__aeabi_dsub+0xc8>
    581a:	430a      	orrs	r2, r1
    581c:	0017      	movs	r7, r2
    581e:	2100      	movs	r1, #0
    5820:	1e7a      	subs	r2, r7, #1
    5822:	4197      	sbcs	r7, r2
    5824:	e6ee      	b.n	5604 <__aeabi_dsub+0xa4>
    5826:	2b00      	cmp	r3, #0
    5828:	d000      	beq.n	582c <__aeabi_dsub+0x2cc>
    582a:	e0e5      	b.n	59f8 <__aeabi_dsub+0x498>
    582c:	1c73      	adds	r3, r6, #1
    582e:	469c      	mov	ip, r3
    5830:	055b      	lsls	r3, r3, #21
    5832:	0d5b      	lsrs	r3, r3, #21
    5834:	2b01      	cmp	r3, #1
    5836:	dc00      	bgt.n	583a <__aeabi_dsub+0x2da>
    5838:	e09f      	b.n	597a <__aeabi_dsub+0x41a>
    583a:	4b1a      	ldr	r3, [pc, #104]	; (58a4 <__aeabi_dsub+0x344>)
    583c:	459c      	cmp	ip, r3
    583e:	d100      	bne.n	5842 <__aeabi_dsub+0x2e2>
    5840:	e0c5      	b.n	59ce <__aeabi_dsub+0x46e>
    5842:	4452      	add	r2, sl
    5844:	4552      	cmp	r2, sl
    5846:	4180      	sbcs	r0, r0
    5848:	1864      	adds	r4, r4, r1
    584a:	4240      	negs	r0, r0
    584c:	1824      	adds	r4, r4, r0
    584e:	07e7      	lsls	r7, r4, #31
    5850:	0852      	lsrs	r2, r2, #1
    5852:	4317      	orrs	r7, r2
    5854:	0864      	lsrs	r4, r4, #1
    5856:	4666      	mov	r6, ip
    5858:	e708      	b.n	566c <__aeabi_dsub+0x10c>
    585a:	4812      	ldr	r0, [pc, #72]	; (58a4 <__aeabi_dsub+0x344>)
    585c:	4285      	cmp	r5, r0
    585e:	d100      	bne.n	5862 <__aeabi_dsub+0x302>
    5860:	e085      	b.n	596e <__aeabi_dsub+0x40e>
    5862:	001d      	movs	r5, r3
    5864:	e6bc      	b.n	55e0 <__aeabi_dsub+0x80>
    5866:	0029      	movs	r1, r5
    5868:	3e1f      	subs	r6, #31
    586a:	40f1      	lsrs	r1, r6
    586c:	2b20      	cmp	r3, #32
    586e:	d100      	bne.n	5872 <__aeabi_dsub+0x312>
    5870:	e07f      	b.n	5972 <__aeabi_dsub+0x412>
    5872:	2240      	movs	r2, #64	; 0x40
    5874:	1ad3      	subs	r3, r2, r3
    5876:	409d      	lsls	r5, r3
    5878:	432f      	orrs	r7, r5
    587a:	1e7d      	subs	r5, r7, #1
    587c:	41af      	sbcs	r7, r5
    587e:	2400      	movs	r4, #0
    5880:	430f      	orrs	r7, r1
    5882:	2600      	movs	r6, #0
    5884:	e78e      	b.n	57a4 <__aeabi_dsub+0x244>
    5886:	002b      	movs	r3, r5
    5888:	000f      	movs	r7, r1
    588a:	3b20      	subs	r3, #32
    588c:	40df      	lsrs	r7, r3
    588e:	2d20      	cmp	r5, #32
    5890:	d071      	beq.n	5976 <__aeabi_dsub+0x416>
    5892:	2340      	movs	r3, #64	; 0x40
    5894:	1b5d      	subs	r5, r3, r5
    5896:	40a9      	lsls	r1, r5
    5898:	430a      	orrs	r2, r1
    589a:	1e51      	subs	r1, r2, #1
    589c:	418a      	sbcs	r2, r1
    589e:	2100      	movs	r1, #0
    58a0:	4317      	orrs	r7, r2
    58a2:	e6af      	b.n	5604 <__aeabi_dsub+0xa4>
    58a4:	000007ff 	.word	0x000007ff
    58a8:	ff7fffff 	.word	0xff7fffff
    58ac:	800fffff 	.word	0x800fffff
    58b0:	2e00      	cmp	r6, #0
    58b2:	d03e      	beq.n	5932 <__aeabi_dsub+0x3d2>
    58b4:	4eb3      	ldr	r6, [pc, #716]	; (5b84 <__aeabi_dsub+0x624>)
    58b6:	45b4      	cmp	ip, r6
    58b8:	d045      	beq.n	5946 <__aeabi_dsub+0x3e6>
    58ba:	2680      	movs	r6, #128	; 0x80
    58bc:	0436      	lsls	r6, r6, #16
    58be:	426d      	negs	r5, r5
    58c0:	4334      	orrs	r4, r6
    58c2:	2d38      	cmp	r5, #56	; 0x38
    58c4:	dd00      	ble.n	58c8 <__aeabi_dsub+0x368>
    58c6:	e0a8      	b.n	5a1a <__aeabi_dsub+0x4ba>
    58c8:	2d1f      	cmp	r5, #31
    58ca:	dd00      	ble.n	58ce <__aeabi_dsub+0x36e>
    58cc:	e11f      	b.n	5b0e <__aeabi_dsub+0x5ae>
    58ce:	2620      	movs	r6, #32
    58d0:	0027      	movs	r7, r4
    58d2:	4650      	mov	r0, sl
    58d4:	1b76      	subs	r6, r6, r5
    58d6:	40b7      	lsls	r7, r6
    58d8:	40e8      	lsrs	r0, r5
    58da:	4307      	orrs	r7, r0
    58dc:	4650      	mov	r0, sl
    58de:	40b0      	lsls	r0, r6
    58e0:	1e46      	subs	r6, r0, #1
    58e2:	41b0      	sbcs	r0, r6
    58e4:	40ec      	lsrs	r4, r5
    58e6:	4338      	orrs	r0, r7
    58e8:	1a17      	subs	r7, r2, r0
    58ea:	42ba      	cmp	r2, r7
    58ec:	4192      	sbcs	r2, r2
    58ee:	1b0c      	subs	r4, r1, r4
    58f0:	4252      	negs	r2, r2
    58f2:	1aa4      	subs	r4, r4, r2
    58f4:	4666      	mov	r6, ip
    58f6:	4698      	mov	r8, r3
    58f8:	e68b      	b.n	5612 <__aeabi_dsub+0xb2>
    58fa:	4664      	mov	r4, ip
    58fc:	4667      	mov	r7, ip
    58fe:	432c      	orrs	r4, r5
    5900:	d000      	beq.n	5904 <__aeabi_dsub+0x3a4>
    5902:	e68b      	b.n	561c <__aeabi_dsub+0xbc>
    5904:	2500      	movs	r5, #0
    5906:	2600      	movs	r6, #0
    5908:	2700      	movs	r7, #0
    590a:	e6ea      	b.n	56e2 <__aeabi_dsub+0x182>
    590c:	001e      	movs	r6, r3
    590e:	e6ad      	b.n	566c <__aeabi_dsub+0x10c>
    5910:	2b1f      	cmp	r3, #31
    5912:	dc60      	bgt.n	59d6 <__aeabi_dsub+0x476>
    5914:	2720      	movs	r7, #32
    5916:	1af8      	subs	r0, r7, r3
    5918:	000f      	movs	r7, r1
    591a:	4684      	mov	ip, r0
    591c:	4087      	lsls	r7, r0
    591e:	0010      	movs	r0, r2
    5920:	40d8      	lsrs	r0, r3
    5922:	4307      	orrs	r7, r0
    5924:	4660      	mov	r0, ip
    5926:	4082      	lsls	r2, r0
    5928:	1e50      	subs	r0, r2, #1
    592a:	4182      	sbcs	r2, r0
    592c:	40d9      	lsrs	r1, r3
    592e:	4317      	orrs	r7, r2
    5930:	e6f5      	b.n	571e <__aeabi_dsub+0x1be>
    5932:	0026      	movs	r6, r4
    5934:	4650      	mov	r0, sl
    5936:	4306      	orrs	r6, r0
    5938:	d005      	beq.n	5946 <__aeabi_dsub+0x3e6>
    593a:	43ed      	mvns	r5, r5
    593c:	2d00      	cmp	r5, #0
    593e:	d0d3      	beq.n	58e8 <__aeabi_dsub+0x388>
    5940:	4e90      	ldr	r6, [pc, #576]	; (5b84 <__aeabi_dsub+0x624>)
    5942:	45b4      	cmp	ip, r6
    5944:	d1bd      	bne.n	58c2 <__aeabi_dsub+0x362>
    5946:	000c      	movs	r4, r1
    5948:	0017      	movs	r7, r2
    594a:	4666      	mov	r6, ip
    594c:	4698      	mov	r8, r3
    594e:	e68d      	b.n	566c <__aeabi_dsub+0x10c>
    5950:	488c      	ldr	r0, [pc, #560]	; (5b84 <__aeabi_dsub+0x624>)
    5952:	4283      	cmp	r3, r0
    5954:	d00b      	beq.n	596e <__aeabi_dsub+0x40e>
    5956:	4663      	mov	r3, ip
    5958:	e6d9      	b.n	570e <__aeabi_dsub+0x1ae>
    595a:	2d00      	cmp	r5, #0
    595c:	d000      	beq.n	5960 <__aeabi_dsub+0x400>
    595e:	e096      	b.n	5a8e <__aeabi_dsub+0x52e>
    5960:	0008      	movs	r0, r1
    5962:	4310      	orrs	r0, r2
    5964:	d100      	bne.n	5968 <__aeabi_dsub+0x408>
    5966:	e0e2      	b.n	5b2e <__aeabi_dsub+0x5ce>
    5968:	000c      	movs	r4, r1
    596a:	0017      	movs	r7, r2
    596c:	4698      	mov	r8, r3
    596e:	4e85      	ldr	r6, [pc, #532]	; (5b84 <__aeabi_dsub+0x624>)
    5970:	e67c      	b.n	566c <__aeabi_dsub+0x10c>
    5972:	2500      	movs	r5, #0
    5974:	e780      	b.n	5878 <__aeabi_dsub+0x318>
    5976:	2100      	movs	r1, #0
    5978:	e78e      	b.n	5898 <__aeabi_dsub+0x338>
    597a:	0023      	movs	r3, r4
    597c:	4650      	mov	r0, sl
    597e:	4303      	orrs	r3, r0
    5980:	2e00      	cmp	r6, #0
    5982:	d000      	beq.n	5986 <__aeabi_dsub+0x426>
    5984:	e0a8      	b.n	5ad8 <__aeabi_dsub+0x578>
    5986:	2b00      	cmp	r3, #0
    5988:	d100      	bne.n	598c <__aeabi_dsub+0x42c>
    598a:	e0de      	b.n	5b4a <__aeabi_dsub+0x5ea>
    598c:	000b      	movs	r3, r1
    598e:	4313      	orrs	r3, r2
    5990:	d100      	bne.n	5994 <__aeabi_dsub+0x434>
    5992:	e66b      	b.n	566c <__aeabi_dsub+0x10c>
    5994:	4452      	add	r2, sl
    5996:	4552      	cmp	r2, sl
    5998:	4180      	sbcs	r0, r0
    599a:	1864      	adds	r4, r4, r1
    599c:	4240      	negs	r0, r0
    599e:	1824      	adds	r4, r4, r0
    59a0:	0017      	movs	r7, r2
    59a2:	0223      	lsls	r3, r4, #8
    59a4:	d400      	bmi.n	59a8 <__aeabi_dsub+0x448>
    59a6:	e6fd      	b.n	57a4 <__aeabi_dsub+0x244>
    59a8:	4b77      	ldr	r3, [pc, #476]	; (5b88 <__aeabi_dsub+0x628>)
    59aa:	4666      	mov	r6, ip
    59ac:	401c      	ands	r4, r3
    59ae:	e65d      	b.n	566c <__aeabi_dsub+0x10c>
    59b0:	0025      	movs	r5, r4
    59b2:	4650      	mov	r0, sl
    59b4:	4305      	orrs	r5, r0
    59b6:	2e00      	cmp	r6, #0
    59b8:	d1cf      	bne.n	595a <__aeabi_dsub+0x3fa>
    59ba:	2d00      	cmp	r5, #0
    59bc:	d14f      	bne.n	5a5e <__aeabi_dsub+0x4fe>
    59be:	000c      	movs	r4, r1
    59c0:	4314      	orrs	r4, r2
    59c2:	d100      	bne.n	59c6 <__aeabi_dsub+0x466>
    59c4:	e0a0      	b.n	5b08 <__aeabi_dsub+0x5a8>
    59c6:	000c      	movs	r4, r1
    59c8:	0017      	movs	r7, r2
    59ca:	4698      	mov	r8, r3
    59cc:	e64e      	b.n	566c <__aeabi_dsub+0x10c>
    59ce:	4666      	mov	r6, ip
    59d0:	2400      	movs	r4, #0
    59d2:	2700      	movs	r7, #0
    59d4:	e685      	b.n	56e2 <__aeabi_dsub+0x182>
    59d6:	001f      	movs	r7, r3
    59d8:	0008      	movs	r0, r1
    59da:	3f20      	subs	r7, #32
    59dc:	40f8      	lsrs	r0, r7
    59de:	0007      	movs	r7, r0
    59e0:	2b20      	cmp	r3, #32
    59e2:	d100      	bne.n	59e6 <__aeabi_dsub+0x486>
    59e4:	e08e      	b.n	5b04 <__aeabi_dsub+0x5a4>
    59e6:	2040      	movs	r0, #64	; 0x40
    59e8:	1ac3      	subs	r3, r0, r3
    59ea:	4099      	lsls	r1, r3
    59ec:	430a      	orrs	r2, r1
    59ee:	1e51      	subs	r1, r2, #1
    59f0:	418a      	sbcs	r2, r1
    59f2:	2100      	movs	r1, #0
    59f4:	4317      	orrs	r7, r2
    59f6:	e692      	b.n	571e <__aeabi_dsub+0x1be>
    59f8:	2e00      	cmp	r6, #0
    59fa:	d114      	bne.n	5a26 <__aeabi_dsub+0x4c6>
    59fc:	0026      	movs	r6, r4
    59fe:	4650      	mov	r0, sl
    5a00:	4306      	orrs	r6, r0
    5a02:	d062      	beq.n	5aca <__aeabi_dsub+0x56a>
    5a04:	43db      	mvns	r3, r3
    5a06:	2b00      	cmp	r3, #0
    5a08:	d15c      	bne.n	5ac4 <__aeabi_dsub+0x564>
    5a0a:	1887      	adds	r7, r0, r2
    5a0c:	4297      	cmp	r7, r2
    5a0e:	4192      	sbcs	r2, r2
    5a10:	1864      	adds	r4, r4, r1
    5a12:	4252      	negs	r2, r2
    5a14:	18a4      	adds	r4, r4, r2
    5a16:	4666      	mov	r6, ip
    5a18:	e687      	b.n	572a <__aeabi_dsub+0x1ca>
    5a1a:	4650      	mov	r0, sl
    5a1c:	4320      	orrs	r0, r4
    5a1e:	1e44      	subs	r4, r0, #1
    5a20:	41a0      	sbcs	r0, r4
    5a22:	2400      	movs	r4, #0
    5a24:	e760      	b.n	58e8 <__aeabi_dsub+0x388>
    5a26:	4e57      	ldr	r6, [pc, #348]	; (5b84 <__aeabi_dsub+0x624>)
    5a28:	45b4      	cmp	ip, r6
    5a2a:	d04e      	beq.n	5aca <__aeabi_dsub+0x56a>
    5a2c:	2680      	movs	r6, #128	; 0x80
    5a2e:	0436      	lsls	r6, r6, #16
    5a30:	425b      	negs	r3, r3
    5a32:	4334      	orrs	r4, r6
    5a34:	2b38      	cmp	r3, #56	; 0x38
    5a36:	dd00      	ble.n	5a3a <__aeabi_dsub+0x4da>
    5a38:	e07f      	b.n	5b3a <__aeabi_dsub+0x5da>
    5a3a:	2b1f      	cmp	r3, #31
    5a3c:	dd00      	ble.n	5a40 <__aeabi_dsub+0x4e0>
    5a3e:	e08b      	b.n	5b58 <__aeabi_dsub+0x5f8>
    5a40:	2620      	movs	r6, #32
    5a42:	0027      	movs	r7, r4
    5a44:	4650      	mov	r0, sl
    5a46:	1af6      	subs	r6, r6, r3
    5a48:	40b7      	lsls	r7, r6
    5a4a:	40d8      	lsrs	r0, r3
    5a4c:	4307      	orrs	r7, r0
    5a4e:	4650      	mov	r0, sl
    5a50:	40b0      	lsls	r0, r6
    5a52:	1e46      	subs	r6, r0, #1
    5a54:	41b0      	sbcs	r0, r6
    5a56:	4307      	orrs	r7, r0
    5a58:	40dc      	lsrs	r4, r3
    5a5a:	18bf      	adds	r7, r7, r2
    5a5c:	e7d6      	b.n	5a0c <__aeabi_dsub+0x4ac>
    5a5e:	000d      	movs	r5, r1
    5a60:	4315      	orrs	r5, r2
    5a62:	d100      	bne.n	5a66 <__aeabi_dsub+0x506>
    5a64:	e602      	b.n	566c <__aeabi_dsub+0x10c>
    5a66:	4650      	mov	r0, sl
    5a68:	1a80      	subs	r0, r0, r2
    5a6a:	4582      	cmp	sl, r0
    5a6c:	41bf      	sbcs	r7, r7
    5a6e:	1a65      	subs	r5, r4, r1
    5a70:	427f      	negs	r7, r7
    5a72:	1bed      	subs	r5, r5, r7
    5a74:	4684      	mov	ip, r0
    5a76:	0228      	lsls	r0, r5, #8
    5a78:	d400      	bmi.n	5a7c <__aeabi_dsub+0x51c>
    5a7a:	e68d      	b.n	5798 <__aeabi_dsub+0x238>
    5a7c:	4650      	mov	r0, sl
    5a7e:	1a17      	subs	r7, r2, r0
    5a80:	42ba      	cmp	r2, r7
    5a82:	4192      	sbcs	r2, r2
    5a84:	1b0c      	subs	r4, r1, r4
    5a86:	4252      	negs	r2, r2
    5a88:	1aa4      	subs	r4, r4, r2
    5a8a:	4698      	mov	r8, r3
    5a8c:	e5ee      	b.n	566c <__aeabi_dsub+0x10c>
    5a8e:	000d      	movs	r5, r1
    5a90:	4315      	orrs	r5, r2
    5a92:	d100      	bne.n	5a96 <__aeabi_dsub+0x536>
    5a94:	e76b      	b.n	596e <__aeabi_dsub+0x40e>
    5a96:	4650      	mov	r0, sl
    5a98:	0767      	lsls	r7, r4, #29
    5a9a:	08c0      	lsrs	r0, r0, #3
    5a9c:	4307      	orrs	r7, r0
    5a9e:	2080      	movs	r0, #128	; 0x80
    5aa0:	08e4      	lsrs	r4, r4, #3
    5aa2:	0300      	lsls	r0, r0, #12
    5aa4:	4204      	tst	r4, r0
    5aa6:	d007      	beq.n	5ab8 <__aeabi_dsub+0x558>
    5aa8:	08cd      	lsrs	r5, r1, #3
    5aaa:	4205      	tst	r5, r0
    5aac:	d104      	bne.n	5ab8 <__aeabi_dsub+0x558>
    5aae:	002c      	movs	r4, r5
    5ab0:	4698      	mov	r8, r3
    5ab2:	08d7      	lsrs	r7, r2, #3
    5ab4:	0749      	lsls	r1, r1, #29
    5ab6:	430f      	orrs	r7, r1
    5ab8:	0f7b      	lsrs	r3, r7, #29
    5aba:	00e4      	lsls	r4, r4, #3
    5abc:	431c      	orrs	r4, r3
    5abe:	00ff      	lsls	r7, r7, #3
    5ac0:	4e30      	ldr	r6, [pc, #192]	; (5b84 <__aeabi_dsub+0x624>)
    5ac2:	e5d3      	b.n	566c <__aeabi_dsub+0x10c>
    5ac4:	4e2f      	ldr	r6, [pc, #188]	; (5b84 <__aeabi_dsub+0x624>)
    5ac6:	45b4      	cmp	ip, r6
    5ac8:	d1b4      	bne.n	5a34 <__aeabi_dsub+0x4d4>
    5aca:	000c      	movs	r4, r1
    5acc:	0017      	movs	r7, r2
    5ace:	4666      	mov	r6, ip
    5ad0:	e5cc      	b.n	566c <__aeabi_dsub+0x10c>
    5ad2:	2700      	movs	r7, #0
    5ad4:	2400      	movs	r4, #0
    5ad6:	e5e8      	b.n	56aa <__aeabi_dsub+0x14a>
    5ad8:	2b00      	cmp	r3, #0
    5ada:	d039      	beq.n	5b50 <__aeabi_dsub+0x5f0>
    5adc:	000b      	movs	r3, r1
    5ade:	4313      	orrs	r3, r2
    5ae0:	d100      	bne.n	5ae4 <__aeabi_dsub+0x584>
    5ae2:	e744      	b.n	596e <__aeabi_dsub+0x40e>
    5ae4:	08c0      	lsrs	r0, r0, #3
    5ae6:	0767      	lsls	r7, r4, #29
    5ae8:	4307      	orrs	r7, r0
    5aea:	2080      	movs	r0, #128	; 0x80
    5aec:	08e4      	lsrs	r4, r4, #3
    5aee:	0300      	lsls	r0, r0, #12
    5af0:	4204      	tst	r4, r0
    5af2:	d0e1      	beq.n	5ab8 <__aeabi_dsub+0x558>
    5af4:	08cb      	lsrs	r3, r1, #3
    5af6:	4203      	tst	r3, r0
    5af8:	d1de      	bne.n	5ab8 <__aeabi_dsub+0x558>
    5afa:	08d7      	lsrs	r7, r2, #3
    5afc:	0749      	lsls	r1, r1, #29
    5afe:	430f      	orrs	r7, r1
    5b00:	001c      	movs	r4, r3
    5b02:	e7d9      	b.n	5ab8 <__aeabi_dsub+0x558>
    5b04:	2100      	movs	r1, #0
    5b06:	e771      	b.n	59ec <__aeabi_dsub+0x48c>
    5b08:	2500      	movs	r5, #0
    5b0a:	2700      	movs	r7, #0
    5b0c:	e5e9      	b.n	56e2 <__aeabi_dsub+0x182>
    5b0e:	002e      	movs	r6, r5
    5b10:	0027      	movs	r7, r4
    5b12:	3e20      	subs	r6, #32
    5b14:	40f7      	lsrs	r7, r6
    5b16:	2d20      	cmp	r5, #32
    5b18:	d02f      	beq.n	5b7a <__aeabi_dsub+0x61a>
    5b1a:	2640      	movs	r6, #64	; 0x40
    5b1c:	1b75      	subs	r5, r6, r5
    5b1e:	40ac      	lsls	r4, r5
    5b20:	4650      	mov	r0, sl
    5b22:	4320      	orrs	r0, r4
    5b24:	1e44      	subs	r4, r0, #1
    5b26:	41a0      	sbcs	r0, r4
    5b28:	2400      	movs	r4, #0
    5b2a:	4338      	orrs	r0, r7
    5b2c:	e6dc      	b.n	58e8 <__aeabi_dsub+0x388>
    5b2e:	2480      	movs	r4, #128	; 0x80
    5b30:	2500      	movs	r5, #0
    5b32:	0324      	lsls	r4, r4, #12
    5b34:	4e13      	ldr	r6, [pc, #76]	; (5b84 <__aeabi_dsub+0x624>)
    5b36:	2700      	movs	r7, #0
    5b38:	e5d3      	b.n	56e2 <__aeabi_dsub+0x182>
    5b3a:	4650      	mov	r0, sl
    5b3c:	4320      	orrs	r0, r4
    5b3e:	0007      	movs	r7, r0
    5b40:	1e78      	subs	r0, r7, #1
    5b42:	4187      	sbcs	r7, r0
    5b44:	2400      	movs	r4, #0
    5b46:	18bf      	adds	r7, r7, r2
    5b48:	e760      	b.n	5a0c <__aeabi_dsub+0x4ac>
    5b4a:	000c      	movs	r4, r1
    5b4c:	0017      	movs	r7, r2
    5b4e:	e58d      	b.n	566c <__aeabi_dsub+0x10c>
    5b50:	000c      	movs	r4, r1
    5b52:	0017      	movs	r7, r2
    5b54:	4e0b      	ldr	r6, [pc, #44]	; (5b84 <__aeabi_dsub+0x624>)
    5b56:	e589      	b.n	566c <__aeabi_dsub+0x10c>
    5b58:	001e      	movs	r6, r3
    5b5a:	0027      	movs	r7, r4
    5b5c:	3e20      	subs	r6, #32
    5b5e:	40f7      	lsrs	r7, r6
    5b60:	2b20      	cmp	r3, #32
    5b62:	d00c      	beq.n	5b7e <__aeabi_dsub+0x61e>
    5b64:	2640      	movs	r6, #64	; 0x40
    5b66:	1af3      	subs	r3, r6, r3
    5b68:	409c      	lsls	r4, r3
    5b6a:	4650      	mov	r0, sl
    5b6c:	4320      	orrs	r0, r4
    5b6e:	1e44      	subs	r4, r0, #1
    5b70:	41a0      	sbcs	r0, r4
    5b72:	4307      	orrs	r7, r0
    5b74:	2400      	movs	r4, #0
    5b76:	18bf      	adds	r7, r7, r2
    5b78:	e748      	b.n	5a0c <__aeabi_dsub+0x4ac>
    5b7a:	2400      	movs	r4, #0
    5b7c:	e7d0      	b.n	5b20 <__aeabi_dsub+0x5c0>
    5b7e:	2400      	movs	r4, #0
    5b80:	e7f3      	b.n	5b6a <__aeabi_dsub+0x60a>
    5b82:	46c0      	nop			; (mov r8, r8)
    5b84:	000007ff 	.word	0x000007ff
    5b88:	ff7fffff 	.word	0xff7fffff

00005b8c <__aeabi_d2iz>:
    5b8c:	b530      	push	{r4, r5, lr}
    5b8e:	4d13      	ldr	r5, [pc, #76]	; (5bdc <__aeabi_d2iz+0x50>)
    5b90:	030a      	lsls	r2, r1, #12
    5b92:	004b      	lsls	r3, r1, #1
    5b94:	0b12      	lsrs	r2, r2, #12
    5b96:	0d5b      	lsrs	r3, r3, #21
    5b98:	0fc9      	lsrs	r1, r1, #31
    5b9a:	2400      	movs	r4, #0
    5b9c:	42ab      	cmp	r3, r5
    5b9e:	dd10      	ble.n	5bc2 <__aeabi_d2iz+0x36>
    5ba0:	4c0f      	ldr	r4, [pc, #60]	; (5be0 <__aeabi_d2iz+0x54>)
    5ba2:	42a3      	cmp	r3, r4
    5ba4:	dc0f      	bgt.n	5bc6 <__aeabi_d2iz+0x3a>
    5ba6:	2480      	movs	r4, #128	; 0x80
    5ba8:	4d0e      	ldr	r5, [pc, #56]	; (5be4 <__aeabi_d2iz+0x58>)
    5baa:	0364      	lsls	r4, r4, #13
    5bac:	4322      	orrs	r2, r4
    5bae:	1aed      	subs	r5, r5, r3
    5bb0:	2d1f      	cmp	r5, #31
    5bb2:	dd0b      	ble.n	5bcc <__aeabi_d2iz+0x40>
    5bb4:	480c      	ldr	r0, [pc, #48]	; (5be8 <__aeabi_d2iz+0x5c>)
    5bb6:	1ac3      	subs	r3, r0, r3
    5bb8:	40da      	lsrs	r2, r3
    5bba:	4254      	negs	r4, r2
    5bbc:	2900      	cmp	r1, #0
    5bbe:	d100      	bne.n	5bc2 <__aeabi_d2iz+0x36>
    5bc0:	0014      	movs	r4, r2
    5bc2:	0020      	movs	r0, r4
    5bc4:	bd30      	pop	{r4, r5, pc}
    5bc6:	4b09      	ldr	r3, [pc, #36]	; (5bec <__aeabi_d2iz+0x60>)
    5bc8:	18cc      	adds	r4, r1, r3
    5bca:	e7fa      	b.n	5bc2 <__aeabi_d2iz+0x36>
    5bcc:	4c08      	ldr	r4, [pc, #32]	; (5bf0 <__aeabi_d2iz+0x64>)
    5bce:	40e8      	lsrs	r0, r5
    5bd0:	46a4      	mov	ip, r4
    5bd2:	4463      	add	r3, ip
    5bd4:	409a      	lsls	r2, r3
    5bd6:	4302      	orrs	r2, r0
    5bd8:	e7ef      	b.n	5bba <__aeabi_d2iz+0x2e>
    5bda:	46c0      	nop			; (mov r8, r8)
    5bdc:	000003fe 	.word	0x000003fe
    5be0:	0000041d 	.word	0x0000041d
    5be4:	00000433 	.word	0x00000433
    5be8:	00000413 	.word	0x00000413
    5bec:	7fffffff 	.word	0x7fffffff
    5bf0:	fffffbed 	.word	0xfffffbed

00005bf4 <__aeabi_ui2d>:
    5bf4:	b510      	push	{r4, lr}
    5bf6:	1e04      	subs	r4, r0, #0
    5bf8:	d028      	beq.n	5c4c <__aeabi_ui2d+0x58>
    5bfa:	f000 f94d 	bl	5e98 <__clzsi2>
    5bfe:	4b15      	ldr	r3, [pc, #84]	; (5c54 <__aeabi_ui2d+0x60>)
    5c00:	4a15      	ldr	r2, [pc, #84]	; (5c58 <__aeabi_ui2d+0x64>)
    5c02:	1a1b      	subs	r3, r3, r0
    5c04:	1ad2      	subs	r2, r2, r3
    5c06:	2a1f      	cmp	r2, #31
    5c08:	dd15      	ble.n	5c36 <__aeabi_ui2d+0x42>
    5c0a:	4a14      	ldr	r2, [pc, #80]	; (5c5c <__aeabi_ui2d+0x68>)
    5c0c:	1ad2      	subs	r2, r2, r3
    5c0e:	4094      	lsls	r4, r2
    5c10:	2200      	movs	r2, #0
    5c12:	0324      	lsls	r4, r4, #12
    5c14:	055b      	lsls	r3, r3, #21
    5c16:	0b24      	lsrs	r4, r4, #12
    5c18:	0d5b      	lsrs	r3, r3, #21
    5c1a:	2100      	movs	r1, #0
    5c1c:	0010      	movs	r0, r2
    5c1e:	0324      	lsls	r4, r4, #12
    5c20:	0d0a      	lsrs	r2, r1, #20
    5c22:	0b24      	lsrs	r4, r4, #12
    5c24:	0512      	lsls	r2, r2, #20
    5c26:	4322      	orrs	r2, r4
    5c28:	4c0d      	ldr	r4, [pc, #52]	; (5c60 <__aeabi_ui2d+0x6c>)
    5c2a:	051b      	lsls	r3, r3, #20
    5c2c:	4022      	ands	r2, r4
    5c2e:	4313      	orrs	r3, r2
    5c30:	005b      	lsls	r3, r3, #1
    5c32:	0859      	lsrs	r1, r3, #1
    5c34:	bd10      	pop	{r4, pc}
    5c36:	0021      	movs	r1, r4
    5c38:	4091      	lsls	r1, r2
    5c3a:	000a      	movs	r2, r1
    5c3c:	210b      	movs	r1, #11
    5c3e:	1a08      	subs	r0, r1, r0
    5c40:	40c4      	lsrs	r4, r0
    5c42:	055b      	lsls	r3, r3, #21
    5c44:	0324      	lsls	r4, r4, #12
    5c46:	0b24      	lsrs	r4, r4, #12
    5c48:	0d5b      	lsrs	r3, r3, #21
    5c4a:	e7e6      	b.n	5c1a <__aeabi_ui2d+0x26>
    5c4c:	2300      	movs	r3, #0
    5c4e:	2400      	movs	r4, #0
    5c50:	2200      	movs	r2, #0
    5c52:	e7e2      	b.n	5c1a <__aeabi_ui2d+0x26>
    5c54:	0000041e 	.word	0x0000041e
    5c58:	00000433 	.word	0x00000433
    5c5c:	00000413 	.word	0x00000413
    5c60:	800fffff 	.word	0x800fffff

00005c64 <__aeabi_f2d>:
    5c64:	0041      	lsls	r1, r0, #1
    5c66:	0e09      	lsrs	r1, r1, #24
    5c68:	1c4b      	adds	r3, r1, #1
    5c6a:	b570      	push	{r4, r5, r6, lr}
    5c6c:	b2db      	uxtb	r3, r3
    5c6e:	0246      	lsls	r6, r0, #9
    5c70:	0a75      	lsrs	r5, r6, #9
    5c72:	0fc4      	lsrs	r4, r0, #31
    5c74:	2b01      	cmp	r3, #1
    5c76:	dd14      	ble.n	5ca2 <__aeabi_f2d+0x3e>
    5c78:	23e0      	movs	r3, #224	; 0xe0
    5c7a:	009b      	lsls	r3, r3, #2
    5c7c:	076d      	lsls	r5, r5, #29
    5c7e:	0b36      	lsrs	r6, r6, #12
    5c80:	18cb      	adds	r3, r1, r3
    5c82:	2100      	movs	r1, #0
    5c84:	0d0a      	lsrs	r2, r1, #20
    5c86:	0028      	movs	r0, r5
    5c88:	0512      	lsls	r2, r2, #20
    5c8a:	4d1c      	ldr	r5, [pc, #112]	; (5cfc <__aeabi_f2d+0x98>)
    5c8c:	4332      	orrs	r2, r6
    5c8e:	055b      	lsls	r3, r3, #21
    5c90:	402a      	ands	r2, r5
    5c92:	085b      	lsrs	r3, r3, #1
    5c94:	4313      	orrs	r3, r2
    5c96:	005b      	lsls	r3, r3, #1
    5c98:	07e4      	lsls	r4, r4, #31
    5c9a:	085b      	lsrs	r3, r3, #1
    5c9c:	4323      	orrs	r3, r4
    5c9e:	0019      	movs	r1, r3
    5ca0:	bd70      	pop	{r4, r5, r6, pc}
    5ca2:	2900      	cmp	r1, #0
    5ca4:	d114      	bne.n	5cd0 <__aeabi_f2d+0x6c>
    5ca6:	2d00      	cmp	r5, #0
    5ca8:	d01e      	beq.n	5ce8 <__aeabi_f2d+0x84>
    5caa:	0028      	movs	r0, r5
    5cac:	f000 f8f4 	bl	5e98 <__clzsi2>
    5cb0:	280a      	cmp	r0, #10
    5cb2:	dc1c      	bgt.n	5cee <__aeabi_f2d+0x8a>
    5cb4:	230b      	movs	r3, #11
    5cb6:	002a      	movs	r2, r5
    5cb8:	1a1b      	subs	r3, r3, r0
    5cba:	40da      	lsrs	r2, r3
    5cbc:	0003      	movs	r3, r0
    5cbe:	3315      	adds	r3, #21
    5cc0:	409d      	lsls	r5, r3
    5cc2:	4b0f      	ldr	r3, [pc, #60]	; (5d00 <__aeabi_f2d+0x9c>)
    5cc4:	0312      	lsls	r2, r2, #12
    5cc6:	1a1b      	subs	r3, r3, r0
    5cc8:	055b      	lsls	r3, r3, #21
    5cca:	0b16      	lsrs	r6, r2, #12
    5ccc:	0d5b      	lsrs	r3, r3, #21
    5cce:	e7d8      	b.n	5c82 <__aeabi_f2d+0x1e>
    5cd0:	2d00      	cmp	r5, #0
    5cd2:	d006      	beq.n	5ce2 <__aeabi_f2d+0x7e>
    5cd4:	0b32      	lsrs	r2, r6, #12
    5cd6:	2680      	movs	r6, #128	; 0x80
    5cd8:	0336      	lsls	r6, r6, #12
    5cda:	076d      	lsls	r5, r5, #29
    5cdc:	4316      	orrs	r6, r2
    5cde:	4b09      	ldr	r3, [pc, #36]	; (5d04 <__aeabi_f2d+0xa0>)
    5ce0:	e7cf      	b.n	5c82 <__aeabi_f2d+0x1e>
    5ce2:	4b08      	ldr	r3, [pc, #32]	; (5d04 <__aeabi_f2d+0xa0>)
    5ce4:	2600      	movs	r6, #0
    5ce6:	e7cc      	b.n	5c82 <__aeabi_f2d+0x1e>
    5ce8:	2300      	movs	r3, #0
    5cea:	2600      	movs	r6, #0
    5cec:	e7c9      	b.n	5c82 <__aeabi_f2d+0x1e>
    5cee:	0003      	movs	r3, r0
    5cf0:	002a      	movs	r2, r5
    5cf2:	3b0b      	subs	r3, #11
    5cf4:	409a      	lsls	r2, r3
    5cf6:	2500      	movs	r5, #0
    5cf8:	e7e3      	b.n	5cc2 <__aeabi_f2d+0x5e>
    5cfa:	46c0      	nop			; (mov r8, r8)
    5cfc:	800fffff 	.word	0x800fffff
    5d00:	00000389 	.word	0x00000389
    5d04:	000007ff 	.word	0x000007ff

00005d08 <__aeabi_d2f>:
    5d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d0a:	004c      	lsls	r4, r1, #1
    5d0c:	0d64      	lsrs	r4, r4, #21
    5d0e:	030b      	lsls	r3, r1, #12
    5d10:	1c62      	adds	r2, r4, #1
    5d12:	0f45      	lsrs	r5, r0, #29
    5d14:	0a5b      	lsrs	r3, r3, #9
    5d16:	0552      	lsls	r2, r2, #21
    5d18:	432b      	orrs	r3, r5
    5d1a:	0fc9      	lsrs	r1, r1, #31
    5d1c:	00c5      	lsls	r5, r0, #3
    5d1e:	0d52      	lsrs	r2, r2, #21
    5d20:	2a01      	cmp	r2, #1
    5d22:	dd28      	ble.n	5d76 <__aeabi_d2f+0x6e>
    5d24:	4a3a      	ldr	r2, [pc, #232]	; (5e10 <__aeabi_d2f+0x108>)
    5d26:	18a6      	adds	r6, r4, r2
    5d28:	2efe      	cmp	r6, #254	; 0xfe
    5d2a:	dc1b      	bgt.n	5d64 <__aeabi_d2f+0x5c>
    5d2c:	2e00      	cmp	r6, #0
    5d2e:	dd3e      	ble.n	5dae <__aeabi_d2f+0xa6>
    5d30:	0180      	lsls	r0, r0, #6
    5d32:	0002      	movs	r2, r0
    5d34:	1e50      	subs	r0, r2, #1
    5d36:	4182      	sbcs	r2, r0
    5d38:	0f6d      	lsrs	r5, r5, #29
    5d3a:	432a      	orrs	r2, r5
    5d3c:	00db      	lsls	r3, r3, #3
    5d3e:	4313      	orrs	r3, r2
    5d40:	075a      	lsls	r2, r3, #29
    5d42:	d004      	beq.n	5d4e <__aeabi_d2f+0x46>
    5d44:	220f      	movs	r2, #15
    5d46:	401a      	ands	r2, r3
    5d48:	2a04      	cmp	r2, #4
    5d4a:	d000      	beq.n	5d4e <__aeabi_d2f+0x46>
    5d4c:	3304      	adds	r3, #4
    5d4e:	2280      	movs	r2, #128	; 0x80
    5d50:	04d2      	lsls	r2, r2, #19
    5d52:	401a      	ands	r2, r3
    5d54:	d05a      	beq.n	5e0c <__aeabi_d2f+0x104>
    5d56:	3601      	adds	r6, #1
    5d58:	2eff      	cmp	r6, #255	; 0xff
    5d5a:	d003      	beq.n	5d64 <__aeabi_d2f+0x5c>
    5d5c:	019b      	lsls	r3, r3, #6
    5d5e:	0a5b      	lsrs	r3, r3, #9
    5d60:	b2f4      	uxtb	r4, r6
    5d62:	e001      	b.n	5d68 <__aeabi_d2f+0x60>
    5d64:	24ff      	movs	r4, #255	; 0xff
    5d66:	2300      	movs	r3, #0
    5d68:	0258      	lsls	r0, r3, #9
    5d6a:	05e4      	lsls	r4, r4, #23
    5d6c:	0a40      	lsrs	r0, r0, #9
    5d6e:	07c9      	lsls	r1, r1, #31
    5d70:	4320      	orrs	r0, r4
    5d72:	4308      	orrs	r0, r1
    5d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d76:	2c00      	cmp	r4, #0
    5d78:	d007      	beq.n	5d8a <__aeabi_d2f+0x82>
    5d7a:	431d      	orrs	r5, r3
    5d7c:	d0f2      	beq.n	5d64 <__aeabi_d2f+0x5c>
    5d7e:	2080      	movs	r0, #128	; 0x80
    5d80:	00db      	lsls	r3, r3, #3
    5d82:	0480      	lsls	r0, r0, #18
    5d84:	4303      	orrs	r3, r0
    5d86:	26ff      	movs	r6, #255	; 0xff
    5d88:	e7da      	b.n	5d40 <__aeabi_d2f+0x38>
    5d8a:	432b      	orrs	r3, r5
    5d8c:	d003      	beq.n	5d96 <__aeabi_d2f+0x8e>
    5d8e:	2305      	movs	r3, #5
    5d90:	08db      	lsrs	r3, r3, #3
    5d92:	2cff      	cmp	r4, #255	; 0xff
    5d94:	d003      	beq.n	5d9e <__aeabi_d2f+0x96>
    5d96:	025b      	lsls	r3, r3, #9
    5d98:	0a5b      	lsrs	r3, r3, #9
    5d9a:	b2e4      	uxtb	r4, r4
    5d9c:	e7e4      	b.n	5d68 <__aeabi_d2f+0x60>
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d032      	beq.n	5e08 <__aeabi_d2f+0x100>
    5da2:	2080      	movs	r0, #128	; 0x80
    5da4:	03c0      	lsls	r0, r0, #15
    5da6:	4303      	orrs	r3, r0
    5da8:	025b      	lsls	r3, r3, #9
    5daa:	0a5b      	lsrs	r3, r3, #9
    5dac:	e7dc      	b.n	5d68 <__aeabi_d2f+0x60>
    5dae:	0032      	movs	r2, r6
    5db0:	3217      	adds	r2, #23
    5db2:	db14      	blt.n	5dde <__aeabi_d2f+0xd6>
    5db4:	2280      	movs	r2, #128	; 0x80
    5db6:	271e      	movs	r7, #30
    5db8:	0412      	lsls	r2, r2, #16
    5dba:	4313      	orrs	r3, r2
    5dbc:	1bbf      	subs	r7, r7, r6
    5dbe:	2f1f      	cmp	r7, #31
    5dc0:	dc0f      	bgt.n	5de2 <__aeabi_d2f+0xda>
    5dc2:	4a14      	ldr	r2, [pc, #80]	; (5e14 <__aeabi_d2f+0x10c>)
    5dc4:	4694      	mov	ip, r2
    5dc6:	4464      	add	r4, ip
    5dc8:	002a      	movs	r2, r5
    5dca:	40a5      	lsls	r5, r4
    5dcc:	002e      	movs	r6, r5
    5dce:	40a3      	lsls	r3, r4
    5dd0:	1e75      	subs	r5, r6, #1
    5dd2:	41ae      	sbcs	r6, r5
    5dd4:	40fa      	lsrs	r2, r7
    5dd6:	4333      	orrs	r3, r6
    5dd8:	4313      	orrs	r3, r2
    5dda:	2600      	movs	r6, #0
    5ddc:	e7b0      	b.n	5d40 <__aeabi_d2f+0x38>
    5dde:	2400      	movs	r4, #0
    5de0:	e7d5      	b.n	5d8e <__aeabi_d2f+0x86>
    5de2:	2202      	movs	r2, #2
    5de4:	4252      	negs	r2, r2
    5de6:	1b96      	subs	r6, r2, r6
    5de8:	001a      	movs	r2, r3
    5dea:	40f2      	lsrs	r2, r6
    5dec:	2f20      	cmp	r7, #32
    5dee:	d009      	beq.n	5e04 <__aeabi_d2f+0xfc>
    5df0:	4809      	ldr	r0, [pc, #36]	; (5e18 <__aeabi_d2f+0x110>)
    5df2:	4684      	mov	ip, r0
    5df4:	4464      	add	r4, ip
    5df6:	40a3      	lsls	r3, r4
    5df8:	432b      	orrs	r3, r5
    5dfa:	1e5d      	subs	r5, r3, #1
    5dfc:	41ab      	sbcs	r3, r5
    5dfe:	2600      	movs	r6, #0
    5e00:	4313      	orrs	r3, r2
    5e02:	e79d      	b.n	5d40 <__aeabi_d2f+0x38>
    5e04:	2300      	movs	r3, #0
    5e06:	e7f7      	b.n	5df8 <__aeabi_d2f+0xf0>
    5e08:	2300      	movs	r3, #0
    5e0a:	e7ad      	b.n	5d68 <__aeabi_d2f+0x60>
    5e0c:	0034      	movs	r4, r6
    5e0e:	e7bf      	b.n	5d90 <__aeabi_d2f+0x88>
    5e10:	fffffc80 	.word	0xfffffc80
    5e14:	fffffc82 	.word	0xfffffc82
    5e18:	fffffca2 	.word	0xfffffca2

00005e1c <__aeabi_cdrcmple>:
    5e1c:	4684      	mov	ip, r0
    5e1e:	1c10      	adds	r0, r2, #0
    5e20:	4662      	mov	r2, ip
    5e22:	468c      	mov	ip, r1
    5e24:	1c19      	adds	r1, r3, #0
    5e26:	4663      	mov	r3, ip
    5e28:	e000      	b.n	5e2c <__aeabi_cdcmpeq>
    5e2a:	46c0      	nop			; (mov r8, r8)

00005e2c <__aeabi_cdcmpeq>:
    5e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5e2e:	f000 f8ef 	bl	6010 <__ledf2>
    5e32:	2800      	cmp	r0, #0
    5e34:	d401      	bmi.n	5e3a <__aeabi_cdcmpeq+0xe>
    5e36:	2100      	movs	r1, #0
    5e38:	42c8      	cmn	r0, r1
    5e3a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005e3c <__aeabi_dcmpeq>:
    5e3c:	b510      	push	{r4, lr}
    5e3e:	f000 f849 	bl	5ed4 <__eqdf2>
    5e42:	4240      	negs	r0, r0
    5e44:	3001      	adds	r0, #1
    5e46:	bd10      	pop	{r4, pc}

00005e48 <__aeabi_dcmplt>:
    5e48:	b510      	push	{r4, lr}
    5e4a:	f000 f8e1 	bl	6010 <__ledf2>
    5e4e:	2800      	cmp	r0, #0
    5e50:	db01      	blt.n	5e56 <__aeabi_dcmplt+0xe>
    5e52:	2000      	movs	r0, #0
    5e54:	bd10      	pop	{r4, pc}
    5e56:	2001      	movs	r0, #1
    5e58:	bd10      	pop	{r4, pc}
    5e5a:	46c0      	nop			; (mov r8, r8)

00005e5c <__aeabi_dcmple>:
    5e5c:	b510      	push	{r4, lr}
    5e5e:	f000 f8d7 	bl	6010 <__ledf2>
    5e62:	2800      	cmp	r0, #0
    5e64:	dd01      	ble.n	5e6a <__aeabi_dcmple+0xe>
    5e66:	2000      	movs	r0, #0
    5e68:	bd10      	pop	{r4, pc}
    5e6a:	2001      	movs	r0, #1
    5e6c:	bd10      	pop	{r4, pc}
    5e6e:	46c0      	nop			; (mov r8, r8)

00005e70 <__aeabi_dcmpgt>:
    5e70:	b510      	push	{r4, lr}
    5e72:	f000 f869 	bl	5f48 <__gedf2>
    5e76:	2800      	cmp	r0, #0
    5e78:	dc01      	bgt.n	5e7e <__aeabi_dcmpgt+0xe>
    5e7a:	2000      	movs	r0, #0
    5e7c:	bd10      	pop	{r4, pc}
    5e7e:	2001      	movs	r0, #1
    5e80:	bd10      	pop	{r4, pc}
    5e82:	46c0      	nop			; (mov r8, r8)

00005e84 <__aeabi_dcmpge>:
    5e84:	b510      	push	{r4, lr}
    5e86:	f000 f85f 	bl	5f48 <__gedf2>
    5e8a:	2800      	cmp	r0, #0
    5e8c:	da01      	bge.n	5e92 <__aeabi_dcmpge+0xe>
    5e8e:	2000      	movs	r0, #0
    5e90:	bd10      	pop	{r4, pc}
    5e92:	2001      	movs	r0, #1
    5e94:	bd10      	pop	{r4, pc}
    5e96:	46c0      	nop			; (mov r8, r8)

00005e98 <__clzsi2>:
    5e98:	211c      	movs	r1, #28
    5e9a:	2301      	movs	r3, #1
    5e9c:	041b      	lsls	r3, r3, #16
    5e9e:	4298      	cmp	r0, r3
    5ea0:	d301      	bcc.n	5ea6 <__clzsi2+0xe>
    5ea2:	0c00      	lsrs	r0, r0, #16
    5ea4:	3910      	subs	r1, #16
    5ea6:	0a1b      	lsrs	r3, r3, #8
    5ea8:	4298      	cmp	r0, r3
    5eaa:	d301      	bcc.n	5eb0 <__clzsi2+0x18>
    5eac:	0a00      	lsrs	r0, r0, #8
    5eae:	3908      	subs	r1, #8
    5eb0:	091b      	lsrs	r3, r3, #4
    5eb2:	4298      	cmp	r0, r3
    5eb4:	d301      	bcc.n	5eba <__clzsi2+0x22>
    5eb6:	0900      	lsrs	r0, r0, #4
    5eb8:	3904      	subs	r1, #4
    5eba:	a202      	add	r2, pc, #8	; (adr r2, 5ec4 <__clzsi2+0x2c>)
    5ebc:	5c10      	ldrb	r0, [r2, r0]
    5ebe:	1840      	adds	r0, r0, r1
    5ec0:	4770      	bx	lr
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	02020304 	.word	0x02020304
    5ec8:	01010101 	.word	0x01010101
	...

00005ed4 <__eqdf2>:
    5ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ed6:	464f      	mov	r7, r9
    5ed8:	4646      	mov	r6, r8
    5eda:	46d6      	mov	lr, sl
    5edc:	005c      	lsls	r4, r3, #1
    5ede:	b5c0      	push	{r6, r7, lr}
    5ee0:	031f      	lsls	r7, r3, #12
    5ee2:	0fdb      	lsrs	r3, r3, #31
    5ee4:	469a      	mov	sl, r3
    5ee6:	4b17      	ldr	r3, [pc, #92]	; (5f44 <__eqdf2+0x70>)
    5ee8:	030e      	lsls	r6, r1, #12
    5eea:	004d      	lsls	r5, r1, #1
    5eec:	4684      	mov	ip, r0
    5eee:	4680      	mov	r8, r0
    5ef0:	0b36      	lsrs	r6, r6, #12
    5ef2:	0d6d      	lsrs	r5, r5, #21
    5ef4:	0fc9      	lsrs	r1, r1, #31
    5ef6:	4691      	mov	r9, r2
    5ef8:	0b3f      	lsrs	r7, r7, #12
    5efa:	0d64      	lsrs	r4, r4, #21
    5efc:	2001      	movs	r0, #1
    5efe:	429d      	cmp	r5, r3
    5f00:	d008      	beq.n	5f14 <__eqdf2+0x40>
    5f02:	429c      	cmp	r4, r3
    5f04:	d001      	beq.n	5f0a <__eqdf2+0x36>
    5f06:	42a5      	cmp	r5, r4
    5f08:	d00b      	beq.n	5f22 <__eqdf2+0x4e>
    5f0a:	bc1c      	pop	{r2, r3, r4}
    5f0c:	4690      	mov	r8, r2
    5f0e:	4699      	mov	r9, r3
    5f10:	46a2      	mov	sl, r4
    5f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f14:	4663      	mov	r3, ip
    5f16:	4333      	orrs	r3, r6
    5f18:	d1f7      	bne.n	5f0a <__eqdf2+0x36>
    5f1a:	42ac      	cmp	r4, r5
    5f1c:	d1f5      	bne.n	5f0a <__eqdf2+0x36>
    5f1e:	433a      	orrs	r2, r7
    5f20:	d1f3      	bne.n	5f0a <__eqdf2+0x36>
    5f22:	2001      	movs	r0, #1
    5f24:	42be      	cmp	r6, r7
    5f26:	d1f0      	bne.n	5f0a <__eqdf2+0x36>
    5f28:	45c8      	cmp	r8, r9
    5f2a:	d1ee      	bne.n	5f0a <__eqdf2+0x36>
    5f2c:	4551      	cmp	r1, sl
    5f2e:	d007      	beq.n	5f40 <__eqdf2+0x6c>
    5f30:	2d00      	cmp	r5, #0
    5f32:	d1ea      	bne.n	5f0a <__eqdf2+0x36>
    5f34:	4663      	mov	r3, ip
    5f36:	431e      	orrs	r6, r3
    5f38:	0030      	movs	r0, r6
    5f3a:	1e46      	subs	r6, r0, #1
    5f3c:	41b0      	sbcs	r0, r6
    5f3e:	e7e4      	b.n	5f0a <__eqdf2+0x36>
    5f40:	2000      	movs	r0, #0
    5f42:	e7e2      	b.n	5f0a <__eqdf2+0x36>
    5f44:	000007ff 	.word	0x000007ff

00005f48 <__gedf2>:
    5f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f4a:	4645      	mov	r5, r8
    5f4c:	46de      	mov	lr, fp
    5f4e:	4657      	mov	r7, sl
    5f50:	464e      	mov	r6, r9
    5f52:	b5e0      	push	{r5, r6, r7, lr}
    5f54:	031f      	lsls	r7, r3, #12
    5f56:	0b3d      	lsrs	r5, r7, #12
    5f58:	4f2c      	ldr	r7, [pc, #176]	; (600c <__gedf2+0xc4>)
    5f5a:	030e      	lsls	r6, r1, #12
    5f5c:	004c      	lsls	r4, r1, #1
    5f5e:	46ab      	mov	fp, r5
    5f60:	005d      	lsls	r5, r3, #1
    5f62:	4684      	mov	ip, r0
    5f64:	0b36      	lsrs	r6, r6, #12
    5f66:	0d64      	lsrs	r4, r4, #21
    5f68:	0fc9      	lsrs	r1, r1, #31
    5f6a:	4690      	mov	r8, r2
    5f6c:	0d6d      	lsrs	r5, r5, #21
    5f6e:	0fdb      	lsrs	r3, r3, #31
    5f70:	42bc      	cmp	r4, r7
    5f72:	d02a      	beq.n	5fca <__gedf2+0x82>
    5f74:	4f25      	ldr	r7, [pc, #148]	; (600c <__gedf2+0xc4>)
    5f76:	42bd      	cmp	r5, r7
    5f78:	d02d      	beq.n	5fd6 <__gedf2+0x8e>
    5f7a:	2c00      	cmp	r4, #0
    5f7c:	d10f      	bne.n	5f9e <__gedf2+0x56>
    5f7e:	4330      	orrs	r0, r6
    5f80:	0007      	movs	r7, r0
    5f82:	4681      	mov	r9, r0
    5f84:	4278      	negs	r0, r7
    5f86:	4178      	adcs	r0, r7
    5f88:	b2c0      	uxtb	r0, r0
    5f8a:	2d00      	cmp	r5, #0
    5f8c:	d117      	bne.n	5fbe <__gedf2+0x76>
    5f8e:	465f      	mov	r7, fp
    5f90:	433a      	orrs	r2, r7
    5f92:	d114      	bne.n	5fbe <__gedf2+0x76>
    5f94:	464b      	mov	r3, r9
    5f96:	2000      	movs	r0, #0
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d00a      	beq.n	5fb2 <__gedf2+0x6a>
    5f9c:	e006      	b.n	5fac <__gedf2+0x64>
    5f9e:	2d00      	cmp	r5, #0
    5fa0:	d102      	bne.n	5fa8 <__gedf2+0x60>
    5fa2:	4658      	mov	r0, fp
    5fa4:	4302      	orrs	r2, r0
    5fa6:	d001      	beq.n	5fac <__gedf2+0x64>
    5fa8:	4299      	cmp	r1, r3
    5faa:	d018      	beq.n	5fde <__gedf2+0x96>
    5fac:	4248      	negs	r0, r1
    5fae:	2101      	movs	r1, #1
    5fb0:	4308      	orrs	r0, r1
    5fb2:	bc3c      	pop	{r2, r3, r4, r5}
    5fb4:	4690      	mov	r8, r2
    5fb6:	4699      	mov	r9, r3
    5fb8:	46a2      	mov	sl, r4
    5fba:	46ab      	mov	fp, r5
    5fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fbe:	2800      	cmp	r0, #0
    5fc0:	d0f2      	beq.n	5fa8 <__gedf2+0x60>
    5fc2:	2001      	movs	r0, #1
    5fc4:	3b01      	subs	r3, #1
    5fc6:	4318      	orrs	r0, r3
    5fc8:	e7f3      	b.n	5fb2 <__gedf2+0x6a>
    5fca:	0037      	movs	r7, r6
    5fcc:	4307      	orrs	r7, r0
    5fce:	d0d1      	beq.n	5f74 <__gedf2+0x2c>
    5fd0:	2002      	movs	r0, #2
    5fd2:	4240      	negs	r0, r0
    5fd4:	e7ed      	b.n	5fb2 <__gedf2+0x6a>
    5fd6:	465f      	mov	r7, fp
    5fd8:	4317      	orrs	r7, r2
    5fda:	d0ce      	beq.n	5f7a <__gedf2+0x32>
    5fdc:	e7f8      	b.n	5fd0 <__gedf2+0x88>
    5fde:	42ac      	cmp	r4, r5
    5fe0:	dce4      	bgt.n	5fac <__gedf2+0x64>
    5fe2:	da03      	bge.n	5fec <__gedf2+0xa4>
    5fe4:	1e48      	subs	r0, r1, #1
    5fe6:	2101      	movs	r1, #1
    5fe8:	4308      	orrs	r0, r1
    5fea:	e7e2      	b.n	5fb2 <__gedf2+0x6a>
    5fec:	455e      	cmp	r6, fp
    5fee:	d8dd      	bhi.n	5fac <__gedf2+0x64>
    5ff0:	d006      	beq.n	6000 <__gedf2+0xb8>
    5ff2:	2000      	movs	r0, #0
    5ff4:	455e      	cmp	r6, fp
    5ff6:	d2dc      	bcs.n	5fb2 <__gedf2+0x6a>
    5ff8:	2301      	movs	r3, #1
    5ffa:	1e48      	subs	r0, r1, #1
    5ffc:	4318      	orrs	r0, r3
    5ffe:	e7d8      	b.n	5fb2 <__gedf2+0x6a>
    6000:	45c4      	cmp	ip, r8
    6002:	d8d3      	bhi.n	5fac <__gedf2+0x64>
    6004:	2000      	movs	r0, #0
    6006:	45c4      	cmp	ip, r8
    6008:	d3f6      	bcc.n	5ff8 <__gedf2+0xb0>
    600a:	e7d2      	b.n	5fb2 <__gedf2+0x6a>
    600c:	000007ff 	.word	0x000007ff

00006010 <__ledf2>:
    6010:	b5f0      	push	{r4, r5, r6, r7, lr}
    6012:	464e      	mov	r6, r9
    6014:	4645      	mov	r5, r8
    6016:	46de      	mov	lr, fp
    6018:	4657      	mov	r7, sl
    601a:	005c      	lsls	r4, r3, #1
    601c:	b5e0      	push	{r5, r6, r7, lr}
    601e:	031f      	lsls	r7, r3, #12
    6020:	0fdb      	lsrs	r3, r3, #31
    6022:	4699      	mov	r9, r3
    6024:	4b2a      	ldr	r3, [pc, #168]	; (60d0 <__ledf2+0xc0>)
    6026:	030e      	lsls	r6, r1, #12
    6028:	004d      	lsls	r5, r1, #1
    602a:	0fc9      	lsrs	r1, r1, #31
    602c:	4684      	mov	ip, r0
    602e:	0b36      	lsrs	r6, r6, #12
    6030:	0d6d      	lsrs	r5, r5, #21
    6032:	468b      	mov	fp, r1
    6034:	4690      	mov	r8, r2
    6036:	0b3f      	lsrs	r7, r7, #12
    6038:	0d64      	lsrs	r4, r4, #21
    603a:	429d      	cmp	r5, r3
    603c:	d020      	beq.n	6080 <__ledf2+0x70>
    603e:	4b24      	ldr	r3, [pc, #144]	; (60d0 <__ledf2+0xc0>)
    6040:	429c      	cmp	r4, r3
    6042:	d022      	beq.n	608a <__ledf2+0x7a>
    6044:	2d00      	cmp	r5, #0
    6046:	d112      	bne.n	606e <__ledf2+0x5e>
    6048:	4330      	orrs	r0, r6
    604a:	4243      	negs	r3, r0
    604c:	4143      	adcs	r3, r0
    604e:	b2db      	uxtb	r3, r3
    6050:	2c00      	cmp	r4, #0
    6052:	d01f      	beq.n	6094 <__ledf2+0x84>
    6054:	2b00      	cmp	r3, #0
    6056:	d00c      	beq.n	6072 <__ledf2+0x62>
    6058:	464b      	mov	r3, r9
    605a:	2001      	movs	r0, #1
    605c:	3b01      	subs	r3, #1
    605e:	4303      	orrs	r3, r0
    6060:	0018      	movs	r0, r3
    6062:	bc3c      	pop	{r2, r3, r4, r5}
    6064:	4690      	mov	r8, r2
    6066:	4699      	mov	r9, r3
    6068:	46a2      	mov	sl, r4
    606a:	46ab      	mov	fp, r5
    606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    606e:	2c00      	cmp	r4, #0
    6070:	d016      	beq.n	60a0 <__ledf2+0x90>
    6072:	45cb      	cmp	fp, r9
    6074:	d017      	beq.n	60a6 <__ledf2+0x96>
    6076:	465b      	mov	r3, fp
    6078:	4259      	negs	r1, r3
    607a:	2301      	movs	r3, #1
    607c:	430b      	orrs	r3, r1
    607e:	e7ef      	b.n	6060 <__ledf2+0x50>
    6080:	0031      	movs	r1, r6
    6082:	2302      	movs	r3, #2
    6084:	4301      	orrs	r1, r0
    6086:	d1eb      	bne.n	6060 <__ledf2+0x50>
    6088:	e7d9      	b.n	603e <__ledf2+0x2e>
    608a:	0039      	movs	r1, r7
    608c:	2302      	movs	r3, #2
    608e:	4311      	orrs	r1, r2
    6090:	d1e6      	bne.n	6060 <__ledf2+0x50>
    6092:	e7d7      	b.n	6044 <__ledf2+0x34>
    6094:	433a      	orrs	r2, r7
    6096:	d1dd      	bne.n	6054 <__ledf2+0x44>
    6098:	2300      	movs	r3, #0
    609a:	2800      	cmp	r0, #0
    609c:	d0e0      	beq.n	6060 <__ledf2+0x50>
    609e:	e7ea      	b.n	6076 <__ledf2+0x66>
    60a0:	433a      	orrs	r2, r7
    60a2:	d1e6      	bne.n	6072 <__ledf2+0x62>
    60a4:	e7e7      	b.n	6076 <__ledf2+0x66>
    60a6:	42a5      	cmp	r5, r4
    60a8:	dce5      	bgt.n	6076 <__ledf2+0x66>
    60aa:	db05      	blt.n	60b8 <__ledf2+0xa8>
    60ac:	42be      	cmp	r6, r7
    60ae:	d8e2      	bhi.n	6076 <__ledf2+0x66>
    60b0:	d007      	beq.n	60c2 <__ledf2+0xb2>
    60b2:	2300      	movs	r3, #0
    60b4:	42be      	cmp	r6, r7
    60b6:	d2d3      	bcs.n	6060 <__ledf2+0x50>
    60b8:	4659      	mov	r1, fp
    60ba:	2301      	movs	r3, #1
    60bc:	3901      	subs	r1, #1
    60be:	430b      	orrs	r3, r1
    60c0:	e7ce      	b.n	6060 <__ledf2+0x50>
    60c2:	45c4      	cmp	ip, r8
    60c4:	d8d7      	bhi.n	6076 <__ledf2+0x66>
    60c6:	2300      	movs	r3, #0
    60c8:	45c4      	cmp	ip, r8
    60ca:	d3f5      	bcc.n	60b8 <__ledf2+0xa8>
    60cc:	e7c8      	b.n	6060 <__ledf2+0x50>
    60ce:	46c0      	nop			; (mov r8, r8)
    60d0:	000007ff 	.word	0x000007ff

000060d4 <__errno>:
    60d4:	4b01      	ldr	r3, [pc, #4]	; (60dc <__errno+0x8>)
    60d6:	6818      	ldr	r0, [r3, #0]
    60d8:	4770      	bx	lr
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	2000000c 	.word	0x2000000c

000060e0 <__libc_init_array>:
    60e0:	b570      	push	{r4, r5, r6, lr}
    60e2:	4e0d      	ldr	r6, [pc, #52]	; (6118 <__libc_init_array+0x38>)
    60e4:	4d0d      	ldr	r5, [pc, #52]	; (611c <__libc_init_array+0x3c>)
    60e6:	2400      	movs	r4, #0
    60e8:	1bad      	subs	r5, r5, r6
    60ea:	10ad      	asrs	r5, r5, #2
    60ec:	d005      	beq.n	60fa <__libc_init_array+0x1a>
    60ee:	00a3      	lsls	r3, r4, #2
    60f0:	58f3      	ldr	r3, [r6, r3]
    60f2:	3401      	adds	r4, #1
    60f4:	4798      	blx	r3
    60f6:	42a5      	cmp	r5, r4
    60f8:	d1f9      	bne.n	60ee <__libc_init_array+0xe>
    60fa:	f000 fa13 	bl	6524 <_init>
    60fe:	4e08      	ldr	r6, [pc, #32]	; (6120 <__libc_init_array+0x40>)
    6100:	4d08      	ldr	r5, [pc, #32]	; (6124 <__libc_init_array+0x44>)
    6102:	2400      	movs	r4, #0
    6104:	1bad      	subs	r5, r5, r6
    6106:	10ad      	asrs	r5, r5, #2
    6108:	d005      	beq.n	6116 <__libc_init_array+0x36>
    610a:	00a3      	lsls	r3, r4, #2
    610c:	58f3      	ldr	r3, [r6, r3]
    610e:	3401      	adds	r4, #1
    6110:	4798      	blx	r3
    6112:	42a5      	cmp	r5, r4
    6114:	d1f9      	bne.n	610a <__libc_init_array+0x2a>
    6116:	bd70      	pop	{r4, r5, r6, pc}
    6118:	00006530 	.word	0x00006530
    611c:	00006530 	.word	0x00006530
    6120:	00006530 	.word	0x00006530
    6124:	00006538 	.word	0x00006538

00006128 <strlen>:
    6128:	b510      	push	{r4, lr}
    612a:	0783      	lsls	r3, r0, #30
    612c:	d025      	beq.n	617a <strlen+0x52>
    612e:	7803      	ldrb	r3, [r0, #0]
    6130:	2b00      	cmp	r3, #0
    6132:	d024      	beq.n	617e <strlen+0x56>
    6134:	0003      	movs	r3, r0
    6136:	2103      	movs	r1, #3
    6138:	e002      	b.n	6140 <strlen+0x18>
    613a:	781a      	ldrb	r2, [r3, #0]
    613c:	2a00      	cmp	r2, #0
    613e:	d01a      	beq.n	6176 <strlen+0x4e>
    6140:	3301      	adds	r3, #1
    6142:	420b      	tst	r3, r1
    6144:	d1f9      	bne.n	613a <strlen+0x12>
    6146:	6819      	ldr	r1, [r3, #0]
    6148:	4a0e      	ldr	r2, [pc, #56]	; (6184 <strlen+0x5c>)
    614a:	4c0f      	ldr	r4, [pc, #60]	; (6188 <strlen+0x60>)
    614c:	188a      	adds	r2, r1, r2
    614e:	438a      	bics	r2, r1
    6150:	4222      	tst	r2, r4
    6152:	d106      	bne.n	6162 <strlen+0x3a>
    6154:	3304      	adds	r3, #4
    6156:	6819      	ldr	r1, [r3, #0]
    6158:	4a0a      	ldr	r2, [pc, #40]	; (6184 <strlen+0x5c>)
    615a:	188a      	adds	r2, r1, r2
    615c:	438a      	bics	r2, r1
    615e:	4222      	tst	r2, r4
    6160:	d0f8      	beq.n	6154 <strlen+0x2c>
    6162:	001a      	movs	r2, r3
    6164:	781b      	ldrb	r3, [r3, #0]
    6166:	2b00      	cmp	r3, #0
    6168:	d003      	beq.n	6172 <strlen+0x4a>
    616a:	3201      	adds	r2, #1
    616c:	7811      	ldrb	r1, [r2, #0]
    616e:	2900      	cmp	r1, #0
    6170:	d1fb      	bne.n	616a <strlen+0x42>
    6172:	1a10      	subs	r0, r2, r0
    6174:	bd10      	pop	{r4, pc}
    6176:	1a18      	subs	r0, r3, r0
    6178:	e7fc      	b.n	6174 <strlen+0x4c>
    617a:	0003      	movs	r3, r0
    617c:	e7e3      	b.n	6146 <strlen+0x1e>
    617e:	2000      	movs	r0, #0
    6180:	e7f8      	b.n	6174 <strlen+0x4c>
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	fefefeff 	.word	0xfefefeff
    6188:	80808080 	.word	0x80808080

0000618c <register_fini>:
    618c:	4b03      	ldr	r3, [pc, #12]	; (619c <register_fini+0x10>)
    618e:	b510      	push	{r4, lr}
    6190:	2b00      	cmp	r3, #0
    6192:	d002      	beq.n	619a <register_fini+0xe>
    6194:	4802      	ldr	r0, [pc, #8]	; (61a0 <register_fini+0x14>)
    6196:	f000 f805 	bl	61a4 <atexit>
    619a:	bd10      	pop	{r4, pc}
    619c:	00000000 	.word	0x00000000
    61a0:	000061b5 	.word	0x000061b5

000061a4 <atexit>:
    61a4:	b510      	push	{r4, lr}
    61a6:	0001      	movs	r1, r0
    61a8:	2300      	movs	r3, #0
    61aa:	2200      	movs	r2, #0
    61ac:	2000      	movs	r0, #0
    61ae:	f000 f81f 	bl	61f0 <__register_exitproc>
    61b2:	bd10      	pop	{r4, pc}

000061b4 <__libc_fini_array>:
    61b4:	b570      	push	{r4, r5, r6, lr}
    61b6:	4b09      	ldr	r3, [pc, #36]	; (61dc <__libc_fini_array+0x28>)
    61b8:	4c09      	ldr	r4, [pc, #36]	; (61e0 <__libc_fini_array+0x2c>)
    61ba:	1ae4      	subs	r4, r4, r3
    61bc:	10a4      	asrs	r4, r4, #2
    61be:	d009      	beq.n	61d4 <__libc_fini_array+0x20>
    61c0:	4a08      	ldr	r2, [pc, #32]	; (61e4 <__libc_fini_array+0x30>)
    61c2:	18a5      	adds	r5, r4, r2
    61c4:	00ad      	lsls	r5, r5, #2
    61c6:	18ed      	adds	r5, r5, r3
    61c8:	682b      	ldr	r3, [r5, #0]
    61ca:	3c01      	subs	r4, #1
    61cc:	4798      	blx	r3
    61ce:	3d04      	subs	r5, #4
    61d0:	2c00      	cmp	r4, #0
    61d2:	d1f9      	bne.n	61c8 <__libc_fini_array+0x14>
    61d4:	f000 f9b0 	bl	6538 <_fini>
    61d8:	bd70      	pop	{r4, r5, r6, pc}
    61da:	46c0      	nop			; (mov r8, r8)
    61dc:	00006544 	.word	0x00006544
    61e0:	00006548 	.word	0x00006548
    61e4:	3fffffff 	.word	0x3fffffff

000061e8 <__retarget_lock_acquire_recursive>:
    61e8:	4770      	bx	lr
    61ea:	46c0      	nop			; (mov r8, r8)

000061ec <__retarget_lock_release_recursive>:
    61ec:	4770      	bx	lr
    61ee:	46c0      	nop			; (mov r8, r8)

000061f0 <__register_exitproc>:
    61f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61f2:	464e      	mov	r6, r9
    61f4:	4645      	mov	r5, r8
    61f6:	46de      	mov	lr, fp
    61f8:	4657      	mov	r7, sl
    61fa:	b5e0      	push	{r5, r6, r7, lr}
    61fc:	4d36      	ldr	r5, [pc, #216]	; (62d8 <__register_exitproc+0xe8>)
    61fe:	b083      	sub	sp, #12
    6200:	0006      	movs	r6, r0
    6202:	6828      	ldr	r0, [r5, #0]
    6204:	4698      	mov	r8, r3
    6206:	000f      	movs	r7, r1
    6208:	4691      	mov	r9, r2
    620a:	f7ff ffed 	bl	61e8 <__retarget_lock_acquire_recursive>
    620e:	4b33      	ldr	r3, [pc, #204]	; (62dc <__register_exitproc+0xec>)
    6210:	681c      	ldr	r4, [r3, #0]
    6212:	23a4      	movs	r3, #164	; 0xa4
    6214:	005b      	lsls	r3, r3, #1
    6216:	58e0      	ldr	r0, [r4, r3]
    6218:	2800      	cmp	r0, #0
    621a:	d052      	beq.n	62c2 <__register_exitproc+0xd2>
    621c:	6843      	ldr	r3, [r0, #4]
    621e:	2b1f      	cmp	r3, #31
    6220:	dc13      	bgt.n	624a <__register_exitproc+0x5a>
    6222:	1c5a      	adds	r2, r3, #1
    6224:	9201      	str	r2, [sp, #4]
    6226:	2e00      	cmp	r6, #0
    6228:	d128      	bne.n	627c <__register_exitproc+0x8c>
    622a:	9a01      	ldr	r2, [sp, #4]
    622c:	3302      	adds	r3, #2
    622e:	009b      	lsls	r3, r3, #2
    6230:	6042      	str	r2, [r0, #4]
    6232:	501f      	str	r7, [r3, r0]
    6234:	6828      	ldr	r0, [r5, #0]
    6236:	f7ff ffd9 	bl	61ec <__retarget_lock_release_recursive>
    623a:	2000      	movs	r0, #0
    623c:	b003      	add	sp, #12
    623e:	bc3c      	pop	{r2, r3, r4, r5}
    6240:	4690      	mov	r8, r2
    6242:	4699      	mov	r9, r3
    6244:	46a2      	mov	sl, r4
    6246:	46ab      	mov	fp, r5
    6248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    624a:	4b25      	ldr	r3, [pc, #148]	; (62e0 <__register_exitproc+0xf0>)
    624c:	2b00      	cmp	r3, #0
    624e:	d03d      	beq.n	62cc <__register_exitproc+0xdc>
    6250:	20c8      	movs	r0, #200	; 0xc8
    6252:	0040      	lsls	r0, r0, #1
    6254:	e000      	b.n	6258 <__register_exitproc+0x68>
    6256:	bf00      	nop
    6258:	2800      	cmp	r0, #0
    625a:	d037      	beq.n	62cc <__register_exitproc+0xdc>
    625c:	22a4      	movs	r2, #164	; 0xa4
    625e:	2300      	movs	r3, #0
    6260:	0052      	lsls	r2, r2, #1
    6262:	58a1      	ldr	r1, [r4, r2]
    6264:	6043      	str	r3, [r0, #4]
    6266:	6001      	str	r1, [r0, #0]
    6268:	50a0      	str	r0, [r4, r2]
    626a:	3240      	adds	r2, #64	; 0x40
    626c:	5083      	str	r3, [r0, r2]
    626e:	3204      	adds	r2, #4
    6270:	5083      	str	r3, [r0, r2]
    6272:	3301      	adds	r3, #1
    6274:	9301      	str	r3, [sp, #4]
    6276:	2300      	movs	r3, #0
    6278:	2e00      	cmp	r6, #0
    627a:	d0d6      	beq.n	622a <__register_exitproc+0x3a>
    627c:	009a      	lsls	r2, r3, #2
    627e:	4692      	mov	sl, r2
    6280:	4482      	add	sl, r0
    6282:	464a      	mov	r2, r9
    6284:	2188      	movs	r1, #136	; 0x88
    6286:	4654      	mov	r4, sl
    6288:	5062      	str	r2, [r4, r1]
    628a:	22c4      	movs	r2, #196	; 0xc4
    628c:	0052      	lsls	r2, r2, #1
    628e:	4691      	mov	r9, r2
    6290:	4481      	add	r9, r0
    6292:	464a      	mov	r2, r9
    6294:	3987      	subs	r1, #135	; 0x87
    6296:	4099      	lsls	r1, r3
    6298:	6812      	ldr	r2, [r2, #0]
    629a:	468b      	mov	fp, r1
    629c:	430a      	orrs	r2, r1
    629e:	4694      	mov	ip, r2
    62a0:	464a      	mov	r2, r9
    62a2:	4661      	mov	r1, ip
    62a4:	6011      	str	r1, [r2, #0]
    62a6:	2284      	movs	r2, #132	; 0x84
    62a8:	4641      	mov	r1, r8
    62aa:	0052      	lsls	r2, r2, #1
    62ac:	50a1      	str	r1, [r4, r2]
    62ae:	2e02      	cmp	r6, #2
    62b0:	d1bb      	bne.n	622a <__register_exitproc+0x3a>
    62b2:	0002      	movs	r2, r0
    62b4:	465c      	mov	r4, fp
    62b6:	328d      	adds	r2, #141	; 0x8d
    62b8:	32ff      	adds	r2, #255	; 0xff
    62ba:	6811      	ldr	r1, [r2, #0]
    62bc:	430c      	orrs	r4, r1
    62be:	6014      	str	r4, [r2, #0]
    62c0:	e7b3      	b.n	622a <__register_exitproc+0x3a>
    62c2:	0020      	movs	r0, r4
    62c4:	304d      	adds	r0, #77	; 0x4d
    62c6:	30ff      	adds	r0, #255	; 0xff
    62c8:	50e0      	str	r0, [r4, r3]
    62ca:	e7a7      	b.n	621c <__register_exitproc+0x2c>
    62cc:	6828      	ldr	r0, [r5, #0]
    62ce:	f7ff ff8d 	bl	61ec <__retarget_lock_release_recursive>
    62d2:	2001      	movs	r0, #1
    62d4:	4240      	negs	r0, r0
    62d6:	e7b1      	b.n	623c <__register_exitproc+0x4c>
    62d8:	20000438 	.word	0x20000438
    62dc:	00006520 	.word	0x00006520
    62e0:	00000000 	.word	0x00000000
    62e4:	00000f6c 	.word	0x00000f6c
    62e8:	00000f76 	.word	0x00000f76
    62ec:	00000f84 	.word	0x00000f84
    62f0:	00000f94 	.word	0x00000f94
    62f4:	00000f9e 	.word	0x00000f9e
    62f8:	00000fae 	.word	0x00000fae
    62fc:	00000fbe 	.word	0x00000fbe
    6300:	00000fc8 	.word	0x00000fc8
    6304:	00000fd8 	.word	0x00000fd8
    6308:	00000fe8 	.word	0x00000fe8
    630c:	00000ff2 	.word	0x00000ff2
    6310:	00001002 	.word	0x00001002
    6314:	00001012 	.word	0x00001012
    6318:	0000101c 	.word	0x0000101c
    631c:	0000102c 	.word	0x0000102c
    6320:	0000103c 	.word	0x0000103c
    6324:	00001046 	.word	0x00001046
    6328:	00001056 	.word	0x00001056
    632c:	00001066 	.word	0x00001066
    6330:	00001070 	.word	0x00001070
    6334:	00001080 	.word	0x00001080
    6338:	00001090 	.word	0x00001090
    633c:	0000109a 	.word	0x0000109a
    6340:	000010aa 	.word	0x000010aa
    6344:	000010ba 	.word	0x000010ba
    6348:	00001ad0 	.word	0x00001ad0
    634c:	00001a24 	.word	0x00001a24
    6350:	00001a0a 	.word	0x00001a0a
    6354:	00001a3a 	.word	0x00001a3a
    6358:	00001a54 	.word	0x00001a54
    635c:	00001a98 	.word	0x00001a98
    6360:	69676562 	.word	0x69676562
    6364:	6e696e6e 	.word	0x6e696e6e
    6368:	6f732067 	.word	0x6f732067
    636c:	6f206f6c 	.word	0x6f206f6c
    6370:	61726570 	.word	0x61726570
    6374:	6e6f6974 	.word	0x6e6f6974
    6378:	00000000 	.word	0x00000000
    637c:	69676562 	.word	0x69676562
    6380:	6e696e6e 	.word	0x6e696e6e
    6384:	61682067 	.word	0x61682067
    6388:	6320646e 	.word	0x6320646e
    638c:	72746e6f 	.word	0x72746e6f
    6390:	656c6c6f 	.word	0x656c6c6f
    6394:	00000072 	.word	0x00000072
    6398:	69676562 	.word	0x69676562
    639c:	6e696e6e 	.word	0x6e696e6e
    63a0:	61682067 	.word	0x61682067
    63a4:	6d20646e 	.word	0x6d20646e
    63a8:	6f727269 	.word	0x6f727269
    63ac:	00000072 	.word	0x00000072
    63b0:	69676562 	.word	0x69676562
    63b4:	6e696e6e 	.word	0x6e696e6e
    63b8:	61642067 	.word	0x61642067
    63bc:	63206174 	.word	0x63206174
    63c0:	656c6c6f 	.word	0x656c6c6f
    63c4:	6f697463 	.word	0x6f697463
    63c8:	0000006e 	.word	0x0000006e
    63cc:	0000335a 	.word	0x0000335a
    63d0:	00003386 	.word	0x00003386
    63d4:	000033b2 	.word	0x000033b2
    63d8:	0000343c 	.word	0x0000343c
    63dc:	0000340e 	.word	0x0000340e
    63e0:	000033e0 	.word	0x000033e0
    63e4:	0000346a 	.word	0x0000346a
    63e8:	00003498 	.word	0x00003498
    63ec:	000034c6 	.word	0x000034c6
    63f0:	00003550 	.word	0x00003550
    63f4:	00003522 	.word	0x00003522
    63f8:	000034f4 	.word	0x000034f4
    63fc:	000035da 	.word	0x000035da
    6400:	000035ac 	.word	0x000035ac
    6404:	0000357e 	.word	0x0000357e
    6408:	00003608 	.word	0x00003608
    640c:	736f6361 	.word	0x736f6361
    6410:	00000066 	.word	0x00000066
    6414:	00000000 	.word	0x00000000
    6418:	74727173 	.word	0x74727173
    641c:	00000066 	.word	0x00000066
    6420:	0000465c 	.word	0x0000465c
    6424:	0000462c 	.word	0x0000462c
    6428:	0000463e 	.word	0x0000463e
    642c:	00004580 	.word	0x00004580
    6430:	0000463e 	.word	0x0000463e
    6434:	00004622 	.word	0x00004622
    6438:	0000463e 	.word	0x0000463e
    643c:	00004580 	.word	0x00004580
    6440:	0000462c 	.word	0x0000462c
    6444:	0000462c 	.word	0x0000462c
    6448:	00004622 	.word	0x00004622
    644c:	00004580 	.word	0x00004580
    6450:	00004588 	.word	0x00004588
    6454:	00004588 	.word	0x00004588
    6458:	00004588 	.word	0x00004588
    645c:	00004644 	.word	0x00004644
    6460:	0000462c 	.word	0x0000462c
    6464:	0000462c 	.word	0x0000462c
    6468:	00004600 	.word	0x00004600
    646c:	000046e4 	.word	0x000046e4
    6470:	00004600 	.word	0x00004600
    6474:	00004622 	.word	0x00004622
    6478:	00004600 	.word	0x00004600
    647c:	000046e4 	.word	0x000046e4
    6480:	0000462c 	.word	0x0000462c
    6484:	0000462c 	.word	0x0000462c
    6488:	00004622 	.word	0x00004622
    648c:	000046e4 	.word	0x000046e4
    6490:	00004588 	.word	0x00004588
    6494:	00004588 	.word	0x00004588
    6498:	00004588 	.word	0x00004588
    649c:	000046ee 	.word	0x000046ee
    64a0:	000049dc 	.word	0x000049dc
    64a4:	0000492c 	.word	0x0000492c
    64a8:	0000492c 	.word	0x0000492c
    64ac:	0000492a 	.word	0x0000492a
    64b0:	000049ce 	.word	0x000049ce
    64b4:	000049ce 	.word	0x000049ce
    64b8:	000049c4 	.word	0x000049c4
    64bc:	0000492a 	.word	0x0000492a
    64c0:	000049ce 	.word	0x000049ce
    64c4:	000049c4 	.word	0x000049c4
    64c8:	000049ce 	.word	0x000049ce
    64cc:	0000492a 	.word	0x0000492a
    64d0:	000049d4 	.word	0x000049d4
    64d4:	000049d4 	.word	0x000049d4
    64d8:	000049d4 	.word	0x000049d4
    64dc:	00004a64 	.word	0x00004a64
    64e0:	000050f0 	.word	0x000050f0
    64e4:	000050d2 	.word	0x000050d2
    64e8:	0000508c 	.word	0x0000508c
    64ec:	00004faa 	.word	0x00004faa
    64f0:	0000508c 	.word	0x0000508c
    64f4:	000050c4 	.word	0x000050c4
    64f8:	0000508c 	.word	0x0000508c
    64fc:	00004faa 	.word	0x00004faa
    6500:	000050d2 	.word	0x000050d2
    6504:	000050d2 	.word	0x000050d2
    6508:	000050c4 	.word	0x000050c4
    650c:	00004faa 	.word	0x00004faa
    6510:	00004fa2 	.word	0x00004fa2
    6514:	00004fa2 	.word	0x00004fa2
    6518:	00004fa2 	.word	0x00004fa2
    651c:	00005308 	.word	0x00005308

00006520 <_global_impure_ptr>:
    6520:	20000010                                ... 

00006524 <_init>:
    6524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6526:	46c0      	nop			; (mov r8, r8)
    6528:	bcf8      	pop	{r3, r4, r5, r6, r7}
    652a:	bc08      	pop	{r3}
    652c:	469e      	mov	lr, r3
    652e:	4770      	bx	lr

00006530 <__init_array_start>:
    6530:	0000618d 	.word	0x0000618d

00006534 <__frame_dummy_init_array_entry>:
    6534:	000000dd                                ....

00006538 <_fini>:
    6538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    653a:	46c0      	nop			; (mov r8, r8)
    653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    653e:	bc08      	pop	{r3}
    6540:	469e      	mov	lr, r3
    6542:	4770      	bx	lr

00006544 <__fini_array_start>:
    6544:	000000b5 	.word	0x000000b5
