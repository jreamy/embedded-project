
Data_Com_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006008  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00006008  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012c  20000440  00006448  0002043c  2**3
                  ALLOC
  3 .stack        00002004  2000056c  00006574  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f2e9  00000000  00000000  000204bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017c9  00000000  00000000  0002f7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000146a  00000000  00000000  00030f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000448  00000000  00000000  000323d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a0  00000000  00000000  00032821  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013a83  00000000  00000000  00032bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005f2d  00000000  00000000  00046644  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00073db2  00000000  00000000  0004c571  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013e0  00000000  00000000  000c0324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 25 00 20 21 05 00 00 19 06 00 00 19 06 00 00     p%. !...........
	...
      2c:	19 06 00 00 00 00 00 00 00 00 00 00 19 06 00 00     ................
      3c:	9d 35 00 00 19 06 00 00 19 06 00 00 19 06 00 00     .5..............
      4c:	19 06 00 00 19 06 00 00 19 06 00 00 19 06 00 00     ................
      5c:	19 06 00 00 19 06 00 00 19 06 00 00 19 06 00 00     ................
      6c:	19 06 00 00 19 06 00 00 19 06 00 00 b9 2b 00 00     .............+..
      7c:	19 06 00 00 19 06 00 00 19 06 00 00 19 06 00 00     ................
      8c:	19 06 00 00 19 06 00 00 00 00 00 00 00 00 00 00     ................
      9c:	55 04 00 00 19 06 00 00 19 06 00 00 19 06 00 00     U...............
      ac:	19 06 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00006008 	.word	0x00006008

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00006008 	.word	0x00006008
     10c:	00006008 	.word	0x00006008
     110:	00000000 	.word	0x00000000

00000114 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <NVIC_EnableIRQ+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     140:	b5b0      	push	{r4, r5, r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	0002      	movs	r2, r0
     148:	6039      	str	r1, [r7, #0]
     14a:	1dfb      	adds	r3, r7, #7
     14c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     14e:	1dfb      	adds	r3, r7, #7
     150:	781b      	ldrb	r3, [r3, #0]
     152:	2b7f      	cmp	r3, #127	; 0x7f
     154:	d932      	bls.n	1bc <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     156:	4c2f      	ldr	r4, [pc, #188]	; (214 <NVIC_SetPriority+0xd4>)
     158:	1dfb      	adds	r3, r7, #7
     15a:	781b      	ldrb	r3, [r3, #0]
     15c:	001a      	movs	r2, r3
     15e:	230f      	movs	r3, #15
     160:	4013      	ands	r3, r2
     162:	3b08      	subs	r3, #8
     164:	0899      	lsrs	r1, r3, #2
     166:	4a2b      	ldr	r2, [pc, #172]	; (214 <NVIC_SetPriority+0xd4>)
     168:	1dfb      	adds	r3, r7, #7
     16a:	781b      	ldrb	r3, [r3, #0]
     16c:	0018      	movs	r0, r3
     16e:	230f      	movs	r3, #15
     170:	4003      	ands	r3, r0
     172:	3b08      	subs	r3, #8
     174:	089b      	lsrs	r3, r3, #2
     176:	3306      	adds	r3, #6
     178:	009b      	lsls	r3, r3, #2
     17a:	18d3      	adds	r3, r2, r3
     17c:	3304      	adds	r3, #4
     17e:	681b      	ldr	r3, [r3, #0]
     180:	1dfa      	adds	r2, r7, #7
     182:	7812      	ldrb	r2, [r2, #0]
     184:	0010      	movs	r0, r2
     186:	2203      	movs	r2, #3
     188:	4002      	ands	r2, r0
     18a:	00d2      	lsls	r2, r2, #3
     18c:	20ff      	movs	r0, #255	; 0xff
     18e:	4090      	lsls	r0, r2
     190:	0002      	movs	r2, r0
     192:	43d2      	mvns	r2, r2
     194:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     196:	683b      	ldr	r3, [r7, #0]
     198:	019b      	lsls	r3, r3, #6
     19a:	20ff      	movs	r0, #255	; 0xff
     19c:	4018      	ands	r0, r3
     19e:	1dfb      	adds	r3, r7, #7
     1a0:	781b      	ldrb	r3, [r3, #0]
     1a2:	001d      	movs	r5, r3
     1a4:	2303      	movs	r3, #3
     1a6:	402b      	ands	r3, r5
     1a8:	00db      	lsls	r3, r3, #3
     1aa:	4098      	lsls	r0, r3
     1ac:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1ae:	431a      	orrs	r2, r3
     1b0:	1d8b      	adds	r3, r1, #6
     1b2:	009b      	lsls	r3, r3, #2
     1b4:	18e3      	adds	r3, r4, r3
     1b6:	3304      	adds	r3, #4
     1b8:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     1ba:	e027      	b.n	20c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1bc:	4c16      	ldr	r4, [pc, #88]	; (218 <NVIC_SetPriority+0xd8>)
     1be:	1dfb      	adds	r3, r7, #7
     1c0:	781b      	ldrb	r3, [r3, #0]
     1c2:	b25b      	sxtb	r3, r3
     1c4:	089b      	lsrs	r3, r3, #2
     1c6:	4914      	ldr	r1, [pc, #80]	; (218 <NVIC_SetPriority+0xd8>)
     1c8:	1dfa      	adds	r2, r7, #7
     1ca:	7812      	ldrb	r2, [r2, #0]
     1cc:	b252      	sxtb	r2, r2
     1ce:	0892      	lsrs	r2, r2, #2
     1d0:	32c0      	adds	r2, #192	; 0xc0
     1d2:	0092      	lsls	r2, r2, #2
     1d4:	5852      	ldr	r2, [r2, r1]
     1d6:	1df9      	adds	r1, r7, #7
     1d8:	7809      	ldrb	r1, [r1, #0]
     1da:	0008      	movs	r0, r1
     1dc:	2103      	movs	r1, #3
     1de:	4001      	ands	r1, r0
     1e0:	00c9      	lsls	r1, r1, #3
     1e2:	20ff      	movs	r0, #255	; 0xff
     1e4:	4088      	lsls	r0, r1
     1e6:	0001      	movs	r1, r0
     1e8:	43c9      	mvns	r1, r1
     1ea:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     1ec:	683a      	ldr	r2, [r7, #0]
     1ee:	0192      	lsls	r2, r2, #6
     1f0:	20ff      	movs	r0, #255	; 0xff
     1f2:	4010      	ands	r0, r2
     1f4:	1dfa      	adds	r2, r7, #7
     1f6:	7812      	ldrb	r2, [r2, #0]
     1f8:	0015      	movs	r5, r2
     1fa:	2203      	movs	r2, #3
     1fc:	402a      	ands	r2, r5
     1fe:	00d2      	lsls	r2, r2, #3
     200:	4090      	lsls	r0, r2
     202:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     204:	430a      	orrs	r2, r1
     206:	33c0      	adds	r3, #192	; 0xc0
     208:	009b      	lsls	r3, r3, #2
     20a:	511a      	str	r2, [r3, r4]
}
     20c:	46c0      	nop			; (mov r8, r8)
     20e:	46bd      	mov	sp, r7
     210:	b002      	add	sp, #8
     212:	bdb0      	pop	{r4, r5, r7, pc}
     214:	e000ed00 	.word	0xe000ed00
     218:	e000e100 	.word	0xe000e100

0000021c <adc_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void adc_init() {
     21c:	b580      	push	{r7, lr}
     21e:	af00      	add	r7, sp, #0
    // Enable power ADC in manager
    PM->APBCMASK.bit.ADC_ = 1;
     220:	4a3d      	ldr	r2, [pc, #244]	; (318 <adc_init+0xfc>)
     222:	6a13      	ldr	r3, [r2, #32]
     224:	2180      	movs	r1, #128	; 0x80
     226:	0249      	lsls	r1, r1, #9
     228:	430b      	orrs	r3, r1
     22a:	6213      	str	r3, [r2, #32]

    // Enable GCLK for ADC
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_ID_ADC | GCLK_CLKCTRL_CLKEN |
     22c:	4b3b      	ldr	r3, [pc, #236]	; (31c <adc_init+0x100>)
     22e:	4a3c      	ldr	r2, [pc, #240]	; (320 <adc_init+0x104>)
     230:	805a      	strh	r2, [r3, #2]
    GCLK_CLKCTRL_GEN_GCLK0);

    // =================================== //

    // Enable the ADC
    ADC->CTRLA.bit.ENABLE = 1;
     232:	4a3c      	ldr	r2, [pc, #240]	; (324 <adc_init+0x108>)
     234:	7813      	ldrb	r3, [r2, #0]
     236:	2102      	movs	r1, #2
     238:	430b      	orrs	r3, r1
     23a:	7013      	strb	r3, [r2, #0]
    while (ADC->STATUS.bit.SYNCBUSY);
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	4b39      	ldr	r3, [pc, #228]	; (324 <adc_init+0x108>)
     240:	7e5b      	ldrb	r3, [r3, #25]
     242:	061b      	lsls	r3, r3, #24
     244:	0fdb      	lsrs	r3, r3, #31
     246:	b2db      	uxtb	r3, r3
     248:	2b00      	cmp	r3, #0
     24a:	d1f8      	bne.n	23e <adc_init+0x22>

    // Set the reference
    ADC->REFCTRL.bit.REFSEL = 0x2;
     24c:	4a35      	ldr	r2, [pc, #212]	; (324 <adc_init+0x108>)
     24e:	7853      	ldrb	r3, [r2, #1]
     250:	210f      	movs	r1, #15
     252:	438b      	bics	r3, r1
     254:	1c19      	adds	r1, r3, #0
     256:	2302      	movs	r3, #2
     258:	430b      	orrs	r3, r1
     25a:	7053      	strb	r3, [r2, #1]
    while (ADC->STATUS.bit.SYNCBUSY);
     25c:	46c0      	nop			; (mov r8, r8)
     25e:	4b31      	ldr	r3, [pc, #196]	; (324 <adc_init+0x108>)
     260:	7e5b      	ldrb	r3, [r3, #25]
     262:	061b      	lsls	r3, r3, #24
     264:	0fdb      	lsrs	r3, r3, #31
     266:	b2db      	uxtb	r3, r3
     268:	2b00      	cmp	r3, #0
     26a:	d1f8      	bne.n	25e <adc_init+0x42>

    // Read INTVCC1 raw (no scaling)
    ADC->INPUTCTRL.bit.GAIN = 0x0;
     26c:	4a2d      	ldr	r2, [pc, #180]	; (324 <adc_init+0x108>)
     26e:	6913      	ldr	r3, [r2, #16]
     270:	492d      	ldr	r1, [pc, #180]	; (328 <adc_init+0x10c>)
     272:	400b      	ands	r3, r1
     274:	6113      	str	r3, [r2, #16]
    while (ADC->STATUS.bit.SYNCBUSY);
     276:	46c0      	nop			; (mov r8, r8)
     278:	4b2a      	ldr	r3, [pc, #168]	; (324 <adc_init+0x108>)
     27a:	7e5b      	ldrb	r3, [r3, #25]
     27c:	061b      	lsls	r3, r3, #24
     27e:	0fdb      	lsrs	r3, r3, #31
     280:	b2db      	uxtb	r3, r3
     282:	2b00      	cmp	r3, #0
     284:	d1f8      	bne.n	278 <adc_init+0x5c>

    // Pre-scalar 16, 12-bit resolution
    ADC->CTRLB.reg = (ADC_CTRLB_PRESCALER_DIV16 | ADC_CTRLB_RESSEL_12BIT);
     286:	4b27      	ldr	r3, [pc, #156]	; (324 <adc_init+0x108>)
     288:	2280      	movs	r2, #128	; 0x80
     28a:	0092      	lsls	r2, r2, #2
     28c:	809a      	strh	r2, [r3, #4]
    while (ADC->STATUS.bit.SYNCBUSY);
     28e:	46c0      	nop			; (mov r8, r8)
     290:	4b24      	ldr	r3, [pc, #144]	; (324 <adc_init+0x108>)
     292:	7e5b      	ldrb	r3, [r3, #25]
     294:	061b      	lsls	r3, r3, #24
     296:	0fdb      	lsrs	r3, r3, #31
     298:	b2db      	uxtb	r3, r3
     29a:	2b00      	cmp	r3, #0
     29c:	d1f8      	bne.n	290 <adc_init+0x74>

    // Set negative input to ground
    ADC->INPUTCTRL.bit.MUXNEG = 0x18;
     29e:	4a21      	ldr	r2, [pc, #132]	; (324 <adc_init+0x108>)
     2a0:	6913      	ldr	r3, [r2, #16]
     2a2:	4922      	ldr	r1, [pc, #136]	; (32c <adc_init+0x110>)
     2a4:	400b      	ands	r3, r1
     2a6:	21c0      	movs	r1, #192	; 0xc0
     2a8:	0149      	lsls	r1, r1, #5
     2aa:	430b      	orrs	r3, r1
     2ac:	6113      	str	r3, [r2, #16]
    while (ADC->STATUS.bit.SYNCBUSY);
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	4b1c      	ldr	r3, [pc, #112]	; (324 <adc_init+0x108>)
     2b2:	7e5b      	ldrb	r3, [r3, #25]
     2b4:	061b      	lsls	r3, r3, #24
     2b6:	0fdb      	lsrs	r3, r3, #31
     2b8:	b2db      	uxtb	r3, r3
     2ba:	2b00      	cmp	r3, #0
     2bc:	d1f8      	bne.n	2b0 <adc_init+0x94>

    // Enable averaging 4 samples
    ADC->AVGCTRL.reg = (ADC_AVGCTRL_SAMPLENUM_4_Val |
     2be:	4b19      	ldr	r3, [pc, #100]	; (324 <adc_init+0x108>)
     2c0:	2222      	movs	r2, #34	; 0x22
     2c2:	709a      	strb	r2, [r3, #2]
        ADC_AVGCTRL_ADJRES(2));
    while (ADC->STATUS.bit.SYNCBUSY);
     2c4:	46c0      	nop			; (mov r8, r8)
     2c6:	4b17      	ldr	r3, [pc, #92]	; (324 <adc_init+0x108>)
     2c8:	7e5b      	ldrb	r3, [r3, #25]
     2ca:	061b      	lsls	r3, r3, #24
     2cc:	0fdb      	lsrs	r3, r3, #31
     2ce:	b2db      	uxtb	r3, r3
     2d0:	2b00      	cmp	r3, #0
     2d2:	d1f8      	bne.n	2c6 <adc_init+0xaa>

    // =================================== //

    // Enable interrupt for result ready
    ADC->INTENSET.bit.RESRDY = 1;
     2d4:	4a13      	ldr	r2, [pc, #76]	; (324 <adc_init+0x108>)
     2d6:	7dd3      	ldrb	r3, [r2, #23]
     2d8:	2101      	movs	r1, #1
     2da:	430b      	orrs	r3, r1
     2dc:	75d3      	strb	r3, [r2, #23]
    while (ADC->STATUS.bit.SYNCBUSY);
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	4b10      	ldr	r3, [pc, #64]	; (324 <adc_init+0x108>)
     2e2:	7e5b      	ldrb	r3, [r3, #25]
     2e4:	061b      	lsls	r3, r3, #24
     2e6:	0fdb      	lsrs	r3, r3, #31
     2e8:	b2db      	uxtb	r3, r3
     2ea:	2b00      	cmp	r3, #0
     2ec:	d1f8      	bne.n	2e0 <adc_init+0xc4>

    // Enable ADC interrupts
    NVIC_SetPriority(ADC_IRQn, 3);
     2ee:	2103      	movs	r1, #3
     2f0:	2017      	movs	r0, #23
     2f2:	4b0f      	ldr	r3, [pc, #60]	; (330 <adc_init+0x114>)
     2f4:	4798      	blx	r3
    NVIC_EnableIRQ(ADC_IRQn);
     2f6:	2017      	movs	r0, #23
     2f8:	4b0e      	ldr	r3, [pc, #56]	; (334 <adc_init+0x118>)
     2fa:	4798      	blx	r3

    // Prep ADC
    _adc_read_state = ADC_READ_1;
     2fc:	4b0e      	ldr	r3, [pc, #56]	; (338 <adc_init+0x11c>)
     2fe:	2201      	movs	r2, #1
     300:	701a      	strb	r2, [r3, #0]
    _adc_callback = _adc_default = _adc_default_func;
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <adc_init+0x120>)
     304:	4a0e      	ldr	r2, [pc, #56]	; (340 <adc_init+0x124>)
     306:	601a      	str	r2, [r3, #0]
     308:	4b0c      	ldr	r3, [pc, #48]	; (33c <adc_init+0x120>)
     30a:	681a      	ldr	r2, [r3, #0]
     30c:	4b0d      	ldr	r3, [pc, #52]	; (344 <adc_init+0x128>)
     30e:	601a      	str	r2, [r3, #0]
}
     310:	46c0      	nop			; (mov r8, r8)
     312:	46bd      	mov	sp, r7
     314:	bd80      	pop	{r7, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	40000400 	.word	0x40000400
     31c:	40000c00 	.word	0x40000c00
     320:	0000401e 	.word	0x0000401e
     324:	42004000 	.word	0x42004000
     328:	f0ffffff 	.word	0xf0ffffff
     32c:	ffffe0ff 	.word	0xffffe0ff
     330:	00000141 	.word	0x00000141
     334:	00000115 	.word	0x00000115
     338:	20000478 	.word	0x20000478
     33c:	2000047c 	.word	0x2000047c
     340:	0000043d 	.word	0x0000043d
     344:	20000474 	.word	0x20000474

00000348 <adc_stop>:

//==============================================================================
void adc_stop() {
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
    // Disable the ADC
    ADC->CTRLA.bit.ENABLE = 0;
     34c:	4a0a      	ldr	r2, [pc, #40]	; (378 <adc_stop+0x30>)
     34e:	7813      	ldrb	r3, [r2, #0]
     350:	2102      	movs	r1, #2
     352:	438b      	bics	r3, r1
     354:	7013      	strb	r3, [r2, #0]
    while (ADC->STATUS.bit.SYNCBUSY);
     356:	46c0      	nop			; (mov r8, r8)
     358:	4b07      	ldr	r3, [pc, #28]	; (378 <adc_stop+0x30>)
     35a:	7e5b      	ldrb	r3, [r3, #25]
     35c:	061b      	lsls	r3, r3, #24
     35e:	0fdb      	lsrs	r3, r3, #31
     360:	b2db      	uxtb	r3, r3
     362:	2b00      	cmp	r3, #0
     364:	d1f8      	bne.n	358 <adc_stop+0x10>

    // Unregister the callback if one present
    adc_unregister(_adc_callback);
     366:	4b05      	ldr	r3, [pc, #20]	; (37c <adc_stop+0x34>)
     368:	681b      	ldr	r3, [r3, #0]
     36a:	0018      	movs	r0, r3
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <adc_stop+0x38>)
     36e:	4798      	blx	r3
}
     370:	46c0      	nop			; (mov r8, r8)
     372:	46bd      	mov	sp, r7
     374:	bd80      	pop	{r7, pc}
     376:	46c0      	nop			; (mov r8, r8)
     378:	42004000 	.word	0x42004000
     37c:	20000474 	.word	0x20000474
     380:	00000411 	.word	0x00000411

00000384 <adc_read>:

//==============================================================================
void adc_read(uint8_t pin) {
     384:	b580      	push	{r7, lr}
     386:	b082      	sub	sp, #8
     388:	af00      	add	r7, sp, #0
     38a:	0002      	movs	r2, r0
     38c:	1dfb      	adds	r3, r7, #7
     38e:	701a      	strb	r2, [r3, #0]
    // Set positive input to source
    ADC->INPUTCTRL.bit.MUXPOS = pin;
     390:	4a12      	ldr	r2, [pc, #72]	; (3dc <adc_read+0x58>)
     392:	1dfb      	adds	r3, r7, #7
     394:	781b      	ldrb	r3, [r3, #0]
     396:	211f      	movs	r1, #31
     398:	400b      	ands	r3, r1
     39a:	b2d9      	uxtb	r1, r3
     39c:	6913      	ldr	r3, [r2, #16]
     39e:	201f      	movs	r0, #31
     3a0:	4001      	ands	r1, r0
     3a2:	201f      	movs	r0, #31
     3a4:	4383      	bics	r3, r0
     3a6:	430b      	orrs	r3, r1
     3a8:	6113      	str	r3, [r2, #16]
    while (ADC->STATUS.bit.SYNCBUSY);
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	4b0b      	ldr	r3, [pc, #44]	; (3dc <adc_read+0x58>)
     3ae:	7e5b      	ldrb	r3, [r3, #25]
     3b0:	061b      	lsls	r3, r3, #24
     3b2:	0fdb      	lsrs	r3, r3, #31
     3b4:	b2db      	uxtb	r3, r3
     3b6:	2b00      	cmp	r3, #0
     3b8:	d1f8      	bne.n	3ac <adc_read+0x28>

    // Start conversion
    ADC->SWTRIG.bit.START = 1;
     3ba:	4a08      	ldr	r2, [pc, #32]	; (3dc <adc_read+0x58>)
     3bc:	7b13      	ldrb	r3, [r2, #12]
     3be:	2102      	movs	r1, #2
     3c0:	430b      	orrs	r3, r1
     3c2:	7313      	strb	r3, [r2, #12]
    while (ADC->STATUS.bit.SYNCBUSY);
     3c4:	46c0      	nop			; (mov r8, r8)
     3c6:	4b05      	ldr	r3, [pc, #20]	; (3dc <adc_read+0x58>)
     3c8:	7e5b      	ldrb	r3, [r3, #25]
     3ca:	061b      	lsls	r3, r3, #24
     3cc:	0fdb      	lsrs	r3, r3, #31
     3ce:	b2db      	uxtb	r3, r3
     3d0:	2b00      	cmp	r3, #0
     3d2:	d1f8      	bne.n	3c6 <adc_read+0x42>
}
     3d4:	46c0      	nop			; (mov r8, r8)
     3d6:	46bd      	mov	sp, r7
     3d8:	b002      	add	sp, #8
     3da:	bd80      	pop	{r7, pc}
     3dc:	42004000 	.word	0x42004000

000003e0 <adc_register>:

//==============================================================================
uint8_t adc_register(adc_callback_t callback) {
     3e0:	b580      	push	{r7, lr}
     3e2:	b082      	sub	sp, #8
     3e4:	af00      	add	r7, sp, #0
     3e6:	6078      	str	r0, [r7, #4]
    if (_adc_callback == _adc_default) {
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <adc_register+0x28>)
     3ea:	681a      	ldr	r2, [r3, #0]
     3ec:	4b07      	ldr	r3, [pc, #28]	; (40c <adc_register+0x2c>)
     3ee:	681b      	ldr	r3, [r3, #0]
     3f0:	429a      	cmp	r2, r3
     3f2:	d104      	bne.n	3fe <adc_register+0x1e>
        _adc_callback = callback;
     3f4:	4b04      	ldr	r3, [pc, #16]	; (408 <adc_register+0x28>)
     3f6:	687a      	ldr	r2, [r7, #4]
     3f8:	601a      	str	r2, [r3, #0]
        return 1;
     3fa:	2301      	movs	r3, #1
     3fc:	e000      	b.n	400 <adc_register+0x20>
    }
    return 0;
     3fe:	2300      	movs	r3, #0
}
     400:	0018      	movs	r0, r3
     402:	46bd      	mov	sp, r7
     404:	b002      	add	sp, #8
     406:	bd80      	pop	{r7, pc}
     408:	20000474 	.word	0x20000474
     40c:	2000047c 	.word	0x2000047c

00000410 <adc_unregister>:

//==============================================================================
void adc_unregister(adc_callback_t callback) {
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	6078      	str	r0, [r7, #4]
    if (_adc_callback == callback) {
     418:	4b06      	ldr	r3, [pc, #24]	; (434 <adc_unregister+0x24>)
     41a:	681a      	ldr	r2, [r3, #0]
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	429a      	cmp	r2, r3
     420:	d103      	bne.n	42a <adc_unregister+0x1a>
        _adc_callback = _adc_default;
     422:	4b05      	ldr	r3, [pc, #20]	; (438 <adc_unregister+0x28>)
     424:	681a      	ldr	r2, [r3, #0]
     426:	4b03      	ldr	r3, [pc, #12]	; (434 <adc_unregister+0x24>)
     428:	601a      	str	r2, [r3, #0]
    }
}
     42a:	46c0      	nop			; (mov r8, r8)
     42c:	46bd      	mov	sp, r7
     42e:	b002      	add	sp, #8
     430:	bd80      	pop	{r7, pc}
     432:	46c0      	nop			; (mov r8, r8)
     434:	20000474 	.word	0x20000474
     438:	2000047c 	.word	0x2000047c

0000043c <_adc_default_func>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _adc_default_func(uint16_t data) {
     43c:	b580      	push	{r7, lr}
     43e:	b082      	sub	sp, #8
     440:	af00      	add	r7, sp, #0
     442:	0002      	movs	r2, r0
     444:	1dbb      	adds	r3, r7, #6
     446:	801a      	strh	r2, [r3, #0]
    return 0;
     448:	2300      	movs	r3, #0
}
     44a:	0018      	movs	r0, r3
     44c:	46bd      	mov	sp, r7
     44e:	b002      	add	sp, #8
     450:	bd80      	pop	{r7, pc}
	...

00000454 <ADC_Handler>:
//     | .__/ |  \  .__/
//
//------------------------------------------------------------------------------

//==============================================================================
void ADC_Handler() {
     454:	b580      	push	{r7, lr}
     456:	af00      	add	r7, sp, #0
    // First read state (will be thrown out)
    if (_adc_read_state == ADC_READ_1)
     458:	4b2d      	ldr	r3, [pc, #180]	; (510 <ADC_Handler+0xbc>)
     45a:	781b      	ldrb	r3, [r3, #0]
     45c:	2b01      	cmp	r3, #1
     45e:	d122      	bne.n	4a6 <ADC_Handler+0x52>
    {
        // Read the value to clear the ADC flag
        while (ADC->STATUS.bit.SYNCBUSY);
     460:	46c0      	nop			; (mov r8, r8)
     462:	4b2c      	ldr	r3, [pc, #176]	; (514 <ADC_Handler+0xc0>)
     464:	7e5b      	ldrb	r3, [r3, #25]
     466:	061b      	lsls	r3, r3, #24
     468:	0fdb      	lsrs	r3, r3, #31
     46a:	b2db      	uxtb	r3, r3
     46c:	2b00      	cmp	r3, #0
     46e:	d1f8      	bne.n	462 <ADC_Handler+0xe>
        ADC->RESULT.reg;
     470:	4b28      	ldr	r3, [pc, #160]	; (514 <ADC_Handler+0xc0>)
     472:	8b5b      	ldrh	r3, [r3, #26]
        while (ADC->STATUS.bit.SYNCBUSY);
     474:	46c0      	nop			; (mov r8, r8)
     476:	4b27      	ldr	r3, [pc, #156]	; (514 <ADC_Handler+0xc0>)
     478:	7e5b      	ldrb	r3, [r3, #25]
     47a:	061b      	lsls	r3, r3, #24
     47c:	0fdb      	lsrs	r3, r3, #31
     47e:	b2db      	uxtb	r3, r3
     480:	2b00      	cmp	r3, #0
     482:	d1f8      	bne.n	476 <ADC_Handler+0x22>

        // Start conversion
        ADC->SWTRIG.bit.START = 1;
     484:	4a23      	ldr	r2, [pc, #140]	; (514 <ADC_Handler+0xc0>)
     486:	7b13      	ldrb	r3, [r2, #12]
     488:	2102      	movs	r1, #2
     48a:	430b      	orrs	r3, r1
     48c:	7313      	strb	r3, [r2, #12]
        while (ADC->STATUS.bit.SYNCBUSY);
     48e:	46c0      	nop			; (mov r8, r8)
     490:	4b20      	ldr	r3, [pc, #128]	; (514 <ADC_Handler+0xc0>)
     492:	7e5b      	ldrb	r3, [r3, #25]
     494:	061b      	lsls	r3, r3, #24
     496:	0fdb      	lsrs	r3, r3, #31
     498:	b2db      	uxtb	r3, r3
     49a:	2b00      	cmp	r3, #0
     49c:	d1f8      	bne.n	490 <ADC_Handler+0x3c>

        // Update ADC status
        _adc_read_state = ADC_READ_2;
     49e:	4b1c      	ldr	r3, [pc, #112]	; (510 <ADC_Handler+0xbc>)
     4a0:	2202      	movs	r2, #2
     4a2:	701a      	strb	r2, [r3, #0]
        while (ADC->STATUS.bit.SYNCBUSY);

        // Reset ADC status
        _adc_read_state = ADC_READ_1;
    }
     4a4:	e030      	b.n	508 <ADC_Handler+0xb4>
    else if (_adc_read_state == ADC_READ_2)
     4a6:	4b1a      	ldr	r3, [pc, #104]	; (510 <ADC_Handler+0xbc>)
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	2b02      	cmp	r3, #2
     4ac:	d12c      	bne.n	508 <ADC_Handler+0xb4>
        while (ADC->STATUS.bit.SYNCBUSY);
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	4b18      	ldr	r3, [pc, #96]	; (514 <ADC_Handler+0xc0>)
     4b2:	7e5b      	ldrb	r3, [r3, #25]
     4b4:	061b      	lsls	r3, r3, #24
     4b6:	0fdb      	lsrs	r3, r3, #31
     4b8:	b2db      	uxtb	r3, r3
     4ba:	2b00      	cmp	r3, #0
     4bc:	d1f8      	bne.n	4b0 <ADC_Handler+0x5c>
        if (_adc_callback(ADC->RESULT.reg)) {
     4be:	4b16      	ldr	r3, [pc, #88]	; (518 <ADC_Handler+0xc4>)
     4c0:	681b      	ldr	r3, [r3, #0]
     4c2:	4a14      	ldr	r2, [pc, #80]	; (514 <ADC_Handler+0xc0>)
     4c4:	8b52      	ldrh	r2, [r2, #26]
     4c6:	b292      	uxth	r2, r2
     4c8:	0010      	movs	r0, r2
     4ca:	4798      	blx	r3
     4cc:	1e03      	subs	r3, r0, #0
     4ce:	d004      	beq.n	4da <ADC_Handler+0x86>
            adc_unregister(_adc_callback);
     4d0:	4b11      	ldr	r3, [pc, #68]	; (518 <ADC_Handler+0xc4>)
     4d2:	681b      	ldr	r3, [r3, #0]
     4d4:	0018      	movs	r0, r3
     4d6:	4b11      	ldr	r3, [pc, #68]	; (51c <ADC_Handler+0xc8>)
     4d8:	4798      	blx	r3
        while (ADC->STATUS.bit.SYNCBUSY);
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	4b0d      	ldr	r3, [pc, #52]	; (514 <ADC_Handler+0xc0>)
     4de:	7e5b      	ldrb	r3, [r3, #25]
     4e0:	061b      	lsls	r3, r3, #24
     4e2:	0fdb      	lsrs	r3, r3, #31
     4e4:	b2db      	uxtb	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d1f8      	bne.n	4dc <ADC_Handler+0x88>
        ADC->SWTRIG.bit.FLUSH;
     4ea:	4b0a      	ldr	r3, [pc, #40]	; (514 <ADC_Handler+0xc0>)
     4ec:	7b1b      	ldrb	r3, [r3, #12]
     4ee:	07db      	lsls	r3, r3, #31
     4f0:	0fdb      	lsrs	r3, r3, #31
        while (ADC->STATUS.bit.SYNCBUSY);
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	4b07      	ldr	r3, [pc, #28]	; (514 <ADC_Handler+0xc0>)
     4f6:	7e5b      	ldrb	r3, [r3, #25]
     4f8:	061b      	lsls	r3, r3, #24
     4fa:	0fdb      	lsrs	r3, r3, #31
     4fc:	b2db      	uxtb	r3, r3
     4fe:	2b00      	cmp	r3, #0
     500:	d1f8      	bne.n	4f4 <ADC_Handler+0xa0>
        _adc_read_state = ADC_READ_1;
     502:	4b03      	ldr	r3, [pc, #12]	; (510 <ADC_Handler+0xbc>)
     504:	2201      	movs	r2, #1
     506:	701a      	strb	r2, [r3, #0]
     508:	46c0      	nop			; (mov r8, r8)
     50a:	46bd      	mov	sp, r7
     50c:	bd80      	pop	{r7, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	20000478 	.word	0x20000478
     514:	42004000 	.word	0x42004000
     518:	20000474 	.word	0x20000474
     51c:	00000411 	.word	0x00000411

00000520 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     520:	b580      	push	{r7, lr}
     522:	b082      	sub	sp, #8
     524:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     526:	4b2f      	ldr	r3, [pc, #188]	; (5e4 <Reset_Handler+0xc4>)
     528:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     52a:	4b2f      	ldr	r3, [pc, #188]	; (5e8 <Reset_Handler+0xc8>)
     52c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     52e:	687a      	ldr	r2, [r7, #4]
     530:	683b      	ldr	r3, [r7, #0]
     532:	429a      	cmp	r2, r3
     534:	d00c      	beq.n	550 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     536:	e007      	b.n	548 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     538:	683b      	ldr	r3, [r7, #0]
     53a:	1d1a      	adds	r2, r3, #4
     53c:	603a      	str	r2, [r7, #0]
     53e:	687a      	ldr	r2, [r7, #4]
     540:	1d11      	adds	r1, r2, #4
     542:	6079      	str	r1, [r7, #4]
     544:	6812      	ldr	r2, [r2, #0]
     546:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     548:	683a      	ldr	r2, [r7, #0]
     54a:	4b28      	ldr	r3, [pc, #160]	; (5ec <Reset_Handler+0xcc>)
     54c:	429a      	cmp	r2, r3
     54e:	d3f3      	bcc.n	538 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     550:	4b27      	ldr	r3, [pc, #156]	; (5f0 <Reset_Handler+0xd0>)
     552:	603b      	str	r3, [r7, #0]
     554:	e004      	b.n	560 <Reset_Handler+0x40>
                *pDest++ = 0;
     556:	683b      	ldr	r3, [r7, #0]
     558:	1d1a      	adds	r2, r3, #4
     55a:	603a      	str	r2, [r7, #0]
     55c:	2200      	movs	r2, #0
     55e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     560:	683a      	ldr	r2, [r7, #0]
     562:	4b24      	ldr	r3, [pc, #144]	; (5f4 <Reset_Handler+0xd4>)
     564:	429a      	cmp	r2, r3
     566:	d3f6      	bcc.n	556 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     568:	4b23      	ldr	r3, [pc, #140]	; (5f8 <Reset_Handler+0xd8>)
     56a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     56c:	4b23      	ldr	r3, [pc, #140]	; (5fc <Reset_Handler+0xdc>)
     56e:	687a      	ldr	r2, [r7, #4]
     570:	21ff      	movs	r1, #255	; 0xff
     572:	438a      	bics	r2, r1
     574:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     576:	4a22      	ldr	r2, [pc, #136]	; (600 <Reset_Handler+0xe0>)
     578:	2390      	movs	r3, #144	; 0x90
     57a:	005b      	lsls	r3, r3, #1
     57c:	2102      	movs	r1, #2
     57e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     580:	4a20      	ldr	r2, [pc, #128]	; (604 <Reset_Handler+0xe4>)
     582:	78d3      	ldrb	r3, [r2, #3]
     584:	2103      	movs	r1, #3
     586:	438b      	bics	r3, r1
     588:	1c19      	adds	r1, r3, #0
     58a:	2302      	movs	r3, #2
     58c:	430b      	orrs	r3, r1
     58e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     590:	4a1c      	ldr	r2, [pc, #112]	; (604 <Reset_Handler+0xe4>)
     592:	78d3      	ldrb	r3, [r2, #3]
     594:	210c      	movs	r1, #12
     596:	438b      	bics	r3, r1
     598:	1c19      	adds	r1, r3, #0
     59a:	2308      	movs	r3, #8
     59c:	430b      	orrs	r3, r1
     59e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     5a0:	4a19      	ldr	r2, [pc, #100]	; (608 <Reset_Handler+0xe8>)
     5a2:	7b93      	ldrb	r3, [r2, #14]
     5a4:	2130      	movs	r1, #48	; 0x30
     5a6:	438b      	bics	r3, r1
     5a8:	1c19      	adds	r1, r3, #0
     5aa:	2320      	movs	r3, #32
     5ac:	430b      	orrs	r3, r1
     5ae:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     5b0:	4a15      	ldr	r2, [pc, #84]	; (608 <Reset_Handler+0xe8>)
     5b2:	7b93      	ldrb	r3, [r2, #14]
     5b4:	210c      	movs	r1, #12
     5b6:	438b      	bics	r3, r1
     5b8:	1c19      	adds	r1, r3, #0
     5ba:	2308      	movs	r3, #8
     5bc:	430b      	orrs	r3, r1
     5be:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     5c0:	4a11      	ldr	r2, [pc, #68]	; (608 <Reset_Handler+0xe8>)
     5c2:	7b93      	ldrb	r3, [r2, #14]
     5c4:	2103      	movs	r1, #3
     5c6:	438b      	bics	r3, r1
     5c8:	1c19      	adds	r1, r3, #0
     5ca:	2302      	movs	r3, #2
     5cc:	430b      	orrs	r3, r1
     5ce:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     5d0:	4a0e      	ldr	r2, [pc, #56]	; (60c <Reset_Handler+0xec>)
     5d2:	6853      	ldr	r3, [r2, #4]
     5d4:	2180      	movs	r1, #128	; 0x80
     5d6:	430b      	orrs	r3, r1
     5d8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     5da:	4b0d      	ldr	r3, [pc, #52]	; (610 <Reset_Handler+0xf0>)
     5dc:	4798      	blx	r3

        /* Branch to main function */
        main();
     5de:	4b0d      	ldr	r3, [pc, #52]	; (614 <Reset_Handler+0xf4>)
     5e0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     5e2:	e7fe      	b.n	5e2 <Reset_Handler+0xc2>
     5e4:	00006008 	.word	0x00006008
     5e8:	20000000 	.word	0x20000000
     5ec:	2000043c 	.word	0x2000043c
     5f0:	20000440 	.word	0x20000440
     5f4:	2000056c 	.word	0x2000056c
     5f8:	00000000 	.word	0x00000000
     5fc:	e000ed00 	.word	0xe000ed00
     600:	41007000 	.word	0x41007000
     604:	41005000 	.word	0x41005000
     608:	41004800 	.word	0x41004800
     60c:	41004000 	.word	0x41004000
     610:	00005ba1 	.word	0x00005ba1
     614:	000016f9 	.word	0x000016f9

00000618 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     618:	b580      	push	{r7, lr}
     61a:	af00      	add	r7, sp, #0
        while (1) {
     61c:	e7fe      	b.n	61c <Dummy_Handler+0x4>
	...

00000620 <SystemInit>:

#define MASTER_CLOCK_FREQ (48000000ul)
#define MAIN_OSC_FREQ (32768ul)

void SystemInit( void )
{
     620:	b580      	push	{r7, lr}
     622:	b082      	sub	sp, #8
     624:	af00      	add	r7, sp, #0
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     626:	4a77      	ldr	r2, [pc, #476]	; (804 <SystemInit+0x1e4>)
     628:	6853      	ldr	r3, [r2, #4]
     62a:	211e      	movs	r1, #30
     62c:	438b      	bics	r3, r1
     62e:	2102      	movs	r1, #2
     630:	430b      	orrs	r3, r1
     632:	6053      	str	r3, [r2, #4]

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     634:	4b74      	ldr	r3, [pc, #464]	; (808 <SystemInit+0x1e8>)
     636:	4a74      	ldr	r2, [pc, #464]	; (808 <SystemInit+0x1e8>)
     638:	6992      	ldr	r2, [r2, #24]
     63a:	2108      	movs	r1, #8
     63c:	430a      	orrs	r2, r1
     63e:	619a      	str	r2, [r3, #24]

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     640:	4b72      	ldr	r3, [pc, #456]	; (80c <SystemInit+0x1ec>)
     642:	4a73      	ldr	r2, [pc, #460]	; (810 <SystemInit+0x1f0>)
     644:	829a      	strh	r2, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     646:	4a71      	ldr	r2, [pc, #452]	; (80c <SystemInit+0x1ec>)
     648:	8a93      	ldrh	r3, [r2, #20]
     64a:	2102      	movs	r1, #2
     64c:	430b      	orrs	r3, r1
     64e:	8293      	strh	r3, [r2, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     650:	46c0      	nop			; (mov r8, r8)
     652:	4b6e      	ldr	r3, [pc, #440]	; (80c <SystemInit+0x1ec>)
     654:	68db      	ldr	r3, [r3, #12]
     656:	2202      	movs	r2, #2
     658:	4013      	ands	r3, r2
     65a:	d0fa      	beq.n	652 <SystemInit+0x32>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     65c:	4b6d      	ldr	r3, [pc, #436]	; (814 <SystemInit+0x1f4>)
     65e:	2201      	movs	r2, #1
     660:	701a      	strb	r2, [r3, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     662:	46c0      	nop			; (mov r8, r8)
     664:	4b6b      	ldr	r3, [pc, #428]	; (814 <SystemInit+0x1f4>)
     666:	781b      	ldrb	r3, [r3, #0]
     668:	b2db      	uxtb	r3, r3
     66a:	001a      	movs	r2, r3
     66c:	2301      	movs	r3, #1
     66e:	4013      	ands	r3, r2
     670:	d005      	beq.n	67e <SystemInit+0x5e>
     672:	4b68      	ldr	r3, [pc, #416]	; (814 <SystemInit+0x1f4>)
     674:	785b      	ldrb	r3, [r3, #1]
     676:	b2db      	uxtb	r3, r3
     678:	b25b      	sxtb	r3, r3
     67a:	2b00      	cmp	r3, #0
     67c:	dbf2      	blt.n	664 <SystemInit+0x44>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     67e:	4b65      	ldr	r3, [pc, #404]	; (814 <SystemInit+0x1f4>)
     680:	2201      	movs	r2, #1
     682:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     684:	46c0      	nop			; (mov r8, r8)
     686:	4b63      	ldr	r3, [pc, #396]	; (814 <SystemInit+0x1f4>)
     688:	785b      	ldrb	r3, [r3, #1]
     68a:	b2db      	uxtb	r3, r3
     68c:	b25b      	sxtb	r3, r3
     68e:	2b00      	cmp	r3, #0
     690:	dbf9      	blt.n	686 <SystemInit+0x66>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) | // Generic Clock Generator 1
     692:	4b60      	ldr	r3, [pc, #384]	; (814 <SystemInit+0x1f4>)
     694:	4a60      	ldr	r2, [pc, #384]	; (818 <SystemInit+0x1f8>)
     696:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     698:	46c0      	nop			; (mov r8, r8)
     69a:	4b5e      	ldr	r3, [pc, #376]	; (814 <SystemInit+0x1f4>)
     69c:	785b      	ldrb	r3, [r3, #1]
     69e:	b2db      	uxtb	r3, r3
     6a0:	b25b      	sxtb	r3, r3
     6a2:	2b00      	cmp	r3, #0
     6a4:	dbf9      	blt.n	69a <SystemInit+0x7a>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     6a6:	4b5b      	ldr	r3, [pc, #364]	; (814 <SystemInit+0x1f4>)
     6a8:	2282      	movs	r2, #130	; 0x82
     6aa:	01d2      	lsls	r2, r2, #7
     6ac:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	4b58      	ldr	r3, [pc, #352]	; (814 <SystemInit+0x1f4>)
     6b2:	785b      	ldrb	r3, [r3, #1]
     6b4:	b2db      	uxtb	r3, r3
     6b6:	b25b      	sxtb	r3, r3
     6b8:	2b00      	cmp	r3, #0
     6ba:	dbf9      	blt.n	6b0 <SystemInit+0x90>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0 ;
     6bc:	4a53      	ldr	r2, [pc, #332]	; (80c <SystemInit+0x1ec>)
     6be:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     6c0:	2180      	movs	r1, #128	; 0x80
     6c2:	438b      	bics	r3, r1
     6c4:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	4b50      	ldr	r3, [pc, #320]	; (80c <SystemInit+0x1ec>)
     6ca:	68db      	ldr	r3, [r3, #12]
     6cc:	2210      	movs	r2, #16
     6ce:	4013      	ands	r3, r2
     6d0:	d0fa      	beq.n	6c8 <SystemInit+0xa8>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     6d2:	4b4e      	ldr	r3, [pc, #312]	; (80c <SystemInit+0x1ec>)
     6d4:	4a51      	ldr	r2, [pc, #324]	; (81c <SystemInit+0x1fc>)
     6d6:	62da      	str	r2, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (MASTER_CLOCK_FREQ/MAIN_OSC_FREQ) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     6d8:	46c0      	nop			; (mov r8, r8)
     6da:	4b4c      	ldr	r3, [pc, #304]	; (80c <SystemInit+0x1ec>)
     6dc:	68db      	ldr	r3, [r3, #12]
     6de:	2210      	movs	r2, #16
     6e0:	4013      	ands	r3, r2
     6e2:	d0fa      	beq.n	6da <SystemInit+0xba>
  {
    /* Wait for synchronization */
  }

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     6e4:	4a49      	ldr	r2, [pc, #292]	; (80c <SystemInit+0x1ec>)
     6e6:	4b49      	ldr	r3, [pc, #292]	; (80c <SystemInit+0x1ec>)
     6e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     6ea:	b29b      	uxth	r3, r3
     6ec:	494c      	ldr	r1, [pc, #304]	; (820 <SystemInit+0x200>)
     6ee:	430b      	orrs	r3, r1
     6f0:	b29b      	uxth	r3, r3
     6f2:	8493      	strh	r3, [r2, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     6f4:	46c0      	nop			; (mov r8, r8)
     6f6:	4b45      	ldr	r3, [pc, #276]	; (80c <SystemInit+0x1ec>)
     6f8:	68db      	ldr	r3, [r3, #12]
     6fa:	2210      	movs	r2, #16
     6fc:	4013      	ands	r3, r2
     6fe:	d0fa      	beq.n	6f6 <SystemInit+0xd6>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     700:	4a42      	ldr	r2, [pc, #264]	; (80c <SystemInit+0x1ec>)
     702:	4b42      	ldr	r3, [pc, #264]	; (80c <SystemInit+0x1ec>)
     704:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     706:	b29b      	uxth	r3, r3
     708:	2102      	movs	r1, #2
     70a:	430b      	orrs	r3, r1
     70c:	b29b      	uxth	r3, r3
     70e:	8493      	strh	r3, [r2, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     710:	46c0      	nop			; (mov r8, r8)
     712:	4b3e      	ldr	r3, [pc, #248]	; (80c <SystemInit+0x1ec>)
     714:	68db      	ldr	r3, [r3, #12]
     716:	2280      	movs	r2, #128	; 0x80
     718:	4013      	ands	r3, r2
     71a:	d0fa      	beq.n	712 <SystemInit+0xf2>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     71c:	4b3b      	ldr	r3, [pc, #236]	; (80c <SystemInit+0x1ec>)
     71e:	68db      	ldr	r3, [r3, #12]
     720:	2240      	movs	r2, #64	; 0x40
     722:	4013      	ands	r3, r2
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     724:	d0f5      	beq.n	712 <SystemInit+0xf2>
  {
    /* Wait for locks flags */
  }

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     726:	46c0      	nop			; (mov r8, r8)
     728:	4b38      	ldr	r3, [pc, #224]	; (80c <SystemInit+0x1ec>)
     72a:	68db      	ldr	r3, [r3, #12]
     72c:	2210      	movs	r2, #16
     72e:	4013      	ands	r3, r2
     730:	d0fa      	beq.n	728 <SystemInit+0x108>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     732:	4b38      	ldr	r3, [pc, #224]	; (814 <SystemInit+0x1f4>)
     734:	2200      	movs	r2, #0
     736:	609a      	str	r2, [r3, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     738:	46c0      	nop			; (mov r8, r8)
     73a:	4b36      	ldr	r3, [pc, #216]	; (814 <SystemInit+0x1f4>)
     73c:	785b      	ldrb	r3, [r3, #1]
     73e:	b2db      	uxtb	r3, r3
     740:	b25b      	sxtb	r3, r3
     742:	2b00      	cmp	r3, #0
     744:	dbf9      	blt.n	73a <SystemInit+0x11a>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     746:	4b33      	ldr	r3, [pc, #204]	; (814 <SystemInit+0x1f4>)
     748:	4a36      	ldr	r2, [pc, #216]	; (824 <SystemInit+0x204>)
     74a:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     74c:	46c0      	nop			; (mov r8, r8)
     74e:	4b31      	ldr	r3, [pc, #196]	; (814 <SystemInit+0x1f4>)
     750:	785b      	ldrb	r3, [r3, #1]
     752:	b2db      	uxtb	r3, r3
     754:	b25b      	sxtb	r3, r3
     756:	2b00      	cmp	r3, #0
     758:	dbf9      	blt.n	74e <SystemInit+0x12e>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_1_Val ;
     75a:	4a2c      	ldr	r2, [pc, #176]	; (80c <SystemInit+0x1ec>)
     75c:	6a13      	ldr	r3, [r2, #32]
     75e:	4932      	ldr	r1, [pc, #200]	; (828 <SystemInit+0x208>)
     760:	400b      	ands	r3, r1
     762:	2180      	movs	r1, #128	; 0x80
     764:	0049      	lsls	r1, r1, #1
     766:	430b      	orrs	r3, r1
     768:	6213      	str	r3, [r2, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     76a:	4a28      	ldr	r2, [pc, #160]	; (80c <SystemInit+0x1ec>)
     76c:	6a13      	ldr	r3, [r2, #32]
     76e:	2180      	movs	r1, #128	; 0x80
     770:	438b      	bics	r3, r1
     772:	6213      	str	r3, [r2, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     774:	4b27      	ldr	r3, [pc, #156]	; (814 <SystemInit+0x1f4>)
     776:	2203      	movs	r2, #3
     778:	609a      	str	r2, [r3, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     77a:	4b26      	ldr	r3, [pc, #152]	; (814 <SystemInit+0x1f4>)
     77c:	4a2b      	ldr	r2, [pc, #172]	; (82c <SystemInit+0x20c>)
     77e:	605a      	str	r2, [r3, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     780:	46c0      	nop			; (mov r8, r8)
     782:	4b24      	ldr	r3, [pc, #144]	; (814 <SystemInit+0x1f4>)
     784:	785b      	ldrb	r3, [r3, #1]
     786:	b2db      	uxtb	r3, r3
     788:	b25b      	sxtb	r3, r3
     78a:	2b00      	cmp	r3, #0
     78c:	dbf9      	blt.n	782 <SystemInit+0x162>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     78e:	4b1e      	ldr	r3, [pc, #120]	; (808 <SystemInit+0x1e8>)
     790:	2200      	movs	r2, #0
     792:	721a      	strb	r2, [r3, #8]
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     794:	4b1c      	ldr	r3, [pc, #112]	; (808 <SystemInit+0x1e8>)
     796:	2200      	movs	r2, #0
     798:	725a      	strb	r2, [r3, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     79a:	4b1b      	ldr	r3, [pc, #108]	; (808 <SystemInit+0x1e8>)
     79c:	2200      	movs	r2, #0
     79e:	729a      	strb	r2, [r3, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     7a0:	4b19      	ldr	r3, [pc, #100]	; (808 <SystemInit+0x1e8>)
     7a2:	2200      	movs	r2, #0
     7a4:	72da      	strb	r2, [r3, #11]

  SystemCoreClock=MASTER_CLOCK_FREQ ;
     7a6:	4b22      	ldr	r3, [pc, #136]	; (830 <SystemInit+0x210>)
     7a8:	4a22      	ldr	r2, [pc, #136]	; (834 <SystemInit+0x214>)
     7aa:	601a      	str	r2, [r3, #0]
  /* ----------------------------------------------------------------------------------------------
   * 8) Load ADC factory calibration values
   */

  // ADC Bias Calibration
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     7ac:	4b22      	ldr	r3, [pc, #136]	; (838 <SystemInit+0x218>)
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	08db      	lsrs	r3, r3, #3
     7b2:	2207      	movs	r2, #7
     7b4:	4013      	ands	r3, r2
     7b6:	607b      	str	r3, [r7, #4]

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     7b8:	4b20      	ldr	r3, [pc, #128]	; (83c <SystemInit+0x21c>)
     7ba:	681b      	ldr	r3, [r3, #0]
     7bc:	0edb      	lsrs	r3, r3, #27
     7be:	603b      	str	r3, [r7, #0]

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     7c0:	4b1d      	ldr	r3, [pc, #116]	; (838 <SystemInit+0x218>)
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	015b      	lsls	r3, r3, #5
     7c6:	22ff      	movs	r2, #255	; 0xff
     7c8:	4013      	ands	r3, r2
     7ca:	683a      	ldr	r2, [r7, #0]
     7cc:	4313      	orrs	r3, r2
     7ce:	603b      	str	r3, [r7, #0]

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     7d0:	491b      	ldr	r1, [pc, #108]	; (840 <SystemInit+0x220>)
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	b29b      	uxth	r3, r3
     7d6:	021b      	lsls	r3, r3, #8
     7d8:	b29a      	uxth	r2, r3
     7da:	23e0      	movs	r3, #224	; 0xe0
     7dc:	00db      	lsls	r3, r3, #3
     7de:	4013      	ands	r3, r2
     7e0:	b29a      	uxth	r2, r3
     7e2:	683b      	ldr	r3, [r7, #0]
     7e4:	b29b      	uxth	r3, r3
     7e6:	20ff      	movs	r0, #255	; 0xff
     7e8:	4003      	ands	r3, r0
     7ea:	b29b      	uxth	r3, r3
     7ec:	4313      	orrs	r3, r2
     7ee:	b29b      	uxth	r3, r3
     7f0:	850b      	strh	r3, [r1, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     7f2:	4a04      	ldr	r2, [pc, #16]	; (804 <SystemInit+0x1e4>)
     7f4:	6853      	ldr	r3, [r2, #4]
     7f6:	2180      	movs	r1, #128	; 0x80
     7f8:	430b      	orrs	r3, r1
     7fa:	6053      	str	r3, [r2, #4]
}
     7fc:	46c0      	nop			; (mov r8, r8)
     7fe:	46bd      	mov	sp, r7
     800:	b002      	add	sp, #8
     802:	bd80      	pop	{r7, pc}
     804:	41004000 	.word	0x41004000
     808:	40000400 	.word	0x40000400
     80c:	40000800 	.word	0x40000800
     810:	0000060c 	.word	0x0000060c
     814:	40000c00 	.word	0x40000c00
     818:	00010501 	.word	0x00010501
     81c:	7dff05b8 	.word	0x7dff05b8
     820:	00000a04 	.word	0x00000a04
     824:	00030700 	.word	0x00030700
     828:	fffffcff 	.word	0xfffffcff
     82c:	00010603 	.word	0x00010603
     830:	20000000 	.word	0x20000000
     834:	02dc6c00 	.word	0x02dc6c00
     838:	00806024 	.word	0x00806024
     83c:	00806020 	.word	0x00806020
     840:	42004000 	.word	0x42004000

00000844 <emg_setup>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void emg_setup(uint8_t channel1, uint8_t channel2, uint8_t channel3) {
     844:	b590      	push	{r4, r7, lr}
     846:	b083      	sub	sp, #12
     848:	af00      	add	r7, sp, #0
     84a:	0004      	movs	r4, r0
     84c:	0008      	movs	r0, r1
     84e:	0011      	movs	r1, r2
     850:	1dfb      	adds	r3, r7, #7
     852:	1c22      	adds	r2, r4, #0
     854:	701a      	strb	r2, [r3, #0]
     856:	1dbb      	adds	r3, r7, #6
     858:	1c02      	adds	r2, r0, #0
     85a:	701a      	strb	r2, [r3, #0]
     85c:	1d7b      	adds	r3, r7, #5
     85e:	1c0a      	adds	r2, r1, #0
     860:	701a      	strb	r2, [r3, #0]
    // Save which channels are active
    _emg_channel_active[CHANEL_1_ADC_PIN] = channel1;
     862:	4b17      	ldr	r3, [pc, #92]	; (8c0 <emg_setup+0x7c>)
     864:	1dfa      	adds	r2, r7, #7
     866:	7812      	ldrb	r2, [r2, #0]
     868:	701a      	strb	r2, [r3, #0]
    _emg_channel_active[CHANEL_2_ADC_PIN] = channel2;
     86a:	4b15      	ldr	r3, [pc, #84]	; (8c0 <emg_setup+0x7c>)
     86c:	1dba      	adds	r2, r7, #6
     86e:	7812      	ldrb	r2, [r2, #0]
     870:	705a      	strb	r2, [r3, #1]
    _emg_channel_active[CHANEL_3_ADC_PIN] = channel3;
     872:	4b13      	ldr	r3, [pc, #76]	; (8c0 <emg_setup+0x7c>)
     874:	1d7a      	adds	r2, r7, #5
     876:	7812      	ldrb	r2, [r2, #0]
     878:	709a      	strb	r2, [r3, #2]

    // Enable channel 1 as input
    PORT->Group[CHANEL_1_GROUP].PINCFG[CHANEL_1_PIN].bit.INEN = 1;
     87a:	4912      	ldr	r1, [pc, #72]	; (8c4 <emg_setup+0x80>)
     87c:	2242      	movs	r2, #66	; 0x42
     87e:	5c8b      	ldrb	r3, [r1, r2]
     880:	2002      	movs	r0, #2
     882:	4303      	orrs	r3, r0
     884:	548b      	strb	r3, [r1, r2]
    PORT->Group[CHANEL_1_GROUP].DIRCLR.reg = CHANEL_1_PORT;
     886:	4b0f      	ldr	r3, [pc, #60]	; (8c4 <emg_setup+0x80>)
     888:	2204      	movs	r2, #4
     88a:	605a      	str	r2, [r3, #4]

    // Enable channel 1 as input
    PORT->Group[CHANEL_1_GROUP].PINCFG[CHANEL_1_PIN].bit.INEN = 1;
     88c:	490d      	ldr	r1, [pc, #52]	; (8c4 <emg_setup+0x80>)
     88e:	2242      	movs	r2, #66	; 0x42
     890:	5c8b      	ldrb	r3, [r1, r2]
     892:	2002      	movs	r0, #2
     894:	4303      	orrs	r3, r0
     896:	548b      	strb	r3, [r1, r2]
    PORT->Group[CHANEL_1_GROUP].DIRCLR.reg = CHANEL_1_PORT;
     898:	4b0a      	ldr	r3, [pc, #40]	; (8c4 <emg_setup+0x80>)
     89a:	2204      	movs	r2, #4
     89c:	605a      	str	r2, [r3, #4]

    // Enable channel 1 as input
    PORT->Group[CHANEL_1_GROUP].PINCFG[CHANEL_1_PIN].bit.INEN = 1;
     89e:	4909      	ldr	r1, [pc, #36]	; (8c4 <emg_setup+0x80>)
     8a0:	2242      	movs	r2, #66	; 0x42
     8a2:	5c8b      	ldrb	r3, [r1, r2]
     8a4:	2002      	movs	r0, #2
     8a6:	4303      	orrs	r3, r0
     8a8:	548b      	strb	r3, [r1, r2]
    PORT->Group[CHANEL_1_GROUP].DIRCLR.reg = CHANEL_1_PORT;
     8aa:	4b06      	ldr	r3, [pc, #24]	; (8c4 <emg_setup+0x80>)
     8ac:	2204      	movs	r2, #4
     8ae:	605a      	str	r2, [r3, #4]

    // Reset the index
    _emg_idx = 0;
     8b0:	4b05      	ldr	r3, [pc, #20]	; (8c8 <emg_setup+0x84>)
     8b2:	2200      	movs	r2, #0
     8b4:	701a      	strb	r2, [r3, #0]
}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	46bd      	mov	sp, r7
     8ba:	b003      	add	sp, #12
     8bc:	bd90      	pop	{r4, r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	20000488 	.word	0x20000488
     8c4:	41004400 	.word	0x41004400
     8c8:	20000484 	.word	0x20000484

000008cc <emg_stop>:

//==============================================================================
void emg_stop() {
     8cc:	b580      	push	{r7, lr}
     8ce:	af00      	add	r7, sp, #0
    _emg_idx = 0;
     8d0:	4b02      	ldr	r3, [pc, #8]	; (8dc <emg_stop+0x10>)
     8d2:	2200      	movs	r2, #0
     8d4:	701a      	strb	r2, [r3, #0]
}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	46bd      	mov	sp, r7
     8da:	bd80      	pop	{r7, pc}
     8dc:	20000484 	.word	0x20000484

000008e0 <emg_sample>:

//==============================================================================
uint8_t emg_sample(emg_data_t* output)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b082      	sub	sp, #8
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
    if (adc_register(_emg_callback)) {
     8e8:	4b0d      	ldr	r3, [pc, #52]	; (920 <emg_sample+0x40>)
     8ea:	0018      	movs	r0, r3
     8ec:	4b0d      	ldr	r3, [pc, #52]	; (924 <emg_sample+0x44>)
     8ee:	4798      	blx	r3
     8f0:	1e03      	subs	r3, r0, #0
     8f2:	d010      	beq.n	916 <emg_sample+0x36>
        _emg_data = output;
     8f4:	4b0c      	ldr	r3, [pc, #48]	; (928 <emg_sample+0x48>)
     8f6:	687a      	ldr	r2, [r7, #4]
     8f8:	601a      	str	r2, [r3, #0]
        _emg_idx = 0;
     8fa:	4b0c      	ldr	r3, [pc, #48]	; (92c <emg_sample+0x4c>)
     8fc:	2200      	movs	r2, #0
     8fe:	701a      	strb	r2, [r3, #0]
        adc_read(_emg_channel_pins[_emg_idx]);
     900:	4b0a      	ldr	r3, [pc, #40]	; (92c <emg_sample+0x4c>)
     902:	781b      	ldrb	r3, [r3, #0]
     904:	b2db      	uxtb	r3, r3
     906:	001a      	movs	r2, r3
     908:	4b09      	ldr	r3, [pc, #36]	; (930 <emg_sample+0x50>)
     90a:	5c9b      	ldrb	r3, [r3, r2]
     90c:	0018      	movs	r0, r3
     90e:	4b09      	ldr	r3, [pc, #36]	; (934 <emg_sample+0x54>)
     910:	4798      	blx	r3
        return 1;
     912:	2301      	movs	r3, #1
     914:	e000      	b.n	918 <emg_sample+0x38>
    }
    return 0;
     916:	2300      	movs	r3, #0
}
     918:	0018      	movs	r0, r3
     91a:	46bd      	mov	sp, r7
     91c:	b002      	add	sp, #8
     91e:	bd80      	pop	{r7, pc}
     920:	00000955 	.word	0x00000955
     924:	000003e1 	.word	0x000003e1
     928:	20000480 	.word	0x20000480
     92c:	20000484 	.word	0x20000484
     930:	20000004 	.word	0x20000004
     934:	00000385 	.word	0x00000385

00000938 <emg_sample_complete>:

//==============================================================================
uint8_t emg_sample_complete() {
     938:	b580      	push	{r7, lr}
     93a:	af00      	add	r7, sp, #0
    return _emg_idx == EMG_NUM_PINS;
     93c:	4b04      	ldr	r3, [pc, #16]	; (950 <emg_sample_complete+0x18>)
     93e:	781b      	ldrb	r3, [r3, #0]
     940:	b2db      	uxtb	r3, r3
     942:	3b03      	subs	r3, #3
     944:	425a      	negs	r2, r3
     946:	4153      	adcs	r3, r2
     948:	b2db      	uxtb	r3, r3
}
     94a:	0018      	movs	r0, r3
     94c:	46bd      	mov	sp, r7
     94e:	bd80      	pop	{r7, pc}
     950:	20000484 	.word	0x20000484

00000954 <_emg_callback>:
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _emg_callback(uint16_t data) {
     954:	b580      	push	{r7, lr}
     956:	b082      	sub	sp, #8
     958:	af00      	add	r7, sp, #0
     95a:	0002      	movs	r2, r0
     95c:	1dbb      	adds	r3, r7, #6
     95e:	801a      	strh	r2, [r3, #0]
    // Store the value if the channel is active
    if (_emg_channel_active[_emg_idx]) {
     960:	4b1b      	ldr	r3, [pc, #108]	; (9d0 <_emg_callback+0x7c>)
     962:	781b      	ldrb	r3, [r3, #0]
     964:	b2db      	uxtb	r3, r3
     966:	001a      	movs	r2, r3
     968:	4b1a      	ldr	r3, [pc, #104]	; (9d4 <_emg_callback+0x80>)
     96a:	5c9b      	ldrb	r3, [r3, r2]
     96c:	2b00      	cmp	r3, #0
     96e:	d00d      	beq.n	98c <_emg_callback+0x38>
        _emg_data->data[_emg_idx++] = data;
     970:	4b19      	ldr	r3, [pc, #100]	; (9d8 <_emg_callback+0x84>)
     972:	681a      	ldr	r2, [r3, #0]
     974:	4b16      	ldr	r3, [pc, #88]	; (9d0 <_emg_callback+0x7c>)
     976:	781b      	ldrb	r3, [r3, #0]
     978:	b2db      	uxtb	r3, r3
     97a:	1c59      	adds	r1, r3, #1
     97c:	b2c8      	uxtb	r0, r1
     97e:	4914      	ldr	r1, [pc, #80]	; (9d0 <_emg_callback+0x7c>)
     980:	7008      	strb	r0, [r1, #0]
     982:	005b      	lsls	r3, r3, #1
     984:	1db9      	adds	r1, r7, #6
     986:	8809      	ldrh	r1, [r1, #0]
     988:	5299      	strh	r1, [r3, r2]
     98a:	e00b      	b.n	9a4 <_emg_callback+0x50>
    }

    // Store 0 if the channel inactive
    else {
        _emg_data->data[_emg_idx++] = 0;
     98c:	4b12      	ldr	r3, [pc, #72]	; (9d8 <_emg_callback+0x84>)
     98e:	681a      	ldr	r2, [r3, #0]
     990:	4b0f      	ldr	r3, [pc, #60]	; (9d0 <_emg_callback+0x7c>)
     992:	781b      	ldrb	r3, [r3, #0]
     994:	b2db      	uxtb	r3, r3
     996:	1c59      	adds	r1, r3, #1
     998:	b2c8      	uxtb	r0, r1
     99a:	490d      	ldr	r1, [pc, #52]	; (9d0 <_emg_callback+0x7c>)
     99c:	7008      	strb	r0, [r1, #0]
     99e:	005b      	lsls	r3, r3, #1
     9a0:	2100      	movs	r1, #0
     9a2:	5299      	strh	r1, [r3, r2]
    }

    // Start the next adc read if appropriate
    if (_emg_idx < EMG_NUM_PINS) {
     9a4:	4b0a      	ldr	r3, [pc, #40]	; (9d0 <_emg_callback+0x7c>)
     9a6:	781b      	ldrb	r3, [r3, #0]
     9a8:	b2db      	uxtb	r3, r3
     9aa:	2b02      	cmp	r3, #2
     9ac:	d80a      	bhi.n	9c4 <_emg_callback+0x70>
        adc_read(_emg_channel_pins[_emg_idx]);
     9ae:	4b08      	ldr	r3, [pc, #32]	; (9d0 <_emg_callback+0x7c>)
     9b0:	781b      	ldrb	r3, [r3, #0]
     9b2:	b2db      	uxtb	r3, r3
     9b4:	001a      	movs	r2, r3
     9b6:	4b09      	ldr	r3, [pc, #36]	; (9dc <_emg_callback+0x88>)
     9b8:	5c9b      	ldrb	r3, [r3, r2]
     9ba:	0018      	movs	r0, r3
     9bc:	4b08      	ldr	r3, [pc, #32]	; (9e0 <_emg_callback+0x8c>)
     9be:	4798      	blx	r3
        return 0;
     9c0:	2300      	movs	r3, #0
     9c2:	e000      	b.n	9c6 <_emg_callback+0x72>
    }

    // Otherwise free adc callback
    return 1;
     9c4:	2301      	movs	r3, #1
}
     9c6:	0018      	movs	r0, r3
     9c8:	46bd      	mov	sp, r7
     9ca:	b002      	add	sp, #8
     9cc:	bd80      	pop	{r7, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	20000484 	.word	0x20000484
     9d4:	20000488 	.word	0x20000488
     9d8:	20000480 	.word	0x20000480
     9dc:	20000004 	.word	0x20000004
     9e0:	00000385 	.word	0x00000385

000009e4 <hand_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void hand_init() {
     9e4:	b580      	push	{r7, lr}
     9e6:	b082      	sub	sp, #8
     9e8:	af00      	add	r7, sp, #0
    // Init all kx003 units
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     9ea:	1dfb      	adds	r3, r7, #7
     9ec:	2201      	movs	r2, #1
     9ee:	701a      	strb	r2, [r3, #0]
     9f0:	e010      	b.n	a14 <hand_init+0x30>
        i2c_mux_init(I2C_MUX_ADDR, idx);
     9f2:	1dfb      	adds	r3, r7, #7
     9f4:	781b      	ldrb	r3, [r3, #0]
     9f6:	0019      	movs	r1, r3
     9f8:	20e0      	movs	r0, #224	; 0xe0
     9fa:	4b0f      	ldr	r3, [pc, #60]	; (a38 <hand_init+0x54>)
     9fc:	4798      	blx	r3
        kx003_init(0x1E);
     9fe:	201e      	movs	r0, #30
     a00:	4b0e      	ldr	r3, [pc, #56]	; (a3c <hand_init+0x58>)
     a02:	4798      	blx	r3
        kx003_init(0x1C);
     a04:	201c      	movs	r0, #28
     a06:	4b0d      	ldr	r3, [pc, #52]	; (a3c <hand_init+0x58>)
     a08:	4798      	blx	r3
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     a0a:	1dfa      	adds	r2, r7, #7
     a0c:	1dfb      	adds	r3, r7, #7
     a0e:	781b      	ldrb	r3, [r3, #0]
     a10:	18db      	adds	r3, r3, r3
     a12:	7013      	strb	r3, [r2, #0]
     a14:	1dfb      	adds	r3, r7, #7
     a16:	781b      	ldrb	r3, [r3, #0]
     a18:	2b00      	cmp	r3, #0
     a1a:	d1ea      	bne.n	9f2 <hand_init+0xe>
    }

    // Reset state machine
    _hand_mode = HAND_PNT_TOP;
     a1c:	4b08      	ldr	r3, [pc, #32]	; (a40 <hand_init+0x5c>)
     a1e:	2200      	movs	r2, #0
     a20:	701a      	strb	r2, [r3, #0]
    _hand_idx = 0;
     a22:	4b08      	ldr	r3, [pc, #32]	; (a44 <hand_init+0x60>)
     a24:	2200      	movs	r2, #0
     a26:	701a      	strb	r2, [r3, #0]
    _hand_i2c_stat = HAND_I2C_REQUEST;
     a28:	4b07      	ldr	r3, [pc, #28]	; (a48 <hand_init+0x64>)
     a2a:	2200      	movs	r2, #0
     a2c:	701a      	strb	r2, [r3, #0]
}
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	46bd      	mov	sp, r7
     a32:	b002      	add	sp, #8
     a34:	bd80      	pop	{r7, pc}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	00000d59 	.word	0x00000d59
     a3c:	00000e8d 	.word	0x00000e8d
     a40:	20000494 	.word	0x20000494
     a44:	20000496 	.word	0x20000496
     a48:	20000495 	.word	0x20000495

00000a4c <hand_stop>:

//==============================================================================
void hand_stop() {
     a4c:	b580      	push	{r7, lr}
     a4e:	b082      	sub	sp, #8
     a50:	af00      	add	r7, sp, #0
    // Stop all kx003 units
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     a52:	1dfb      	adds	r3, r7, #7
     a54:	2201      	movs	r2, #1
     a56:	701a      	strb	r2, [r3, #0]
     a58:	e010      	b.n	a7c <hand_stop+0x30>
        i2c_mux_init(I2C_MUX_ADDR, idx);
     a5a:	1dfb      	adds	r3, r7, #7
     a5c:	781b      	ldrb	r3, [r3, #0]
     a5e:	0019      	movs	r1, r3
     a60:	20e0      	movs	r0, #224	; 0xe0
     a62:	4b0f      	ldr	r3, [pc, #60]	; (aa0 <hand_stop+0x54>)
     a64:	4798      	blx	r3
        kx003_stop(0x1E);
     a66:	201e      	movs	r0, #30
     a68:	4b0e      	ldr	r3, [pc, #56]	; (aa4 <hand_stop+0x58>)
     a6a:	4798      	blx	r3
        kx003_stop(0x1C);
     a6c:	201c      	movs	r0, #28
     a6e:	4b0d      	ldr	r3, [pc, #52]	; (aa4 <hand_stop+0x58>)
     a70:	4798      	blx	r3
    for (uint8_t idx = 1; idx; idx=idx<<1) {
     a72:	1dfa      	adds	r2, r7, #7
     a74:	1dfb      	adds	r3, r7, #7
     a76:	781b      	ldrb	r3, [r3, #0]
     a78:	18db      	adds	r3, r3, r3
     a7a:	7013      	strb	r3, [r2, #0]
     a7c:	1dfb      	adds	r3, r7, #7
     a7e:	781b      	ldrb	r3, [r3, #0]
     a80:	2b00      	cmp	r3, #0
     a82:	d1ea      	bne.n	a5a <hand_stop+0xe>
    }

    // Reset state machine
    _hand_mode = HAND_PNT_TOP;
     a84:	4b08      	ldr	r3, [pc, #32]	; (aa8 <hand_stop+0x5c>)
     a86:	2200      	movs	r2, #0
     a88:	701a      	strb	r2, [r3, #0]
    _hand_idx = 0;
     a8a:	4b08      	ldr	r3, [pc, #32]	; (aac <hand_stop+0x60>)
     a8c:	2200      	movs	r2, #0
     a8e:	701a      	strb	r2, [r3, #0]
    _hand_i2c_stat = HAND_I2C_REQUEST;
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <hand_stop+0x64>)
     a92:	2200      	movs	r2, #0
     a94:	701a      	strb	r2, [r3, #0]
}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	46bd      	mov	sp, r7
     a9a:	b002      	add	sp, #8
     a9c:	bd80      	pop	{r7, pc}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	00000d59 	.word	0x00000d59
     aa4:	00000f21 	.word	0x00000f21
     aa8:	20000494 	.word	0x20000494
     aac:	20000496 	.word	0x20000496
     ab0:	20000495 	.word	0x20000495

00000ab4 <hand_read>:

//==============================================================================
uint8_t hand_read(hand_pos_t* output) {
     ab4:	b580      	push	{r7, lr}
     ab6:	b082      	sub	sp, #8
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
    _hand_output = output;
     abc:	4b06      	ldr	r3, [pc, #24]	; (ad8 <hand_read+0x24>)
     abe:	687a      	ldr	r2, [r7, #4]
     ac0:	601a      	str	r2, [r3, #0]
    _hand_mode = HAND_PNT_TOP;
     ac2:	4b06      	ldr	r3, [pc, #24]	; (adc <hand_read+0x28>)
     ac4:	2200      	movs	r2, #0
     ac6:	701a      	strb	r2, [r3, #0]
    _hand_i2c_stat = HAND_I2C_REQUEST;
     ac8:	4b05      	ldr	r3, [pc, #20]	; (ae0 <hand_read+0x2c>)
     aca:	2200      	movs	r2, #0
     acc:	701a      	strb	r2, [r3, #0]
    return 1;
     ace:	2301      	movs	r3, #1
}
     ad0:	0018      	movs	r0, r3
     ad2:	46bd      	mov	sp, r7
     ad4:	b002      	add	sp, #8
     ad6:	bd80      	pop	{r7, pc}
     ad8:	20000490 	.word	0x20000490
     adc:	20000494 	.word	0x20000494
     ae0:	20000495 	.word	0x20000495

00000ae4 <hand_read_complete>:


//==============================================================================
uint8_t hand_read_complete() {
     ae4:	b580      	push	{r7, lr}
     ae6:	b082      	sub	sp, #8
     ae8:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
     aea:	1dfb      	adds	r3, r7, #7
     aec:	2200      	movs	r2, #0
     aee:	701a      	strb	r2, [r3, #0]
    switch (_hand_mode) {
     af0:	4b5d      	ldr	r3, [pc, #372]	; (c68 <hand_read_complete+0x184>)
     af2:	781b      	ldrb	r3, [r3, #0]
     af4:	2b18      	cmp	r3, #24
     af6:	d900      	bls.n	afa <hand_read_complete+0x16>
     af8:	e0af      	b.n	c5a <hand_read_complete+0x176>
     afa:	009a      	lsls	r2, r3, #2
     afc:	4b5b      	ldr	r3, [pc, #364]	; (c6c <hand_read_complete+0x188>)
     afe:	18d3      	adds	r3, r2, r3
     b00:	681b      	ldr	r3, [r3, #0]
     b02:	469f      	mov	pc, r3
        case HAND_PNT_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_PNT_TOP);
     b04:	2180      	movs	r1, #128	; 0x80
     b06:	20e0      	movs	r0, #224	; 0xe0
     b08:	4b59      	ldr	r3, [pc, #356]	; (c70 <hand_read_complete+0x18c>)
     b0a:	4798      	blx	r3
        } break;
     b0c:	e0a5      	b.n	c5a <hand_read_complete+0x176>

        case HAND_PNT_TIP: {
            _hand_kx003(PNT_TIP_ADDR, _hand_output->pnt.tip.bytes);
     b0e:	4b59      	ldr	r3, [pc, #356]	; (c74 <hand_read_complete+0x190>)
     b10:	681b      	ldr	r3, [r3, #0]
     b12:	0019      	movs	r1, r3
     b14:	201e      	movs	r0, #30
     b16:	4b58      	ldr	r3, [pc, #352]	; (c78 <hand_read_complete+0x194>)
     b18:	4798      	blx	r3
        } break;
     b1a:	e09e      	b.n	c5a <hand_read_complete+0x176>

        case HAND_PNT_MID: {
            _hand_kx003(PNT_MID_ADDR, _hand_output->pnt.mid.bytes);
     b1c:	4b55      	ldr	r3, [pc, #340]	; (c74 <hand_read_complete+0x190>)
     b1e:	681b      	ldr	r3, [r3, #0]
     b20:	3306      	adds	r3, #6
     b22:	0019      	movs	r1, r3
     b24:	201c      	movs	r0, #28
     b26:	4b54      	ldr	r3, [pc, #336]	; (c78 <hand_read_complete+0x194>)
     b28:	4798      	blx	r3
        } break;
     b2a:	e096      	b.n	c5a <hand_read_complete+0x176>

        case HAND_MID_PNT: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_PNT_MID);
     b2c:	2120      	movs	r1, #32
     b2e:	20e0      	movs	r0, #224	; 0xe0
     b30:	4b4f      	ldr	r3, [pc, #316]	; (c70 <hand_read_complete+0x18c>)
     b32:	4798      	blx	r3
        } break;
     b34:	e091      	b.n	c5a <hand_read_complete+0x176>

        case HAND_PNT_BS: {
            _hand_kx003(PNT_BS_ADDR, _hand_output->pnt.bs.bytes);
     b36:	4b4f      	ldr	r3, [pc, #316]	; (c74 <hand_read_complete+0x190>)
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	330c      	adds	r3, #12
     b3c:	0019      	movs	r1, r3
     b3e:	201e      	movs	r0, #30
     b40:	4b4d      	ldr	r3, [pc, #308]	; (c78 <hand_read_complete+0x194>)
     b42:	4798      	blx	r3
        } break;
     b44:	e089      	b.n	c5a <hand_read_complete+0x176>

        case HAND_MID_BS: {
            _hand_kx003(MID_BS_ADDR, _hand_output->mid.bs.bytes);
     b46:	4b4b      	ldr	r3, [pc, #300]	; (c74 <hand_read_complete+0x190>)
     b48:	681b      	ldr	r3, [r3, #0]
     b4a:	331e      	adds	r3, #30
     b4c:	0019      	movs	r1, r3
     b4e:	201c      	movs	r0, #28
     b50:	4b49      	ldr	r3, [pc, #292]	; (c78 <hand_read_complete+0x194>)
     b52:	4798      	blx	r3
        } break;
     b54:	e081      	b.n	c5a <hand_read_complete+0x176>

        case HAND_MID_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_MID_TOP);
     b56:	2140      	movs	r1, #64	; 0x40
     b58:	20e0      	movs	r0, #224	; 0xe0
     b5a:	4b45      	ldr	r3, [pc, #276]	; (c70 <hand_read_complete+0x18c>)
     b5c:	4798      	blx	r3
        } break;
     b5e:	e07c      	b.n	c5a <hand_read_complete+0x176>

        case HAND_MID_MID: {
            _hand_kx003(MID_MID_ADDR, _hand_output->mid.mid.bytes);
     b60:	4b44      	ldr	r3, [pc, #272]	; (c74 <hand_read_complete+0x190>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	3318      	adds	r3, #24
     b66:	0019      	movs	r1, r3
     b68:	201c      	movs	r0, #28
     b6a:	4b43      	ldr	r3, [pc, #268]	; (c78 <hand_read_complete+0x194>)
     b6c:	4798      	blx	r3
        } break;
     b6e:	e074      	b.n	c5a <hand_read_complete+0x176>

        case HAND_MID_TIP: {
            _hand_kx003(MID_TIP_ADDR, _hand_output->mid.tip.bytes);
     b70:	4b40      	ldr	r3, [pc, #256]	; (c74 <hand_read_complete+0x190>)
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	3312      	adds	r3, #18
     b76:	0019      	movs	r1, r3
     b78:	201e      	movs	r0, #30
     b7a:	4b3f      	ldr	r3, [pc, #252]	; (c78 <hand_read_complete+0x194>)
     b7c:	4798      	blx	r3
        } break;
     b7e:	e06c      	b.n	c5a <hand_read_complete+0x176>

        case HAND_RNG_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_RNG_TOP);
     b80:	2110      	movs	r1, #16
     b82:	20e0      	movs	r0, #224	; 0xe0
     b84:	4b3a      	ldr	r3, [pc, #232]	; (c70 <hand_read_complete+0x18c>)
     b86:	4798      	blx	r3
        } break;
     b88:	e067      	b.n	c5a <hand_read_complete+0x176>

        case HAND_RNG_TIP: {
            _hand_kx003(RNG_TIP_ADDR, _hand_output->rng.tip.bytes);
     b8a:	4b3a      	ldr	r3, [pc, #232]	; (c74 <hand_read_complete+0x190>)
     b8c:	681b      	ldr	r3, [r3, #0]
     b8e:	3324      	adds	r3, #36	; 0x24
     b90:	0019      	movs	r1, r3
     b92:	201e      	movs	r0, #30
     b94:	4b38      	ldr	r3, [pc, #224]	; (c78 <hand_read_complete+0x194>)
     b96:	4798      	blx	r3
        } break;
     b98:	e05f      	b.n	c5a <hand_read_complete+0x176>

        case HAND_RNG_MID: {
            _hand_kx003(RNG_MID_ADDR, _hand_output->rng.mid.bytes);
     b9a:	4b36      	ldr	r3, [pc, #216]	; (c74 <hand_read_complete+0x190>)
     b9c:	681b      	ldr	r3, [r3, #0]
     b9e:	332a      	adds	r3, #42	; 0x2a
     ba0:	0019      	movs	r1, r3
     ba2:	201c      	movs	r0, #28
     ba4:	4b34      	ldr	r3, [pc, #208]	; (c78 <hand_read_complete+0x194>)
     ba6:	4798      	blx	r3
        } break;
     ba8:	e057      	b.n	c5a <hand_read_complete+0x176>

        case HAND_RNG_PNK: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_RNG_PNK);
     baa:	2104      	movs	r1, #4
     bac:	20e0      	movs	r0, #224	; 0xe0
     bae:	4b30      	ldr	r3, [pc, #192]	; (c70 <hand_read_complete+0x18c>)
     bb0:	4798      	blx	r3
        } break;
     bb2:	e052      	b.n	c5a <hand_read_complete+0x176>

        case HAND_RNG_BS: {
            _hand_kx003(RNG_BS_ADDR, _hand_output->rng.bs.bytes);
     bb4:	4b2f      	ldr	r3, [pc, #188]	; (c74 <hand_read_complete+0x190>)
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	3330      	adds	r3, #48	; 0x30
     bba:	0019      	movs	r1, r3
     bbc:	201e      	movs	r0, #30
     bbe:	4b2e      	ldr	r3, [pc, #184]	; (c78 <hand_read_complete+0x194>)
     bc0:	4798      	blx	r3
        } break;
     bc2:	e04a      	b.n	c5a <hand_read_complete+0x176>

        case HAND_PNK_BS: {
            _hand_kx003(PNK_BS_ADDR, _hand_output->pnk.bs.bytes);
     bc4:	4b2b      	ldr	r3, [pc, #172]	; (c74 <hand_read_complete+0x190>)
     bc6:	681b      	ldr	r3, [r3, #0]
     bc8:	3342      	adds	r3, #66	; 0x42
     bca:	0019      	movs	r1, r3
     bcc:	201c      	movs	r0, #28
     bce:	4b2a      	ldr	r3, [pc, #168]	; (c78 <hand_read_complete+0x194>)
     bd0:	4798      	blx	r3
        } break;
     bd2:	e042      	b.n	c5a <hand_read_complete+0x176>

        case HAND_PNK_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_PNK_TOP);
     bd4:	2108      	movs	r1, #8
     bd6:	20e0      	movs	r0, #224	; 0xe0
     bd8:	4b25      	ldr	r3, [pc, #148]	; (c70 <hand_read_complete+0x18c>)
     bda:	4798      	blx	r3
        } break;
     bdc:	e03d      	b.n	c5a <hand_read_complete+0x176>

        case HAND_PNK_MID: {
            _hand_kx003(PNK_MID_ADDR, _hand_output->pnk.mid.bytes);
     bde:	4b25      	ldr	r3, [pc, #148]	; (c74 <hand_read_complete+0x190>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	333c      	adds	r3, #60	; 0x3c
     be4:	0019      	movs	r1, r3
     be6:	201c      	movs	r0, #28
     be8:	4b23      	ldr	r3, [pc, #140]	; (c78 <hand_read_complete+0x194>)
     bea:	4798      	blx	r3
        } break;
     bec:	e035      	b.n	c5a <hand_read_complete+0x176>

        case HAND_PNK_TIP: {
            _hand_kx003(PNK_TIP_ADDR, _hand_output->pnk.tip.bytes);
     bee:	4b21      	ldr	r3, [pc, #132]	; (c74 <hand_read_complete+0x190>)
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	3336      	adds	r3, #54	; 0x36
     bf4:	0019      	movs	r1, r3
     bf6:	201e      	movs	r0, #30
     bf8:	4b1f      	ldr	r3, [pc, #124]	; (c78 <hand_read_complete+0x194>)
     bfa:	4798      	blx	r3
        } break;
     bfc:	e02d      	b.n	c5a <hand_read_complete+0x176>

        case HAND_THM_TOP: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_THM_TOP);
     bfe:	2102      	movs	r1, #2
     c00:	20e0      	movs	r0, #224	; 0xe0
     c02:	4b1b      	ldr	r3, [pc, #108]	; (c70 <hand_read_complete+0x18c>)
     c04:	4798      	blx	r3
        } break;
     c06:	e028      	b.n	c5a <hand_read_complete+0x176>

        case HAND_THM_TIP: {
            _hand_kx003(THM_TIP_ADDR, _hand_output->thm.tip.bytes);
     c08:	4b1a      	ldr	r3, [pc, #104]	; (c74 <hand_read_complete+0x190>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	3348      	adds	r3, #72	; 0x48
     c0e:	0019      	movs	r1, r3
     c10:	201e      	movs	r0, #30
     c12:	4b19      	ldr	r3, [pc, #100]	; (c78 <hand_read_complete+0x194>)
     c14:	4798      	blx	r3
        } break;
     c16:	e020      	b.n	c5a <hand_read_complete+0x176>

        case HAND_THM_MID: {
            _hand_kx003(THM_MID_ADDR, _hand_output->thm.mid.bytes);
     c18:	4b16      	ldr	r3, [pc, #88]	; (c74 <hand_read_complete+0x190>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	334e      	adds	r3, #78	; 0x4e
     c1e:	0019      	movs	r1, r3
     c20:	201c      	movs	r0, #28
     c22:	4b15      	ldr	r3, [pc, #84]	; (c78 <hand_read_complete+0x194>)
     c24:	4798      	blx	r3
        } break;
     c26:	e018      	b.n	c5a <hand_read_complete+0x176>

        case HAND_THM_HND: {
            _hand_i2c_mux(I2C_MUX_ADDR, MUX_THM_HND);
     c28:	2101      	movs	r1, #1
     c2a:	20e0      	movs	r0, #224	; 0xe0
     c2c:	4b10      	ldr	r3, [pc, #64]	; (c70 <hand_read_complete+0x18c>)
     c2e:	4798      	blx	r3
        } break;
     c30:	e013      	b.n	c5a <hand_read_complete+0x176>

        case HAND_THM_BS: {
            _hand_kx003(THM_BS_ADDR, _hand_output->thm.bs.bytes);
     c32:	4b10      	ldr	r3, [pc, #64]	; (c74 <hand_read_complete+0x190>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	3354      	adds	r3, #84	; 0x54
     c38:	0019      	movs	r1, r3
     c3a:	201e      	movs	r0, #30
     c3c:	4b0e      	ldr	r3, [pc, #56]	; (c78 <hand_read_complete+0x194>)
     c3e:	4798      	blx	r3
        } break;
     c40:	e00b      	b.n	c5a <hand_read_complete+0x176>

        case HAND_HND_BS: {
            _hand_kx003(HND_BS_ADDR, _hand_output->hnd.bytes);
     c42:	4b0c      	ldr	r3, [pc, #48]	; (c74 <hand_read_complete+0x190>)
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	335a      	adds	r3, #90	; 0x5a
     c48:	0019      	movs	r1, r3
     c4a:	201c      	movs	r0, #28
     c4c:	4b0a      	ldr	r3, [pc, #40]	; (c78 <hand_read_complete+0x194>)
     c4e:	4798      	blx	r3
        } break;
     c50:	e003      	b.n	c5a <hand_read_complete+0x176>

        case HAND_COMPLETE: {
            complete = 1;
     c52:	1dfb      	adds	r3, r7, #7
     c54:	2201      	movs	r2, #1
     c56:	701a      	strb	r2, [r3, #0]
        } break;
     c58:	46c0      	nop			; (mov r8, r8)
    }

    return complete;
     c5a:	1dfb      	adds	r3, r7, #7
     c5c:	781b      	ldrb	r3, [r3, #0]
}
     c5e:	0018      	movs	r0, r3
     c60:	46bd      	mov	sp, r7
     c62:	b002      	add	sp, #8
     c64:	bd80      	pop	{r7, pc}
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	20000494 	.word	0x20000494
     c6c:	00005da4 	.word	0x00005da4
     c70:	00000c7d 	.word	0x00000c7d
     c74:	20000490 	.word	0x20000490
     c78:	00000ced 	.word	0x00000ced

00000c7c <_hand_i2c_mux>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
void _hand_i2c_mux(uint8_t addr, uint8_t data) {
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	0002      	movs	r2, r0
     c84:	1dfb      	adds	r3, r7, #7
     c86:	701a      	strb	r2, [r3, #0]
     c88:	1dbb      	adds	r3, r7, #6
     c8a:	1c0a      	adds	r2, r1, #0
     c8c:	701a      	strb	r2, [r3, #0]
    if (_hand_i2c_stat == HAND_I2C_REQUEST) {
     c8e:	4b13      	ldr	r3, [pc, #76]	; (cdc <_hand_i2c_mux+0x60>)
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2b00      	cmp	r3, #0
     c94:	d10d      	bne.n	cb2 <_hand_i2c_mux+0x36>
        if (i2c_mux_write(addr, data)) {
     c96:	1dbb      	adds	r3, r7, #6
     c98:	781a      	ldrb	r2, [r3, #0]
     c9a:	1dfb      	adds	r3, r7, #7
     c9c:	781b      	ldrb	r3, [r3, #0]
     c9e:	0011      	movs	r1, r2
     ca0:	0018      	movs	r0, r3
     ca2:	4b0f      	ldr	r3, [pc, #60]	; (ce0 <_hand_i2c_mux+0x64>)
     ca4:	4798      	blx	r3
     ca6:	1e03      	subs	r3, r0, #0
     ca8:	d014      	beq.n	cd4 <_hand_i2c_mux+0x58>
            _hand_i2c_stat = HAND_I2C_WAITING;
     caa:	4b0c      	ldr	r3, [pc, #48]	; (cdc <_hand_i2c_mux+0x60>)
     cac:	2201      	movs	r2, #1
     cae:	701a      	strb	r2, [r3, #0]
        if (i2c_mux_write_complete()) {
            _hand_i2c_stat = HAND_I2C_REQUEST;
            _hand_mode++;
        }
    }
}
     cb0:	e010      	b.n	cd4 <_hand_i2c_mux+0x58>
    } else if (_hand_i2c_stat == HAND_I2C_WAITING) {
     cb2:	4b0a      	ldr	r3, [pc, #40]	; (cdc <_hand_i2c_mux+0x60>)
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	2b01      	cmp	r3, #1
     cb8:	d10c      	bne.n	cd4 <_hand_i2c_mux+0x58>
        if (i2c_mux_write_complete()) {
     cba:	4b0a      	ldr	r3, [pc, #40]	; (ce4 <_hand_i2c_mux+0x68>)
     cbc:	4798      	blx	r3
     cbe:	1e03      	subs	r3, r0, #0
     cc0:	d008      	beq.n	cd4 <_hand_i2c_mux+0x58>
            _hand_i2c_stat = HAND_I2C_REQUEST;
     cc2:	4b06      	ldr	r3, [pc, #24]	; (cdc <_hand_i2c_mux+0x60>)
     cc4:	2200      	movs	r2, #0
     cc6:	701a      	strb	r2, [r3, #0]
            _hand_mode++;
     cc8:	4b07      	ldr	r3, [pc, #28]	; (ce8 <_hand_i2c_mux+0x6c>)
     cca:	781b      	ldrb	r3, [r3, #0]
     ccc:	3301      	adds	r3, #1
     cce:	b2da      	uxtb	r2, r3
     cd0:	4b05      	ldr	r3, [pc, #20]	; (ce8 <_hand_i2c_mux+0x6c>)
     cd2:	701a      	strb	r2, [r3, #0]
}
     cd4:	46c0      	nop			; (mov r8, r8)
     cd6:	46bd      	mov	sp, r7
     cd8:	b002      	add	sp, #8
     cda:	bd80      	pop	{r7, pc}
     cdc:	20000495 	.word	0x20000495
     ce0:	00000da5 	.word	0x00000da5
     ce4:	00000dfd 	.word	0x00000dfd
     ce8:	20000494 	.word	0x20000494

00000cec <_hand_kx003>:

//==============================================================================
void _hand_kx003(uint8_t addr, joint_pos_t* output) {
     cec:	b590      	push	{r4, r7, lr}
     cee:	b083      	sub	sp, #12
     cf0:	af00      	add	r7, sp, #0
     cf2:	0002      	movs	r2, r0
     cf4:	6039      	str	r1, [r7, #0]
     cf6:	1dfb      	adds	r3, r7, #7
     cf8:	701a      	strb	r2, [r3, #0]
    if (_hand_i2c_stat == HAND_I2C_REQUEST) {
     cfa:	4b13      	ldr	r3, [pc, #76]	; (d48 <_hand_kx003+0x5c>)
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	2b00      	cmp	r3, #0
     d00:	d10c      	bne.n	d1c <_hand_kx003+0x30>
        if (kx003_read(addr, KX003_XOUT_L, &(output->bytes), 6)) {
     d02:	683a      	ldr	r2, [r7, #0]
     d04:	1dfb      	adds	r3, r7, #7
     d06:	7818      	ldrb	r0, [r3, #0]
     d08:	2306      	movs	r3, #6
     d0a:	2106      	movs	r1, #6
     d0c:	4c0f      	ldr	r4, [pc, #60]	; (d4c <_hand_kx003+0x60>)
     d0e:	47a0      	blx	r4
     d10:	1e03      	subs	r3, r0, #0
     d12:	d014      	beq.n	d3e <_hand_kx003+0x52>
            _hand_i2c_stat = HAND_I2C_WAITING;
     d14:	4b0c      	ldr	r3, [pc, #48]	; (d48 <_hand_kx003+0x5c>)
     d16:	2201      	movs	r2, #1
     d18:	701a      	strb	r2, [r3, #0]
        if (kx003_read_complete()) {
            _hand_i2c_stat = HAND_I2C_REQUEST;
            _hand_mode++;
        }
    }
}
     d1a:	e010      	b.n	d3e <_hand_kx003+0x52>
    } else if (_hand_i2c_stat == HAND_I2C_WAITING) {
     d1c:	4b0a      	ldr	r3, [pc, #40]	; (d48 <_hand_kx003+0x5c>)
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	2b01      	cmp	r3, #1
     d22:	d10c      	bne.n	d3e <_hand_kx003+0x52>
        if (kx003_read_complete()) {
     d24:	4b0a      	ldr	r3, [pc, #40]	; (d50 <_hand_kx003+0x64>)
     d26:	4798      	blx	r3
     d28:	1e03      	subs	r3, r0, #0
     d2a:	d008      	beq.n	d3e <_hand_kx003+0x52>
            _hand_i2c_stat = HAND_I2C_REQUEST;
     d2c:	4b06      	ldr	r3, [pc, #24]	; (d48 <_hand_kx003+0x5c>)
     d2e:	2200      	movs	r2, #0
     d30:	701a      	strb	r2, [r3, #0]
            _hand_mode++;
     d32:	4b08      	ldr	r3, [pc, #32]	; (d54 <_hand_kx003+0x68>)
     d34:	781b      	ldrb	r3, [r3, #0]
     d36:	3301      	adds	r3, #1
     d38:	b2da      	uxtb	r2, r3
     d3a:	4b06      	ldr	r3, [pc, #24]	; (d54 <_hand_kx003+0x68>)
     d3c:	701a      	strb	r2, [r3, #0]
}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	46bd      	mov	sp, r7
     d42:	b003      	add	sp, #12
     d44:	bd90      	pop	{r4, r7, pc}
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	20000495 	.word	0x20000495
     d4c:	00000fa9 	.word	0x00000fa9
     d50:	00001045 	.word	0x00001045
     d54:	20000494 	.word	0x20000494

00000d58 <i2c_mux_init>:
//
//------------------------------------------------------------------------------

//==============================================================================
void i2c_mux_init(uint8_t addr, uint8_t data)
{
     d58:	b580      	push	{r7, lr}
     d5a:	b082      	sub	sp, #8
     d5c:	af00      	add	r7, sp, #0
     d5e:	0002      	movs	r2, r0
     d60:	1dfb      	adds	r3, r7, #7
     d62:	701a      	strb	r2, [r3, #0]
     d64:	1dbb      	adds	r3, r7, #6
     d66:	1c0a      	adds	r2, r1, #0
     d68:	701a      	strb	r2, [r3, #0]
    while (i2c_registered());
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	4b0b      	ldr	r3, [pc, #44]	; (d9c <i2c_mux_init+0x44>)
     d6e:	4798      	blx	r3
     d70:	1e03      	subs	r3, r0, #0
     d72:	d1fb      	bne.n	d6c <i2c_mux_init+0x14>
    while (!i2c_mux_write(addr, data));
     d74:	46c0      	nop			; (mov r8, r8)
     d76:	1dbb      	adds	r3, r7, #6
     d78:	781a      	ldrb	r2, [r3, #0]
     d7a:	1dfb      	adds	r3, r7, #7
     d7c:	781b      	ldrb	r3, [r3, #0]
     d7e:	0011      	movs	r1, r2
     d80:	0018      	movs	r0, r3
     d82:	4b07      	ldr	r3, [pc, #28]	; (da0 <i2c_mux_init+0x48>)
     d84:	4798      	blx	r3
     d86:	1e03      	subs	r3, r0, #0
     d88:	d0f5      	beq.n	d76 <i2c_mux_init+0x1e>
    while (i2c_registered());
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	4b03      	ldr	r3, [pc, #12]	; (d9c <i2c_mux_init+0x44>)
     d8e:	4798      	blx	r3
     d90:	1e03      	subs	r3, r0, #0
     d92:	d1fb      	bne.n	d8c <i2c_mux_init+0x34>
}
     d94:	46c0      	nop			; (mov r8, r8)
     d96:	46bd      	mov	sp, r7
     d98:	b002      	add	sp, #8
     d9a:	bd80      	pop	{r7, pc}
     d9c:	000015ad 	.word	0x000015ad
     da0:	00000da5 	.word	0x00000da5

00000da4 <i2c_mux_write>:

//==============================================================================
uint8_t i2c_mux_write(uint8_t addr, uint8_t data) {
     da4:	b580      	push	{r7, lr}
     da6:	b082      	sub	sp, #8
     da8:	af00      	add	r7, sp, #0
     daa:	0002      	movs	r2, r0
     dac:	1dfb      	adds	r3, r7, #7
     dae:	701a      	strb	r2, [r3, #0]
     db0:	1dbb      	adds	r3, r7, #6
     db2:	1c0a      	adds	r2, r1, #0
     db4:	701a      	strb	r2, [r3, #0]
    if (i2c_register(_i2c_mux_callback)) {
     db6:	4b0c      	ldr	r3, [pc, #48]	; (de8 <i2c_mux_write+0x44>)
     db8:	0018      	movs	r0, r3
     dba:	4b0c      	ldr	r3, [pc, #48]	; (dec <i2c_mux_write+0x48>)
     dbc:	4798      	blx	r3
     dbe:	1e03      	subs	r3, r0, #0
     dc0:	d00d      	beq.n	dde <i2c_mux_write+0x3a>
        _i2c_mux_data = data;
     dc2:	4b0b      	ldr	r3, [pc, #44]	; (df0 <i2c_mux_write+0x4c>)
     dc4:	1dba      	adds	r2, r7, #6
     dc6:	7812      	ldrb	r2, [r2, #0]
     dc8:	701a      	strb	r2, [r3, #0]
        _i2c_mux_state = I2C_MUX_DATA;
     dca:	4b0a      	ldr	r3, [pc, #40]	; (df4 <i2c_mux_write+0x50>)
     dcc:	2200      	movs	r2, #0
     dce:	701a      	strb	r2, [r3, #0]
        i2c_begin_write(addr);
     dd0:	1dfb      	adds	r3, r7, #7
     dd2:	781b      	ldrb	r3, [r3, #0]
     dd4:	0018      	movs	r0, r3
     dd6:	4b08      	ldr	r3, [pc, #32]	; (df8 <i2c_mux_write+0x54>)
     dd8:	4798      	blx	r3
        return 1;
     dda:	2301      	movs	r3, #1
     ddc:	e000      	b.n	de0 <i2c_mux_write+0x3c>
    }
    return 0;
     dde:	2300      	movs	r3, #0
}
     de0:	0018      	movs	r0, r3
     de2:	46bd      	mov	sp, r7
     de4:	b002      	add	sp, #8
     de6:	bd80      	pop	{r7, pc}
     de8:	00000e19 	.word	0x00000e19
     dec:	000014d1 	.word	0x000014d1
     df0:	20000497 	.word	0x20000497
     df4:	20000498 	.word	0x20000498
     df8:	000013e5 	.word	0x000013e5

00000dfc <i2c_mux_write_complete>:

uint8_t i2c_mux_write_complete() {
     dfc:	b580      	push	{r7, lr}
     dfe:	af00      	add	r7, sp, #0
    return (_i2c_mux_state == I2C_MUX_DONE);
     e00:	4b04      	ldr	r3, [pc, #16]	; (e14 <i2c_mux_write_complete+0x18>)
     e02:	781b      	ldrb	r3, [r3, #0]
     e04:	3b02      	subs	r3, #2
     e06:	425a      	negs	r2, r3
     e08:	4153      	adcs	r3, r2
     e0a:	b2db      	uxtb	r3, r3
}
     e0c:	0018      	movs	r0, r3
     e0e:	46bd      	mov	sp, r7
     e10:	bd80      	pop	{r7, pc}
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	20000498 	.word	0x20000498

00000e18 <_i2c_mux_callback>:
//     /  `  /\  |    |    |__)  /\  /  ` |__/ /__`
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

uint8_t _i2c_mux_callback() {
     e18:	b580      	push	{r7, lr}
     e1a:	b082      	sub	sp, #8
     e1c:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
     e1e:	1dfb      	adds	r3, r7, #7
     e20:	2200      	movs	r2, #0
     e22:	701a      	strb	r2, [r3, #0]

    switch (_i2c_mux_state) {
     e24:	4b14      	ldr	r3, [pc, #80]	; (e78 <_i2c_mux_callback+0x60>)
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	2b00      	cmp	r3, #0
     e2a:	d002      	beq.n	e32 <_i2c_mux_callback+0x1a>
     e2c:	2b01      	cmp	r3, #1
     e2e:	d00d      	beq.n	e4c <_i2c_mux_callback+0x34>
     e30:	e01c      	b.n	e6c <_i2c_mux_callback+0x54>
        case I2C_MUX_DATA: {
            if (!i2c_tx_flag()) break;
     e32:	4b12      	ldr	r3, [pc, #72]	; (e7c <_i2c_mux_callback+0x64>)
     e34:	4798      	blx	r3
     e36:	1e03      	subs	r3, r0, #0
     e38:	d015      	beq.n	e66 <_i2c_mux_callback+0x4e>
            _i2c_mux_state = I2C_MUX_STOP;
     e3a:	4b0f      	ldr	r3, [pc, #60]	; (e78 <_i2c_mux_callback+0x60>)
     e3c:	2201      	movs	r2, #1
     e3e:	701a      	strb	r2, [r3, #0]
            i2c_write(_i2c_mux_data);
     e40:	4b0f      	ldr	r3, [pc, #60]	; (e80 <_i2c_mux_callback+0x68>)
     e42:	781b      	ldrb	r3, [r3, #0]
     e44:	0018      	movs	r0, r3
     e46:	4b0f      	ldr	r3, [pc, #60]	; (e84 <_i2c_mux_callback+0x6c>)
     e48:	4798      	blx	r3
        } break;
     e4a:	e00f      	b.n	e6c <_i2c_mux_callback+0x54>

        case I2C_MUX_STOP: {
            if (!i2c_tx_flag()) break;
     e4c:	4b0b      	ldr	r3, [pc, #44]	; (e7c <_i2c_mux_callback+0x64>)
     e4e:	4798      	blx	r3
     e50:	1e03      	subs	r3, r0, #0
     e52:	d00a      	beq.n	e6a <_i2c_mux_callback+0x52>
            _i2c_mux_state = I2C_MUX_DONE;
     e54:	4b08      	ldr	r3, [pc, #32]	; (e78 <_i2c_mux_callback+0x60>)
     e56:	2202      	movs	r2, #2
     e58:	701a      	strb	r2, [r3, #0]
            complete = 1;
     e5a:	1dfb      	adds	r3, r7, #7
     e5c:	2201      	movs	r2, #1
     e5e:	701a      	strb	r2, [r3, #0]
            i2c_tx_stop();
     e60:	4b09      	ldr	r3, [pc, #36]	; (e88 <_i2c_mux_callback+0x70>)
     e62:	4798      	blx	r3
        } break;
     e64:	e002      	b.n	e6c <_i2c_mux_callback+0x54>
            if (!i2c_tx_flag()) break;
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	e000      	b.n	e6c <_i2c_mux_callback+0x54>
            if (!i2c_tx_flag()) break;
     e6a:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
     e6c:	1dfb      	adds	r3, r7, #7
     e6e:	781b      	ldrb	r3, [r3, #0]
}
     e70:	0018      	movs	r0, r3
     e72:	46bd      	mov	sp, r7
     e74:	b002      	add	sp, #8
     e76:	bd80      	pop	{r7, pc}
     e78:	20000498 	.word	0x20000498
     e7c:	00001425 	.word	0x00001425
     e80:	20000497 	.word	0x20000497
     e84:	0000149d 	.word	0x0000149d
     e88:	0000158d 	.word	0x0000158d

00000e8c <kx003_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void kx003_init(uint8_t addr) {
     e8c:	b580      	push	{r7, lr}
     e8e:	b082      	sub	sp, #8
     e90:	af00      	add	r7, sp, #0
     e92:	0002      	movs	r2, r0
     e94:	1dfb      	adds	r3, r7, #7
     e96:	701a      	strb	r2, [r3, #0]
    // First turn off the kx003
    kx003_stop(addr);
     e98:	1dfb      	adds	r3, r7, #7
     e9a:	781b      	ldrb	r3, [r3, #0]
     e9c:	0018      	movs	r0, r3
     e9e:	4b17      	ldr	r3, [pc, #92]	; (efc <kx003_init+0x70>)
     ea0:	4798      	blx	r3

    // Set the callback mode
    _kx003_mode = KX003_INIT;
     ea2:	4b17      	ldr	r3, [pc, #92]	; (f00 <kx003_init+0x74>)
     ea4:	2200      	movs	r2, #0
     ea6:	701a      	strb	r2, [r3, #0]
    
    // Wait and send the initial message
    while (i2c_registered());
     ea8:	46c0      	nop			; (mov r8, r8)
     eaa:	4b16      	ldr	r3, [pc, #88]	; (f04 <kx003_init+0x78>)
     eac:	4798      	blx	r3
     eae:	1e03      	subs	r3, r0, #0
     eb0:	d1fb      	bne.n	eaa <kx003_init+0x1e>
    while (!i2c_register(_kx003_init_callback));
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	4b14      	ldr	r3, [pc, #80]	; (f08 <kx003_init+0x7c>)
     eb6:	0018      	movs	r0, r3
     eb8:	4b14      	ldr	r3, [pc, #80]	; (f0c <kx003_init+0x80>)
     eba:	4798      	blx	r3
     ebc:	1e03      	subs	r3, r0, #0
     ebe:	d0f9      	beq.n	eb4 <kx003_init+0x28>
    _kx003_idx = 0;
     ec0:	4b13      	ldr	r3, [pc, #76]	; (f10 <kx003_init+0x84>)
     ec2:	2200      	movs	r2, #0
     ec4:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
     ec6:	1dfb      	adds	r3, r7, #7
     ec8:	781b      	ldrb	r3, [r3, #0]
     eca:	0018      	movs	r0, r3
     ecc:	4b11      	ldr	r3, [pc, #68]	; (f14 <kx003_init+0x88>)
     ece:	4798      	blx	r3

    while (i2c_registered());
     ed0:	46c0      	nop			; (mov r8, r8)
     ed2:	4b0c      	ldr	r3, [pc, #48]	; (f04 <kx003_init+0x78>)
     ed4:	4798      	blx	r3
     ed6:	1e03      	subs	r3, r0, #0
     ed8:	d1fb      	bne.n	ed2 <kx003_init+0x46>

    // Reset state machine
    _kx003_reg = 0;
     eda:	4b0f      	ldr	r3, [pc, #60]	; (f18 <kx003_init+0x8c>)
     edc:	2200      	movs	r2, #0
     ede:	701a      	strb	r2, [r3, #0]
    _kx003_mode = KX003_INIT;
     ee0:	4b07      	ldr	r3, [pc, #28]	; (f00 <kx003_init+0x74>)
     ee2:	2200      	movs	r2, #0
     ee4:	701a      	strb	r2, [r3, #0]
    _kx003_addr = addr;
     ee6:	4b0d      	ldr	r3, [pc, #52]	; (f1c <kx003_init+0x90>)
     ee8:	1dfa      	adds	r2, r7, #7
     eea:	7812      	ldrb	r2, [r2, #0]
     eec:	701a      	strb	r2, [r3, #0]
    _kx003_idx = 0;
     eee:	4b08      	ldr	r3, [pc, #32]	; (f10 <kx003_init+0x84>)
     ef0:	2200      	movs	r2, #0
     ef2:	701a      	strb	r2, [r3, #0]
}
     ef4:	46c0      	nop			; (mov r8, r8)
     ef6:	46bd      	mov	sp, r7
     ef8:	b002      	add	sp, #8
     efa:	bd80      	pop	{r7, pc}
     efc:	00000f21 	.word	0x00000f21
     f00:	200004a4 	.word	0x200004a4
     f04:	000015ad 	.word	0x000015ad
     f08:	00001061 	.word	0x00001061
     f0c:	000014d1 	.word	0x000014d1
     f10:	2000049d 	.word	0x2000049d
     f14:	000013e5 	.word	0x000013e5
     f18:	2000049c 	.word	0x2000049c
     f1c:	200004a5 	.word	0x200004a5

00000f20 <kx003_stop>:

//==============================================================================
void kx003_stop(uint8_t addr) {
     f20:	b580      	push	{r7, lr}
     f22:	b082      	sub	sp, #8
     f24:	af00      	add	r7, sp, #0
     f26:	0002      	movs	r2, r0
     f28:	1dfb      	adds	r3, r7, #7
     f2a:	701a      	strb	r2, [r3, #0]
    // Set the callback mode
    _kx003_mode = KX003_STOP;
     f2c:	4b16      	ldr	r3, [pc, #88]	; (f88 <kx003_stop+0x68>)
     f2e:	2200      	movs	r2, #0
     f30:	701a      	strb	r2, [r3, #0]
    
    // Wait and send the initial message
    while (i2c_registered());
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	4b15      	ldr	r3, [pc, #84]	; (f8c <kx003_stop+0x6c>)
     f36:	4798      	blx	r3
     f38:	1e03      	subs	r3, r0, #0
     f3a:	d1fb      	bne.n	f34 <kx003_stop+0x14>
    while (!i2c_register(_kx003_stop_callback));
     f3c:	46c0      	nop			; (mov r8, r8)
     f3e:	4b14      	ldr	r3, [pc, #80]	; (f90 <kx003_stop+0x70>)
     f40:	0018      	movs	r0, r3
     f42:	4b14      	ldr	r3, [pc, #80]	; (f94 <kx003_stop+0x74>)
     f44:	4798      	blx	r3
     f46:	1e03      	subs	r3, r0, #0
     f48:	d0f9      	beq.n	f3e <kx003_stop+0x1e>
    _kx003_idx = 0;
     f4a:	4b13      	ldr	r3, [pc, #76]	; (f98 <kx003_stop+0x78>)
     f4c:	2200      	movs	r2, #0
     f4e:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
     f50:	1dfb      	adds	r3, r7, #7
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	0018      	movs	r0, r3
     f56:	4b11      	ldr	r3, [pc, #68]	; (f9c <kx003_stop+0x7c>)
     f58:	4798      	blx	r3

    while (i2c_registered());
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	4b0b      	ldr	r3, [pc, #44]	; (f8c <kx003_stop+0x6c>)
     f5e:	4798      	blx	r3
     f60:	1e03      	subs	r3, r0, #0
     f62:	d1fb      	bne.n	f5c <kx003_stop+0x3c>

    // Reset state machine
    _kx003_reg = 0;
     f64:	4b0e      	ldr	r3, [pc, #56]	; (fa0 <kx003_stop+0x80>)
     f66:	2200      	movs	r2, #0
     f68:	701a      	strb	r2, [r3, #0]
    _kx003_mode = KX003_STOP;
     f6a:	4b07      	ldr	r3, [pc, #28]	; (f88 <kx003_stop+0x68>)
     f6c:	2200      	movs	r2, #0
     f6e:	701a      	strb	r2, [r3, #0]
    _kx003_addr = addr;
     f70:	4b0c      	ldr	r3, [pc, #48]	; (fa4 <kx003_stop+0x84>)
     f72:	1dfa      	adds	r2, r7, #7
     f74:	7812      	ldrb	r2, [r2, #0]
     f76:	701a      	strb	r2, [r3, #0]
    _kx003_idx = 0;
     f78:	4b07      	ldr	r3, [pc, #28]	; (f98 <kx003_stop+0x78>)
     f7a:	2200      	movs	r2, #0
     f7c:	701a      	strb	r2, [r3, #0]
}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	46bd      	mov	sp, r7
     f82:	b002      	add	sp, #8
     f84:	bd80      	pop	{r7, pc}
     f86:	46c0      	nop			; (mov r8, r8)
     f88:	200004a4 	.word	0x200004a4
     f8c:	000015ad 	.word	0x000015ad
     f90:	000010e5 	.word	0x000010e5
     f94:	000014d1 	.word	0x000014d1
     f98:	2000049d 	.word	0x2000049d
     f9c:	000013e5 	.word	0x000013e5
     fa0:	2000049c 	.word	0x2000049c
     fa4:	200004a5 	.word	0x200004a5

00000fa8 <kx003_read>:

//==============================================================================
uint8_t kx003_read(uint8_t addr, uint8_t reg, uint8_t* dest, uint8_t bytes) {
     fa8:	b590      	push	{r4, r7, lr}
     faa:	b083      	sub	sp, #12
     fac:	af00      	add	r7, sp, #0
     fae:	0004      	movs	r4, r0
     fb0:	0008      	movs	r0, r1
     fb2:	603a      	str	r2, [r7, #0]
     fb4:	0019      	movs	r1, r3
     fb6:	1dfb      	adds	r3, r7, #7
     fb8:	1c22      	adds	r2, r4, #0
     fba:	701a      	strb	r2, [r3, #0]
     fbc:	1dbb      	adds	r3, r7, #6
     fbe:	1c02      	adds	r2, r0, #0
     fc0:	701a      	strb	r2, [r3, #0]
     fc2:	1d7b      	adds	r3, r7, #5
     fc4:	1c0a      	adds	r2, r1, #0
     fc6:	701a      	strb	r2, [r3, #0]
    if (bytes && i2c_register(_kx003_read_callback)) {
     fc8:	1d7b      	adds	r3, r7, #5
     fca:	781b      	ldrb	r3, [r3, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d021      	beq.n	1014 <kx003_read+0x6c>
     fd0:	4b13      	ldr	r3, [pc, #76]	; (1020 <kx003_read+0x78>)
     fd2:	0018      	movs	r0, r3
     fd4:	4b13      	ldr	r3, [pc, #76]	; (1024 <kx003_read+0x7c>)
     fd6:	4798      	blx	r3
     fd8:	1e03      	subs	r3, r0, #0
     fda:	d01b      	beq.n	1014 <kx003_read+0x6c>
        _kx003_reg = reg;
     fdc:	4b12      	ldr	r3, [pc, #72]	; (1028 <kx003_read+0x80>)
     fde:	1dba      	adds	r2, r7, #6
     fe0:	7812      	ldrb	r2, [r2, #0]
     fe2:	701a      	strb	r2, [r3, #0]
        _kx003_bytes = bytes;
     fe4:	4b11      	ldr	r3, [pc, #68]	; (102c <kx003_read+0x84>)
     fe6:	1d7a      	adds	r2, r7, #5
     fe8:	7812      	ldrb	r2, [r2, #0]
     fea:	701a      	strb	r2, [r3, #0]
        _kx003_mode = KX003_REG;
     fec:	4b10      	ldr	r3, [pc, #64]	; (1030 <kx003_read+0x88>)
     fee:	2202      	movs	r2, #2
     ff0:	701a      	strb	r2, [r3, #0]
        _kx003_addr = addr;
     ff2:	4b10      	ldr	r3, [pc, #64]	; (1034 <kx003_read+0x8c>)
     ff4:	1dfa      	adds	r2, r7, #7
     ff6:	7812      	ldrb	r2, [r2, #0]
     ff8:	701a      	strb	r2, [r3, #0]
        _kx003_dest = dest;
     ffa:	4b0f      	ldr	r3, [pc, #60]	; (1038 <kx003_read+0x90>)
     ffc:	683a      	ldr	r2, [r7, #0]
     ffe:	601a      	str	r2, [r3, #0]
        _kx003_idx = 0;
    1000:	4b0e      	ldr	r3, [pc, #56]	; (103c <kx003_read+0x94>)
    1002:	2200      	movs	r2, #0
    1004:	701a      	strb	r2, [r3, #0]
        i2c_begin_write(addr);
    1006:	1dfb      	adds	r3, r7, #7
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	0018      	movs	r0, r3
    100c:	4b0c      	ldr	r3, [pc, #48]	; (1040 <kx003_read+0x98>)
    100e:	4798      	blx	r3
        return 1;
    1010:	2301      	movs	r3, #1
    1012:	e000      	b.n	1016 <kx003_read+0x6e>
    }
    return 0;
    1014:	2300      	movs	r3, #0
}
    1016:	0018      	movs	r0, r3
    1018:	46bd      	mov	sp, r7
    101a:	b003      	add	sp, #12
    101c:	bd90      	pop	{r4, r7, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00001169 	.word	0x00001169
    1024:	000014d1 	.word	0x000014d1
    1028:	2000049c 	.word	0x2000049c
    102c:	2000049e 	.word	0x2000049e
    1030:	200004a4 	.word	0x200004a4
    1034:	200004a5 	.word	0x200004a5
    1038:	200004a0 	.word	0x200004a0
    103c:	2000049d 	.word	0x2000049d
    1040:	000013e5 	.word	0x000013e5

00001044 <kx003_read_complete>:

//==============================================================================
uint8_t kx003_read_complete() {
    1044:	b580      	push	{r7, lr}
    1046:	af00      	add	r7, sp, #0
    return (_kx003_mode == KX003_RX_END);
    1048:	4b04      	ldr	r3, [pc, #16]	; (105c <kx003_read_complete+0x18>)
    104a:	781b      	ldrb	r3, [r3, #0]
    104c:	b2db      	uxtb	r3, r3
    104e:	3b05      	subs	r3, #5
    1050:	425a      	negs	r2, r3
    1052:	4153      	adcs	r3, r2
    1054:	b2db      	uxtb	r3, r3
}
    1056:	0018      	movs	r0, r3
    1058:	46bd      	mov	sp, r7
    105a:	bd80      	pop	{r7, pc}
    105c:	200004a4 	.word	0x200004a4

00001060 <_kx003_init_callback>:
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _kx003_init_callback() {
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    1066:	1dfb      	adds	r3, r7, #7
    1068:	2200      	movs	r2, #0
    106a:	701a      	strb	r2, [r3, #0]

    switch (_kx003_mode) {
    106c:	4b19      	ldr	r3, [pc, #100]	; (10d4 <_kx003_init_callback+0x74>)
    106e:	781b      	ldrb	r3, [r3, #0]
    1070:	b2db      	uxtb	r3, r3
    1072:	2b01      	cmp	r3, #1
    1074:	d019      	beq.n	10aa <_kx003_init_callback+0x4a>
    1076:	2b1d      	cmp	r3, #29
    1078:	d00c      	beq.n	1094 <_kx003_init_callback+0x34>
    107a:	2b00      	cmp	r3, #0
    107c:	d124      	bne.n	10c8 <_kx003_init_callback+0x68>
        // Initialization callback
        case KX003_INIT: {
            if (!i2c_tx_flag()) break;
    107e:	4b16      	ldr	r3, [pc, #88]	; (10d8 <_kx003_init_callback+0x78>)
    1080:	4798      	blx	r3
    1082:	1e03      	subs	r3, r0, #0
    1084:	d01b      	beq.n	10be <_kx003_init_callback+0x5e>
            _kx003_mode = KX003_CTRL_REG;
    1086:	4b13      	ldr	r3, [pc, #76]	; (10d4 <_kx003_init_callback+0x74>)
    1088:	221d      	movs	r2, #29
    108a:	701a      	strb	r2, [r3, #0]
            i2c_write(KX003_CTRL_REG);
    108c:	201d      	movs	r0, #29
    108e:	4b13      	ldr	r3, [pc, #76]	; (10dc <_kx003_init_callback+0x7c>)
    1090:	4798      	blx	r3
        } break;
    1092:	e019      	b.n	10c8 <_kx003_init_callback+0x68>

        case KX003_CTRL_REG: {
            if (!i2c_tx_flag()) break;
    1094:	4b10      	ldr	r3, [pc, #64]	; (10d8 <_kx003_init_callback+0x78>)
    1096:	4798      	blx	r3
    1098:	1e03      	subs	r3, r0, #0
    109a:	d012      	beq.n	10c2 <_kx003_init_callback+0x62>
            _kx003_mode = KX003_TX_CLEAR;
    109c:	4b0d      	ldr	r3, [pc, #52]	; (10d4 <_kx003_init_callback+0x74>)
    109e:	2201      	movs	r2, #1
    10a0:	701a      	strb	r2, [r3, #0]
            i2c_write(KX003_CTRL_PC1 | KX003_CTRL_RES | KX003_CTRL_GS0);
    10a2:	20c8      	movs	r0, #200	; 0xc8
    10a4:	4b0d      	ldr	r3, [pc, #52]	; (10dc <_kx003_init_callback+0x7c>)
    10a6:	4798      	blx	r3
        } break;
    10a8:	e00e      	b.n	10c8 <_kx003_init_callback+0x68>

        case KX003_TX_CLEAR: {
            if (!i2c_tx_flag()) break;
    10aa:	4b0b      	ldr	r3, [pc, #44]	; (10d8 <_kx003_init_callback+0x78>)
    10ac:	4798      	blx	r3
    10ae:	1e03      	subs	r3, r0, #0
    10b0:	d009      	beq.n	10c6 <_kx003_init_callback+0x66>
            i2c_tx_stop();
    10b2:	4b0b      	ldr	r3, [pc, #44]	; (10e0 <_kx003_init_callback+0x80>)
    10b4:	4798      	blx	r3
            complete = 1;
    10b6:	1dfb      	adds	r3, r7, #7
    10b8:	2201      	movs	r2, #1
    10ba:	701a      	strb	r2, [r3, #0]
        } break;
    10bc:	e004      	b.n	10c8 <_kx003_init_callback+0x68>
            if (!i2c_tx_flag()) break;
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	e002      	b.n	10c8 <_kx003_init_callback+0x68>
            if (!i2c_tx_flag()) break;
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	e000      	b.n	10c8 <_kx003_init_callback+0x68>
            if (!i2c_tx_flag()) break;
    10c6:	46c0      	nop			; (mov r8, r8)
    }

    return complete;
    10c8:	1dfb      	adds	r3, r7, #7
    10ca:	781b      	ldrb	r3, [r3, #0]
}
    10cc:	0018      	movs	r0, r3
    10ce:	46bd      	mov	sp, r7
    10d0:	b002      	add	sp, #8
    10d2:	bd80      	pop	{r7, pc}
    10d4:	200004a4 	.word	0x200004a4
    10d8:	00001425 	.word	0x00001425
    10dc:	0000149d 	.word	0x0000149d
    10e0:	0000158d 	.word	0x0000158d

000010e4 <_kx003_stop_callback>:

//==============================================================================
uint8_t _kx003_stop_callback() {
    10e4:	b580      	push	{r7, lr}
    10e6:	b082      	sub	sp, #8
    10e8:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    10ea:	1dfb      	adds	r3, r7, #7
    10ec:	2200      	movs	r2, #0
    10ee:	701a      	strb	r2, [r3, #0]

    switch (_kx003_mode) {
    10f0:	4b19      	ldr	r3, [pc, #100]	; (1158 <_kx003_stop_callback+0x74>)
    10f2:	781b      	ldrb	r3, [r3, #0]
    10f4:	b2db      	uxtb	r3, r3
    10f6:	2b01      	cmp	r3, #1
    10f8:	d019      	beq.n	112e <_kx003_stop_callback+0x4a>
    10fa:	2b1d      	cmp	r3, #29
    10fc:	d00c      	beq.n	1118 <_kx003_stop_callback+0x34>
    10fe:	2b00      	cmp	r3, #0
    1100:	d124      	bne.n	114c <_kx003_stop_callback+0x68>
        // Initialization callback
        case KX003_INIT: {
            if (!i2c_tx_flag()) break;
    1102:	4b16      	ldr	r3, [pc, #88]	; (115c <_kx003_stop_callback+0x78>)
    1104:	4798      	blx	r3
    1106:	1e03      	subs	r3, r0, #0
    1108:	d01b      	beq.n	1142 <_kx003_stop_callback+0x5e>
            i2c_write(KX003_CTRL_REG);
    110a:	201d      	movs	r0, #29
    110c:	4b14      	ldr	r3, [pc, #80]	; (1160 <_kx003_stop_callback+0x7c>)
    110e:	4798      	blx	r3
            _kx003_mode = KX003_CTRL_REG;
    1110:	4b11      	ldr	r3, [pc, #68]	; (1158 <_kx003_stop_callback+0x74>)
    1112:	221d      	movs	r2, #29
    1114:	701a      	strb	r2, [r3, #0]
        } break;
    1116:	e019      	b.n	114c <_kx003_stop_callback+0x68>

        case KX003_CTRL_REG: {
            if (!i2c_tx_flag()) break;
    1118:	4b10      	ldr	r3, [pc, #64]	; (115c <_kx003_stop_callback+0x78>)
    111a:	4798      	blx	r3
    111c:	1e03      	subs	r3, r0, #0
    111e:	d012      	beq.n	1146 <_kx003_stop_callback+0x62>
            i2c_write(0x00);
    1120:	2000      	movs	r0, #0
    1122:	4b0f      	ldr	r3, [pc, #60]	; (1160 <_kx003_stop_callback+0x7c>)
    1124:	4798      	blx	r3
            _kx003_mode = KX003_TX_CLEAR;
    1126:	4b0c      	ldr	r3, [pc, #48]	; (1158 <_kx003_stop_callback+0x74>)
    1128:	2201      	movs	r2, #1
    112a:	701a      	strb	r2, [r3, #0]
        } break;
    112c:	e00e      	b.n	114c <_kx003_stop_callback+0x68>

        case KX003_TX_CLEAR: {
            if (!i2c_tx_flag()) break;
    112e:	4b0b      	ldr	r3, [pc, #44]	; (115c <_kx003_stop_callback+0x78>)
    1130:	4798      	blx	r3
    1132:	1e03      	subs	r3, r0, #0
    1134:	d009      	beq.n	114a <_kx003_stop_callback+0x66>
            i2c_tx_stop();
    1136:	4b0b      	ldr	r3, [pc, #44]	; (1164 <_kx003_stop_callback+0x80>)
    1138:	4798      	blx	r3
            complete = 1;
    113a:	1dfb      	adds	r3, r7, #7
    113c:	2201      	movs	r2, #1
    113e:	701a      	strb	r2, [r3, #0]
        } break;
    1140:	e004      	b.n	114c <_kx003_stop_callback+0x68>
            if (!i2c_tx_flag()) break;
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	e002      	b.n	114c <_kx003_stop_callback+0x68>
            if (!i2c_tx_flag()) break;
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	e000      	b.n	114c <_kx003_stop_callback+0x68>
            if (!i2c_tx_flag()) break;
    114a:	46c0      	nop			; (mov r8, r8)
    }

    return complete;
    114c:	1dfb      	adds	r3, r7, #7
    114e:	781b      	ldrb	r3, [r3, #0]
}
    1150:	0018      	movs	r0, r3
    1152:	46bd      	mov	sp, r7
    1154:	b002      	add	sp, #8
    1156:	bd80      	pop	{r7, pc}
    1158:	200004a4 	.word	0x200004a4
    115c:	00001425 	.word	0x00001425
    1160:	0000149d 	.word	0x0000149d
    1164:	0000158d 	.word	0x0000158d

00001168 <_kx003_read_callback>:

//==============================================================================
uint8_t _kx003_read_callback() {
    1168:	b590      	push	{r4, r7, lr}
    116a:	b083      	sub	sp, #12
    116c:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    116e:	1dfb      	adds	r3, r7, #7
    1170:	2200      	movs	r2, #0
    1172:	701a      	strb	r2, [r3, #0]

    switch (_kx003_mode) {
    1174:	4b39      	ldr	r3, [pc, #228]	; (125c <_kx003_read_callback+0xf4>)
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	b2db      	uxtb	r3, r3
    117a:	2b05      	cmp	r3, #5
    117c:	d900      	bls.n	1180 <_kx003_read_callback+0x18>
    117e:	e067      	b.n	1250 <_kx003_read_callback+0xe8>
    1180:	009a      	lsls	r2, r3, #2
    1182:	4b37      	ldr	r3, [pc, #220]	; (1260 <_kx003_read_callback+0xf8>)
    1184:	18d3      	adds	r3, r2, r3
    1186:	681b      	ldr	r3, [r3, #0]
    1188:	469f      	mov	pc, r3
        // Write which register to read
        case KX003_REG: {
            if (!i2c_tx_flag()) break;
    118a:	4b36      	ldr	r3, [pc, #216]	; (1264 <_kx003_read_callback+0xfc>)
    118c:	4798      	blx	r3
    118e:	1e03      	subs	r3, r0, #0
    1190:	d055      	beq.n	123e <_kx003_read_callback+0xd6>
            _kx003_mode = KX003_TX_CLEAR;
    1192:	4b32      	ldr	r3, [pc, #200]	; (125c <_kx003_read_callback+0xf4>)
    1194:	2201      	movs	r2, #1
    1196:	701a      	strb	r2, [r3, #0]
            i2c_write(_kx003_reg);
    1198:	4b33      	ldr	r3, [pc, #204]	; (1268 <_kx003_read_callback+0x100>)
    119a:	781b      	ldrb	r3, [r3, #0]
    119c:	0018      	movs	r0, r3
    119e:	4b33      	ldr	r3, [pc, #204]	; (126c <_kx003_read_callback+0x104>)
    11a0:	4798      	blx	r3
        } break;
    11a2:	e055      	b.n	1250 <_kx003_read_callback+0xe8>

        // Remove this
        case KX003_TX_CLEAR: {
            if (!i2c_tx_flag()) break;
    11a4:	4b2f      	ldr	r3, [pc, #188]	; (1264 <_kx003_read_callback+0xfc>)
    11a6:	4798      	blx	r3
    11a8:	1e03      	subs	r3, r0, #0
    11aa:	d04a      	beq.n	1242 <_kx003_read_callback+0xda>
            _kx003_mode = KX003_RX_START;
    11ac:	4b2b      	ldr	r3, [pc, #172]	; (125c <_kx003_read_callback+0xf4>)
    11ae:	2203      	movs	r2, #3
    11b0:	701a      	strb	r2, [r3, #0]
            serial_write(TX_E);
    11b2:	2033      	movs	r0, #51	; 0x33
    11b4:	4b2e      	ldr	r3, [pc, #184]	; (1270 <_kx003_read_callback+0x108>)
    11b6:	4798      	blx	r3
        } break;
    11b8:	e04a      	b.n	1250 <_kx003_read_callback+0xe8>

        // Begin the read
        case KX003_RX_START: {
            if (!i2c_tx_flag()) break;
    11ba:	4b2a      	ldr	r3, [pc, #168]	; (1264 <_kx003_read_callback+0xfc>)
    11bc:	4798      	blx	r3
    11be:	1e03      	subs	r3, r0, #0
    11c0:	d041      	beq.n	1246 <_kx003_read_callback+0xde>
            _kx003_mode = KX003_RX;
    11c2:	4b26      	ldr	r3, [pc, #152]	; (125c <_kx003_read_callback+0xf4>)
    11c4:	2204      	movs	r2, #4
    11c6:	701a      	strb	r2, [r3, #0]
            i2c_begin_read(_kx003_addr);
    11c8:	4b2a      	ldr	r3, [pc, #168]	; (1274 <_kx003_read_callback+0x10c>)
    11ca:	781b      	ldrb	r3, [r3, #0]
    11cc:	0018      	movs	r0, r3
    11ce:	4b2a      	ldr	r3, [pc, #168]	; (1278 <_kx003_read_callback+0x110>)
    11d0:	4798      	blx	r3
        } break;
    11d2:	e03d      	b.n	1250 <_kx003_read_callback+0xe8>

        // Continue reading
        case KX003_RX: {
            if (!i2c_rx_flag()) break;
    11d4:	4b29      	ldr	r3, [pc, #164]	; (127c <_kx003_read_callback+0x114>)
    11d6:	4798      	blx	r3
    11d8:	1e03      	subs	r3, r0, #0
    11da:	d036      	beq.n	124a <_kx003_read_callback+0xe2>
            if (_kx003_idx < _kx003_bytes-1) {
    11dc:	4b28      	ldr	r3, [pc, #160]	; (1280 <_kx003_read_callback+0x118>)
    11de:	781b      	ldrb	r3, [r3, #0]
    11e0:	001a      	movs	r2, r3
    11e2:	4b28      	ldr	r3, [pc, #160]	; (1284 <_kx003_read_callback+0x11c>)
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	b2db      	uxtb	r3, r3
    11e8:	3b01      	subs	r3, #1
    11ea:	429a      	cmp	r2, r3
    11ec:	da11      	bge.n	1212 <_kx003_read_callback+0xaa>
                uint8_t data = i2c_read();
    11ee:	1dbc      	adds	r4, r7, #6
    11f0:	4b25      	ldr	r3, [pc, #148]	; (1288 <_kx003_read_callback+0x120>)
    11f2:	4798      	blx	r3
    11f4:	0003      	movs	r3, r0
    11f6:	7023      	strb	r3, [r4, #0]
                _kx003_dest[_kx003_idx++] = data;
    11f8:	4b24      	ldr	r3, [pc, #144]	; (128c <_kx003_read_callback+0x124>)
    11fa:	681a      	ldr	r2, [r3, #0]
    11fc:	4b20      	ldr	r3, [pc, #128]	; (1280 <_kx003_read_callback+0x118>)
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	1c59      	adds	r1, r3, #1
    1202:	b2c8      	uxtb	r0, r1
    1204:	491e      	ldr	r1, [pc, #120]	; (1280 <_kx003_read_callback+0x118>)
    1206:	7008      	strb	r0, [r1, #0]
    1208:	18d3      	adds	r3, r2, r3
    120a:	1dba      	adds	r2, r7, #6
    120c:	7812      	ldrb	r2, [r2, #0]
    120e:	701a      	strb	r2, [r3, #0]
                break;
    1210:	e01e      	b.n	1250 <_kx003_read_callback+0xe8>
            }
            _kx003_mode = KX003_RX_END;
    1212:	4b12      	ldr	r3, [pc, #72]	; (125c <_kx003_read_callback+0xf4>)
    1214:	2205      	movs	r2, #5
    1216:	701a      	strb	r2, [r3, #0]
        } // Allow passing when enough bytes rx 

        // End reading
        case KX003_RX_END: {
            if (!i2c_rx_flag()) break;
    1218:	4b18      	ldr	r3, [pc, #96]	; (127c <_kx003_read_callback+0x114>)
    121a:	4798      	blx	r3
    121c:	1e03      	subs	r3, r0, #0
    121e:	d016      	beq.n	124e <_kx003_read_callback+0xe6>
            i2c_rx_stop();
    1220:	4b1b      	ldr	r3, [pc, #108]	; (1290 <_kx003_read_callback+0x128>)
    1222:	4798      	blx	r3
            _kx003_dest[_kx003_idx] = i2c_read();
    1224:	4b19      	ldr	r3, [pc, #100]	; (128c <_kx003_read_callback+0x124>)
    1226:	681b      	ldr	r3, [r3, #0]
    1228:	4a15      	ldr	r2, [pc, #84]	; (1280 <_kx003_read_callback+0x118>)
    122a:	7812      	ldrb	r2, [r2, #0]
    122c:	189c      	adds	r4, r3, r2
    122e:	4b16      	ldr	r3, [pc, #88]	; (1288 <_kx003_read_callback+0x120>)
    1230:	4798      	blx	r3
    1232:	0003      	movs	r3, r0
    1234:	7023      	strb	r3, [r4, #0]
            complete = 1;
    1236:	1dfb      	adds	r3, r7, #7
    1238:	2201      	movs	r2, #1
    123a:	701a      	strb	r2, [r3, #0]
        } break;
    123c:	e008      	b.n	1250 <_kx003_read_callback+0xe8>
            if (!i2c_tx_flag()) break;
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	e006      	b.n	1250 <_kx003_read_callback+0xe8>
            if (!i2c_tx_flag()) break;
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	e004      	b.n	1250 <_kx003_read_callback+0xe8>
            if (!i2c_tx_flag()) break;
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	e002      	b.n	1250 <_kx003_read_callback+0xe8>
            if (!i2c_rx_flag()) break;
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	e000      	b.n	1250 <_kx003_read_callback+0xe8>
            if (!i2c_rx_flag()) break;
    124e:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
    1250:	1dfb      	adds	r3, r7, #7
    1252:	781b      	ldrb	r3, [r3, #0]
}
    1254:	0018      	movs	r0, r3
    1256:	46bd      	mov	sp, r7
    1258:	b003      	add	sp, #12
    125a:	bd90      	pop	{r4, r7, pc}
    125c:	200004a4 	.word	0x200004a4
    1260:	00005e08 	.word	0x00005e08
    1264:	00001425 	.word	0x00001425
    1268:	2000049c 	.word	0x2000049c
    126c:	0000149d 	.word	0x0000149d
    1270:	000028f9 	.word	0x000028f9
    1274:	200004a5 	.word	0x200004a5
    1278:	00001399 	.word	0x00001399
    127c:	00001439 	.word	0x00001439
    1280:	2000049d 	.word	0x2000049d
    1284:	2000049e 	.word	0x2000049e
    1288:	0000144d 	.word	0x0000144d
    128c:	200004a0 	.word	0x200004a0
    1290:	00001551 	.word	0x00001551

00001294 <i2c_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void i2c_init(uint32_t baudrate) {
    1294:	b580      	push	{r7, lr}
    1296:	b082      	sub	sp, #8
    1298:	af00      	add	r7, sp, #0
    129a:	6078      	str	r0, [r7, #4]
    // Set up i2c forwarding to serial
    I2C_callback.rx = _SERCOM3_Handler;
    129c:	4b11      	ldr	r3, [pc, #68]	; (12e4 <i2c_init+0x50>)
    129e:	4a12      	ldr	r2, [pc, #72]	; (12e8 <i2c_init+0x54>)
    12a0:	601a      	str	r2, [r3, #0]
    I2C_callback.tx = _SERCOM3_Handler;
    12a2:	4b10      	ldr	r3, [pc, #64]	; (12e4 <i2c_init+0x50>)
    12a4:	4a10      	ldr	r2, [pc, #64]	; (12e8 <i2c_init+0x54>)
    12a6:	605a      	str	r2, [r3, #4]

    // Remove these
    _i2c_init = 0;
    12a8:	4b10      	ldr	r3, [pc, #64]	; (12ec <i2c_init+0x58>)
    12aa:	2200      	movs	r2, #0
    12ac:	701a      	strb	r2, [r3, #0]
    _i2c_addr = 0;
    12ae:	4b10      	ldr	r3, [pc, #64]	; (12f0 <i2c_init+0x5c>)
    12b0:	2200      	movs	r2, #0
    12b2:	701a      	strb	r2, [r3, #0]
    _i2c_mode = 0;
    12b4:	4b0f      	ldr	r3, [pc, #60]	; (12f4 <i2c_init+0x60>)
    12b6:	2200      	movs	r2, #0
    12b8:	701a      	strb	r2, [r3, #0]
    _i2c_flag = 0;
    12ba:	4b0f      	ldr	r3, [pc, #60]	; (12f8 <i2c_init+0x64>)
    12bc:	2200      	movs	r2, #0
    12be:	701a      	strb	r2, [r3, #0]
    _reading = 0;
    12c0:	4b0e      	ldr	r3, [pc, #56]	; (12fc <i2c_init+0x68>)
    12c2:	2200      	movs	r2, #0
    12c4:	701a      	strb	r2, [r3, #0]
    _i2c_rx_buff = 0;
    12c6:	4b0e      	ldr	r3, [pc, #56]	; (1300 <i2c_init+0x6c>)
    12c8:	2200      	movs	r2, #0
    12ca:	701a      	strb	r2, [r3, #0]

    // Set the default rx/tx callbacks
    _i2c_default = _i2c_default_func;
    12cc:	4b0d      	ldr	r3, [pc, #52]	; (1304 <i2c_init+0x70>)
    12ce:	4a0e      	ldr	r2, [pc, #56]	; (1308 <i2c_init+0x74>)
    12d0:	601a      	str	r2, [r3, #0]
    _i2c_callback = _i2c_default_func;
    12d2:	4b0e      	ldr	r3, [pc, #56]	; (130c <i2c_init+0x78>)
    12d4:	4a0c      	ldr	r2, [pc, #48]	; (1308 <i2c_init+0x74>)
    12d6:	601a      	str	r2, [r3, #0]

    _i2c_timeout_reset();
    12d8:	4b0d      	ldr	r3, [pc, #52]	; (1310 <i2c_init+0x7c>)
    12da:	4798      	blx	r3
}
    12dc:	46c0      	nop			; (mov r8, r8)
    12de:	46bd      	mov	sp, r7
    12e0:	b002      	add	sp, #8
    12e2:	bd80      	pop	{r7, pc}
    12e4:	200004a8 	.word	0x200004a8
    12e8:	00001655 	.word	0x00001655
    12ec:	200004bc 	.word	0x200004bc
    12f0:	200004b2 	.word	0x200004b2
    12f4:	200004b3 	.word	0x200004b3
    12f8:	200004b4 	.word	0x200004b4
    12fc:	200004bd 	.word	0x200004bd
    1300:	200004b0 	.word	0x200004b0
    1304:	200004b8 	.word	0x200004b8
    1308:	00001621 	.word	0x00001621
    130c:	200004c0 	.word	0x200004c0
    1310:	000015dd 	.word	0x000015dd

00001314 <i2c_stop>:

//==============================================================================
void i2c_stop() {
    1314:	b580      	push	{r7, lr}
    1316:	af00      	add	r7, sp, #0
    i2c_unregister(_i2c_callback);
    1318:	4b0c      	ldr	r3, [pc, #48]	; (134c <i2c_stop+0x38>)
    131a:	681b      	ldr	r3, [r3, #0]
    131c:	0018      	movs	r0, r3
    131e:	4b0c      	ldr	r3, [pc, #48]	; (1350 <i2c_stop+0x3c>)
    1320:	4798      	blx	r3

    // Remove these
    _i2c_init = 0;
    1322:	4b0c      	ldr	r3, [pc, #48]	; (1354 <i2c_stop+0x40>)
    1324:	2200      	movs	r2, #0
    1326:	701a      	strb	r2, [r3, #0]
    _i2c_addr = 0;
    1328:	4b0b      	ldr	r3, [pc, #44]	; (1358 <i2c_stop+0x44>)
    132a:	2200      	movs	r2, #0
    132c:	701a      	strb	r2, [r3, #0]
    _i2c_mode = 0;
    132e:	4b0b      	ldr	r3, [pc, #44]	; (135c <i2c_stop+0x48>)
    1330:	2200      	movs	r2, #0
    1332:	701a      	strb	r2, [r3, #0]
    _i2c_flag = 0;
    1334:	4b0a      	ldr	r3, [pc, #40]	; (1360 <i2c_stop+0x4c>)
    1336:	2200      	movs	r2, #0
    1338:	701a      	strb	r2, [r3, #0]
    _reading = 0;
    133a:	4b0a      	ldr	r3, [pc, #40]	; (1364 <i2c_stop+0x50>)
    133c:	2200      	movs	r2, #0
    133e:	701a      	strb	r2, [r3, #0]
    _i2c_rx_buff = 0;
    1340:	4b09      	ldr	r3, [pc, #36]	; (1368 <i2c_stop+0x54>)
    1342:	2200      	movs	r2, #0
    1344:	701a      	strb	r2, [r3, #0]
}
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	46bd      	mov	sp, r7
    134a:	bd80      	pop	{r7, pc}
    134c:	200004c0 	.word	0x200004c0
    1350:	0000151d 	.word	0x0000151d
    1354:	200004bc 	.word	0x200004bc
    1358:	200004b2 	.word	0x200004b2
    135c:	200004b3 	.word	0x200004b3
    1360:	200004b4 	.word	0x200004b4
    1364:	200004bd 	.word	0x200004bd
    1368:	200004b0 	.word	0x200004b0

0000136c <i2c_timeout>:

//==============================================================================
uint8_t i2c_timeout() {
    136c:	b580      	push	{r7, lr}
    136e:	af00      	add	r7, sp, #0
    if (_i2c_active) return _i2c_active = 0;
    1370:	4b07      	ldr	r3, [pc, #28]	; (1390 <i2c_timeout+0x24>)
    1372:	781b      	ldrb	r3, [r3, #0]
    1374:	b2db      	uxtb	r3, r3
    1376:	2b00      	cmp	r3, #0
    1378:	d004      	beq.n	1384 <i2c_timeout+0x18>
    137a:	4b05      	ldr	r3, [pc, #20]	; (1390 <i2c_timeout+0x24>)
    137c:	2200      	movs	r2, #0
    137e:	701a      	strb	r2, [r3, #0]
    1380:	2300      	movs	r3, #0
    1382:	e002      	b.n	138a <i2c_timeout+0x1e>
    else return i2c_registered();
    1384:	4b03      	ldr	r3, [pc, #12]	; (1394 <i2c_timeout+0x28>)
    1386:	4798      	blx	r3
    1388:	0003      	movs	r3, r0
}
    138a:	0018      	movs	r0, r3
    138c:	46bd      	mov	sp, r7
    138e:	bd80      	pop	{r7, pc}
    1390:	200004b1 	.word	0x200004b1
    1394:	000015ad 	.word	0x000015ad

00001398 <i2c_begin_read>:

//==============================================================================
uint8_t i2c_begin_read(uint8_t addr)
{
    1398:	b580      	push	{r7, lr}
    139a:	b082      	sub	sp, #8
    139c:	af00      	add	r7, sp, #0
    139e:	0002      	movs	r2, r0
    13a0:	1dfb      	adds	r3, r7, #7
    13a2:	701a      	strb	r2, [r3, #0]
    // Remove this, initiates computer acting as i2c
    _i2c_init = 1;
    13a4:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <i2c_begin_read+0x38>)
    13a6:	2201      	movs	r2, #1
    13a8:	701a      	strb	r2, [r3, #0]
    _i2c_addr = addr;
    13aa:	4b0a      	ldr	r3, [pc, #40]	; (13d4 <i2c_begin_read+0x3c>)
    13ac:	1dfa      	adds	r2, r7, #7
    13ae:	7812      	ldrb	r2, [r2, #0]
    13b0:	701a      	strb	r2, [r3, #0]
    _reading = 1;
    13b2:	4b09      	ldr	r3, [pc, #36]	; (13d8 <i2c_begin_read+0x40>)
    13b4:	2201      	movs	r2, #1
    13b6:	701a      	strb	r2, [r3, #0]
    serial_write(RX_S);
    13b8:	2034      	movs	r0, #52	; 0x34
    13ba:	4b08      	ldr	r3, [pc, #32]	; (13dc <i2c_begin_read+0x44>)
    13bc:	4798      	blx	r3

    // Leave this, timeout update
    _i2c_active = 1;
    13be:	4b08      	ldr	r3, [pc, #32]	; (13e0 <i2c_begin_read+0x48>)
    13c0:	2201      	movs	r2, #1
    13c2:	701a      	strb	r2, [r3, #0]

    // I2C_SERCOM->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
	// I2C_SERCOM->I2CM.ADDR.reg = addr | I2C_TRANSFER_READ;
}
    13c4:	46c0      	nop			; (mov r8, r8)
    13c6:	0018      	movs	r0, r3
    13c8:	46bd      	mov	sp, r7
    13ca:	b002      	add	sp, #8
    13cc:	bd80      	pop	{r7, pc}
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	200004bc 	.word	0x200004bc
    13d4:	200004b2 	.word	0x200004b2
    13d8:	200004bd 	.word	0x200004bd
    13dc:	000028f9 	.word	0x000028f9
    13e0:	200004b1 	.word	0x200004b1

000013e4 <i2c_begin_write>:

//==============================================================================
uint8_t i2c_begin_write(uint8_t addr)
{
    13e4:	b580      	push	{r7, lr}
    13e6:	b082      	sub	sp, #8
    13e8:	af00      	add	r7, sp, #0
    13ea:	0002      	movs	r2, r0
    13ec:	1dfb      	adds	r3, r7, #7
    13ee:	701a      	strb	r2, [r3, #0]
    // Remove this, initiates computer acting as i2c
    _i2c_init = 1;
    13f0:	4b08      	ldr	r3, [pc, #32]	; (1414 <i2c_begin_write+0x30>)
    13f2:	2201      	movs	r2, #1
    13f4:	701a      	strb	r2, [r3, #0]
    _i2c_addr = addr;
    13f6:	4b08      	ldr	r3, [pc, #32]	; (1418 <i2c_begin_write+0x34>)
    13f8:	1dfa      	adds	r2, r7, #7
    13fa:	7812      	ldrb	r2, [r2, #0]
    13fc:	701a      	strb	r2, [r3, #0]
    serial_write(TX_S);
    13fe:	2031      	movs	r0, #49	; 0x31
    1400:	4b06      	ldr	r3, [pc, #24]	; (141c <i2c_begin_write+0x38>)
    1402:	4798      	blx	r3

    // Leave this, timeout update
    _i2c_active = 1;
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <i2c_begin_write+0x3c>)
    1406:	2201      	movs	r2, #1
    1408:	701a      	strb	r2, [r3, #0]

    // I2C_SERCOM->I2CM.ADDR.reg = addr | I2C_TRANSFER_WRITE;
}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	0018      	movs	r0, r3
    140e:	46bd      	mov	sp, r7
    1410:	b002      	add	sp, #8
    1412:	bd80      	pop	{r7, pc}
    1414:	200004bc 	.word	0x200004bc
    1418:	200004b2 	.word	0x200004b2
    141c:	000028f9 	.word	0x000028f9
    1420:	200004b1 	.word	0x200004b1

00001424 <i2c_tx_flag>:

//==============================================================================
uint8_t i2c_tx_flag()
{
    1424:	b580      	push	{r7, lr}
    1426:	af00      	add	r7, sp, #0
    // Check if tx is free
    return serial_tx_flag(); // SERCOM3->I2CM.INTFLAG.bit.MB;
    1428:	4b02      	ldr	r3, [pc, #8]	; (1434 <i2c_tx_flag+0x10>)
    142a:	4798      	blx	r3
    142c:	0003      	movs	r3, r0
}
    142e:	0018      	movs	r0, r3
    1430:	46bd      	mov	sp, r7
    1432:	bd80      	pop	{r7, pc}
    1434:	00002899 	.word	0x00002899

00001438 <i2c_rx_flag>:

//==============================================================================
uint8_t i2c_rx_flag() {
    1438:	b580      	push	{r7, lr}
    143a:	af00      	add	r7, sp, #0
    // Check if there is rx data
    return serial_rx_flag(); // SERCOM3->I2CM.INTFLAG.bit.SB;
    143c:	4b02      	ldr	r3, [pc, #8]	; (1448 <i2c_rx_flag+0x10>)
    143e:	4798      	blx	r3
    1440:	0003      	movs	r3, r0
}
    1442:	0018      	movs	r0, r3
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}
    1448:	000028b1 	.word	0x000028b1

0000144c <i2c_read>:

//==============================================================================
uint8_t i2c_read() {
    144c:	b590      	push	{r4, r7, lr}
    144e:	b083      	sub	sp, #12
    1450:	af00      	add	r7, sp, #0
    if (_reading) {
    1452:	4b0d      	ldr	r3, [pc, #52]	; (1488 <i2c_read+0x3c>)
    1454:	781b      	ldrb	r3, [r3, #0]
    1456:	b2db      	uxtb	r3, r3
    1458:	2b00      	cmp	r3, #0
    145a:	d00d      	beq.n	1478 <i2c_read+0x2c>
        uint8_t data = serial_read();
    145c:	1dfc      	adds	r4, r7, #7
    145e:	4b0b      	ldr	r3, [pc, #44]	; (148c <i2c_read+0x40>)
    1460:	4798      	blx	r3
    1462:	0003      	movs	r3, r0
    1464:	7023      	strb	r3, [r4, #0]
        _i2c_flag = 1;
    1466:	4b0a      	ldr	r3, [pc, #40]	; (1490 <i2c_read+0x44>)
    1468:	2201      	movs	r2, #1
    146a:	701a      	strb	r2, [r3, #0]
        serial_write(RX_C);
    146c:	2035      	movs	r0, #53	; 0x35
    146e:	4b09      	ldr	r3, [pc, #36]	; (1494 <i2c_read+0x48>)
    1470:	4798      	blx	r3
        return data;
    1472:	1dfb      	adds	r3, r7, #7
    1474:	781b      	ldrb	r3, [r3, #0]
    1476:	e002      	b.n	147e <i2c_read+0x32>
    } else {
        return _i2c_rx_buff;
    1478:	4b07      	ldr	r3, [pc, #28]	; (1498 <i2c_read+0x4c>)
    147a:	781b      	ldrb	r3, [r3, #0]
    147c:	b2db      	uxtb	r3, r3
    }

    // return I2C_SERCOM->I2CM.DATA.reg;
}
    147e:	0018      	movs	r0, r3
    1480:	46bd      	mov	sp, r7
    1482:	b003      	add	sp, #12
    1484:	bd90      	pop	{r4, r7, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	200004bd 	.word	0x200004bd
    148c:	000028c9 	.word	0x000028c9
    1490:	200004b4 	.word	0x200004b4
    1494:	000028f9 	.word	0x000028f9
    1498:	200004b0 	.word	0x200004b0

0000149c <i2c_write>:

//==============================================================================
void i2c_write(uint8_t data) {
    149c:	b580      	push	{r7, lr}
    149e:	b082      	sub	sp, #8
    14a0:	af00      	add	r7, sp, #0
    14a2:	0002      	movs	r2, r0
    14a4:	1dfb      	adds	r3, r7, #7
    14a6:	701a      	strb	r2, [r3, #0]
    _i2c_init = 1;
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <i2c_write+0x28>)
    14aa:	2201      	movs	r2, #1
    14ac:	701a      	strb	r2, [r3, #0]
    _i2c_addr = data;
    14ae:	4b06      	ldr	r3, [pc, #24]	; (14c8 <i2c_write+0x2c>)
    14b0:	1dfa      	adds	r2, r7, #7
    14b2:	7812      	ldrb	r2, [r2, #0]
    14b4:	701a      	strb	r2, [r3, #0]
    serial_write(TX_C);
    14b6:	2032      	movs	r0, #50	; 0x32
    14b8:	4b04      	ldr	r3, [pc, #16]	; (14cc <i2c_write+0x30>)
    14ba:	4798      	blx	r3
    // I2C_SERCOM->I2CM.DATA.reg = data;
}
    14bc:	46c0      	nop			; (mov r8, r8)
    14be:	46bd      	mov	sp, r7
    14c0:	b002      	add	sp, #8
    14c2:	bd80      	pop	{r7, pc}
    14c4:	200004bc 	.word	0x200004bc
    14c8:	200004b2 	.word	0x200004b2
    14cc:	000028f9 	.word	0x000028f9

000014d0 <i2c_register>:

//==============================================================================
uint8_t i2c_register(i2c_callback_t callback) {
    14d0:	b580      	push	{r7, lr}
    14d2:	b082      	sub	sp, #8
    14d4:	af00      	add	r7, sp, #0
    14d6:	6078      	str	r0, [r7, #4]
    if (!i2c_registered()) {
    14d8:	4b0b      	ldr	r3, [pc, #44]	; (1508 <i2c_register+0x38>)
    14da:	4798      	blx	r3
    14dc:	1e03      	subs	r3, r0, #0
    14de:	d10e      	bne.n	14fe <i2c_register+0x2e>
        // Remove this 
        if (serial_register(I2C_callback)) {
    14e0:	4b0a      	ldr	r3, [pc, #40]	; (150c <i2c_register+0x3c>)
    14e2:	6818      	ldr	r0, [r3, #0]
    14e4:	6859      	ldr	r1, [r3, #4]
    14e6:	4b0a      	ldr	r3, [pc, #40]	; (1510 <i2c_register+0x40>)
    14e8:	4798      	blx	r3
    14ea:	1e03      	subs	r3, r0, #0
    14ec:	d007      	beq.n	14fe <i2c_register+0x2e>
            // Leave this
            _i2c_active = 1;
    14ee:	4b09      	ldr	r3, [pc, #36]	; (1514 <i2c_register+0x44>)
    14f0:	2201      	movs	r2, #1
    14f2:	701a      	strb	r2, [r3, #0]
            _i2c_callback = callback;
    14f4:	4b08      	ldr	r3, [pc, #32]	; (1518 <i2c_register+0x48>)
    14f6:	687a      	ldr	r2, [r7, #4]
    14f8:	601a      	str	r2, [r3, #0]
            return 1;
    14fa:	2301      	movs	r3, #1
    14fc:	e000      	b.n	1500 <i2c_register+0x30>
        }
    }
    
    return 0;
    14fe:	2300      	movs	r3, #0
}
    1500:	0018      	movs	r0, r3
    1502:	46bd      	mov	sp, r7
    1504:	b002      	add	sp, #8
    1506:	bd80      	pop	{r7, pc}
    1508:	000015ad 	.word	0x000015ad
    150c:	200004a8 	.word	0x200004a8
    1510:	00002949 	.word	0x00002949
    1514:	200004b1 	.word	0x200004b1
    1518:	200004c0 	.word	0x200004c0

0000151c <i2c_unregister>:

//==============================================================================
void i2c_unregister(i2c_callback_t callback)
{
    151c:	b580      	push	{r7, lr}
    151e:	b082      	sub	sp, #8
    1520:	af00      	add	r7, sp, #0
    1522:	6078      	str	r0, [r7, #4]
    // Remove this
    serial_unregister(I2C_callback);
    1524:	4b06      	ldr	r3, [pc, #24]	; (1540 <i2c_unregister+0x24>)
    1526:	6818      	ldr	r0, [r3, #0]
    1528:	6859      	ldr	r1, [r3, #4]
    152a:	4b06      	ldr	r3, [pc, #24]	; (1544 <i2c_unregister+0x28>)
    152c:	4798      	blx	r3

    // Leave this
    _i2c_callback = _i2c_default;
    152e:	4b06      	ldr	r3, [pc, #24]	; (1548 <i2c_unregister+0x2c>)
    1530:	681a      	ldr	r2, [r3, #0]
    1532:	4b06      	ldr	r3, [pc, #24]	; (154c <i2c_unregister+0x30>)
    1534:	601a      	str	r2, [r3, #0]
}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	46bd      	mov	sp, r7
    153a:	b002      	add	sp, #8
    153c:	bd80      	pop	{r7, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	200004a8 	.word	0x200004a8
    1544:	00002a09 	.word	0x00002a09
    1548:	200004b8 	.word	0x200004b8
    154c:	200004c0 	.word	0x200004c0

00001550 <i2c_rx_stop>:
    i2c_register(callback);
    _i2c_default = callback;
}

//==============================================================================
void i2c_rx_stop() {
    1550:	b580      	push	{r7, lr}
    1552:	af00      	add	r7, sp, #0
    // Remove this
    _i2c_flag = 1;
    1554:	4b08      	ldr	r3, [pc, #32]	; (1578 <i2c_rx_stop+0x28>)
    1556:	2201      	movs	r2, #1
    1558:	701a      	strb	r2, [r3, #0]
    _reading = 0;
    155a:	4b08      	ldr	r3, [pc, #32]	; (157c <i2c_rx_stop+0x2c>)
    155c:	2200      	movs	r2, #0
    155e:	701a      	strb	r2, [r3, #0]
    _i2c_rx_buff = serial_read();
    1560:	4b07      	ldr	r3, [pc, #28]	; (1580 <i2c_rx_stop+0x30>)
    1562:	4798      	blx	r3
    1564:	0003      	movs	r3, r0
    1566:	001a      	movs	r2, r3
    1568:	4b06      	ldr	r3, [pc, #24]	; (1584 <i2c_rx_stop+0x34>)
    156a:	701a      	strb	r2, [r3, #0]
    serial_write(RX_E);
    156c:	2036      	movs	r0, #54	; 0x36
    156e:	4b06      	ldr	r3, [pc, #24]	; (1588 <i2c_rx_stop+0x38>)
    1570:	4798      	blx	r3

    // I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    // I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	46bd      	mov	sp, r7
    1576:	bd80      	pop	{r7, pc}
    1578:	200004b4 	.word	0x200004b4
    157c:	200004bd 	.word	0x200004bd
    1580:	000028c9 	.word	0x000028c9
    1584:	200004b0 	.word	0x200004b0
    1588:	000028f9 	.word	0x000028f9

0000158c <i2c_tx_stop>:

//==============================================================================
void i2c_tx_stop() {
    158c:	b580      	push	{r7, lr}
    158e:	af00      	add	r7, sp, #0
    // Remove this
    _i2c_flag = 1;
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <i2c_tx_stop+0x18>)
    1592:	2201      	movs	r2, #1
    1594:	701a      	strb	r2, [r3, #0]
    serial_write(TX_E);
    1596:	2033      	movs	r0, #51	; 0x33
    1598:	4b03      	ldr	r3, [pc, #12]	; (15a8 <i2c_tx_stop+0x1c>)
    159a:	4798      	blx	r3

    // I2C_SERCOM->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
}
    159c:	46c0      	nop			; (mov r8, r8)
    159e:	46bd      	mov	sp, r7
    15a0:	bd80      	pop	{r7, pc}
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	200004b4 	.word	0x200004b4
    15a8:	000028f9 	.word	0x000028f9

000015ac <i2c_registered>:

//==============================================================================
uint8_t i2c_registered() {
    15ac:	b580      	push	{r7, lr}
    15ae:	af00      	add	r7, sp, #0
    return (_i2c_callback != _i2c_default);
    15b0:	4b05      	ldr	r3, [pc, #20]	; (15c8 <i2c_registered+0x1c>)
    15b2:	681a      	ldr	r2, [r3, #0]
    15b4:	4b05      	ldr	r3, [pc, #20]	; (15cc <i2c_registered+0x20>)
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	1ad3      	subs	r3, r2, r3
    15ba:	1e5a      	subs	r2, r3, #1
    15bc:	4193      	sbcs	r3, r2
    15be:	b2db      	uxtb	r3, r3
}
    15c0:	0018      	movs	r0, r3
    15c2:	46bd      	mov	sp, r7
    15c4:	bd80      	pop	{r7, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	200004c0 	.word	0x200004c0
    15cc:	200004b8 	.word	0x200004b8

000015d0 <_i2c_failed_flag>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _i2c_failed_flag() {
    15d0:	b580      	push	{r7, lr}
    15d2:	af00      	add	r7, sp, #0
    return 0; // SERCOM3->I2CM.STATUS.bit.RXNACK;
    15d4:	2300      	movs	r3, #0
}
    15d6:	0018      	movs	r0, r3
    15d8:	46bd      	mov	sp, r7
    15da:	bd80      	pop	{r7, pc}

000015dc <_i2c_timeout_reset>:

//==============================================================================
void _i2c_timeout_reset() {
    15dc:	b580      	push	{r7, lr}
    15de:	af00      	add	r7, sp, #0
    i2c_unregister(_i2c_callback);
    15e0:	4b09      	ldr	r3, [pc, #36]	; (1608 <_i2c_timeout_reset+0x2c>)
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	0018      	movs	r0, r3
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <_i2c_timeout_reset+0x30>)
    15e8:	4798      	blx	r3
    _i2c_flag = 0;
    15ea:	4b09      	ldr	r3, [pc, #36]	; (1610 <_i2c_timeout_reset+0x34>)
    15ec:	2200      	movs	r2, #0
    15ee:	701a      	strb	r2, [r3, #0]
    _i2c_init = 0;
    15f0:	4b08      	ldr	r3, [pc, #32]	; (1614 <_i2c_timeout_reset+0x38>)
    15f2:	2200      	movs	r2, #0
    15f4:	701a      	strb	r2, [r3, #0]
    _reading = 0;
    15f6:	4b08      	ldr	r3, [pc, #32]	; (1618 <_i2c_timeout_reset+0x3c>)
    15f8:	2200      	movs	r2, #0
    15fa:	701a      	strb	r2, [r3, #0]
    _i2c_active = 1;
    15fc:	4b07      	ldr	r3, [pc, #28]	; (161c <_i2c_timeout_reset+0x40>)
    15fe:	2201      	movs	r2, #1
    1600:	701a      	strb	r2, [r3, #0]
}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	46bd      	mov	sp, r7
    1606:	bd80      	pop	{r7, pc}
    1608:	200004c0 	.word	0x200004c0
    160c:	0000151d 	.word	0x0000151d
    1610:	200004b4 	.word	0x200004b4
    1614:	200004bc 	.word	0x200004bc
    1618:	200004bd 	.word	0x200004bd
    161c:	200004b1 	.word	0x200004b1

00001620 <_i2c_default_func>:
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _i2c_default_func(){
    1620:	b580      	push	{r7, lr}
    1622:	af00      	add	r7, sp, #0
    if (i2c_tx_flag()) {
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <_i2c_default_func+0x28>)
    1626:	4798      	blx	r3
    1628:	1e03      	subs	r3, r0, #0
    162a:	d001      	beq.n	1630 <_i2c_default_func+0x10>
        return 0;
    162c:	2300      	movs	r3, #0
    162e:	e007      	b.n	1640 <_i2c_default_func+0x20>
    }
    else if (i2c_rx_flag()) {
    1630:	4b06      	ldr	r3, [pc, #24]	; (164c <_i2c_default_func+0x2c>)
    1632:	4798      	blx	r3
    1634:	1e03      	subs	r3, r0, #0
    1636:	d003      	beq.n	1640 <_i2c_default_func+0x20>
        i2c_read();
    1638:	4b05      	ldr	r3, [pc, #20]	; (1650 <_i2c_default_func+0x30>)
    163a:	4798      	blx	r3
        return 0;
    163c:	2300      	movs	r3, #0
    163e:	e7ff      	b.n	1640 <_i2c_default_func+0x20>
    }
}
    1640:	0018      	movs	r0, r3
    1642:	46bd      	mov	sp, r7
    1644:	bd80      	pop	{r7, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	00001425 	.word	0x00001425
    164c:	00001439 	.word	0x00001439
    1650:	0000144d 	.word	0x0000144d

00001654 <_SERCOM3_Handler>:
//------------------------------------------------------------------------------


//==============================================================================
uint8_t _SERCOM3_Handler()
{
    1654:	b580      	push	{r7, lr}
    1656:	af00      	add	r7, sp, #0
    // Leave this, timeout update
    _i2c_active = 1;
    1658:	4b1d      	ldr	r3, [pc, #116]	; (16d0 <_SERCOM3_Handler+0x7c>)
    165a:	2201      	movs	r2, #1
    165c:	701a      	strb	r2, [r3, #0]

    // Remove this
    if (_i2c_init) {
    165e:	4b1d      	ldr	r3, [pc, #116]	; (16d4 <_SERCOM3_Handler+0x80>)
    1660:	781b      	ldrb	r3, [r3, #0]
    1662:	b2db      	uxtb	r3, r3
    1664:	2b00      	cmp	r3, #0
    1666:	d010      	beq.n	168a <_SERCOM3_Handler+0x36>
        _i2c_init = 0;
    1668:	4b1a      	ldr	r3, [pc, #104]	; (16d4 <_SERCOM3_Handler+0x80>)
    166a:	2200      	movs	r2, #0
    166c:	701a      	strb	r2, [r3, #0]
        serial_write(_i2c_addr);
    166e:	4b1a      	ldr	r3, [pc, #104]	; (16d8 <_SERCOM3_Handler+0x84>)
    1670:	781b      	ldrb	r3, [r3, #0]
    1672:	b2db      	uxtb	r3, r3
    1674:	0018      	movs	r0, r3
    1676:	4b19      	ldr	r3, [pc, #100]	; (16dc <_SERCOM3_Handler+0x88>)
    1678:	4798      	blx	r3
        return _i2c_flag = _i2c_addr = 0;
    167a:	2300      	movs	r3, #0
    167c:	4a16      	ldr	r2, [pc, #88]	; (16d8 <_SERCOM3_Handler+0x84>)
    167e:	1c19      	adds	r1, r3, #0
    1680:	7011      	strb	r1, [r2, #0]
    1682:	4a17      	ldr	r2, [pc, #92]	; (16e0 <_SERCOM3_Handler+0x8c>)
    1684:	1c19      	adds	r1, r3, #0
    1686:	7011      	strb	r1, [r2, #0]
    1688:	e01f      	b.n	16ca <_SERCOM3_Handler+0x76>
    } else if (_i2c_flag) {
    168a:	4b15      	ldr	r3, [pc, #84]	; (16e0 <_SERCOM3_Handler+0x8c>)
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	b2db      	uxtb	r3, r3
    1690:	2b00      	cmp	r3, #0
    1692:	d004      	beq.n	169e <_SERCOM3_Handler+0x4a>
        return _i2c_flag = 0;
    1694:	4b12      	ldr	r3, [pc, #72]	; (16e0 <_SERCOM3_Handler+0x8c>)
    1696:	2200      	movs	r2, #0
    1698:	701a      	strb	r2, [r3, #0]
    169a:	2300      	movs	r3, #0
    169c:	e015      	b.n	16ca <_SERCOM3_Handler+0x76>
    }

    // Leave this
    if (_i2c_failed_flag()) {
    169e:	4b11      	ldr	r3, [pc, #68]	; (16e4 <_SERCOM3_Handler+0x90>)
    16a0:	4798      	blx	r3
    16a2:	1e03      	subs	r3, r0, #0
    16a4:	d001      	beq.n	16aa <_SERCOM3_Handler+0x56>
        return 1;
    16a6:	2301      	movs	r3, #1
    16a8:	e00f      	b.n	16ca <_SERCOM3_Handler+0x76>
    }

    else if (_i2c_callback()) {
    16aa:	4b0f      	ldr	r3, [pc, #60]	; (16e8 <_SERCOM3_Handler+0x94>)
    16ac:	681b      	ldr	r3, [r3, #0]
    16ae:	4798      	blx	r3
    16b0:	1e03      	subs	r3, r0, #0
    16b2:	d009      	beq.n	16c8 <_SERCOM3_Handler+0x74>
        // Remove this
        serial_unregister(I2C_callback);
    16b4:	4b0d      	ldr	r3, [pc, #52]	; (16ec <_SERCOM3_Handler+0x98>)
    16b6:	6818      	ldr	r0, [r3, #0]
    16b8:	6859      	ldr	r1, [r3, #4]
    16ba:	4b0d      	ldr	r3, [pc, #52]	; (16f0 <_SERCOM3_Handler+0x9c>)
    16bc:	4798      	blx	r3

        // Leave this
        i2c_unregister(_i2c_callback);
    16be:	4b0a      	ldr	r3, [pc, #40]	; (16e8 <_SERCOM3_Handler+0x94>)
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	0018      	movs	r0, r3
    16c4:	4b0b      	ldr	r3, [pc, #44]	; (16f4 <_SERCOM3_Handler+0xa0>)
    16c6:	4798      	blx	r3
    }

    return 0;
    16c8:	2300      	movs	r3, #0
}
    16ca:	0018      	movs	r0, r3
    16cc:	46bd      	mov	sp, r7
    16ce:	bd80      	pop	{r7, pc}
    16d0:	200004b1 	.word	0x200004b1
    16d4:	200004bc 	.word	0x200004bc
    16d8:	200004b2 	.word	0x200004b2
    16dc:	000028f9 	.word	0x000028f9
    16e0:	200004b4 	.word	0x200004b4
    16e4:	000015d1 	.word	0x000015d1
    16e8:	200004c0 	.word	0x200004c0
    16ec:	200004a8 	.word	0x200004a8
    16f0:	00002a09 	.word	0x00002a09
    16f4:	0000151d 	.word	0x0000151d

000016f8 <main>:
//
//-----------------------------------------------------------------------------

//=============================================================================
int main(void)
{
    16f8:	b5b0      	push	{r4, r5, r7, lr}
    16fa:	b0a6      	sub	sp, #152	; 0x98
    16fc:	af00      	add	r7, sp, #0
    uint64_t current_time = 0;
    16fe:	2300      	movs	r3, #0
    1700:	2400      	movs	r4, #0
    1702:	2280      	movs	r2, #128	; 0x80
    1704:	18ba      	adds	r2, r7, r2
    1706:	6013      	str	r3, [r2, #0]
    1708:	6054      	str	r4, [r2, #4]
    uint64_t num_samples = 0;
    170a:	2300      	movs	r3, #0
    170c:	2400      	movs	r4, #0
    170e:	2290      	movs	r2, #144	; 0x90
    1710:	18ba      	adds	r2, r7, r2
    1712:	6013      	str	r3, [r2, #0]
    1714:	6054      	str	r4, [r2, #4]

    emg_data_t emg_data;
    hand_pos_t hand_data;
    hand_ang_t hand_ang;

    emg_state_t emg_state = EMG_SAMPLE;
    1716:	238f      	movs	r3, #143	; 0x8f
    1718:	18fb      	adds	r3, r7, r3
    171a:	2200      	movs	r2, #0
    171c:	701a      	strb	r2, [r3, #0]
    hand_state_t hand_state = HAND_SAMPLE;
    171e:	238e      	movs	r3, #142	; 0x8e
    1720:	18fb      	adds	r3, r7, r3
    1722:	2200      	movs	r2, #0
    1724:	701a      	strb	r2, [r3, #0]
    control_state_t control_state = CONTROL_BEGIN;
    1726:	238d      	movs	r3, #141	; 0x8d
    1728:	18fb      	adds	r3, r7, r3
    172a:	2200      	movs	r2, #0
    172c:	701a      	strb	r2, [r3, #0]
    compute_state_t compute_state = COMPUTE_BEGIN;
    172e:	238c      	movs	r3, #140	; 0x8c
    1730:	18fb      	adds	r3, r7, r3
    1732:	2203      	movs	r2, #3
    1734:	701a      	strb	r2, [r3, #0]

    for (machine_state_t x = 0; x < M_NUM_STATES; x++) {
    1736:	238b      	movs	r3, #139	; 0x8b
    1738:	18fb      	adds	r3, r7, r3
    173a:	2200      	movs	r2, #0
    173c:	701a      	strb	r2, [r3, #0]
    173e:	e010      	b.n	1762 <main+0x6a>
        machine_counters[x] = 0;
    1740:	238b      	movs	r3, #139	; 0x8b
    1742:	18fb      	adds	r3, r7, r3
    1744:	781b      	ldrb	r3, [r3, #0]
    1746:	4aba      	ldr	r2, [pc, #744]	; (1a30 <main+0x338>)
    1748:	00db      	lsls	r3, r3, #3
    174a:	18d2      	adds	r2, r2, r3
    174c:	2300      	movs	r3, #0
    174e:	2400      	movs	r4, #0
    1750:	6013      	str	r3, [r2, #0]
    1752:	6054      	str	r4, [r2, #4]
    for (machine_state_t x = 0; x < M_NUM_STATES; x++) {
    1754:	238b      	movs	r3, #139	; 0x8b
    1756:	18fb      	adds	r3, r7, r3
    1758:	781a      	ldrb	r2, [r3, #0]
    175a:	238b      	movs	r3, #139	; 0x8b
    175c:	18fb      	adds	r3, r7, r3
    175e:	3201      	adds	r2, #1
    1760:	701a      	strb	r2, [r3, #0]
    1762:	238b      	movs	r3, #139	; 0x8b
    1764:	18fb      	adds	r3, r7, r3
    1766:	781b      	ldrb	r3, [r3, #0]
    1768:	2b04      	cmp	r3, #4
    176a:	d9e9      	bls.n	1740 <main+0x48>
    }

    machine_delays[M_EMG_SAMPLE] = 1;
    176c:	4ab1      	ldr	r2, [pc, #708]	; (1a34 <main+0x33c>)
    176e:	2301      	movs	r3, #1
    1770:	2400      	movs	r4, #0
    1772:	6013      	str	r3, [r2, #0]
    1774:	6054      	str	r4, [r2, #4]
    machine_delays[M_HAND_SAMPLE] = 20;
    1776:	4aaf      	ldr	r2, [pc, #700]	; (1a34 <main+0x33c>)
    1778:	2314      	movs	r3, #20
    177a:	2400      	movs	r4, #0
    177c:	6093      	str	r3, [r2, #8]
    177e:	60d4      	str	r4, [r2, #12]
    machine_delays[M_COMPUTE] = 20;
    1780:	4aac      	ldr	r2, [pc, #688]	; (1a34 <main+0x33c>)
    1782:	2314      	movs	r3, #20
    1784:	2400      	movs	r4, #0
    1786:	6113      	str	r3, [r2, #16]
    1788:	6154      	str	r4, [r2, #20]
    machine_delays[M_CONTROL] = 100;
    178a:	4aaa      	ldr	r2, [pc, #680]	; (1a34 <main+0x33c>)
    178c:	2364      	movs	r3, #100	; 0x64
    178e:	2400      	movs	r4, #0
    1790:	6193      	str	r3, [r2, #24]
    1792:	61d4      	str	r4, [r2, #28]

    /* Initialize the SAM system */
    SystemInit();
    1794:	4ba8      	ldr	r3, [pc, #672]	; (1a38 <main+0x340>)
    1796:	4798      	blx	r3
    timer_init();
    1798:	4ba8      	ldr	r3, [pc, #672]	; (1a3c <main+0x344>)
    179a:	4798      	blx	r3

    serial_init(SERIAL_BAUD);
    179c:	4ba8      	ldr	r3, [pc, #672]	; (1a40 <main+0x348>)
    179e:	0018      	movs	r0, r3
    17a0:	4ba8      	ldr	r3, [pc, #672]	; (1a44 <main+0x34c>)
    17a2:	4798      	blx	r3
    serial_set_default_rx(rx_mode_setter);
    17a4:	4ba8      	ldr	r3, [pc, #672]	; (1a48 <main+0x350>)
    17a6:	0018      	movs	r0, r3
    17a8:	4ba8      	ldr	r3, [pc, #672]	; (1a4c <main+0x354>)
    17aa:	4798      	blx	r3
    i2c_init(I2C_BAUD);
    17ac:	4ba4      	ldr	r3, [pc, #656]	; (1a40 <main+0x348>)
    17ae:	0018      	movs	r0, r3
    17b0:	4ba7      	ldr	r3, [pc, #668]	; (1a50 <main+0x358>)
    17b2:	4798      	blx	r3

    adc_init();
    17b4:	4ba7      	ldr	r3, [pc, #668]	; (1a54 <main+0x35c>)
    17b6:	4798      	blx	r3

    /* Replace with your application code */
    while (1)
    {
        switch (machine_mode) {
    17b8:	4ba7      	ldr	r3, [pc, #668]	; (1a58 <main+0x360>)
    17ba:	781b      	ldrb	r3, [r3, #0]
    17bc:	b2db      	uxtb	r3, r3
    17be:	2b4d      	cmp	r3, #77	; 0x4d
    17c0:	d100      	bne.n	17c4 <main+0xcc>
    17c2:	e2e5      	b.n	1d90 <main+0x698>
    17c4:	dc04      	bgt.n	17d0 <main+0xd8>
    17c6:	2b43      	cmp	r3, #67	; 0x43
    17c8:	d100      	bne.n	17cc <main+0xd4>
    17ca:	e161      	b.n	1a90 <main+0x398>
    17cc:	f000 fdc0 	bl	2350 <STACK_SIZE+0x350>
    17d0:	2b53      	cmp	r3, #83	; 0x53
    17d2:	d005      	beq.n	17e0 <main+0xe8>
    17d4:	2b54      	cmp	r3, #84	; 0x54
    17d6:	d101      	bne.n	17dc <main+0xe4>
    17d8:	f000 fc1c 	bl	2014 <STACK_SIZE+0x14>
    17dc:	f000 fdb8 	bl	2350 <STACK_SIZE+0x350>
             *                                        *
             ******************************************/

            case MODE_SOLO: {
                // Acknowledge the mode reset
                message = "beginning solo operation";
    17e0:	4b9e      	ldr	r3, [pc, #632]	; (1a5c <main+0x364>)
    17e2:	67fb      	str	r3, [r7, #124]	; 0x7c
                serial_init(SERIAL_BAUD);
    17e4:	4b96      	ldr	r3, [pc, #600]	; (1a40 <main+0x348>)
    17e6:	0018      	movs	r0, r3
    17e8:	4b96      	ldr	r3, [pc, #600]	; (1a44 <main+0x34c>)
    17ea:	4798      	blx	r3
                timer_delay(500);
    17ec:	23fa      	movs	r3, #250	; 0xfa
    17ee:	005b      	lsls	r3, r3, #1
    17f0:	0018      	movs	r0, r3
    17f2:	4b9b      	ldr	r3, [pc, #620]	; (1a60 <main+0x368>)
    17f4:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    17f6:	4b94      	ldr	r3, [pc, #592]	; (1a48 <main+0x350>)
    17f8:	0018      	movs	r0, r3
    17fa:	4b94      	ldr	r3, [pc, #592]	; (1a4c <main+0x354>)
    17fc:	4798      	blx	r3
                while (!transmit('t', message));
    17fe:	46c0      	nop			; (mov r8, r8)
    1800:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1802:	0019      	movs	r1, r3
    1804:	2074      	movs	r0, #116	; 0x74
    1806:	4b97      	ldr	r3, [pc, #604]	; (1a64 <main+0x36c>)
    1808:	4798      	blx	r3
    180a:	1e03      	subs	r3, r0, #0
    180c:	d0f8      	beq.n	1800 <main+0x108>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    180e:	4b8c      	ldr	r3, [pc, #560]	; (1a40 <main+0x348>)
    1810:	0018      	movs	r0, r3
    1812:	4b8f      	ldr	r3, [pc, #572]	; (1a50 <main+0x358>)
    1814:	4798      	blx	r3

                // Reset the emg sampling machine
                emg_state = EMG_SAMPLE;
    1816:	238f      	movs	r3, #143	; 0x8f
    1818:	18fb      	adds	r3, r7, r3
    181a:	2200      	movs	r2, #0
    181c:	701a      	strb	r2, [r3, #0]
                machine_counters[M_EMG_SAMPLE] = 0;
    181e:	4a84      	ldr	r2, [pc, #528]	; (1a30 <main+0x338>)
    1820:	2300      	movs	r3, #0
    1822:	2400      	movs	r4, #0
    1824:	6013      	str	r3, [r2, #0]
    1826:	6054      	str	r4, [r2, #4]
                machine_delays[M_EMG_SAMPLE] = 1;
    1828:	4a82      	ldr	r2, [pc, #520]	; (1a34 <main+0x33c>)
    182a:	2301      	movs	r3, #1
    182c:	2400      	movs	r4, #0
    182e:	6013      	str	r3, [r2, #0]
    1830:	6054      	str	r4, [r2, #4]
                num_samples = 1;
    1832:	2301      	movs	r3, #1
    1834:	2400      	movs	r4, #0
    1836:	2290      	movs	r2, #144	; 0x90
    1838:	18ba      	adds	r2, r7, r2
    183a:	6013      	str	r3, [r2, #0]
    183c:	6054      	str	r4, [r2, #4]

                // Enable EMG hardware
                adc_init();
    183e:	4b85      	ldr	r3, [pc, #532]	; (1a54 <main+0x35c>)
    1840:	4798      	blx	r3
                emg_setup(1, 1, 1);
    1842:	2201      	movs	r2, #1
    1844:	2101      	movs	r1, #1
    1846:	2001      	movs	r0, #1
    1848:	4b87      	ldr	r3, [pc, #540]	; (1a68 <main+0x370>)
    184a:	4798      	blx	r3

                // Reset the computation machine
                compute_state = COMPUTE_BEGIN;
    184c:	238c      	movs	r3, #140	; 0x8c
    184e:	18fb      	adds	r3, r7, r3
    1850:	2203      	movs	r2, #3
    1852:	701a      	strb	r2, [r3, #0]
                machine_counters[M_COMPUTE] = 0;
    1854:	4a76      	ldr	r2, [pc, #472]	; (1a30 <main+0x338>)
    1856:	2300      	movs	r3, #0
    1858:	2400      	movs	r4, #0
    185a:	6113      	str	r3, [r2, #16]
    185c:	6154      	str	r4, [r2, #20]
                machine_delays[M_COMPUTE] = 100;
    185e:	4a75      	ldr	r2, [pc, #468]	; (1a34 <main+0x33c>)
    1860:	2364      	movs	r3, #100	; 0x64
    1862:	2400      	movs	r4, #0
    1864:	6113      	str	r3, [r2, #16]
    1866:	6154      	str	r4, [r2, #20]

                // Reset the hand controller machine
                control_state = CONTROL_BEGIN;
    1868:	238d      	movs	r3, #141	; 0x8d
    186a:	18fb      	adds	r3, r7, r3
    186c:	2200      	movs	r2, #0
    186e:	701a      	strb	r2, [r3, #0]
                machine_counters[M_CONTROL] = 0;
    1870:	4a6f      	ldr	r2, [pc, #444]	; (1a30 <main+0x338>)
    1872:	2300      	movs	r3, #0
    1874:	2400      	movs	r4, #0
    1876:	6193      	str	r3, [r2, #24]
    1878:	61d4      	str	r4, [r2, #28]
                machine_delays[M_COMPUTE] = 50;
    187a:	4a6e      	ldr	r2, [pc, #440]	; (1a34 <main+0x33c>)
    187c:	2332      	movs	r3, #50	; 0x32
    187e:	2400      	movs	r4, #0
    1880:	6113      	str	r3, [r2, #16]
    1882:	6154      	str	r4, [r2, #20]

                // Enable prosthetic hardware
                servos_init(SERVOS_ADDR);
    1884:	2080      	movs	r0, #128	; 0x80
    1886:	4b79      	ldr	r3, [pc, #484]	; (1a6c <main+0x374>)
    1888:	4798      	blx	r3

                // Reset the mode flag and enter the 'main' loop
                mode_change_flag = 0;
    188a:	4b79      	ldr	r3, [pc, #484]	; (1a70 <main+0x378>)
    188c:	2200      	movs	r2, #0
    188e:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    1890:	e0b7      	b.n	1a02 <main+0x30a>
                    // Get the current time
                    current_time = timer_get();
    1892:	4b78      	ldr	r3, [pc, #480]	; (1a74 <main+0x37c>)
    1894:	4798      	blx	r3
    1896:	0003      	movs	r3, r0
    1898:	000c      	movs	r4, r1
    189a:	2280      	movs	r2, #128	; 0x80
    189c:	18ba      	adds	r2, r7, r2
    189e:	6013      	str	r3, [r2, #0]
    18a0:	6054      	str	r4, [r2, #4]

                    /*
                     * EMG sampling machine
                     */
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    18a2:	4b63      	ldr	r3, [pc, #396]	; (1a30 <main+0x338>)
    18a4:	685c      	ldr	r4, [r3, #4]
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	2280      	movs	r2, #128	; 0x80
    18aa:	18ba      	adds	r2, r7, r2
    18ac:	6811      	ldr	r1, [r2, #0]
    18ae:	6852      	ldr	r2, [r2, #4]
    18b0:	1ac9      	subs	r1, r1, r3
    18b2:	41a2      	sbcs	r2, r4
                            machine_delays[M_EMG_SAMPLE]) {
    18b4:	4b5f      	ldr	r3, [pc, #380]	; (1a34 <main+0x33c>)
    18b6:	685c      	ldr	r4, [r3, #4]
    18b8:	681b      	ldr	r3, [r3, #0]
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    18ba:	42a2      	cmp	r2, r4
    18bc:	d802      	bhi.n	18c4 <main+0x1cc>
    18be:	d138      	bne.n	1932 <main+0x23a>
    18c0:	4299      	cmp	r1, r3
    18c2:	d936      	bls.n	1932 <main+0x23a>
                        switch (emg_state) {
    18c4:	238f      	movs	r3, #143	; 0x8f
    18c6:	18fb      	adds	r3, r7, r3
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	2b00      	cmp	r3, #0
    18cc:	d002      	beq.n	18d4 <main+0x1dc>
    18ce:	2b01      	cmp	r3, #1
    18d0:	d00c      	beq.n	18ec <main+0x1f4>
    18d2:	e02e      	b.n	1932 <main+0x23a>
                            case EMG_SAMPLE: {
                                // Begin EMG sample
                                if (emg_sample(&emg_data)) {
    18d4:	2374      	movs	r3, #116	; 0x74
    18d6:	18fb      	adds	r3, r7, r3
    18d8:	0018      	movs	r0, r3
    18da:	4b67      	ldr	r3, [pc, #412]	; (1a78 <main+0x380>)
    18dc:	4798      	blx	r3
    18de:	1e03      	subs	r3, r0, #0
    18e0:	d024      	beq.n	192c <main+0x234>
                                    emg_state = EMG_SAMPLE_END;
    18e2:	238f      	movs	r3, #143	; 0x8f
    18e4:	18fb      	adds	r3, r7, r3
    18e6:	2201      	movs	r2, #1
    18e8:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    18ea:	e01f      	b.n	192c <main+0x234>

                            case EMG_SAMPLE_END: {
                                if (emg_sample_complete()) {
    18ec:	4b63      	ldr	r3, [pc, #396]	; (1a7c <main+0x384>)
    18ee:	4798      	blx	r3
    18f0:	1e03      	subs	r3, r0, #0
    18f2:	d01d      	beq.n	1930 <main+0x238>
                                    machine_counters[M_EMG_SAMPLE] += machine_delays[M_EMG_SAMPLE];
    18f4:	4b4e      	ldr	r3, [pc, #312]	; (1a30 <main+0x338>)
    18f6:	6819      	ldr	r1, [r3, #0]
    18f8:	685a      	ldr	r2, [r3, #4]
    18fa:	4b4e      	ldr	r3, [pc, #312]	; (1a34 <main+0x33c>)
    18fc:	685c      	ldr	r4, [r3, #4]
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	185b      	adds	r3, r3, r1
    1902:	4154      	adcs	r4, r2
    1904:	4a4a      	ldr	r2, [pc, #296]	; (1a30 <main+0x338>)
    1906:	6013      	str	r3, [r2, #0]
    1908:	6054      	str	r4, [r2, #4]
                                    emg_state = EMG_SAMPLE;
    190a:	238f      	movs	r3, #143	; 0x8f
    190c:	18fb      	adds	r3, r7, r3
    190e:	2200      	movs	r2, #0
    1910:	701a      	strb	r2, [r3, #0]
                                    num_samples++;
    1912:	2390      	movs	r3, #144	; 0x90
    1914:	18fb      	adds	r3, r7, r3
    1916:	685c      	ldr	r4, [r3, #4]
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	2101      	movs	r1, #1
    191c:	2200      	movs	r2, #0
    191e:	185b      	adds	r3, r3, r1
    1920:	4154      	adcs	r4, r2
    1922:	2290      	movs	r2, #144	; 0x90
    1924:	18ba      	adds	r2, r7, r2
    1926:	6013      	str	r3, [r2, #0]
    1928:	6054      	str	r4, [r2, #4]
                                }
                            } break;
    192a:	e001      	b.n	1930 <main+0x238>
                            } break;
    192c:	46c0      	nop			; (mov r8, r8)
    192e:	e000      	b.n	1932 <main+0x23a>
                            } break;
    1930:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Computation machine
                     */
                    if (num_samples - machine_counters[M_COMPUTE] >
    1932:	4b3f      	ldr	r3, [pc, #252]	; (1a30 <main+0x338>)
    1934:	695c      	ldr	r4, [r3, #20]
    1936:	691b      	ldr	r3, [r3, #16]
    1938:	2290      	movs	r2, #144	; 0x90
    193a:	18ba      	adds	r2, r7, r2
    193c:	6811      	ldr	r1, [r2, #0]
    193e:	6852      	ldr	r2, [r2, #4]
    1940:	1ac9      	subs	r1, r1, r3
    1942:	41a2      	sbcs	r2, r4
                            machine_delays[M_COMPUTE]) {
    1944:	4b3b      	ldr	r3, [pc, #236]	; (1a34 <main+0x33c>)
    1946:	695c      	ldr	r4, [r3, #20]
    1948:	691b      	ldr	r3, [r3, #16]
                    if (num_samples - machine_counters[M_COMPUTE] >
    194a:	42a2      	cmp	r2, r4
    194c:	d802      	bhi.n	1954 <main+0x25c>
    194e:	d11e      	bne.n	198e <main+0x296>
    1950:	4299      	cmp	r1, r3
    1952:	d91c      	bls.n	198e <main+0x296>
                        switch (compute_state) {
    1954:	238c      	movs	r3, #140	; 0x8c
    1956:	18fb      	adds	r3, r7, r3
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	2b03      	cmp	r3, #3
    195c:	d002      	beq.n	1964 <main+0x26c>
    195e:	2b04      	cmp	r3, #4
    1960:	d005      	beq.n	196e <main+0x276>
    1962:	e014      	b.n	198e <main+0x296>
                            case COMPUTE_BEGIN: {
                                // Begin computation on emg data
                                if (1) {
                                    compute_state = COMPUTE_END;
    1964:	238c      	movs	r3, #140	; 0x8c
    1966:	18fb      	adds	r3, r7, r3
    1968:	2204      	movs	r2, #4
    196a:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    196c:	e00f      	b.n	198e <main+0x296>

                            case COMPUTE_END: {
                                // Continue computation until complete
                                if (1) {
                                    machine_counters[M_COMPUTE] += machine_delays[M_COMPUTE];
    196e:	4b30      	ldr	r3, [pc, #192]	; (1a30 <main+0x338>)
    1970:	6919      	ldr	r1, [r3, #16]
    1972:	695a      	ldr	r2, [r3, #20]
    1974:	4b2f      	ldr	r3, [pc, #188]	; (1a34 <main+0x33c>)
    1976:	695c      	ldr	r4, [r3, #20]
    1978:	691b      	ldr	r3, [r3, #16]
    197a:	185b      	adds	r3, r3, r1
    197c:	4154      	adcs	r4, r2
    197e:	4a2c      	ldr	r2, [pc, #176]	; (1a30 <main+0x338>)
    1980:	6113      	str	r3, [r2, #16]
    1982:	6154      	str	r4, [r2, #20]
                                    compute_state = COMPUTE_BEGIN;
    1984:	238c      	movs	r3, #140	; 0x8c
    1986:	18fb      	adds	r3, r7, r3
    1988:	2203      	movs	r2, #3
    198a:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    198c:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Hand controlling machine
                     */
                    if (num_samples - machine_counters[M_CONTROL] >
    198e:	4b28      	ldr	r3, [pc, #160]	; (1a30 <main+0x338>)
    1990:	69dc      	ldr	r4, [r3, #28]
    1992:	699b      	ldr	r3, [r3, #24]
    1994:	2290      	movs	r2, #144	; 0x90
    1996:	18ba      	adds	r2, r7, r2
    1998:	6811      	ldr	r1, [r2, #0]
    199a:	6852      	ldr	r2, [r2, #4]
    199c:	1ac9      	subs	r1, r1, r3
    199e:	41a2      	sbcs	r2, r4
                            machine_delays[M_CONTROL]) {
    19a0:	4b24      	ldr	r3, [pc, #144]	; (1a34 <main+0x33c>)
    19a2:	69dc      	ldr	r4, [r3, #28]
    19a4:	699b      	ldr	r3, [r3, #24]
    19a6:	208d      	movs	r0, #141	; 0x8d
    19a8:	1838      	adds	r0, r7, r0
    19aa:	258d      	movs	r5, #141	; 0x8d
    19ac:	197d      	adds	r5, r7, r5
    19ae:	782d      	ldrb	r5, [r5, #0]
    19b0:	7005      	strb	r5, [r0, #0]
                    if (num_samples - machine_counters[M_CONTROL] >
    19b2:	42a2      	cmp	r2, r4
    19b4:	d803      	bhi.n	19be <main+0x2c6>
    19b6:	d124      	bne.n	1a02 <main+0x30a>
    19b8:	4299      	cmp	r1, r3
    19ba:	d800      	bhi.n	19be <main+0x2c6>
    19bc:	e021      	b.n	1a02 <main+0x30a>
                        switch (control_state) {
    19be:	238d      	movs	r3, #141	; 0x8d
    19c0:	18fb      	adds	r3, r7, r3
    19c2:	781b      	ldrb	r3, [r3, #0]
    19c4:	228d      	movs	r2, #141	; 0x8d
    19c6:	18ba      	adds	r2, r7, r2
    19c8:	218d      	movs	r1, #141	; 0x8d
    19ca:	1879      	adds	r1, r7, r1
    19cc:	7809      	ldrb	r1, [r1, #0]
    19ce:	7011      	strb	r1, [r2, #0]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d002      	beq.n	19da <main+0x2e2>
    19d4:	2b01      	cmp	r3, #1
    19d6:	d005      	beq.n	19e4 <main+0x2ec>
    19d8:	e013      	b.n	1a02 <main+0x30a>
                            case CONTROL_BEGIN: {
                                // Begin I2C control of hand
                                if (1) {
                                    control_state = CONTROL_END;
    19da:	238d      	movs	r3, #141	; 0x8d
    19dc:	18fb      	adds	r3, r7, r3
    19de:	2201      	movs	r2, #1
    19e0:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    19e2:	e00e      	b.n	1a02 <main+0x30a>

                            case CONTROL_END: {
                                // Wait for I2C control of hand to complete
                                if (1) {
                                    machine_counters[M_CONTROL] += machine_delays[M_CONTROL];
    19e4:	4b12      	ldr	r3, [pc, #72]	; (1a30 <main+0x338>)
    19e6:	6999      	ldr	r1, [r3, #24]
    19e8:	69da      	ldr	r2, [r3, #28]
    19ea:	4b12      	ldr	r3, [pc, #72]	; (1a34 <main+0x33c>)
    19ec:	69dc      	ldr	r4, [r3, #28]
    19ee:	699b      	ldr	r3, [r3, #24]
    19f0:	185b      	adds	r3, r3, r1
    19f2:	4154      	adcs	r4, r2
    19f4:	4a0e      	ldr	r2, [pc, #56]	; (1a30 <main+0x338>)
    19f6:	6193      	str	r3, [r2, #24]
    19f8:	61d4      	str	r4, [r2, #28]
                                    control_state = CONTROL_BEGIN;
    19fa:	238d      	movs	r3, #141	; 0x8d
    19fc:	18fb      	adds	r3, r7, r3
    19fe:	2200      	movs	r2, #0
    1a00:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    1a02:	4b1b      	ldr	r3, [pc, #108]	; (1a70 <main+0x378>)
    1a04:	781b      	ldrb	r3, [r3, #0]
    1a06:	b2db      	uxtb	r3, r3
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d100      	bne.n	1a0e <main+0x316>
    1a0c:	e741      	b.n	1892 <main+0x19a>
                        } // end switch
                    }
                } // end solo-controlled loop

                // Reset i2c
                i2c_stop();
    1a0e:	4b1c      	ldr	r3, [pc, #112]	; (1a80 <main+0x388>)
    1a10:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    1a12:	4b0b      	ldr	r3, [pc, #44]	; (1a40 <main+0x348>)
    1a14:	0018      	movs	r0, r3
    1a16:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <main+0x358>)
    1a18:	4798      	blx	r3

                // Disable EMG hardware
                adc_stop();
    1a1a:	4b1a      	ldr	r3, [pc, #104]	; (1a84 <main+0x38c>)
    1a1c:	4798      	blx	r3
                emg_stop();
    1a1e:	4b1a      	ldr	r3, [pc, #104]	; (1a88 <main+0x390>)
    1a20:	4798      	blx	r3

                // Disable prosthetic hardware
                servos_stop(SERVOS_ADDR);
    1a22:	2080      	movs	r0, #128	; 0x80
    1a24:	4b19      	ldr	r3, [pc, #100]	; (1a8c <main+0x394>)
    1a26:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    1a28:	4b15      	ldr	r3, [pc, #84]	; (1a80 <main+0x388>)
    1a2a:	4798      	blx	r3

            } break;
    1a2c:	f000 fc9c 	bl	2368 <STACK_SIZE+0x368>
    1a30:	200004c8 	.word	0x200004c8
    1a34:	200004f8 	.word	0x200004f8
    1a38:	00000621 	.word	0x00000621
    1a3c:	00003519 	.word	0x00003519
    1a40:	000f4240 	.word	0x000f4240
    1a44:	00002645 	.word	0x00002645
    1a48:	000024d9 	.word	0x000024d9
    1a4c:	00002aa5 	.word	0x00002aa5
    1a50:	00001295 	.word	0x00001295
    1a54:	0000021d 	.word	0x0000021d
    1a58:	20000007 	.word	0x20000007
    1a5c:	00005e20 	.word	0x00005e20
    1a60:	00003559 	.word	0x00003559
    1a64:	000023bd 	.word	0x000023bd
    1a68:	00000845 	.word	0x00000845
    1a6c:	00002c1d 	.word	0x00002c1d
    1a70:	2000045c 	.word	0x2000045c
    1a74:	00003541 	.word	0x00003541
    1a78:	000008e1 	.word	0x000008e1
    1a7c:	00000939 	.word	0x00000939
    1a80:	00001315 	.word	0x00001315
    1a84:	00000349 	.word	0x00000349
    1a88:	000008cd 	.word	0x000008cd
    1a8c:	00002ce5 	.word	0x00002ce5
             *                                        *
             ******************************************/

            case MODE_CONTROL: {
                // Acknowledge the mode reset
                message = "beginning hand controller";
    1a90:	4ba7      	ldr	r3, [pc, #668]	; (1d30 <main+0x638>)
    1a92:	67fb      	str	r3, [r7, #124]	; 0x7c
                serial_init(SERIAL_BAUD);
    1a94:	4ba7      	ldr	r3, [pc, #668]	; (1d34 <main+0x63c>)
    1a96:	0018      	movs	r0, r3
    1a98:	4ba7      	ldr	r3, [pc, #668]	; (1d38 <main+0x640>)
    1a9a:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    1a9c:	4ba5      	ldr	r3, [pc, #660]	; (1d34 <main+0x63c>)
    1a9e:	0018      	movs	r0, r3
    1aa0:	4ba6      	ldr	r3, [pc, #664]	; (1d3c <main+0x644>)
    1aa2:	4798      	blx	r3
                timer_delay(500);
    1aa4:	23fa      	movs	r3, #250	; 0xfa
    1aa6:	005b      	lsls	r3, r3, #1
    1aa8:	0018      	movs	r0, r3
    1aaa:	4ba5      	ldr	r3, [pc, #660]	; (1d40 <main+0x648>)
    1aac:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    1aae:	4ba5      	ldr	r3, [pc, #660]	; (1d44 <main+0x64c>)
    1ab0:	0018      	movs	r0, r3
    1ab2:	4ba5      	ldr	r3, [pc, #660]	; (1d48 <main+0x650>)
    1ab4:	4798      	blx	r3

                while (!transmit('t', message));
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1aba:	0019      	movs	r1, r3
    1abc:	2074      	movs	r0, #116	; 0x74
    1abe:	4ba3      	ldr	r3, [pc, #652]	; (1d4c <main+0x654>)
    1ac0:	4798      	blx	r3
    1ac2:	1e03      	subs	r3, r0, #0
    1ac4:	d0f8      	beq.n	1ab8 <main+0x3c0>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    1ac6:	4b9b      	ldr	r3, [pc, #620]	; (1d34 <main+0x63c>)
    1ac8:	0018      	movs	r0, r3
    1aca:	4b9c      	ldr	r3, [pc, #624]	; (1d3c <main+0x644>)
    1acc:	4798      	blx	r3

                // Reset the emg sampling machine
                emg_state = EMG_SAMPLE;
    1ace:	238f      	movs	r3, #143	; 0x8f
    1ad0:	18fb      	adds	r3, r7, r3
    1ad2:	2200      	movs	r2, #0
    1ad4:	701a      	strb	r2, [r3, #0]
                machine_counters[M_EMG_SAMPLE] = 0;
    1ad6:	4a9e      	ldr	r2, [pc, #632]	; (1d50 <main+0x658>)
    1ad8:	2300      	movs	r3, #0
    1ada:	2400      	movs	r4, #0
    1adc:	6013      	str	r3, [r2, #0]
    1ade:	6054      	str	r4, [r2, #4]
                machine_delays[M_EMG_SAMPLE] = 1;
    1ae0:	4a9c      	ldr	r2, [pc, #624]	; (1d54 <main+0x65c>)
    1ae2:	2301      	movs	r3, #1
    1ae4:	2400      	movs	r4, #0
    1ae6:	6013      	str	r3, [r2, #0]
    1ae8:	6054      	str	r4, [r2, #4]
                num_samples = 0;
    1aea:	2300      	movs	r3, #0
    1aec:	2400      	movs	r4, #0
    1aee:	2290      	movs	r2, #144	; 0x90
    1af0:	18ba      	adds	r2, r7, r2
    1af2:	6013      	str	r3, [r2, #0]
    1af4:	6054      	str	r4, [r2, #4]

                // Enable EMG hardware
                adc_init();
    1af6:	4b98      	ldr	r3, [pc, #608]	; (1d58 <main+0x660>)
    1af8:	4798      	blx	r3
                emg_setup(1, 1, 1);
    1afa:	2201      	movs	r2, #1
    1afc:	2101      	movs	r1, #1
    1afe:	2001      	movs	r0, #1
    1b00:	4b96      	ldr	r3, [pc, #600]	; (1d5c <main+0x664>)
    1b02:	4798      	blx	r3

                // Reset the computer connection machine
                compute_state = COMPUTE_TX;
    1b04:	238c      	movs	r3, #140	; 0x8c
    1b06:	18fb      	adds	r3, r7, r3
    1b08:	2200      	movs	r2, #0
    1b0a:	701a      	strb	r2, [r3, #0]
                machine_counters[M_COMPUTE] = 0;
    1b0c:	4a90      	ldr	r2, [pc, #576]	; (1d50 <main+0x658>)
    1b0e:	2300      	movs	r3, #0
    1b10:	2400      	movs	r4, #0
    1b12:	6113      	str	r3, [r2, #16]
    1b14:	6154      	str	r4, [r2, #20]
                machine_delays[M_COMPUTE] = 50;
    1b16:	4a8f      	ldr	r2, [pc, #572]	; (1d54 <main+0x65c>)
    1b18:	2332      	movs	r3, #50	; 0x32
    1b1a:	2400      	movs	r4, #0
    1b1c:	6113      	str	r3, [r2, #16]
    1b1e:	6154      	str	r4, [r2, #20]

                // Reset the prosthetic controlling machine
                control_state = CONTROL_WAIT;
    1b20:	238d      	movs	r3, #141	; 0x8d
    1b22:	18fb      	adds	r3, r7, r3
    1b24:	2202      	movs	r2, #2
    1b26:	701a      	strb	r2, [r3, #0]
                machine_counters[M_CONTROL] = 0;
    1b28:	4a89      	ldr	r2, [pc, #548]	; (1d50 <main+0x658>)
    1b2a:	2300      	movs	r3, #0
    1b2c:	2400      	movs	r4, #0
    1b2e:	6193      	str	r3, [r2, #24]
    1b30:	61d4      	str	r4, [r2, #28]
                machine_delays[M_CONTROL] = 50;
    1b32:	4a88      	ldr	r2, [pc, #544]	; (1d54 <main+0x65c>)
    1b34:	2332      	movs	r3, #50	; 0x32
    1b36:	2400      	movs	r4, #0
    1b38:	6193      	str	r3, [r2, #24]
    1b3a:	61d4      	str	r4, [r2, #28]

                // Enable prosthetic hardware
                servos_init(SERVOS_ADDR);
    1b3c:	2080      	movs	r0, #128	; 0x80
    1b3e:	4b88      	ldr	r3, [pc, #544]	; (1d60 <main+0x668>)
    1b40:	4798      	blx	r3

                // Reset the mode flag and enter the 'main' loop
                mode_change_flag = 0;
    1b42:	4b88      	ldr	r3, [pc, #544]	; (1d64 <main+0x66c>)
    1b44:	2200      	movs	r2, #0
    1b46:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    1b48:	e0dc      	b.n	1d04 <main+0x60c>
                    // Get the current time
                    current_time = timer_get();
    1b4a:	4b87      	ldr	r3, [pc, #540]	; (1d68 <main+0x670>)
    1b4c:	4798      	blx	r3
    1b4e:	0003      	movs	r3, r0
    1b50:	000c      	movs	r4, r1
    1b52:	2280      	movs	r2, #128	; 0x80
    1b54:	18ba      	adds	r2, r7, r2
    1b56:	6013      	str	r3, [r2, #0]
    1b58:	6054      	str	r4, [r2, #4]

                    /*
                     * EMG sampling machine
                     */
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    1b5a:	4b7d      	ldr	r3, [pc, #500]	; (1d50 <main+0x658>)
    1b5c:	685c      	ldr	r4, [r3, #4]
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	2280      	movs	r2, #128	; 0x80
    1b62:	18ba      	adds	r2, r7, r2
    1b64:	6811      	ldr	r1, [r2, #0]
    1b66:	6852      	ldr	r2, [r2, #4]
    1b68:	1ac9      	subs	r1, r1, r3
    1b6a:	41a2      	sbcs	r2, r4
                            machine_delays[M_EMG_SAMPLE]) {
    1b6c:	4b79      	ldr	r3, [pc, #484]	; (1d54 <main+0x65c>)
    1b6e:	685c      	ldr	r4, [r3, #4]
    1b70:	681b      	ldr	r3, [r3, #0]
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    1b72:	42a2      	cmp	r2, r4
    1b74:	d802      	bhi.n	1b7c <main+0x484>
    1b76:	d156      	bne.n	1c26 <main+0x52e>
    1b78:	4299      	cmp	r1, r3
    1b7a:	d954      	bls.n	1c26 <main+0x52e>
                        switch (emg_state) {
    1b7c:	238f      	movs	r3, #143	; 0x8f
    1b7e:	18fb      	adds	r3, r7, r3
    1b80:	781b      	ldrb	r3, [r3, #0]
    1b82:	2b01      	cmp	r3, #1
    1b84:	d014      	beq.n	1bb0 <main+0x4b8>
    1b86:	dc02      	bgt.n	1b8e <main+0x496>
    1b88:	2b00      	cmp	r3, #0
    1b8a:	d005      	beq.n	1b98 <main+0x4a0>
    1b8c:	e04b      	b.n	1c26 <main+0x52e>
    1b8e:	2b02      	cmp	r3, #2
    1b90:	d017      	beq.n	1bc2 <main+0x4ca>
    1b92:	2b03      	cmp	r3, #3
    1b94:	d022      	beq.n	1bdc <main+0x4e4>
    1b96:	e046      	b.n	1c26 <main+0x52e>
                            case EMG_SAMPLE: {
                                // Begin emg sample
                                if (emg_sample(&emg_data)) {
    1b98:	2374      	movs	r3, #116	; 0x74
    1b9a:	18fb      	adds	r3, r7, r3
    1b9c:	0018      	movs	r0, r3
    1b9e:	4b73      	ldr	r3, [pc, #460]	; (1d6c <main+0x674>)
    1ba0:	4798      	blx	r3
    1ba2:	1e03      	subs	r3, r0, #0
    1ba4:	d03a      	beq.n	1c1c <main+0x524>
                                    emg_state = EMG_SAMPLE_END;
    1ba6:	238f      	movs	r3, #143	; 0x8f
    1ba8:	18fb      	adds	r3, r7, r3
    1baa:	2201      	movs	r2, #1
    1bac:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1bae:	e035      	b.n	1c1c <main+0x524>

                            case EMG_SAMPLE_END: {
                                // Wait for emg  sample to end
                                if (emg_sample_complete()) {
    1bb0:	4b6f      	ldr	r3, [pc, #444]	; (1d70 <main+0x678>)
    1bb2:	4798      	blx	r3
    1bb4:	1e03      	subs	r3, r0, #0
    1bb6:	d033      	beq.n	1c20 <main+0x528>
                                    emg_state = EMG_TX;
    1bb8:	238f      	movs	r3, #143	; 0x8f
    1bba:	18fb      	adds	r3, r7, r3
    1bbc:	2202      	movs	r2, #2
    1bbe:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1bc0:	e02e      	b.n	1c20 <main+0x528>

                            case EMG_TX: {
                                // Begin transmitting emg data
                                if (transmit('e', emg_data.bytes)) {
    1bc2:	2374      	movs	r3, #116	; 0x74
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	0019      	movs	r1, r3
    1bc8:	2065      	movs	r0, #101	; 0x65
    1bca:	4b60      	ldr	r3, [pc, #384]	; (1d4c <main+0x654>)
    1bcc:	4798      	blx	r3
    1bce:	1e03      	subs	r3, r0, #0
    1bd0:	d028      	beq.n	1c24 <main+0x52c>
                                    emg_state = EMG_TX_END;
    1bd2:	238f      	movs	r3, #143	; 0x8f
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	2203      	movs	r2, #3
    1bd8:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1bda:	e023      	b.n	1c24 <main+0x52c>

                            case EMG_TX_END: {
                                if (tx_emg_flag) {
    1bdc:	4b65      	ldr	r3, [pc, #404]	; (1d74 <main+0x67c>)
    1bde:	781b      	ldrb	r3, [r3, #0]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d020      	beq.n	1c26 <main+0x52e>
                                    emg_state = EMG_SAMPLE;
    1be4:	238f      	movs	r3, #143	; 0x8f
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	2200      	movs	r2, #0
    1bea:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_EMG_SAMPLE] += machine_delays[M_EMG_SAMPLE];
    1bec:	4b58      	ldr	r3, [pc, #352]	; (1d50 <main+0x658>)
    1bee:	6819      	ldr	r1, [r3, #0]
    1bf0:	685a      	ldr	r2, [r3, #4]
    1bf2:	4b58      	ldr	r3, [pc, #352]	; (1d54 <main+0x65c>)
    1bf4:	685c      	ldr	r4, [r3, #4]
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	185b      	adds	r3, r3, r1
    1bfa:	4154      	adcs	r4, r2
    1bfc:	4a54      	ldr	r2, [pc, #336]	; (1d50 <main+0x658>)
    1bfe:	6013      	str	r3, [r2, #0]
    1c00:	6054      	str	r4, [r2, #4]
                                    num_samples++;
    1c02:	2390      	movs	r3, #144	; 0x90
    1c04:	18fb      	adds	r3, r7, r3
    1c06:	685c      	ldr	r4, [r3, #4]
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	2101      	movs	r1, #1
    1c0c:	2200      	movs	r2, #0
    1c0e:	185b      	adds	r3, r3, r1
    1c10:	4154      	adcs	r4, r2
    1c12:	2290      	movs	r2, #144	; 0x90
    1c14:	18ba      	adds	r2, r7, r2
    1c16:	6013      	str	r3, [r2, #0]
    1c18:	6054      	str	r4, [r2, #4]
    1c1a:	e004      	b.n	1c26 <main+0x52e>
                            } break;
    1c1c:	46c0      	nop			; (mov r8, r8)
    1c1e:	e002      	b.n	1c26 <main+0x52e>
                            } break;
    1c20:	46c0      	nop			; (mov r8, r8)
    1c22:	e000      	b.n	1c26 <main+0x52e>
                            } break;
    1c24:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * External computation machine
                     */
                    if (num_samples - machine_counters[M_COMPUTE] >
    1c26:	4b4a      	ldr	r3, [pc, #296]	; (1d50 <main+0x658>)
    1c28:	695c      	ldr	r4, [r3, #20]
    1c2a:	691b      	ldr	r3, [r3, #16]
    1c2c:	2290      	movs	r2, #144	; 0x90
    1c2e:	18ba      	adds	r2, r7, r2
    1c30:	6811      	ldr	r1, [r2, #0]
    1c32:	6852      	ldr	r2, [r2, #4]
    1c34:	1ac9      	subs	r1, r1, r3
    1c36:	41a2      	sbcs	r2, r4
                            machine_delays[M_COMPUTE]) {
    1c38:	4b46      	ldr	r3, [pc, #280]	; (1d54 <main+0x65c>)
    1c3a:	695c      	ldr	r4, [r3, #20]
    1c3c:	691b      	ldr	r3, [r3, #16]
                    if (num_samples - machine_counters[M_COMPUTE] >
    1c3e:	42a2      	cmp	r2, r4
    1c40:	d802      	bhi.n	1c48 <main+0x550>
    1c42:	d122      	bne.n	1c8a <main+0x592>
    1c44:	4299      	cmp	r1, r3
    1c46:	d920      	bls.n	1c8a <main+0x592>
                        switch (compute_state) {
    1c48:	238c      	movs	r3, #140	; 0x8c
    1c4a:	18fb      	adds	r3, r7, r3
    1c4c:	781b      	ldrb	r3, [r3, #0]
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d002      	beq.n	1c58 <main+0x560>
    1c52:	2b01      	cmp	r3, #1
    1c54:	d005      	beq.n	1c62 <main+0x56a>
    1c56:	e018      	b.n	1c8a <main+0x592>
                            case COMPUTE_TX: {
                                // Initiate external computation
                                if (1) {
                                    compute_state = COMPUTE_TX_END;
    1c58:	238c      	movs	r3, #140	; 0x8c
    1c5a:	18fb      	adds	r3, r7, r3
    1c5c:	2201      	movs	r2, #1
    1c5e:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1c60:	e013      	b.n	1c8a <main+0x592>

                            case COMPUTE_TX_END: {
                                // Wait for external computation to be returned
                                if (1) {
                                    machine_counters[M_COMPUTE] += machine_delays[M_COMPUTE];
    1c62:	4b3b      	ldr	r3, [pc, #236]	; (1d50 <main+0x658>)
    1c64:	6919      	ldr	r1, [r3, #16]
    1c66:	695a      	ldr	r2, [r3, #20]
    1c68:	4b3a      	ldr	r3, [pc, #232]	; (1d54 <main+0x65c>)
    1c6a:	695c      	ldr	r4, [r3, #20]
    1c6c:	691b      	ldr	r3, [r3, #16]
    1c6e:	185b      	adds	r3, r3, r1
    1c70:	4154      	adcs	r4, r2
    1c72:	4a37      	ldr	r2, [pc, #220]	; (1d50 <main+0x658>)
    1c74:	6113      	str	r3, [r2, #16]
    1c76:	6154      	str	r4, [r2, #20]
                                    compute_state = COMPUTE_TX;
    1c78:	238c      	movs	r3, #140	; 0x8c
    1c7a:	18fb      	adds	r3, r7, r3
    1c7c:	2200      	movs	r2, #0
    1c7e:	701a      	strb	r2, [r3, #0]
                                    control_state = CONTROL_BEGIN;
    1c80:	238d      	movs	r3, #141	; 0x8d
    1c82:	18fb      	adds	r3, r7, r3
    1c84:	2200      	movs	r2, #0
    1c86:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1c88:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Prosthetic controlling machine
                     */
                    if (num_samples - machine_counters[M_CONTROL] > 
    1c8a:	4b31      	ldr	r3, [pc, #196]	; (1d50 <main+0x658>)
    1c8c:	69dc      	ldr	r4, [r3, #28]
    1c8e:	699b      	ldr	r3, [r3, #24]
    1c90:	2290      	movs	r2, #144	; 0x90
    1c92:	18ba      	adds	r2, r7, r2
    1c94:	6811      	ldr	r1, [r2, #0]
    1c96:	6852      	ldr	r2, [r2, #4]
    1c98:	1ac9      	subs	r1, r1, r3
    1c9a:	41a2      	sbcs	r2, r4
                            machine_delays[M_CONTROL]) {
    1c9c:	4b2d      	ldr	r3, [pc, #180]	; (1d54 <main+0x65c>)
    1c9e:	69dc      	ldr	r4, [r3, #28]
    1ca0:	699b      	ldr	r3, [r3, #24]
                    if (num_samples - machine_counters[M_CONTROL] > 
    1ca2:	42a2      	cmp	r2, r4
    1ca4:	d803      	bhi.n	1cae <main+0x5b6>
    1ca6:	d12d      	bne.n	1d04 <main+0x60c>
    1ca8:	4299      	cmp	r1, r3
    1caa:	d800      	bhi.n	1cae <main+0x5b6>
    1cac:	e02a      	b.n	1d04 <main+0x60c>
                        switch (control_state) {
    1cae:	238d      	movs	r3, #141	; 0x8d
    1cb0:	18fb      	adds	r3, r7, r3
    1cb2:	781b      	ldrb	r3, [r3, #0]
    1cb4:	2b01      	cmp	r3, #1
    1cb6:	d010      	beq.n	1cda <main+0x5e2>
    1cb8:	2b02      	cmp	r3, #2
    1cba:	d022      	beq.n	1d02 <main+0x60a>
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d000      	beq.n	1cc2 <main+0x5ca>
    1cc0:	e020      	b.n	1d04 <main+0x60c>
                            case CONTROL_BEGIN: {
                                // Begin I2C control of servos
                                if (servos_write(SERVOS_ADDR, &hand_ang)) {
    1cc2:	1d3b      	adds	r3, r7, #4
    1cc4:	0019      	movs	r1, r3
    1cc6:	2080      	movs	r0, #128	; 0x80
    1cc8:	4b2b      	ldr	r3, [pc, #172]	; (1d78 <main+0x680>)
    1cca:	4798      	blx	r3
    1ccc:	1e03      	subs	r3, r0, #0
    1cce:	d019      	beq.n	1d04 <main+0x60c>
                                    control_state = CONTROL_END;
    1cd0:	238d      	movs	r3, #141	; 0x8d
    1cd2:	18fb      	adds	r3, r7, r3
    1cd4:	2201      	movs	r2, #1
    1cd6:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1cd8:	e014      	b.n	1d04 <main+0x60c>

                            case CONTROL_END: {
                                // Wait for end of I2C control of servos
                                if (servos_write_complete()) {
    1cda:	4b28      	ldr	r3, [pc, #160]	; (1d7c <main+0x684>)
    1cdc:	4798      	blx	r3
    1cde:	1e03      	subs	r3, r0, #0
    1ce0:	d010      	beq.n	1d04 <main+0x60c>
                                    machine_counters[M_CONTROL] += machine_delays[M_CONTROL];
    1ce2:	4b1b      	ldr	r3, [pc, #108]	; (1d50 <main+0x658>)
    1ce4:	6999      	ldr	r1, [r3, #24]
    1ce6:	69da      	ldr	r2, [r3, #28]
    1ce8:	4b1a      	ldr	r3, [pc, #104]	; (1d54 <main+0x65c>)
    1cea:	69dc      	ldr	r4, [r3, #28]
    1cec:	699b      	ldr	r3, [r3, #24]
    1cee:	185b      	adds	r3, r3, r1
    1cf0:	4154      	adcs	r4, r2
    1cf2:	4a17      	ldr	r2, [pc, #92]	; (1d50 <main+0x658>)
    1cf4:	6193      	str	r3, [r2, #24]
    1cf6:	61d4      	str	r4, [r2, #28]
                                    control_state = CONTROL_WAIT;
    1cf8:	238d      	movs	r3, #141	; 0x8d
    1cfa:	18fb      	adds	r3, r7, r3
    1cfc:	2202      	movs	r2, #2
    1cfe:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1d00:	e000      	b.n	1d04 <main+0x60c>

                            case CONTROL_WAIT: {
                                // Do nothing
                            } break;
    1d02:	46c0      	nop			; (mov r8, r8)
                while (!mode_change_flag) {
    1d04:	4b17      	ldr	r3, [pc, #92]	; (1d64 <main+0x66c>)
    1d06:	781b      	ldrb	r3, [r3, #0]
    1d08:	b2db      	uxtb	r3, r3
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d100      	bne.n	1d10 <main+0x618>
    1d0e:	e71c      	b.n	1b4a <main+0x452>
                        } // end switch
                    }
                } // end external-control loop

                // Reset i2c
                i2c_stop();
    1d10:	4b1b      	ldr	r3, [pc, #108]	; (1d80 <main+0x688>)
    1d12:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    1d14:	4b07      	ldr	r3, [pc, #28]	; (1d34 <main+0x63c>)
    1d16:	0018      	movs	r0, r3
    1d18:	4b08      	ldr	r3, [pc, #32]	; (1d3c <main+0x644>)
    1d1a:	4798      	blx	r3

                // Disable EMG hardware
                adc_stop();
    1d1c:	4b19      	ldr	r3, [pc, #100]	; (1d84 <main+0x68c>)
    1d1e:	4798      	blx	r3
                emg_stop();
    1d20:	4b19      	ldr	r3, [pc, #100]	; (1d88 <main+0x690>)
    1d22:	4798      	blx	r3

                // Disable prosthetic control hardware
                servos_stop(SERVOS_ADDR);
    1d24:	2080      	movs	r0, #128	; 0x80
    1d26:	4b19      	ldr	r3, [pc, #100]	; (1d8c <main+0x694>)
    1d28:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    1d2a:	4b15      	ldr	r3, [pc, #84]	; (1d80 <main+0x688>)
    1d2c:	4798      	blx	r3
            } break;
    1d2e:	e31b      	b.n	2368 <STACK_SIZE+0x368>
    1d30:	00005e3c 	.word	0x00005e3c
    1d34:	000f4240 	.word	0x000f4240
    1d38:	00002645 	.word	0x00002645
    1d3c:	00001295 	.word	0x00001295
    1d40:	00003559 	.word	0x00003559
    1d44:	000024d9 	.word	0x000024d9
    1d48:	00002aa5 	.word	0x00002aa5
    1d4c:	000023bd 	.word	0x000023bd
    1d50:	200004c8 	.word	0x200004c8
    1d54:	200004f8 	.word	0x200004f8
    1d58:	0000021d 	.word	0x0000021d
    1d5c:	00000845 	.word	0x00000845
    1d60:	00002c1d 	.word	0x00002c1d
    1d64:	2000045c 	.word	0x2000045c
    1d68:	00003541 	.word	0x00003541
    1d6c:	000008e1 	.word	0x000008e1
    1d70:	00000939 	.word	0x00000939
    1d74:	2000045d 	.word	0x2000045d
    1d78:	00002d55 	.word	0x00002d55
    1d7c:	00002db1 	.word	0x00002db1
    1d80:	00001315 	.word	0x00001315
    1d84:	00000349 	.word	0x00000349
    1d88:	000008cd 	.word	0x000008cd
    1d8c:	00002ce5 	.word	0x00002ce5
             *                                        *
             ******************************************/

            case MODE_MIRROR: {
                // Acknowledge the mode reset
                serial_init(SERIAL_BAUD);
    1d90:	4bcb      	ldr	r3, [pc, #812]	; (20c0 <STACK_SIZE+0xc0>)
    1d92:	0018      	movs	r0, r3
    1d94:	4bcb      	ldr	r3, [pc, #812]	; (20c4 <STACK_SIZE+0xc4>)
    1d96:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    1d98:	4bc9      	ldr	r3, [pc, #804]	; (20c0 <STACK_SIZE+0xc0>)
    1d9a:	0018      	movs	r0, r3
    1d9c:	4bca      	ldr	r3, [pc, #808]	; (20c8 <STACK_SIZE+0xc8>)
    1d9e:	4798      	blx	r3
                timer_delay(500);
    1da0:	23fa      	movs	r3, #250	; 0xfa
    1da2:	005b      	lsls	r3, r3, #1
    1da4:	0018      	movs	r0, r3
    1da6:	4bc9      	ldr	r3, [pc, #804]	; (20cc <STACK_SIZE+0xcc>)
    1da8:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    1daa:	4bc9      	ldr	r3, [pc, #804]	; (20d0 <STACK_SIZE+0xd0>)
    1dac:	0018      	movs	r0, r3
    1dae:	4bc9      	ldr	r3, [pc, #804]	; (20d4 <STACK_SIZE+0xd4>)
    1db0:	4798      	blx	r3
                message = "beginning hand mirror";
    1db2:	4bc9      	ldr	r3, [pc, #804]	; (20d8 <STACK_SIZE+0xd8>)
    1db4:	67fb      	str	r3, [r7, #124]	; 0x7c
                while (!transmit('t', message));
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1dba:	0019      	movs	r1, r3
    1dbc:	2074      	movs	r0, #116	; 0x74
    1dbe:	4bc7      	ldr	r3, [pc, #796]	; (20dc <STACK_SIZE+0xdc>)
    1dc0:	4798      	blx	r3
    1dc2:	1e03      	subs	r3, r0, #0
    1dc4:	d0f8      	beq.n	1db8 <main+0x6c0>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    1dc6:	4bbe      	ldr	r3, [pc, #760]	; (20c0 <STACK_SIZE+0xc0>)
    1dc8:	0018      	movs	r0, r3
    1dca:	4bbf      	ldr	r3, [pc, #764]	; (20c8 <STACK_SIZE+0xc8>)
    1dcc:	4798      	blx	r3

                // Reset the hand sampling machine
                hand_state = HAND_SAMPLE;
    1dce:	238e      	movs	r3, #142	; 0x8e
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	2200      	movs	r2, #0
    1dd4:	701a      	strb	r2, [r3, #0]
                machine_counters[M_HAND_SAMPLE] = 0;
    1dd6:	4ac2      	ldr	r2, [pc, #776]	; (20e0 <STACK_SIZE+0xe0>)
    1dd8:	2300      	movs	r3, #0
    1dda:	2400      	movs	r4, #0
    1ddc:	6093      	str	r3, [r2, #8]
    1dde:	60d4      	str	r4, [r2, #12]
                machine_delays[M_HAND_SAMPLE] = 50;
    1de0:	4ac0      	ldr	r2, [pc, #768]	; (20e4 <STACK_SIZE+0xe4>)
    1de2:	2332      	movs	r3, #50	; 0x32
    1de4:	2400      	movs	r4, #0
    1de6:	6093      	str	r3, [r2, #8]
    1de8:	60d4      	str	r4, [r2, #12]
                num_samples = 0;
    1dea:	2300      	movs	r3, #0
    1dec:	2400      	movs	r4, #0
    1dee:	2290      	movs	r2, #144	; 0x90
    1df0:	18ba      	adds	r2, r7, r2
    1df2:	6013      	str	r3, [r2, #0]
    1df4:	6054      	str	r4, [r2, #4]

                // Enable hand sampling hardware
                hand_init();
    1df6:	4bbc      	ldr	r3, [pc, #752]	; (20e8 <STACK_SIZE+0xe8>)
    1df8:	4798      	blx	r3

                // Reset the hand controlling machine
                control_state = CONTROL_BEGIN;
    1dfa:	238d      	movs	r3, #141	; 0x8d
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	2200      	movs	r2, #0
    1e00:	701a      	strb	r2, [r3, #0]
                machine_counters[M_CONTROL] = 0;
    1e02:	4ab7      	ldr	r2, [pc, #732]	; (20e0 <STACK_SIZE+0xe0>)
    1e04:	2300      	movs	r3, #0
    1e06:	2400      	movs	r4, #0
    1e08:	6193      	str	r3, [r2, #24]
    1e0a:	61d4      	str	r4, [r2, #28]
                machine_delays[M_CONTROL] = 1;
    1e0c:	4ab5      	ldr	r2, [pc, #724]	; (20e4 <STACK_SIZE+0xe4>)
    1e0e:	2301      	movs	r3, #1
    1e10:	2400      	movs	r4, #0
    1e12:	6193      	str	r3, [r2, #24]
    1e14:	61d4      	str	r4, [r2, #28]

                // Enable the prosthetic hardware
                servos_init(SERVOS_ADDR);
    1e16:	2080      	movs	r0, #128	; 0x80
    1e18:	4bb4      	ldr	r3, [pc, #720]	; (20ec <STACK_SIZE+0xec>)
    1e1a:	4798      	blx	r3

                // Reset the timeout values
                machine_counters[M_TIMEOUTS] = timer_get();
    1e1c:	4bb4      	ldr	r3, [pc, #720]	; (20f0 <STACK_SIZE+0xf0>)
    1e1e:	4798      	blx	r3
    1e20:	0003      	movs	r3, r0
    1e22:	000c      	movs	r4, r1
    1e24:	4aae      	ldr	r2, [pc, #696]	; (20e0 <STACK_SIZE+0xe0>)
    1e26:	6213      	str	r3, [r2, #32]
    1e28:	6254      	str	r4, [r2, #36]	; 0x24
                machine_delays[M_TIMEOUTS] = 5000;
    1e2a:	4aae      	ldr	r2, [pc, #696]	; (20e4 <STACK_SIZE+0xe4>)
    1e2c:	4bb1      	ldr	r3, [pc, #708]	; (20f4 <STACK_SIZE+0xf4>)
    1e2e:	2400      	movs	r4, #0
    1e30:	6213      	str	r3, [r2, #32]
    1e32:	6254      	str	r4, [r2, #36]	; 0x24

                // Reset the mode flag and enter the 'main' loop
                mode_change_flag = 0;
    1e34:	4bb0      	ldr	r3, [pc, #704]	; (20f8 <STACK_SIZE+0xf8>)
    1e36:	2200      	movs	r2, #0
    1e38:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    1e3a:	e0d7      	b.n	1fec <main+0x8f4>
                    // Get the current time
                    current_time = timer_get();
    1e3c:	4bac      	ldr	r3, [pc, #688]	; (20f0 <STACK_SIZE+0xf0>)
    1e3e:	4798      	blx	r3
    1e40:	0003      	movs	r3, r0
    1e42:	000c      	movs	r4, r1
    1e44:	2280      	movs	r2, #128	; 0x80
    1e46:	18ba      	adds	r2, r7, r2
    1e48:	6013      	str	r3, [r2, #0]
    1e4a:	6054      	str	r4, [r2, #4]

                    /*
                     * Hand sampling machine
                     */
                     if (current_time - machine_counters[M_HAND_SAMPLE] > 
    1e4c:	4ba4      	ldr	r3, [pc, #656]	; (20e0 <STACK_SIZE+0xe0>)
    1e4e:	68dc      	ldr	r4, [r3, #12]
    1e50:	689b      	ldr	r3, [r3, #8]
    1e52:	2280      	movs	r2, #128	; 0x80
    1e54:	18ba      	adds	r2, r7, r2
    1e56:	6811      	ldr	r1, [r2, #0]
    1e58:	6852      	ldr	r2, [r2, #4]
    1e5a:	1ac9      	subs	r1, r1, r3
    1e5c:	41a2      	sbcs	r2, r4
                            machine_delays[M_HAND_SAMPLE]) {
    1e5e:	4ba1      	ldr	r3, [pc, #644]	; (20e4 <STACK_SIZE+0xe4>)
    1e60:	68dc      	ldr	r4, [r3, #12]
    1e62:	689b      	ldr	r3, [r3, #8]
                     if (current_time - machine_counters[M_HAND_SAMPLE] > 
    1e64:	42a2      	cmp	r2, r4
    1e66:	d802      	bhi.n	1e6e <main+0x776>
    1e68:	d159      	bne.n	1f1e <main+0x826>
    1e6a:	4299      	cmp	r1, r3
    1e6c:	d957      	bls.n	1f1e <main+0x826>
                        switch (hand_state) {
    1e6e:	238e      	movs	r3, #142	; 0x8e
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	2b01      	cmp	r3, #1
    1e76:	d014      	beq.n	1ea2 <main+0x7aa>
    1e78:	dc02      	bgt.n	1e80 <main+0x788>
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d005      	beq.n	1e8a <main+0x792>
    1e7e:	e04e      	b.n	1f1e <main+0x826>
    1e80:	2b02      	cmp	r3, #2
    1e82:	d017      	beq.n	1eb4 <main+0x7bc>
    1e84:	2b03      	cmp	r3, #3
    1e86:	d023      	beq.n	1ed0 <main+0x7d8>
    1e88:	e049      	b.n	1f1e <main+0x826>
                            case HAND_SAMPLE: {
                                // Begin hand sample via I2C
                                if (hand_read(&hand_data)) {
    1e8a:	2314      	movs	r3, #20
    1e8c:	18fb      	adds	r3, r7, r3
    1e8e:	0018      	movs	r0, r3
    1e90:	4b9a      	ldr	r3, [pc, #616]	; (20fc <STACK_SIZE+0xfc>)
    1e92:	4798      	blx	r3
    1e94:	1e03      	subs	r3, r0, #0
    1e96:	d03b      	beq.n	1f10 <main+0x818>
                                    hand_state = HAND_SAMPLE_END;
    1e98:	238e      	movs	r3, #142	; 0x8e
    1e9a:	18fb      	adds	r3, r7, r3
    1e9c:	2201      	movs	r2, #1
    1e9e:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1ea0:	e036      	b.n	1f10 <main+0x818>

                            case HAND_SAMPLE_END: {
                                // Wait for I2C hand sample end
                                if (hand_read_complete()) {
    1ea2:	4b97      	ldr	r3, [pc, #604]	; (2100 <STACK_SIZE+0x100>)
    1ea4:	4798      	blx	r3
    1ea6:	1e03      	subs	r3, r0, #0
    1ea8:	d034      	beq.n	1f14 <main+0x81c>
                                    hand_state = HAND_ANGLE;
    1eaa:	238e      	movs	r3, #142	; 0x8e
    1eac:	18fb      	adds	r3, r7, r3
    1eae:	2202      	movs	r2, #2
    1eb0:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1eb2:	e02f      	b.n	1f14 <main+0x81c>

                            case HAND_ANGLE: {
                                // Begin hand angle calculation
                                if (servos_compute(&hand_data, &hand_ang)) {
    1eb4:	1d3a      	adds	r2, r7, #4
    1eb6:	2314      	movs	r3, #20
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	0011      	movs	r1, r2
    1ebc:	0018      	movs	r0, r3
    1ebe:	4b91      	ldr	r3, [pc, #580]	; (2104 <STACK_SIZE+0x104>)
    1ec0:	4798      	blx	r3
    1ec2:	1e03      	subs	r3, r0, #0
    1ec4:	d028      	beq.n	1f18 <main+0x820>
                                    hand_state = HAND_ANGLE_END;
    1ec6:	238e      	movs	r3, #142	; 0x8e
    1ec8:	18fb      	adds	r3, r7, r3
    1eca:	2203      	movs	r2, #3
    1ecc:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1ece:	e023      	b.n	1f18 <main+0x820>

                            case HAND_ANGLE_END: {
                                // Wait for hand angle computation to finish
                                if (servos_compute_complete()) {
    1ed0:	4b8d      	ldr	r3, [pc, #564]	; (2108 <STACK_SIZE+0x108>)
    1ed2:	4798      	blx	r3
    1ed4:	1e03      	subs	r3, r0, #0
    1ed6:	d021      	beq.n	1f1c <main+0x824>
                                    hand_state = HAND_SAMPLE;
    1ed8:	238e      	movs	r3, #142	; 0x8e
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	2200      	movs	r2, #0
    1ede:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_HAND_SAMPLE] += machine_delays[M_HAND_SAMPLE];
    1ee0:	4b7f      	ldr	r3, [pc, #508]	; (20e0 <STACK_SIZE+0xe0>)
    1ee2:	6899      	ldr	r1, [r3, #8]
    1ee4:	68da      	ldr	r2, [r3, #12]
    1ee6:	4b7f      	ldr	r3, [pc, #508]	; (20e4 <STACK_SIZE+0xe4>)
    1ee8:	68dc      	ldr	r4, [r3, #12]
    1eea:	689b      	ldr	r3, [r3, #8]
    1eec:	185b      	adds	r3, r3, r1
    1eee:	4154      	adcs	r4, r2
    1ef0:	4a7b      	ldr	r2, [pc, #492]	; (20e0 <STACK_SIZE+0xe0>)
    1ef2:	6093      	str	r3, [r2, #8]
    1ef4:	60d4      	str	r4, [r2, #12]
                                    num_samples++;
    1ef6:	2390      	movs	r3, #144	; 0x90
    1ef8:	18fb      	adds	r3, r7, r3
    1efa:	685c      	ldr	r4, [r3, #4]
    1efc:	681b      	ldr	r3, [r3, #0]
    1efe:	2101      	movs	r1, #1
    1f00:	2200      	movs	r2, #0
    1f02:	185b      	adds	r3, r3, r1
    1f04:	4154      	adcs	r4, r2
    1f06:	2290      	movs	r2, #144	; 0x90
    1f08:	18ba      	adds	r2, r7, r2
    1f0a:	6013      	str	r3, [r2, #0]
    1f0c:	6054      	str	r4, [r2, #4]
                                }
                            } break;
    1f0e:	e005      	b.n	1f1c <main+0x824>
                            } break;
    1f10:	46c0      	nop			; (mov r8, r8)
    1f12:	e004      	b.n	1f1e <main+0x826>
                            } break;
    1f14:	46c0      	nop			; (mov r8, r8)
    1f16:	e002      	b.n	1f1e <main+0x826>
                            } break;
    1f18:	46c0      	nop			; (mov r8, r8)
    1f1a:	e000      	b.n	1f1e <main+0x826>
                            } break;
    1f1c:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Prosthetic controlling machine
                     */
                    if (num_samples - machine_counters[M_CONTROL] >
    1f1e:	4b70      	ldr	r3, [pc, #448]	; (20e0 <STACK_SIZE+0xe0>)
    1f20:	69dc      	ldr	r4, [r3, #28]
    1f22:	699b      	ldr	r3, [r3, #24]
    1f24:	2290      	movs	r2, #144	; 0x90
    1f26:	18ba      	adds	r2, r7, r2
    1f28:	6811      	ldr	r1, [r2, #0]
    1f2a:	6852      	ldr	r2, [r2, #4]
    1f2c:	1ac9      	subs	r1, r1, r3
    1f2e:	41a2      	sbcs	r2, r4
                            machine_delays[M_CONTROL]) {
    1f30:	4b6c      	ldr	r3, [pc, #432]	; (20e4 <STACK_SIZE+0xe4>)
    1f32:	69dc      	ldr	r4, [r3, #28]
    1f34:	699b      	ldr	r3, [r3, #24]
                    if (num_samples - machine_counters[M_CONTROL] >
    1f36:	42a2      	cmp	r2, r4
    1f38:	d802      	bhi.n	1f40 <main+0x848>
    1f3a:	d12c      	bne.n	1f96 <main+0x89e>
    1f3c:	4299      	cmp	r1, r3
    1f3e:	d92a      	bls.n	1f96 <main+0x89e>
                        switch (control_state) {
    1f40:	238d      	movs	r3, #141	; 0x8d
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d002      	beq.n	1f50 <main+0x858>
    1f4a:	2b01      	cmp	r3, #1
    1f4c:	d00c      	beq.n	1f68 <main+0x870>
    1f4e:	e022      	b.n	1f96 <main+0x89e>
                            case CONTROL_BEGIN: {
                                // Begin I2C control of servos
                                if (servos_write(SERVOS_ADDR, &hand_ang)) {
    1f50:	1d3b      	adds	r3, r7, #4
    1f52:	0019      	movs	r1, r3
    1f54:	2080      	movs	r0, #128	; 0x80
    1f56:	4b6d      	ldr	r3, [pc, #436]	; (210c <STACK_SIZE+0x10c>)
    1f58:	4798      	blx	r3
    1f5a:	1e03      	subs	r3, r0, #0
    1f5c:	d018      	beq.n	1f90 <main+0x898>
                                    control_state = CONTROL_END;
    1f5e:	238d      	movs	r3, #141	; 0x8d
    1f60:	18fb      	adds	r3, r7, r3
    1f62:	2201      	movs	r2, #1
    1f64:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    1f66:	e013      	b.n	1f90 <main+0x898>

                            case CONTROL_END: {
                                // Wait for I2C control of servos to finish
                                if (servos_write_complete()) {
    1f68:	4b69      	ldr	r3, [pc, #420]	; (2110 <STACK_SIZE+0x110>)
    1f6a:	4798      	blx	r3
    1f6c:	1e03      	subs	r3, r0, #0
    1f6e:	d011      	beq.n	1f94 <main+0x89c>
                                    control_state = CONTROL_BEGIN;
    1f70:	238d      	movs	r3, #141	; 0x8d
    1f72:	18fb      	adds	r3, r7, r3
    1f74:	2200      	movs	r2, #0
    1f76:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_CONTROL] += machine_delays[M_CONTROL];
    1f78:	4b59      	ldr	r3, [pc, #356]	; (20e0 <STACK_SIZE+0xe0>)
    1f7a:	6999      	ldr	r1, [r3, #24]
    1f7c:	69da      	ldr	r2, [r3, #28]
    1f7e:	4b59      	ldr	r3, [pc, #356]	; (20e4 <STACK_SIZE+0xe4>)
    1f80:	69dc      	ldr	r4, [r3, #28]
    1f82:	699b      	ldr	r3, [r3, #24]
    1f84:	185b      	adds	r3, r3, r1
    1f86:	4154      	adcs	r4, r2
    1f88:	4a55      	ldr	r2, [pc, #340]	; (20e0 <STACK_SIZE+0xe0>)
    1f8a:	6193      	str	r3, [r2, #24]
    1f8c:	61d4      	str	r4, [r2, #28]
                                }
                            } break;
    1f8e:	e001      	b.n	1f94 <main+0x89c>
                            } break;
    1f90:	46c0      	nop			; (mov r8, r8)
    1f92:	e000      	b.n	1f96 <main+0x89e>
                            } break;
    1f94:	46c0      	nop			; (mov r8, r8)
                        } // end switch
                    }

                    // Timeout check for registered things
                    if (current_time - machine_counters[M_TIMEOUTS] >
    1f96:	4b52      	ldr	r3, [pc, #328]	; (20e0 <STACK_SIZE+0xe0>)
    1f98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    1f9a:	6a1b      	ldr	r3, [r3, #32]
    1f9c:	2280      	movs	r2, #128	; 0x80
    1f9e:	18ba      	adds	r2, r7, r2
    1fa0:	6811      	ldr	r1, [r2, #0]
    1fa2:	6852      	ldr	r2, [r2, #4]
    1fa4:	1ac9      	subs	r1, r1, r3
    1fa6:	41a2      	sbcs	r2, r4
                            machine_delays[M_TIMEOUTS]) {
    1fa8:	4b4e      	ldr	r3, [pc, #312]	; (20e4 <STACK_SIZE+0xe4>)
    1faa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    1fac:	6a1b      	ldr	r3, [r3, #32]
                    if (current_time - machine_counters[M_TIMEOUTS] >
    1fae:	42a2      	cmp	r2, r4
    1fb0:	d803      	bhi.n	1fba <main+0x8c2>
    1fb2:	d11b      	bne.n	1fec <main+0x8f4>
    1fb4:	4299      	cmp	r1, r3
    1fb6:	d800      	bhi.n	1fba <main+0x8c2>
    1fb8:	e018      	b.n	1fec <main+0x8f4>
                        // Call timeout functions
                        if (i2c_timeout() || serial_timeout()) {
    1fba:	4b56      	ldr	r3, [pc, #344]	; (2114 <STACK_SIZE+0x114>)
    1fbc:	4798      	blx	r3
    1fbe:	1e03      	subs	r3, r0, #0
    1fc0:	d103      	bne.n	1fca <main+0x8d2>
    1fc2:	4b55      	ldr	r3, [pc, #340]	; (2118 <STACK_SIZE+0x118>)
    1fc4:	4798      	blx	r3
    1fc6:	1e03      	subs	r3, r0, #0
    1fc8:	d005      	beq.n	1fd6 <main+0x8de>
                            machine_mode = MODE_WAIT;
    1fca:	4b54      	ldr	r3, [pc, #336]	; (211c <STACK_SIZE+0x11c>)
    1fcc:	2257      	movs	r2, #87	; 0x57
    1fce:	701a      	strb	r2, [r3, #0]
                            mode_change_flag = 1;
    1fd0:	4b49      	ldr	r3, [pc, #292]	; (20f8 <STACK_SIZE+0xf8>)
    1fd2:	2201      	movs	r2, #1
    1fd4:	701a      	strb	r2, [r3, #0]
                        }
                        machine_counters[M_TIMEOUTS] += machine_delays[M_TIMEOUTS];
    1fd6:	4b42      	ldr	r3, [pc, #264]	; (20e0 <STACK_SIZE+0xe0>)
    1fd8:	6a19      	ldr	r1, [r3, #32]
    1fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1fdc:	4b41      	ldr	r3, [pc, #260]	; (20e4 <STACK_SIZE+0xe4>)
    1fde:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    1fe0:	6a1b      	ldr	r3, [r3, #32]
    1fe2:	185b      	adds	r3, r3, r1
    1fe4:	4154      	adcs	r4, r2
    1fe6:	4a3e      	ldr	r2, [pc, #248]	; (20e0 <STACK_SIZE+0xe0>)
    1fe8:	6213      	str	r3, [r2, #32]
    1fea:	6254      	str	r4, [r2, #36]	; 0x24
                while (!mode_change_flag) {
    1fec:	4b42      	ldr	r3, [pc, #264]	; (20f8 <STACK_SIZE+0xf8>)
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	b2db      	uxtb	r3, r3
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d100      	bne.n	1ff8 <main+0x900>
    1ff6:	e721      	b.n	1e3c <main+0x744>
                    }
                    
                } // end mirroring loop

                // Reset i2c
                i2c_stop();
    1ff8:	4b49      	ldr	r3, [pc, #292]	; (2120 <STACK_SIZE+0x120>)
    1ffa:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    1ffc:	4b30      	ldr	r3, [pc, #192]	; (20c0 <STACK_SIZE+0xc0>)
    1ffe:	0018      	movs	r0, r3
    2000:	4b31      	ldr	r3, [pc, #196]	; (20c8 <STACK_SIZE+0xc8>)
    2002:	4798      	blx	r3

                // Disable hand sampling hardware
                hand_stop();
    2004:	4b47      	ldr	r3, [pc, #284]	; (2124 <STACK_SIZE+0x124>)
    2006:	4798      	blx	r3

                // Disable prosthetic hardware
                servos_stop(SERVOS_ADDR);
    2008:	2080      	movs	r0, #128	; 0x80
    200a:	4b47      	ldr	r3, [pc, #284]	; (2128 <STACK_SIZE+0x128>)
    200c:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    200e:	4b44      	ldr	r3, [pc, #272]	; (2120 <STACK_SIZE+0x120>)
    2010:	4798      	blx	r3
            } break;
    2012:	e1a9      	b.n	2368 <STACK_SIZE+0x368>
             *                                        *
             ******************************************/

            case MODE_TRAIN: {
                // Acknowledge the mode reset
                message = "beginning data collection";
    2014:	4b45      	ldr	r3, [pc, #276]	; (212c <STACK_SIZE+0x12c>)
    2016:	67fb      	str	r3, [r7, #124]	; 0x7c
                serial_init(SERIAL_BAUD);
    2018:	4b29      	ldr	r3, [pc, #164]	; (20c0 <STACK_SIZE+0xc0>)
    201a:	0018      	movs	r0, r3
    201c:	4b29      	ldr	r3, [pc, #164]	; (20c4 <STACK_SIZE+0xc4>)
    201e:	4798      	blx	r3
                timer_delay(500);
    2020:	23fa      	movs	r3, #250	; 0xfa
    2022:	005b      	lsls	r3, r3, #1
    2024:	0018      	movs	r0, r3
    2026:	4b29      	ldr	r3, [pc, #164]	; (20cc <STACK_SIZE+0xcc>)
    2028:	4798      	blx	r3
                serial_set_default_rx(rx_mode_setter);
    202a:	4b29      	ldr	r3, [pc, #164]	; (20d0 <STACK_SIZE+0xd0>)
    202c:	0018      	movs	r0, r3
    202e:	4b29      	ldr	r3, [pc, #164]	; (20d4 <STACK_SIZE+0xd4>)
    2030:	4798      	blx	r3
                while (!transmit('t', message));
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2036:	0019      	movs	r1, r3
    2038:	2074      	movs	r0, #116	; 0x74
    203a:	4b28      	ldr	r3, [pc, #160]	; (20dc <STACK_SIZE+0xdc>)
    203c:	4798      	blx	r3
    203e:	1e03      	subs	r3, r0, #0
    2040:	d0f8      	beq.n	2034 <STACK_SIZE+0x34>

                // Enable i2c com
                i2c_init(I2C_BAUD);
    2042:	4b1f      	ldr	r3, [pc, #124]	; (20c0 <STACK_SIZE+0xc0>)
    2044:	0018      	movs	r0, r3
    2046:	4b20      	ldr	r3, [pc, #128]	; (20c8 <STACK_SIZE+0xc8>)
    2048:	4798      	blx	r3

                // Reset the EMG machine
                num_samples = 0;
    204a:	2300      	movs	r3, #0
    204c:	2400      	movs	r4, #0
    204e:	2290      	movs	r2, #144	; 0x90
    2050:	18ba      	adds	r2, r7, r2
    2052:	6013      	str	r3, [r2, #0]
    2054:	6054      	str	r4, [r2, #4]
                emg_state = EMG_SAMPLE;
    2056:	238f      	movs	r3, #143	; 0x8f
    2058:	18fb      	adds	r3, r7, r3
    205a:	2200      	movs	r2, #0
    205c:	701a      	strb	r2, [r3, #0]
                machine_counters[M_EMG_SAMPLE] = 0;
    205e:	4a20      	ldr	r2, [pc, #128]	; (20e0 <STACK_SIZE+0xe0>)
    2060:	2300      	movs	r3, #0
    2062:	2400      	movs	r4, #0
    2064:	6013      	str	r3, [r2, #0]
    2066:	6054      	str	r4, [r2, #4]
                machine_delays[M_EMG_SAMPLE] = 1;
    2068:	4a1e      	ldr	r2, [pc, #120]	; (20e4 <STACK_SIZE+0xe4>)
    206a:	2301      	movs	r3, #1
    206c:	2400      	movs	r4, #0
    206e:	6013      	str	r3, [r2, #0]
    2070:	6054      	str	r4, [r2, #4]

                // Enable EMG hardware
                adc_init();
    2072:	4b2f      	ldr	r3, [pc, #188]	; (2130 <STACK_SIZE+0x130>)
    2074:	4798      	blx	r3
                emg_setup(1, 1, 1);
    2076:	2201      	movs	r2, #1
    2078:	2101      	movs	r1, #1
    207a:	2001      	movs	r0, #1
    207c:	4b2d      	ldr	r3, [pc, #180]	; (2134 <STACK_SIZE+0x134>)
    207e:	4798      	blx	r3

                // Reset the hand sampling machine
                hand_state = HAND_SAMPLE;
    2080:	238e      	movs	r3, #142	; 0x8e
    2082:	18fb      	adds	r3, r7, r3
    2084:	2200      	movs	r2, #0
    2086:	701a      	strb	r2, [r3, #0]
                machine_counters[M_HAND_SAMPLE] = 0;
    2088:	4a15      	ldr	r2, [pc, #84]	; (20e0 <STACK_SIZE+0xe0>)
    208a:	2300      	movs	r3, #0
    208c:	2400      	movs	r4, #0
    208e:	6093      	str	r3, [r2, #8]
    2090:	60d4      	str	r4, [r2, #12]
                machine_delays[M_HAND_SAMPLE] = 20;
    2092:	4a14      	ldr	r2, [pc, #80]	; (20e4 <STACK_SIZE+0xe4>)
    2094:	2314      	movs	r3, #20
    2096:	2400      	movs	r4, #0
    2098:	6093      	str	r3, [r2, #8]
    209a:	60d4      	str	r4, [r2, #12]

                // Enable hand sampling hardware
                hand_init();
    209c:	4b12      	ldr	r3, [pc, #72]	; (20e8 <STACK_SIZE+0xe8>)
    209e:	4798      	blx	r3

                // Reset the timeout values
                machine_counters[M_TIMEOUTS] = timer_get();
    20a0:	4b13      	ldr	r3, [pc, #76]	; (20f0 <STACK_SIZE+0xf0>)
    20a2:	4798      	blx	r3
    20a4:	0003      	movs	r3, r0
    20a6:	000c      	movs	r4, r1
    20a8:	4a0d      	ldr	r2, [pc, #52]	; (20e0 <STACK_SIZE+0xe0>)
    20aa:	6213      	str	r3, [r2, #32]
    20ac:	6254      	str	r4, [r2, #36]	; 0x24
                machine_delays[M_TIMEOUTS] = 5000;
    20ae:	4a0d      	ldr	r2, [pc, #52]	; (20e4 <STACK_SIZE+0xe4>)
    20b0:	4b10      	ldr	r3, [pc, #64]	; (20f4 <STACK_SIZE+0xf4>)
    20b2:	2400      	movs	r4, #0
    20b4:	6213      	str	r3, [r2, #32]
    20b6:	6254      	str	r4, [r2, #36]	; 0x24

                // Reset the mode flag and enter 'main' loop
                mode_change_flag = 0;
    20b8:	4b0f      	ldr	r3, [pc, #60]	; (20f8 <STACK_SIZE+0xf8>)
    20ba:	2200      	movs	r2, #0
    20bc:	701a      	strb	r2, [r3, #0]
                while (!mode_change_flag) {
    20be:	e132      	b.n	2326 <STACK_SIZE+0x326>
    20c0:	000f4240 	.word	0x000f4240
    20c4:	00002645 	.word	0x00002645
    20c8:	00001295 	.word	0x00001295
    20cc:	00003559 	.word	0x00003559
    20d0:	000024d9 	.word	0x000024d9
    20d4:	00002aa5 	.word	0x00002aa5
    20d8:	00005e58 	.word	0x00005e58
    20dc:	000023bd 	.word	0x000023bd
    20e0:	200004c8 	.word	0x200004c8
    20e4:	200004f8 	.word	0x200004f8
    20e8:	000009e5 	.word	0x000009e5
    20ec:	00002c1d 	.word	0x00002c1d
    20f0:	00003541 	.word	0x00003541
    20f4:	00001388 	.word	0x00001388
    20f8:	2000045c 	.word	0x2000045c
    20fc:	00000ab5 	.word	0x00000ab5
    2100:	00000ae5 	.word	0x00000ae5
    2104:	00002dcd 	.word	0x00002dcd
    2108:	00002e01 	.word	0x00002e01
    210c:	00002d55 	.word	0x00002d55
    2110:	00002db1 	.word	0x00002db1
    2114:	0000136d 	.word	0x0000136d
    2118:	0000286d 	.word	0x0000286d
    211c:	20000007 	.word	0x20000007
    2120:	00001315 	.word	0x00001315
    2124:	00000a4d 	.word	0x00000a4d
    2128:	00002ce5 	.word	0x00002ce5
    212c:	00005e70 	.word	0x00005e70
    2130:	0000021d 	.word	0x0000021d
    2134:	00000845 	.word	0x00000845
                    // Get the current time
                    current_time = timer_get();
    2138:	4b8c      	ldr	r3, [pc, #560]	; (236c <STACK_SIZE+0x36c>)
    213a:	4798      	blx	r3
    213c:	0003      	movs	r3, r0
    213e:	000c      	movs	r4, r1
    2140:	2280      	movs	r2, #128	; 0x80
    2142:	18ba      	adds	r2, r7, r2
    2144:	6013      	str	r3, [r2, #0]
    2146:	6054      	str	r4, [r2, #4]

                    /*
                     * EMG sampling machine
                     */
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    2148:	4b89      	ldr	r3, [pc, #548]	; (2370 <STACK_SIZE+0x370>)
    214a:	685c      	ldr	r4, [r3, #4]
    214c:	681b      	ldr	r3, [r3, #0]
    214e:	2280      	movs	r2, #128	; 0x80
    2150:	18ba      	adds	r2, r7, r2
    2152:	6811      	ldr	r1, [r2, #0]
    2154:	6852      	ldr	r2, [r2, #4]
    2156:	1ac9      	subs	r1, r1, r3
    2158:	41a2      	sbcs	r2, r4
                            machine_delays[M_EMG_SAMPLE]) {
    215a:	4b86      	ldr	r3, [pc, #536]	; (2374 <STACK_SIZE+0x374>)
    215c:	685c      	ldr	r4, [r3, #4]
    215e:	681b      	ldr	r3, [r3, #0]
                    if (current_time - machine_counters[M_EMG_SAMPLE] >
    2160:	42a2      	cmp	r2, r4
    2162:	d802      	bhi.n	216a <STACK_SIZE+0x16a>
    2164:	d158      	bne.n	2218 <STACK_SIZE+0x218>
    2166:	4299      	cmp	r1, r3
    2168:	d956      	bls.n	2218 <STACK_SIZE+0x218>
                        switch (emg_state) {
    216a:	238f      	movs	r3, #143	; 0x8f
    216c:	18fb      	adds	r3, r7, r3
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	2b01      	cmp	r3, #1
    2172:	d014      	beq.n	219e <STACK_SIZE+0x19e>
    2174:	dc02      	bgt.n	217c <STACK_SIZE+0x17c>
    2176:	2b00      	cmp	r3, #0
    2178:	d005      	beq.n	2186 <STACK_SIZE+0x186>
    217a:	e04d      	b.n	2218 <STACK_SIZE+0x218>
    217c:	2b02      	cmp	r3, #2
    217e:	d017      	beq.n	21b0 <STACK_SIZE+0x1b0>
    2180:	2b03      	cmp	r3, #3
    2182:	d022      	beq.n	21ca <STACK_SIZE+0x1ca>
    2184:	e048      	b.n	2218 <STACK_SIZE+0x218>
                            case EMG_SAMPLE: {
                                // Begin the EMG sample
                                if (emg_sample(&emg_data)) {
    2186:	2374      	movs	r3, #116	; 0x74
    2188:	18fb      	adds	r3, r7, r3
    218a:	0018      	movs	r0, r3
    218c:	4b7a      	ldr	r3, [pc, #488]	; (2378 <STACK_SIZE+0x378>)
    218e:	4798      	blx	r3
    2190:	1e03      	subs	r3, r0, #0
    2192:	d03a      	beq.n	220a <STACK_SIZE+0x20a>
                                    emg_state = EMG_SAMPLE_END;
    2194:	238f      	movs	r3, #143	; 0x8f
    2196:	18fb      	adds	r3, r7, r3
    2198:	2201      	movs	r2, #1
    219a:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    219c:	e035      	b.n	220a <STACK_SIZE+0x20a>

                            case EMG_SAMPLE_END: {
                                // Wait for the EMG sample to complete
                                if (emg_sample_complete()) {
    219e:	4b77      	ldr	r3, [pc, #476]	; (237c <STACK_SIZE+0x37c>)
    21a0:	4798      	blx	r3
    21a2:	1e03      	subs	r3, r0, #0
    21a4:	d033      	beq.n	220e <STACK_SIZE+0x20e>
                                    emg_state = EMG_TX;
    21a6:	238f      	movs	r3, #143	; 0x8f
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	2202      	movs	r2, #2
    21ac:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    21ae:	e02e      	b.n	220e <STACK_SIZE+0x20e>

                            case EMG_TX: {
                                // Transmit the EMG data
                                if (transmit('e', emg_data.bytes)) {
    21b0:	2374      	movs	r3, #116	; 0x74
    21b2:	18fb      	adds	r3, r7, r3
    21b4:	0019      	movs	r1, r3
    21b6:	2065      	movs	r0, #101	; 0x65
    21b8:	4b71      	ldr	r3, [pc, #452]	; (2380 <STACK_SIZE+0x380>)
    21ba:	4798      	blx	r3
    21bc:	1e03      	subs	r3, r0, #0
    21be:	d028      	beq.n	2212 <STACK_SIZE+0x212>
                                    emg_state = EMG_TX_END;
    21c0:	238f      	movs	r3, #143	; 0x8f
    21c2:	18fb      	adds	r3, r7, r3
    21c4:	2203      	movs	r2, #3
    21c6:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    21c8:	e023      	b.n	2212 <STACK_SIZE+0x212>

                            case EMG_TX_END: {
                                // Wait for transmission complete
                                if (tx_emg_flag) {
    21ca:	4b6e      	ldr	r3, [pc, #440]	; (2384 <STACK_SIZE+0x384>)
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	2b00      	cmp	r3, #0
    21d0:	d021      	beq.n	2216 <STACK_SIZE+0x216>
                                    emg_state = EMG_SAMPLE;
    21d2:	238f      	movs	r3, #143	; 0x8f
    21d4:	18fb      	adds	r3, r7, r3
    21d6:	2200      	movs	r2, #0
    21d8:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_EMG_SAMPLE] += machine_delays[M_EMG_SAMPLE];
    21da:	4b65      	ldr	r3, [pc, #404]	; (2370 <STACK_SIZE+0x370>)
    21dc:	6819      	ldr	r1, [r3, #0]
    21de:	685a      	ldr	r2, [r3, #4]
    21e0:	4b64      	ldr	r3, [pc, #400]	; (2374 <STACK_SIZE+0x374>)
    21e2:	685c      	ldr	r4, [r3, #4]
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	185b      	adds	r3, r3, r1
    21e8:	4154      	adcs	r4, r2
    21ea:	4a61      	ldr	r2, [pc, #388]	; (2370 <STACK_SIZE+0x370>)
    21ec:	6013      	str	r3, [r2, #0]
    21ee:	6054      	str	r4, [r2, #4]
                                    num_samples++;
    21f0:	2390      	movs	r3, #144	; 0x90
    21f2:	18fb      	adds	r3, r7, r3
    21f4:	685c      	ldr	r4, [r3, #4]
    21f6:	681b      	ldr	r3, [r3, #0]
    21f8:	2101      	movs	r1, #1
    21fa:	2200      	movs	r2, #0
    21fc:	185b      	adds	r3, r3, r1
    21fe:	4154      	adcs	r4, r2
    2200:	2290      	movs	r2, #144	; 0x90
    2202:	18ba      	adds	r2, r7, r2
    2204:	6013      	str	r3, [r2, #0]
    2206:	6054      	str	r4, [r2, #4]
                                }
                            } break;
    2208:	e005      	b.n	2216 <STACK_SIZE+0x216>
                            } break;
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	e004      	b.n	2218 <STACK_SIZE+0x218>
                            } break;
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	e002      	b.n	2218 <STACK_SIZE+0x218>
                            } break;
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	e000      	b.n	2218 <STACK_SIZE+0x218>
                            } break;
    2216:	46c0      	nop			; (mov r8, r8)
                    }

                    /*
                     * Hand sampling machine
                     */
                    if (num_samples - machine_counters[M_HAND_SAMPLE] > 
    2218:	4b55      	ldr	r3, [pc, #340]	; (2370 <STACK_SIZE+0x370>)
    221a:	68dc      	ldr	r4, [r3, #12]
    221c:	689b      	ldr	r3, [r3, #8]
    221e:	2290      	movs	r2, #144	; 0x90
    2220:	18ba      	adds	r2, r7, r2
    2222:	6811      	ldr	r1, [r2, #0]
    2224:	6852      	ldr	r2, [r2, #4]
    2226:	1ac9      	subs	r1, r1, r3
    2228:	41a2      	sbcs	r2, r4
                            machine_delays[M_HAND_SAMPLE]) {
    222a:	4b52      	ldr	r3, [pc, #328]	; (2374 <STACK_SIZE+0x374>)
    222c:	68dc      	ldr	r4, [r3, #12]
    222e:	689b      	ldr	r3, [r3, #8]
                    if (num_samples - machine_counters[M_HAND_SAMPLE] > 
    2230:	42a2      	cmp	r2, r4
    2232:	d802      	bhi.n	223a <STACK_SIZE+0x23a>
    2234:	d14c      	bne.n	22d0 <STACK_SIZE+0x2d0>
    2236:	4299      	cmp	r1, r3
    2238:	d94a      	bls.n	22d0 <STACK_SIZE+0x2d0>

                        switch (hand_state) {
    223a:	238e      	movs	r3, #142	; 0x8e
    223c:	18fb      	adds	r3, r7, r3
    223e:	781b      	ldrb	r3, [r3, #0]
    2240:	2b01      	cmp	r3, #1
    2242:	d014      	beq.n	226e <STACK_SIZE+0x26e>
    2244:	dc02      	bgt.n	224c <STACK_SIZE+0x24c>
    2246:	2b00      	cmp	r3, #0
    2248:	d005      	beq.n	2256 <STACK_SIZE+0x256>
    224a:	e041      	b.n	22d0 <STACK_SIZE+0x2d0>
    224c:	2b05      	cmp	r3, #5
    224e:	d017      	beq.n	2280 <STACK_SIZE+0x280>
    2250:	2b06      	cmp	r3, #6
    2252:	d022      	beq.n	229a <STACK_SIZE+0x29a>
    2254:	e03c      	b.n	22d0 <STACK_SIZE+0x2d0>
                            case HAND_SAMPLE: {
                                // Begin hand sample via I2C
                                if (hand_read(&hand_data)) {
    2256:	2314      	movs	r3, #20
    2258:	18fb      	adds	r3, r7, r3
    225a:	0018      	movs	r0, r3
    225c:	4b4a      	ldr	r3, [pc, #296]	; (2388 <STACK_SIZE+0x388>)
    225e:	4798      	blx	r3
    2260:	1e03      	subs	r3, r0, #0
    2262:	d02e      	beq.n	22c2 <STACK_SIZE+0x2c2>
                                    hand_state = HAND_SAMPLE_END;
    2264:	238e      	movs	r3, #142	; 0x8e
    2266:	18fb      	adds	r3, r7, r3
    2268:	2201      	movs	r2, #1
    226a:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    226c:	e029      	b.n	22c2 <STACK_SIZE+0x2c2>

                            case HAND_SAMPLE_END: {
                                // Wait for I2C hand sample end
                                if (hand_read_complete()) {
    226e:	4b47      	ldr	r3, [pc, #284]	; (238c <STACK_SIZE+0x38c>)
    2270:	4798      	blx	r3
    2272:	1e03      	subs	r3, r0, #0
    2274:	d027      	beq.n	22c6 <STACK_SIZE+0x2c6>
                                    hand_state = HAND_TX;
    2276:	238e      	movs	r3, #142	; 0x8e
    2278:	18fb      	adds	r3, r7, r3
    227a:	2205      	movs	r2, #5
    227c:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    227e:	e022      	b.n	22c6 <STACK_SIZE+0x2c6>

                            case HAND_TX: {
                                // Begin transmitting hand data
                                if (transmit('h', hand_data.bytes)) {
    2280:	2314      	movs	r3, #20
    2282:	18fb      	adds	r3, r7, r3
    2284:	0019      	movs	r1, r3
    2286:	2068      	movs	r0, #104	; 0x68
    2288:	4b3d      	ldr	r3, [pc, #244]	; (2380 <STACK_SIZE+0x380>)
    228a:	4798      	blx	r3
    228c:	1e03      	subs	r3, r0, #0
    228e:	d01c      	beq.n	22ca <STACK_SIZE+0x2ca>
                                    hand_state = HAND_TX_END;
    2290:	238e      	movs	r3, #142	; 0x8e
    2292:	18fb      	adds	r3, r7, r3
    2294:	2206      	movs	r2, #6
    2296:	701a      	strb	r2, [r3, #0]
                                }
                            } break;
    2298:	e017      	b.n	22ca <STACK_SIZE+0x2ca>

                            case HAND_TX_END: {
                                // Wait for transmission complete
                                if (tx_hand_flag) {
    229a:	4b3d      	ldr	r3, [pc, #244]	; (2390 <STACK_SIZE+0x390>)
    229c:	781b      	ldrb	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d015      	beq.n	22ce <STACK_SIZE+0x2ce>
                                    hand_state = HAND_SAMPLE;
    22a2:	238e      	movs	r3, #142	; 0x8e
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	2200      	movs	r2, #0
    22a8:	701a      	strb	r2, [r3, #0]
                                    machine_counters[M_HAND_SAMPLE] += machine_delays[M_HAND_SAMPLE];
    22aa:	4b31      	ldr	r3, [pc, #196]	; (2370 <STACK_SIZE+0x370>)
    22ac:	6899      	ldr	r1, [r3, #8]
    22ae:	68da      	ldr	r2, [r3, #12]
    22b0:	4b30      	ldr	r3, [pc, #192]	; (2374 <STACK_SIZE+0x374>)
    22b2:	68dc      	ldr	r4, [r3, #12]
    22b4:	689b      	ldr	r3, [r3, #8]
    22b6:	185b      	adds	r3, r3, r1
    22b8:	4154      	adcs	r4, r2
    22ba:	4a2d      	ldr	r2, [pc, #180]	; (2370 <STACK_SIZE+0x370>)
    22bc:	6093      	str	r3, [r2, #8]
    22be:	60d4      	str	r4, [r2, #12]
                                }
                            } break;
    22c0:	e005      	b.n	22ce <STACK_SIZE+0x2ce>
                            } break;
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	e004      	b.n	22d0 <STACK_SIZE+0x2d0>
                            } break;
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	e002      	b.n	22d0 <STACK_SIZE+0x2d0>
                            } break;
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	e000      	b.n	22d0 <STACK_SIZE+0x2d0>
                            } break;
    22ce:	46c0      	nop			; (mov r8, r8)
                        } // end switch
                    }

                    // Timeout check for registered things
                    if (current_time - machine_counters[M_TIMEOUTS] >
    22d0:	4b27      	ldr	r3, [pc, #156]	; (2370 <STACK_SIZE+0x370>)
    22d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    22d4:	6a1b      	ldr	r3, [r3, #32]
    22d6:	2280      	movs	r2, #128	; 0x80
    22d8:	18ba      	adds	r2, r7, r2
    22da:	6811      	ldr	r1, [r2, #0]
    22dc:	6852      	ldr	r2, [r2, #4]
    22de:	1ac9      	subs	r1, r1, r3
    22e0:	41a2      	sbcs	r2, r4
                            machine_delays[M_TIMEOUTS]) {
    22e2:	4b24      	ldr	r3, [pc, #144]	; (2374 <STACK_SIZE+0x374>)
    22e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    22e6:	6a1b      	ldr	r3, [r3, #32]
                    if (current_time - machine_counters[M_TIMEOUTS] >
    22e8:	42a2      	cmp	r2, r4
    22ea:	d803      	bhi.n	22f4 <STACK_SIZE+0x2f4>
    22ec:	d11b      	bne.n	2326 <STACK_SIZE+0x326>
    22ee:	4299      	cmp	r1, r3
    22f0:	d800      	bhi.n	22f4 <STACK_SIZE+0x2f4>
    22f2:	e018      	b.n	2326 <STACK_SIZE+0x326>
                        // Call timeout functions
                        if (i2c_timeout() || serial_timeout()) {
    22f4:	4b27      	ldr	r3, [pc, #156]	; (2394 <STACK_SIZE+0x394>)
    22f6:	4798      	blx	r3
    22f8:	1e03      	subs	r3, r0, #0
    22fa:	d103      	bne.n	2304 <STACK_SIZE+0x304>
    22fc:	4b26      	ldr	r3, [pc, #152]	; (2398 <STACK_SIZE+0x398>)
    22fe:	4798      	blx	r3
    2300:	1e03      	subs	r3, r0, #0
    2302:	d005      	beq.n	2310 <STACK_SIZE+0x310>
                            machine_mode = MODE_WAIT;
    2304:	4b25      	ldr	r3, [pc, #148]	; (239c <STACK_SIZE+0x39c>)
    2306:	2257      	movs	r2, #87	; 0x57
    2308:	701a      	strb	r2, [r3, #0]
                            mode_change_flag = 1;
    230a:	4b25      	ldr	r3, [pc, #148]	; (23a0 <STACK_SIZE+0x3a0>)
    230c:	2201      	movs	r2, #1
    230e:	701a      	strb	r2, [r3, #0]
                        }
                        machine_counters[M_TIMEOUTS] += machine_delays[M_TIMEOUTS];
    2310:	4b17      	ldr	r3, [pc, #92]	; (2370 <STACK_SIZE+0x370>)
    2312:	6a19      	ldr	r1, [r3, #32]
    2314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2316:	4b17      	ldr	r3, [pc, #92]	; (2374 <STACK_SIZE+0x374>)
    2318:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    231a:	6a1b      	ldr	r3, [r3, #32]
    231c:	185b      	adds	r3, r3, r1
    231e:	4154      	adcs	r4, r2
    2320:	4a13      	ldr	r2, [pc, #76]	; (2370 <STACK_SIZE+0x370>)
    2322:	6213      	str	r3, [r2, #32]
    2324:	6254      	str	r4, [r2, #36]	; 0x24
                while (!mode_change_flag) {
    2326:	4b1e      	ldr	r3, [pc, #120]	; (23a0 <STACK_SIZE+0x3a0>)
    2328:	781b      	ldrb	r3, [r3, #0]
    232a:	b2db      	uxtb	r3, r3
    232c:	2b00      	cmp	r3, #0
    232e:	d100      	bne.n	2332 <STACK_SIZE+0x332>
    2330:	e702      	b.n	2138 <STACK_SIZE+0x138>
                    }

                } // end training loop

                // Reset i2c
                i2c_stop();
    2332:	4b1c      	ldr	r3, [pc, #112]	; (23a4 <STACK_SIZE+0x3a4>)
    2334:	4798      	blx	r3
                i2c_init(I2C_BAUD);
    2336:	4b1c      	ldr	r3, [pc, #112]	; (23a8 <STACK_SIZE+0x3a8>)
    2338:	0018      	movs	r0, r3
    233a:	4b1c      	ldr	r3, [pc, #112]	; (23ac <STACK_SIZE+0x3ac>)
    233c:	4798      	blx	r3

                // Disable hand sampling hardware
                hand_stop();
    233e:	4b1c      	ldr	r3, [pc, #112]	; (23b0 <STACK_SIZE+0x3b0>)
    2340:	4798      	blx	r3

                // Disable EMG hardware
                adc_stop();
    2342:	4b1c      	ldr	r3, [pc, #112]	; (23b4 <STACK_SIZE+0x3b4>)
    2344:	4798      	blx	r3
                emg_stop();
    2346:	4b1c      	ldr	r3, [pc, #112]	; (23b8 <STACK_SIZE+0x3b8>)
    2348:	4798      	blx	r3

                // Disable i2c hardware com
                i2c_stop();
    234a:	4b16      	ldr	r3, [pc, #88]	; (23a4 <STACK_SIZE+0x3a4>)
    234c:	4798      	blx	r3
            } break;
    234e:	e00b      	b.n	2368 <STACK_SIZE+0x368>

            default: {
                mode_change_flag = 0;
    2350:	4b13      	ldr	r3, [pc, #76]	; (23a0 <STACK_SIZE+0x3a0>)
    2352:	2200      	movs	r2, #0
    2354:	701a      	strb	r2, [r3, #0]
                machine_mode = MODE_WAIT;
    2356:	4b11      	ldr	r3, [pc, #68]	; (239c <STACK_SIZE+0x39c>)
    2358:	2257      	movs	r2, #87	; 0x57
    235a:	701a      	strb	r2, [r3, #0]
                while(!mode_change_flag) {
    235c:	46c0      	nop			; (mov r8, r8)
    235e:	4b10      	ldr	r3, [pc, #64]	; (23a0 <STACK_SIZE+0x3a0>)
    2360:	781b      	ldrb	r3, [r3, #0]
    2362:	b2db      	uxtb	r3, r3
    2364:	2b00      	cmp	r3, #0
    2366:	d0fa      	beq.n	235e <STACK_SIZE+0x35e>
        switch (machine_mode) {
    2368:	f7ff fa26 	bl	17b8 <main+0xc0>
    236c:	00003541 	.word	0x00003541
    2370:	200004c8 	.word	0x200004c8
    2374:	200004f8 	.word	0x200004f8
    2378:	000008e1 	.word	0x000008e1
    237c:	00000939 	.word	0x00000939
    2380:	000023bd 	.word	0x000023bd
    2384:	2000045d 	.word	0x2000045d
    2388:	00000ab5 	.word	0x00000ab5
    238c:	00000ae5 	.word	0x00000ae5
    2390:	2000045e 	.word	0x2000045e
    2394:	0000136d 	.word	0x0000136d
    2398:	0000286d 	.word	0x0000286d
    239c:	20000007 	.word	0x20000007
    23a0:	2000045c 	.word	0x2000045c
    23a4:	00001315 	.word	0x00001315
    23a8:	000f4240 	.word	0x000f4240
    23ac:	00001295 	.word	0x00001295
    23b0:	00000a4d 	.word	0x00000a4d
    23b4:	00000349 	.word	0x00000349
    23b8:	000008cd 	.word	0x000008cd

000023bc <transmit>:
//     |    |  \ |  \/  /~~\  |  |___
//
//-----------------------------------------------------------------------------

uint8_t transmit(uint8_t command, uint8_t* data)
{
    23bc:	b580      	push	{r7, lr}
    23be:	b082      	sub	sp, #8
    23c0:	af00      	add	r7, sp, #0
    23c2:	0002      	movs	r2, r0
    23c4:	6039      	str	r1, [r7, #0]
    23c6:	1dfb      	adds	r3, r7, #7
    23c8:	701a      	strb	r2, [r3, #0]
    if (serial_register_tx(tx_callback)) {
    23ca:	4b23      	ldr	r3, [pc, #140]	; (2458 <transmit+0x9c>)
    23cc:	0018      	movs	r0, r3
    23ce:	4b23      	ldr	r3, [pc, #140]	; (245c <transmit+0xa0>)
    23d0:	4798      	blx	r3
    23d2:	1e03      	subs	r3, r0, #0
    23d4:	d03b      	beq.n	244e <transmit+0x92>
        switch (command) {
    23d6:	1dfb      	adds	r3, r7, #7
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	2b68      	cmp	r3, #104	; 0x68
    23dc:	d01f      	beq.n	241e <transmit+0x62>
    23de:	2b74      	cmp	r3, #116	; 0x74
    23e0:	d002      	beq.n	23e8 <transmit+0x2c>
    23e2:	2b65      	cmp	r3, #101	; 0x65
    23e4:	d011      	beq.n	240a <transmit+0x4e>
    23e6:	e024      	b.n	2432 <transmit+0x76>
            case 't' : {
                tx_length = strlen(data)+1;
    23e8:	683b      	ldr	r3, [r7, #0]
    23ea:	0018      	movs	r0, r3
    23ec:	4b1c      	ldr	r3, [pc, #112]	; (2460 <transmit+0xa4>)
    23ee:	4798      	blx	r3
    23f0:	0003      	movs	r3, r0
    23f2:	b2db      	uxtb	r3, r3
    23f4:	3301      	adds	r3, #1
    23f6:	b2da      	uxtb	r2, r3
    23f8:	4b1a      	ldr	r3, [pc, #104]	; (2464 <transmit+0xa8>)
    23fa:	701a      	strb	r2, [r3, #0]
                tx_flag = &tx_text_flag;
    23fc:	4b1a      	ldr	r3, [pc, #104]	; (2468 <transmit+0xac>)
    23fe:	4a1b      	ldr	r2, [pc, #108]	; (246c <transmit+0xb0>)
    2400:	601a      	str	r2, [r3, #0]
                tx_text_flag = 0;
    2402:	4b1a      	ldr	r3, [pc, #104]	; (246c <transmit+0xb0>)
    2404:	2200      	movs	r2, #0
    2406:	701a      	strb	r2, [r3, #0]
            } break;
    2408:	e017      	b.n	243a <transmit+0x7e>
            
            case 'e' : {
                tx_length = 6; 
    240a:	4b16      	ldr	r3, [pc, #88]	; (2464 <transmit+0xa8>)
    240c:	2206      	movs	r2, #6
    240e:	701a      	strb	r2, [r3, #0]
                tx_flag = &tx_emg_flag; 
    2410:	4b15      	ldr	r3, [pc, #84]	; (2468 <transmit+0xac>)
    2412:	4a17      	ldr	r2, [pc, #92]	; (2470 <transmit+0xb4>)
    2414:	601a      	str	r2, [r3, #0]
                tx_emg_flag = 0;
    2416:	4b16      	ldr	r3, [pc, #88]	; (2470 <transmit+0xb4>)
    2418:	2200      	movs	r2, #0
    241a:	701a      	strb	r2, [r3, #0]
            } break;
    241c:	e00d      	b.n	243a <transmit+0x7e>

            case 'h' : {
                tx_length = 6*16;
    241e:	4b11      	ldr	r3, [pc, #68]	; (2464 <transmit+0xa8>)
    2420:	2260      	movs	r2, #96	; 0x60
    2422:	701a      	strb	r2, [r3, #0]
                tx_flag = &tx_hand_flag;
    2424:	4b10      	ldr	r3, [pc, #64]	; (2468 <transmit+0xac>)
    2426:	4a13      	ldr	r2, [pc, #76]	; (2474 <transmit+0xb8>)
    2428:	601a      	str	r2, [r3, #0]
                tx_hand_flag = 0;
    242a:	4b12      	ldr	r3, [pc, #72]	; (2474 <transmit+0xb8>)
    242c:	2200      	movs	r2, #0
    242e:	701a      	strb	r2, [r3, #0]
            } break;
    2430:	e003      	b.n	243a <transmit+0x7e>

            default  : tx_length = 0; break;
    2432:	4b0c      	ldr	r3, [pc, #48]	; (2464 <transmit+0xa8>)
    2434:	2200      	movs	r2, #0
    2436:	701a      	strb	r2, [r3, #0]
    2438:	46c0      	nop			; (mov r8, r8)
        }
        tx_data = data;
    243a:	4b0f      	ldr	r3, [pc, #60]	; (2478 <transmit+0xbc>)
    243c:	683a      	ldr	r2, [r7, #0]
    243e:	601a      	str	r2, [r3, #0]
        serial_write(command);
    2440:	1dfb      	adds	r3, r7, #7
    2442:	781b      	ldrb	r3, [r3, #0]
    2444:	0018      	movs	r0, r3
    2446:	4b0d      	ldr	r3, [pc, #52]	; (247c <transmit+0xc0>)
    2448:	4798      	blx	r3
        return 1;
    244a:	2301      	movs	r3, #1
    244c:	e000      	b.n	2450 <transmit+0x94>
    } else {
        return 0;
    244e:	2300      	movs	r3, #0
    }
}
    2450:	0018      	movs	r0, r3
    2452:	46bd      	mov	sp, r7
    2454:	b002      	add	sp, #8
    2456:	bd80      	pop	{r7, pc}
    2458:	00002481 	.word	0x00002481
    245c:	00002acd 	.word	0x00002acd
    2460:	00005be9 	.word	0x00005be9
    2464:	200004f4 	.word	0x200004f4
    2468:	200004f0 	.word	0x200004f0
    246c:	20000460 	.word	0x20000460
    2470:	2000045d 	.word	0x2000045d
    2474:	2000045e 	.word	0x2000045e
    2478:	20000520 	.word	0x20000520
    247c:	000028f9 	.word	0x000028f9

00002480 <tx_callback>:

uint8_t tx_callback()
{
    2480:	b580      	push	{r7, lr}
    2482:	b082      	sub	sp, #8
    2484:	af00      	add	r7, sp, #0
    if (tx_length-- != 0){
    2486:	4b10      	ldr	r3, [pc, #64]	; (24c8 <tx_callback+0x48>)
    2488:	781b      	ldrb	r3, [r3, #0]
    248a:	1e5a      	subs	r2, r3, #1
    248c:	b2d1      	uxtb	r1, r2
    248e:	4a0e      	ldr	r2, [pc, #56]	; (24c8 <tx_callback+0x48>)
    2490:	7011      	strb	r1, [r2, #0]
    2492:	2b00      	cmp	r3, #0
    2494:	d00e      	beq.n	24b4 <tx_callback+0x34>
        uint8_t data = *(tx_data++);
    2496:	4b0d      	ldr	r3, [pc, #52]	; (24cc <tx_callback+0x4c>)
    2498:	681b      	ldr	r3, [r3, #0]
    249a:	1c59      	adds	r1, r3, #1
    249c:	4a0b      	ldr	r2, [pc, #44]	; (24cc <tx_callback+0x4c>)
    249e:	6011      	str	r1, [r2, #0]
    24a0:	1dfa      	adds	r2, r7, #7
    24a2:	781b      	ldrb	r3, [r3, #0]
    24a4:	7013      	strb	r3, [r2, #0]
        serial_write(data);
    24a6:	1dfb      	adds	r3, r7, #7
    24a8:	781b      	ldrb	r3, [r3, #0]
    24aa:	0018      	movs	r0, r3
    24ac:	4b08      	ldr	r3, [pc, #32]	; (24d0 <tx_callback+0x50>)
    24ae:	4798      	blx	r3
        return 0;
    24b0:	2300      	movs	r3, #0
    24b2:	e004      	b.n	24be <tx_callback+0x3e>
    }
    else {
        (*tx_flag) = 1;
    24b4:	4b07      	ldr	r3, [pc, #28]	; (24d4 <tx_callback+0x54>)
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	2201      	movs	r2, #1
    24ba:	701a      	strb	r2, [r3, #0]
        return 1;
    24bc:	2301      	movs	r3, #1
    }
}
    24be:	0018      	movs	r0, r3
    24c0:	46bd      	mov	sp, r7
    24c2:	b002      	add	sp, #8
    24c4:	bd80      	pop	{r7, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	200004f4 	.word	0x200004f4
    24cc:	20000520 	.word	0x20000520
    24d0:	000028f9 	.word	0x000028f9
    24d4:	200004f0 	.word	0x200004f0

000024d8 <rx_mode_setter>:


uint8_t rx_mode_setter() {
    24d8:	b580      	push	{r7, lr}
    24da:	af00      	add	r7, sp, #0
    // Signal that the mode changed!
    mode_change_flag = 1;
    24dc:	4b14      	ldr	r3, [pc, #80]	; (2530 <rx_mode_setter+0x58>)
    24de:	2201      	movs	r2, #1
    24e0:	701a      	strb	r2, [r3, #0]

    // Sets the machine mode upon receiving a command char
    //  Defaults to sampling
    switch (serial_read()) {
    24e2:	4b14      	ldr	r3, [pc, #80]	; (2534 <rx_mode_setter+0x5c>)
    24e4:	4798      	blx	r3
    24e6:	0003      	movs	r3, r0
    24e8:	2b4d      	cmp	r3, #77	; 0x4d
    24ea:	d00c      	beq.n	2506 <rx_mode_setter+0x2e>
    24ec:	dc02      	bgt.n	24f4 <rx_mode_setter+0x1c>
    24ee:	2b43      	cmp	r3, #67	; 0x43
    24f0:	d005      	beq.n	24fe <rx_mode_setter+0x26>
    24f2:	e014      	b.n	251e <rx_mode_setter+0x46>
    24f4:	2b53      	cmp	r3, #83	; 0x53
    24f6:	d00e      	beq.n	2516 <rx_mode_setter+0x3e>
    24f8:	2b54      	cmp	r3, #84	; 0x54
    24fa:	d008      	beq.n	250e <rx_mode_setter+0x36>
    24fc:	e00f      	b.n	251e <rx_mode_setter+0x46>
        case MODE_CONTROL: {
            machine_mode = MODE_CONTROL;
    24fe:	4b0e      	ldr	r3, [pc, #56]	; (2538 <rx_mode_setter+0x60>)
    2500:	2243      	movs	r2, #67	; 0x43
    2502:	701a      	strb	r2, [r3, #0]
        } break;
    2504:	e00f      	b.n	2526 <rx_mode_setter+0x4e>

        case MODE_MIRROR: {
            machine_mode = MODE_MIRROR;
    2506:	4b0c      	ldr	r3, [pc, #48]	; (2538 <rx_mode_setter+0x60>)
    2508:	224d      	movs	r2, #77	; 0x4d
    250a:	701a      	strb	r2, [r3, #0]
        } break;
    250c:	e00b      	b.n	2526 <rx_mode_setter+0x4e>

        case MODE_TRAIN: {
            machine_mode = MODE_TRAIN;
    250e:	4b0a      	ldr	r3, [pc, #40]	; (2538 <rx_mode_setter+0x60>)
    2510:	2254      	movs	r2, #84	; 0x54
    2512:	701a      	strb	r2, [r3, #0]
        } break;
    2514:	e007      	b.n	2526 <rx_mode_setter+0x4e>

        case MODE_SOLO: {
            machine_mode = MODE_SOLO;
    2516:	4b08      	ldr	r3, [pc, #32]	; (2538 <rx_mode_setter+0x60>)
    2518:	2253      	movs	r2, #83	; 0x53
    251a:	701a      	strb	r2, [r3, #0]
        } break;
    251c:	e003      	b.n	2526 <rx_mode_setter+0x4e>

        default: {
            machine_mode = MODE_WAIT;
    251e:	4b06      	ldr	r3, [pc, #24]	; (2538 <rx_mode_setter+0x60>)
    2520:	2257      	movs	r2, #87	; 0x57
    2522:	701a      	strb	r2, [r3, #0]
        } break;
    2524:	46c0      	nop			; (mov r8, r8)
    }

    return 1;
    2526:	2301      	movs	r3, #1
}
    2528:	0018      	movs	r0, r3
    252a:	46bd      	mov	sp, r7
    252c:	bd80      	pop	{r7, pc}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	2000045c 	.word	0x2000045c
    2534:	000028c9 	.word	0x000028c9
    2538:	20000007 	.word	0x20000007

0000253c <NVIC_EnableIRQ>:
{
    253c:	b580      	push	{r7, lr}
    253e:	b082      	sub	sp, #8
    2540:	af00      	add	r7, sp, #0
    2542:	0002      	movs	r2, r0
    2544:	1dfb      	adds	r3, r7, #7
    2546:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    2548:	4b06      	ldr	r3, [pc, #24]	; (2564 <NVIC_EnableIRQ+0x28>)
    254a:	1dfa      	adds	r2, r7, #7
    254c:	7812      	ldrb	r2, [r2, #0]
    254e:	0011      	movs	r1, r2
    2550:	221f      	movs	r2, #31
    2552:	400a      	ands	r2, r1
    2554:	2101      	movs	r1, #1
    2556:	4091      	lsls	r1, r2
    2558:	000a      	movs	r2, r1
    255a:	601a      	str	r2, [r3, #0]
}
    255c:	46c0      	nop			; (mov r8, r8)
    255e:	46bd      	mov	sp, r7
    2560:	b002      	add	sp, #8
    2562:	bd80      	pop	{r7, pc}
    2564:	e000e100 	.word	0xe000e100

00002568 <NVIC_SetPriority>:
{
    2568:	b5b0      	push	{r4, r5, r7, lr}
    256a:	b082      	sub	sp, #8
    256c:	af00      	add	r7, sp, #0
    256e:	0002      	movs	r2, r0
    2570:	6039      	str	r1, [r7, #0]
    2572:	1dfb      	adds	r3, r7, #7
    2574:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    2576:	1dfb      	adds	r3, r7, #7
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	2b7f      	cmp	r3, #127	; 0x7f
    257c:	d932      	bls.n	25e4 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    257e:	4c2f      	ldr	r4, [pc, #188]	; (263c <NVIC_SetPriority+0xd4>)
    2580:	1dfb      	adds	r3, r7, #7
    2582:	781b      	ldrb	r3, [r3, #0]
    2584:	001a      	movs	r2, r3
    2586:	230f      	movs	r3, #15
    2588:	4013      	ands	r3, r2
    258a:	3b08      	subs	r3, #8
    258c:	0899      	lsrs	r1, r3, #2
    258e:	4a2b      	ldr	r2, [pc, #172]	; (263c <NVIC_SetPriority+0xd4>)
    2590:	1dfb      	adds	r3, r7, #7
    2592:	781b      	ldrb	r3, [r3, #0]
    2594:	0018      	movs	r0, r3
    2596:	230f      	movs	r3, #15
    2598:	4003      	ands	r3, r0
    259a:	3b08      	subs	r3, #8
    259c:	089b      	lsrs	r3, r3, #2
    259e:	3306      	adds	r3, #6
    25a0:	009b      	lsls	r3, r3, #2
    25a2:	18d3      	adds	r3, r2, r3
    25a4:	3304      	adds	r3, #4
    25a6:	681b      	ldr	r3, [r3, #0]
    25a8:	1dfa      	adds	r2, r7, #7
    25aa:	7812      	ldrb	r2, [r2, #0]
    25ac:	0010      	movs	r0, r2
    25ae:	2203      	movs	r2, #3
    25b0:	4002      	ands	r2, r0
    25b2:	00d2      	lsls	r2, r2, #3
    25b4:	20ff      	movs	r0, #255	; 0xff
    25b6:	4090      	lsls	r0, r2
    25b8:	0002      	movs	r2, r0
    25ba:	43d2      	mvns	r2, r2
    25bc:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    25be:	683b      	ldr	r3, [r7, #0]
    25c0:	019b      	lsls	r3, r3, #6
    25c2:	20ff      	movs	r0, #255	; 0xff
    25c4:	4018      	ands	r0, r3
    25c6:	1dfb      	adds	r3, r7, #7
    25c8:	781b      	ldrb	r3, [r3, #0]
    25ca:	001d      	movs	r5, r3
    25cc:	2303      	movs	r3, #3
    25ce:	402b      	ands	r3, r5
    25d0:	00db      	lsls	r3, r3, #3
    25d2:	4098      	lsls	r0, r3
    25d4:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    25d6:	431a      	orrs	r2, r3
    25d8:	1d8b      	adds	r3, r1, #6
    25da:	009b      	lsls	r3, r3, #2
    25dc:	18e3      	adds	r3, r4, r3
    25de:	3304      	adds	r3, #4
    25e0:	601a      	str	r2, [r3, #0]
}
    25e2:	e027      	b.n	2634 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    25e4:	4c16      	ldr	r4, [pc, #88]	; (2640 <NVIC_SetPriority+0xd8>)
    25e6:	1dfb      	adds	r3, r7, #7
    25e8:	781b      	ldrb	r3, [r3, #0]
    25ea:	b25b      	sxtb	r3, r3
    25ec:	089b      	lsrs	r3, r3, #2
    25ee:	4914      	ldr	r1, [pc, #80]	; (2640 <NVIC_SetPriority+0xd8>)
    25f0:	1dfa      	adds	r2, r7, #7
    25f2:	7812      	ldrb	r2, [r2, #0]
    25f4:	b252      	sxtb	r2, r2
    25f6:	0892      	lsrs	r2, r2, #2
    25f8:	32c0      	adds	r2, #192	; 0xc0
    25fa:	0092      	lsls	r2, r2, #2
    25fc:	5852      	ldr	r2, [r2, r1]
    25fe:	1df9      	adds	r1, r7, #7
    2600:	7809      	ldrb	r1, [r1, #0]
    2602:	0008      	movs	r0, r1
    2604:	2103      	movs	r1, #3
    2606:	4001      	ands	r1, r0
    2608:	00c9      	lsls	r1, r1, #3
    260a:	20ff      	movs	r0, #255	; 0xff
    260c:	4088      	lsls	r0, r1
    260e:	0001      	movs	r1, r0
    2610:	43c9      	mvns	r1, r1
    2612:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    2614:	683a      	ldr	r2, [r7, #0]
    2616:	0192      	lsls	r2, r2, #6
    2618:	20ff      	movs	r0, #255	; 0xff
    261a:	4010      	ands	r0, r2
    261c:	1dfa      	adds	r2, r7, #7
    261e:	7812      	ldrb	r2, [r2, #0]
    2620:	0015      	movs	r5, r2
    2622:	2203      	movs	r2, #3
    2624:	402a      	ands	r2, r5
    2626:	00d2      	lsls	r2, r2, #3
    2628:	4090      	lsls	r0, r2
    262a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    262c:	430a      	orrs	r2, r1
    262e:	33c0      	adds	r3, #192	; 0xc0
    2630:	009b      	lsls	r3, r3, #2
    2632:	511a      	str	r2, [r3, r4]
}
    2634:	46c0      	nop			; (mov r8, r8)
    2636:	46bd      	mov	sp, r7
    2638:	b002      	add	sp, #8
    263a:	bdb0      	pop	{r4, r5, r7, pc}
    263c:	e000ed00 	.word	0xe000ed00
    2640:	e000e100 	.word	0xe000e100

00002644 <serial_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void serial_init(uint32_t baudrate) {
    2644:	b590      	push	{r4, r7, lr}
    2646:	b085      	sub	sp, #20
    2648:	af00      	add	r7, sp, #0
    264a:	6078      	str	r0, [r7, #4]

	// TX (Pad0)
	#if (SERIAL_TX_PIN % 2) // Odd Pin
	PORT->Group[SERIAL_TX_GROUP].PMUX[SERIAL_TX_PMUX].bit.PMUXO = PORT_PMUX_PMUXO_D_Val;
	#else                  // Even Pin
	PORT->Group[SERIAL_TX_GROUP].PMUX[SERIAL_TX_PMUX].bit.PMUXE = PORT_PMUX_PMUXE_D_Val;
    264c:	4973      	ldr	r1, [pc, #460]	; (281c <serial_init+0x1d8>)
    264e:	22bb      	movs	r2, #187	; 0xbb
    2650:	5c8b      	ldrb	r3, [r1, r2]
    2652:	200f      	movs	r0, #15
    2654:	4383      	bics	r3, r0
    2656:	1c18      	adds	r0, r3, #0
    2658:	2303      	movs	r3, #3
    265a:	4303      	orrs	r3, r0
    265c:	548b      	strb	r3, [r1, r2]
	#endif
	// Enable the PMUX
	PORT->Group[SERIAL_TX_GROUP].PINCFG[SERIAL_TX_PIN].bit.PMUXEN = 1;
    265e:	496f      	ldr	r1, [pc, #444]	; (281c <serial_init+0x1d8>)
    2660:	22d6      	movs	r2, #214	; 0xd6
    2662:	5c8b      	ldrb	r3, [r1, r2]
    2664:	2001      	movs	r0, #1
    2666:	4303      	orrs	r3, r0
    2668:	548b      	strb	r3, [r1, r2]

	// RX (Pad 1)
	#if (SERIAL_RX_PIN % 2) // Odd Pin
	PORT->Group[SERIAL_RX_GROUP].PMUX[SERIAL_RX_PMUX].bit.PMUXO = PORT_PMUX_PMUXO_D_Val;
    266a:	496c      	ldr	r1, [pc, #432]	; (281c <serial_init+0x1d8>)
    266c:	22bb      	movs	r2, #187	; 0xbb
    266e:	5c8b      	ldrb	r3, [r1, r2]
    2670:	200f      	movs	r0, #15
    2672:	4003      	ands	r3, r0
    2674:	1c18      	adds	r0, r3, #0
    2676:	2330      	movs	r3, #48	; 0x30
    2678:	4303      	orrs	r3, r0
    267a:	548b      	strb	r3, [r1, r2]
	#else                  // Even Pin
	PORT->Group[SERIAL_RX_GROUP].PMUX[SERIAL_RX_PMUX].bit.PMUXE = PORT_PMUX_PMUXE_D_Val;
	#endif
	// Enable the PMUX
	PORT->Group[SERIAL_RX_GROUP].PINCFG[SERIAL_RX_PIN].bit.PMUXEN = 1;
    267c:	4967      	ldr	r1, [pc, #412]	; (281c <serial_init+0x1d8>)
    267e:	22d7      	movs	r2, #215	; 0xd7
    2680:	5c8b      	ldrb	r3, [r1, r2]
    2682:	2001      	movs	r0, #1
    2684:	4303      	orrs	r3, r0
    2686:	548b      	strb	r3, [r1, r2]

	// Enable the power manager
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
    2688:	4b65      	ldr	r3, [pc, #404]	; (2820 <serial_init+0x1dc>)
    268a:	4a65      	ldr	r2, [pc, #404]	; (2820 <serial_init+0x1dc>)
    268c:	6a12      	ldr	r2, [r2, #32]
    268e:	2180      	movs	r1, #128	; 0x80
    2690:	430a      	orrs	r2, r1
    2692:	621a      	str	r2, [r3, #32]

	// Initialize the GCLK
	// Setting clock for the SERCOM5_CORE clock
	GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_ID(GCLK_CLKCTRL_ID_SERCOM5_CORE) |
    2694:	4b63      	ldr	r3, [pc, #396]	; (2824 <serial_init+0x1e0>)
    2696:	4a64      	ldr	r2, [pc, #400]	; (2828 <serial_init+0x1e4>)
    2698:	805a      	strh	r2, [r3, #2]
		GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN);
	// Wait for the GCLK to be synchronized
	while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	4b61      	ldr	r3, [pc, #388]	; (2824 <serial_init+0x1e0>)
    269e:	785b      	ldrb	r3, [r3, #1]
    26a0:	b2db      	uxtb	r3, r3
    26a2:	b25b      	sxtb	r3, r3
    26a4:	2b00      	cmp	r3, #0
    26a6:	dbf9      	blt.n	269c <serial_init+0x58>

	// Reset the USART and wait for synch
	SERCOM5->USART.CTRLA.bit.SWRST = 1;
    26a8:	4a60      	ldr	r2, [pc, #384]	; (282c <serial_init+0x1e8>)
    26aa:	6813      	ldr	r3, [r2, #0]
    26ac:	2101      	movs	r1, #1
    26ae:	430b      	orrs	r3, r1
    26b0:	6013      	str	r3, [r2, #0]
	while (SERCOM5->USART.CTRLA.bit.SWRST || SERCOM5->USART.SYNCBUSY.bit.SWRST);
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	4b5d      	ldr	r3, [pc, #372]	; (282c <serial_init+0x1e8>)
    26b6:	681b      	ldr	r3, [r3, #0]
    26b8:	07db      	lsls	r3, r3, #31
    26ba:	0fdb      	lsrs	r3, r3, #31
    26bc:	b2db      	uxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	d1f8      	bne.n	26b4 <serial_init+0x70>
    26c2:	4b5a      	ldr	r3, [pc, #360]	; (282c <serial_init+0x1e8>)
    26c4:	69db      	ldr	r3, [r3, #28]
    26c6:	07db      	lsls	r3, r3, #31
    26c8:	0fdb      	lsrs	r3, r3, #31
    26ca:	b2db      	uxtb	r3, r3
    26cc:	2b00      	cmp	r3, #0
    26ce:	d1f1      	bne.n	26b4 <serial_init+0x70>

	// Set the USART controls
	SERCOM5->USART.CTRLA.bit.MODE   = 1; // Internal clock
    26d0:	4a56      	ldr	r2, [pc, #344]	; (282c <serial_init+0x1e8>)
    26d2:	6813      	ldr	r3, [r2, #0]
    26d4:	211c      	movs	r1, #28
    26d6:	438b      	bics	r3, r1
    26d8:	2104      	movs	r1, #4
    26da:	430b      	orrs	r3, r1
    26dc:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.CMODE  = 0; // Asynchronous
    26de:	4a53      	ldr	r2, [pc, #332]	; (282c <serial_init+0x1e8>)
    26e0:	6813      	ldr	r3, [r2, #0]
    26e2:	4953      	ldr	r1, [pc, #332]	; (2830 <serial_init+0x1ec>)
    26e4:	400b      	ands	r3, r1
    26e6:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.RXPO   = 3; // Pad 3
    26e8:	4a50      	ldr	r2, [pc, #320]	; (282c <serial_init+0x1e8>)
    26ea:	6813      	ldr	r3, [r2, #0]
    26ec:	21c0      	movs	r1, #192	; 0xc0
    26ee:	0389      	lsls	r1, r1, #14
    26f0:	430b      	orrs	r3, r1
    26f2:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.TXPO   = 1; // Pad 2
    26f4:	4a4d      	ldr	r2, [pc, #308]	; (282c <serial_init+0x1e8>)
    26f6:	6813      	ldr	r3, [r2, #0]
    26f8:	494e      	ldr	r1, [pc, #312]	; (2834 <serial_init+0x1f0>)
    26fa:	400b      	ands	r3, r1
    26fc:	2180      	movs	r1, #128	; 0x80
    26fe:	0249      	lsls	r1, r1, #9
    2700:	430b      	orrs	r3, r1
    2702:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.SAMPR  = 1; // 16x with fractional generation
    2704:	4a49      	ldr	r2, [pc, #292]	; (282c <serial_init+0x1e8>)
    2706:	6813      	ldr	r3, [r2, #0]
    2708:	494b      	ldr	r1, [pc, #300]	; (2838 <serial_init+0x1f4>)
    270a:	400b      	ands	r3, r1
    270c:	2180      	movs	r1, #128	; 0x80
    270e:	0189      	lsls	r1, r1, #6
    2710:	430b      	orrs	r3, r1
    2712:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.DORD   = 1; // LSB first
    2714:	4a45      	ldr	r2, [pc, #276]	; (282c <serial_init+0x1e8>)
    2716:	6813      	ldr	r3, [r2, #0]
    2718:	2180      	movs	r1, #128	; 0x80
    271a:	05c9      	lsls	r1, r1, #23
    271c:	430b      	orrs	r3, r1
    271e:	6013      	str	r3, [r2, #0]
	SERCOM5->USART.CTRLA.bit.FORM   = 0; // USART Frame - No Parity
    2720:	4a42      	ldr	r2, [pc, #264]	; (282c <serial_init+0x1e8>)
    2722:	6813      	ldr	r3, [r2, #0]
    2724:	4945      	ldr	r1, [pc, #276]	; (283c <serial_init+0x1f8>)
    2726:	400b      	ands	r3, r1
    2728:	6013      	str	r3, [r2, #0]

	SERCOM5->USART.CTRLB.bit.CHSIZE = 0; // 8 bit
    272a:	4a40      	ldr	r2, [pc, #256]	; (282c <serial_init+0x1e8>)
    272c:	6853      	ldr	r3, [r2, #4]
    272e:	2107      	movs	r1, #7
    2730:	438b      	bics	r3, r1
    2732:	6053      	str	r3, [r2, #4]
	SERCOM5->USART.CTRLB.bit.SBMODE = 0; // 1 Stop bit
    2734:	4a3d      	ldr	r2, [pc, #244]	; (282c <serial_init+0x1e8>)
    2736:	6853      	ldr	r3, [r2, #4]
    2738:	2140      	movs	r1, #64	; 0x40
    273a:	438b      	bics	r3, r1
    273c:	6053      	str	r3, [r2, #4]
	SERCOM5->USART.CTRLB.bit.RXEN   = 1;
    273e:	4a3b      	ldr	r2, [pc, #236]	; (282c <serial_init+0x1e8>)
    2740:	6853      	ldr	r3, [r2, #4]
    2742:	2180      	movs	r1, #128	; 0x80
    2744:	0289      	lsls	r1, r1, #10
    2746:	430b      	orrs	r3, r1
    2748:	6053      	str	r3, [r2, #4]
	SERCOM5->USART.CTRLB.bit.TXEN   = 1;
    274a:	4a38      	ldr	r2, [pc, #224]	; (282c <serial_init+0x1e8>)
    274c:	6853      	ldr	r3, [r2, #4]
    274e:	2180      	movs	r1, #128	; 0x80
    2750:	0249      	lsls	r1, r1, #9
    2752:	430b      	orrs	r3, r1
    2754:	6053      	str	r3, [r2, #4]

	// Calculate the baud rate
    // Asynchronous fractional mode (Table 24-2 in datasheet)
    //   BAUD = fref / (sampleRateValue * fbaud)
    // (multiply by 8, to calculate fractional piece)
    uint32_t baudTimes8 = (48000000ul * 8.0) / (16 * baudrate);
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	011a      	lsls	r2, r3, #4
    275a:	4b39      	ldr	r3, [pc, #228]	; (2840 <serial_init+0x1fc>)
    275c:	0010      	movs	r0, r2
    275e:	4798      	blx	r3
    2760:	0002      	movs	r2, r0
    2762:	000b      	movs	r3, r1
    2764:	4c37      	ldr	r4, [pc, #220]	; (2844 <serial_init+0x200>)
    2766:	2000      	movs	r0, #0
    2768:	4937      	ldr	r1, [pc, #220]	; (2848 <serial_init+0x204>)
    276a:	47a0      	blx	r4
    276c:	0003      	movs	r3, r0
    276e:	000c      	movs	r4, r1
    2770:	0019      	movs	r1, r3
    2772:	0022      	movs	r2, r4
    2774:	4b35      	ldr	r3, [pc, #212]	; (284c <serial_init+0x208>)
    2776:	0008      	movs	r0, r1
    2778:	0011      	movs	r1, r2
    277a:	4798      	blx	r3
    277c:	0003      	movs	r3, r0
    277e:	60fb      	str	r3, [r7, #12]
    SERCOM5->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    2780:	4a2a      	ldr	r2, [pc, #168]	; (282c <serial_init+0x1e8>)
    2782:	68fb      	ldr	r3, [r7, #12]
    2784:	b2db      	uxtb	r3, r3
    2786:	1c19      	adds	r1, r3, #0
    2788:	2307      	movs	r3, #7
    278a:	400b      	ands	r3, r1
    278c:	b2d9      	uxtb	r1, r3
    278e:	8993      	ldrh	r3, [r2, #12]
    2790:	0348      	lsls	r0, r1, #13
    2792:	04db      	lsls	r3, r3, #19
    2794:	0cdb      	lsrs	r3, r3, #19
    2796:	1c19      	adds	r1, r3, #0
    2798:	1c03      	adds	r3, r0, #0
    279a:	430b      	orrs	r3, r1
    279c:	8193      	strh	r3, [r2, #12]
    SERCOM5->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    279e:	4a23      	ldr	r2, [pc, #140]	; (282c <serial_init+0x1e8>)
    27a0:	68fb      	ldr	r3, [r7, #12]
    27a2:	08db      	lsrs	r3, r3, #3
    27a4:	b29b      	uxth	r3, r3
    27a6:	04db      	lsls	r3, r3, #19
    27a8:	0cdb      	lsrs	r3, r3, #19
    27aa:	b299      	uxth	r1, r3
    27ac:	8993      	ldrh	r3, [r2, #12]
    27ae:	04c9      	lsls	r1, r1, #19
    27b0:	0cc8      	lsrs	r0, r1, #19
    27b2:	0b5b      	lsrs	r3, r3, #13
    27b4:	035b      	lsls	r3, r3, #13
    27b6:	1c19      	adds	r1, r3, #0
    27b8:	1c03      	adds	r3, r0, #0
    27ba:	430b      	orrs	r3, r1
    27bc:	8193      	strh	r3, [r2, #12]
	
	// Enable interrupts
	SERCOM5->USART.INTENSET.bit.TXC = 1;
    27be:	4a1b      	ldr	r2, [pc, #108]	; (282c <serial_init+0x1e8>)
    27c0:	7d93      	ldrb	r3, [r2, #22]
    27c2:	2102      	movs	r1, #2
    27c4:	430b      	orrs	r3, r1
    27c6:	7593      	strb	r3, [r2, #22]
	SERCOM5->USART.INTENSET.bit.RXC = 1;
    27c8:	4a18      	ldr	r2, [pc, #96]	; (282c <serial_init+0x1e8>)
    27ca:	7d93      	ldrb	r3, [r2, #22]
    27cc:	2104      	movs	r1, #4
    27ce:	430b      	orrs	r3, r1
    27d0:	7593      	strb	r3, [r2, #22]
	NVIC_EnableIRQ(SERCOM5_IRQn);
    27d2:	200e      	movs	r0, #14
    27d4:	4b1e      	ldr	r3, [pc, #120]	; (2850 <serial_init+0x20c>)
    27d6:	4798      	blx	r3
	NVIC_SetPriority(SERCOM5_IRQn, 3);
    27d8:	2103      	movs	r1, #3
    27da:	200e      	movs	r0, #14
    27dc:	4b1d      	ldr	r3, [pc, #116]	; (2854 <serial_init+0x210>)
    27de:	4798      	blx	r3

	// Enable the UART and sync
	SERCOM5->USART.CTRLA.bit.ENABLE = 1;
    27e0:	4a12      	ldr	r2, [pc, #72]	; (282c <serial_init+0x1e8>)
    27e2:	6813      	ldr	r3, [r2, #0]
    27e4:	2102      	movs	r1, #2
    27e6:	430b      	orrs	r3, r1
    27e8:	6013      	str	r3, [r2, #0]
	while (SERCOM5->USART.SYNCBUSY.bit.ENABLE);
    27ea:	46c0      	nop			; (mov r8, r8)
    27ec:	4b0f      	ldr	r3, [pc, #60]	; (282c <serial_init+0x1e8>)
    27ee:	69db      	ldr	r3, [r3, #28]
    27f0:	079b      	lsls	r3, r3, #30
    27f2:	0fdb      	lsrs	r3, r3, #31
    27f4:	b2db      	uxtb	r3, r3
    27f6:	2b00      	cmp	r3, #0
    27f8:	d1f8      	bne.n	27ec <serial_init+0x1a8>

    // Set the defaults
    _serial_default.rx = _serial_default_rx;
    27fa:	4b17      	ldr	r3, [pc, #92]	; (2858 <serial_init+0x214>)
    27fc:	4a17      	ldr	r2, [pc, #92]	; (285c <serial_init+0x218>)
    27fe:	601a      	str	r2, [r3, #0]
    _serial_default.tx = _serial_default_tx;
    2800:	4b15      	ldr	r3, [pc, #84]	; (2858 <serial_init+0x214>)
    2802:	4a17      	ldr	r2, [pc, #92]	; (2860 <serial_init+0x21c>)
    2804:	605a      	str	r2, [r3, #4]
    _serial_callback = _serial_default;
    2806:	4b17      	ldr	r3, [pc, #92]	; (2864 <serial_init+0x220>)
    2808:	4a13      	ldr	r2, [pc, #76]	; (2858 <serial_init+0x214>)
    280a:	ca03      	ldmia	r2!, {r0, r1}
    280c:	c303      	stmia	r3!, {r0, r1}

    // Prevent timeout
    _serial_active = 1;
    280e:	4b16      	ldr	r3, [pc, #88]	; (2868 <serial_init+0x224>)
    2810:	2201      	movs	r2, #1
    2812:	701a      	strb	r2, [r3, #0]
}
    2814:	46c0      	nop			; (mov r8, r8)
    2816:	46bd      	mov	sp, r7
    2818:	b005      	add	sp, #20
    281a:	bd90      	pop	{r4, r7, pc}
    281c:	41004400 	.word	0x41004400
    2820:	40000400 	.word	0x40000400
    2824:	40000c00 	.word	0x40000c00
    2828:	00004019 	.word	0x00004019
    282c:	42001c00 	.word	0x42001c00
    2830:	efffffff 	.word	0xefffffff
    2834:	fffcffff 	.word	0xfffcffff
    2838:	ffff1fff 	.word	0xffff1fff
    283c:	f0ffffff 	.word	0xf0ffffff
    2840:	000056b5 	.word	0x000056b5
    2844:	000049b9 	.word	0x000049b9
    2848:	41b6e360 	.word	0x41b6e360
    284c:	00003c31 	.word	0x00003c31
    2850:	0000253d 	.word	0x0000253d
    2854:	00002569 	.word	0x00002569
    2858:	2000046c 	.word	0x2000046c
    285c:	00002ba5 	.word	0x00002ba5
    2860:	00002b99 	.word	0x00002b99
    2864:	20000464 	.word	0x20000464
    2868:	20000524 	.word	0x20000524

0000286c <serial_timeout>:

//==============================================================================
uint8_t serial_timeout() {
    286c:	b580      	push	{r7, lr}
    286e:	af00      	add	r7, sp, #0
    if (_serial_active) return _serial_active = 0;
    2870:	4b07      	ldr	r3, [pc, #28]	; (2890 <serial_timeout+0x24>)
    2872:	781b      	ldrb	r3, [r3, #0]
    2874:	2b00      	cmp	r3, #0
    2876:	d005      	beq.n	2884 <serial_timeout+0x18>
    2878:	4b05      	ldr	r3, [pc, #20]	; (2890 <serial_timeout+0x24>)
    287a:	2200      	movs	r2, #0
    287c:	701a      	strb	r2, [r3, #0]
    287e:	4b04      	ldr	r3, [pc, #16]	; (2890 <serial_timeout+0x24>)
    2880:	781b      	ldrb	r3, [r3, #0]
    2882:	e002      	b.n	288a <serial_timeout+0x1e>
    else return serial_registered();
    2884:	4b03      	ldr	r3, [pc, #12]	; (2894 <serial_timeout+0x28>)
    2886:	4798      	blx	r3
    2888:	0003      	movs	r3, r0
}
    288a:	0018      	movs	r0, r3
    288c:	46bd      	mov	sp, r7
    288e:	bd80      	pop	{r7, pc}
    2890:	20000524 	.word	0x20000524
    2894:	000029d5 	.word	0x000029d5

00002898 <serial_tx_flag>:

//==============================================================================
uint8_t serial_tx_flag()  {
    2898:	b580      	push	{r7, lr}
    289a:	af00      	add	r7, sp, #0
    return SERCOM5->USART.INTFLAG.bit.TXC;
    289c:	4b03      	ldr	r3, [pc, #12]	; (28ac <serial_tx_flag+0x14>)
    289e:	7e1b      	ldrb	r3, [r3, #24]
    28a0:	079b      	lsls	r3, r3, #30
    28a2:	0fdb      	lsrs	r3, r3, #31
    28a4:	b2db      	uxtb	r3, r3
}
    28a6:	0018      	movs	r0, r3
    28a8:	46bd      	mov	sp, r7
    28aa:	bd80      	pop	{r7, pc}
    28ac:	42001c00 	.word	0x42001c00

000028b0 <serial_rx_flag>:

//==============================================================================
uint8_t serial_rx_flag() {
    28b0:	b580      	push	{r7, lr}
    28b2:	af00      	add	r7, sp, #0
	return SERCOM5->USART.INTFLAG.bit.RXC;
    28b4:	4b03      	ldr	r3, [pc, #12]	; (28c4 <serial_rx_flag+0x14>)
    28b6:	7e1b      	ldrb	r3, [r3, #24]
    28b8:	075b      	lsls	r3, r3, #29
    28ba:	0fdb      	lsrs	r3, r3, #31
    28bc:	b2db      	uxtb	r3, r3
}
    28be:	0018      	movs	r0, r3
    28c0:	46bd      	mov	sp, r7
    28c2:	bd80      	pop	{r7, pc}
    28c4:	42001c00 	.word	0x42001c00

000028c8 <serial_read>:

//==============================================================================
uint8_t serial_read() {
    28c8:	b580      	push	{r7, lr}
    28ca:	b082      	sub	sp, #8
    28cc:	af00      	add	r7, sp, #0
    // Prevent timeout
    _serial_active = 1;
    28ce:	4b08      	ldr	r3, [pc, #32]	; (28f0 <serial_read+0x28>)
    28d0:	2201      	movs	r2, #1
    28d2:	701a      	strb	r2, [r3, #0]

    uint8_t data = SERCOM5->USART.DATA.bit.DATA;
    28d4:	4b07      	ldr	r3, [pc, #28]	; (28f4 <serial_read+0x2c>)
    28d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    28d8:	05db      	lsls	r3, r3, #23
    28da:	0ddb      	lsrs	r3, r3, #23
    28dc:	b29a      	uxth	r2, r3
    28de:	1dfb      	adds	r3, r7, #7
    28e0:	701a      	strb	r2, [r3, #0]
    //serial_write(data); // for serial echo
    return data;
    28e2:	1dfb      	adds	r3, r7, #7
    28e4:	781b      	ldrb	r3, [r3, #0]
}
    28e6:	0018      	movs	r0, r3
    28e8:	46bd      	mov	sp, r7
    28ea:	b002      	add	sp, #8
    28ec:	bd80      	pop	{r7, pc}
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	20000524 	.word	0x20000524
    28f4:	42001c00 	.word	0x42001c00

000028f8 <serial_write>:

//==============================================================================
void serial_write(uint8_t data) {
    28f8:	b580      	push	{r7, lr}
    28fa:	b082      	sub	sp, #8
    28fc:	af00      	add	r7, sp, #0
    28fe:	0002      	movs	r2, r0
    2900:	1dfb      	adds	r3, r7, #7
    2902:	701a      	strb	r2, [r3, #0]
    // Prevent timeout
    _serial_active = 1;
    2904:	4b0e      	ldr	r3, [pc, #56]	; (2940 <serial_write+0x48>)
    2906:	2201      	movs	r2, #1
    2908:	701a      	strb	r2, [r3, #0]

	// Wait for buffer to be empty
	while (!SERCOM5->USART.INTFLAG.bit.DRE);
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	4b0d      	ldr	r3, [pc, #52]	; (2944 <serial_write+0x4c>)
    290e:	7e1b      	ldrb	r3, [r3, #24]
    2910:	07db      	lsls	r3, r3, #31
    2912:	0fdb      	lsrs	r3, r3, #31
    2914:	b2db      	uxtb	r3, r3
    2916:	2b00      	cmp	r3, #0
    2918:	d0f8      	beq.n	290c <serial_write+0x14>
	SERCOM5->USART.DATA.bit.DATA = data;
    291a:	4a0a      	ldr	r2, [pc, #40]	; (2944 <serial_write+0x4c>)
    291c:	1dfb      	adds	r3, r7, #7
    291e:	781b      	ldrb	r3, [r3, #0]
    2920:	05db      	lsls	r3, r3, #23
    2922:	0ddb      	lsrs	r3, r3, #23
    2924:	b299      	uxth	r1, r3
    2926:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2928:	05c9      	lsls	r1, r1, #23
    292a:	0dc8      	lsrs	r0, r1, #23
    292c:	0a5b      	lsrs	r3, r3, #9
    292e:	025b      	lsls	r3, r3, #9
    2930:	1c19      	adds	r1, r3, #0
    2932:	1c03      	adds	r3, r0, #0
    2934:	430b      	orrs	r3, r1
    2936:	8513      	strh	r3, [r2, #40]	; 0x28
}
    2938:	46c0      	nop			; (mov r8, r8)
    293a:	46bd      	mov	sp, r7
    293c:	b002      	add	sp, #8
    293e:	bd80      	pop	{r7, pc}
    2940:	20000524 	.word	0x20000524
    2944:	42001c00 	.word	0x42001c00

00002948 <serial_register>:

//==============================================================================
uint8_t serial_register(serial_t callback) {
    2948:	b580      	push	{r7, lr}
    294a:	b082      	sub	sp, #8
    294c:	af00      	add	r7, sp, #0
    294e:	003b      	movs	r3, r7
    2950:	6018      	str	r0, [r3, #0]
    2952:	6059      	str	r1, [r3, #4]
    if (callback.rx && callback.tx) {
    2954:	003b      	movs	r3, r7
    2956:	681b      	ldr	r3, [r3, #0]
    2958:	2b00      	cmp	r3, #0
    295a:	d017      	beq.n	298c <serial_register+0x44>
    295c:	003b      	movs	r3, r7
    295e:	685b      	ldr	r3, [r3, #4]
    2960:	2b00      	cmp	r3, #0
    2962:	d013      	beq.n	298c <serial_register+0x44>
        if (!_serial_rx_registered() && !_serial_tx_registered()) {
    2964:	4b17      	ldr	r3, [pc, #92]	; (29c4 <serial_register+0x7c>)
    2966:	4798      	blx	r3
    2968:	1e03      	subs	r3, r0, #0
    296a:	d125      	bne.n	29b8 <serial_register+0x70>
    296c:	4b16      	ldr	r3, [pc, #88]	; (29c8 <serial_register+0x80>)
    296e:	4798      	blx	r3
    2970:	1e03      	subs	r3, r0, #0
    2972:	d121      	bne.n	29b8 <serial_register+0x70>
            serial_register_rx(callback.rx);
    2974:	003b      	movs	r3, r7
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	0018      	movs	r0, r3
    297a:	4b14      	ldr	r3, [pc, #80]	; (29cc <serial_register+0x84>)
    297c:	4798      	blx	r3
            serial_register_tx(callback.tx);
    297e:	003b      	movs	r3, r7
    2980:	685b      	ldr	r3, [r3, #4]
    2982:	0018      	movs	r0, r3
    2984:	4b12      	ldr	r3, [pc, #72]	; (29d0 <serial_register+0x88>)
    2986:	4798      	blx	r3
            return 1;
    2988:	2301      	movs	r3, #1
    298a:	e017      	b.n	29bc <serial_register+0x74>
        }
    }

    else if (callback.rx) {
    298c:	003b      	movs	r3, r7
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	2b00      	cmp	r3, #0
    2992:	d006      	beq.n	29a2 <serial_register+0x5a>
        return serial_register_rx(callback.rx);
    2994:	003b      	movs	r3, r7
    2996:	681b      	ldr	r3, [r3, #0]
    2998:	0018      	movs	r0, r3
    299a:	4b0c      	ldr	r3, [pc, #48]	; (29cc <serial_register+0x84>)
    299c:	4798      	blx	r3
    299e:	0003      	movs	r3, r0
    29a0:	e00c      	b.n	29bc <serial_register+0x74>
    }

    else if (callback.tx) {
    29a2:	003b      	movs	r3, r7
    29a4:	685b      	ldr	r3, [r3, #4]
    29a6:	2b00      	cmp	r3, #0
    29a8:	d007      	beq.n	29ba <serial_register+0x72>
        return serial_register_tx(callback.tx);
    29aa:	003b      	movs	r3, r7
    29ac:	685b      	ldr	r3, [r3, #4]
    29ae:	0018      	movs	r0, r3
    29b0:	4b07      	ldr	r3, [pc, #28]	; (29d0 <serial_register+0x88>)
    29b2:	4798      	blx	r3
    29b4:	0003      	movs	r3, r0
    29b6:	e001      	b.n	29bc <serial_register+0x74>
        if (!_serial_rx_registered() && !_serial_tx_registered()) {
    29b8:	46c0      	nop			; (mov r8, r8)
    }

    return 0;
    29ba:	2300      	movs	r3, #0
}
    29bc:	0018      	movs	r0, r3
    29be:	46bd      	mov	sp, r7
    29c0:	b002      	add	sp, #8
    29c2:	bd80      	pop	{r7, pc}
    29c4:	00002b39 	.word	0x00002b39
    29c8:	00002b5d 	.word	0x00002b5d
    29cc:	00002a39 	.word	0x00002a39
    29d0:	00002acd 	.word	0x00002acd

000029d4 <serial_registered>:

//==============================================================================
uint8_t serial_registered() {
    29d4:	b580      	push	{r7, lr}
    29d6:	af00      	add	r7, sp, #0
    return ((_serial_callback.rx != _serial_default.rx) || 
    29d8:	4b09      	ldr	r3, [pc, #36]	; (2a00 <serial_registered+0x2c>)
    29da:	681a      	ldr	r2, [r3, #0]
    29dc:	4b09      	ldr	r3, [pc, #36]	; (2a04 <serial_registered+0x30>)
    29de:	681b      	ldr	r3, [r3, #0]
    29e0:	429a      	cmp	r2, r3
    29e2:	d105      	bne.n	29f0 <serial_registered+0x1c>
            (_serial_callback.tx != _serial_default.tx));
    29e4:	4b06      	ldr	r3, [pc, #24]	; (2a00 <serial_registered+0x2c>)
    29e6:	685a      	ldr	r2, [r3, #4]
    29e8:	4b06      	ldr	r3, [pc, #24]	; (2a04 <serial_registered+0x30>)
    29ea:	685b      	ldr	r3, [r3, #4]
    return ((_serial_callback.rx != _serial_default.rx) || 
    29ec:	429a      	cmp	r2, r3
    29ee:	d001      	beq.n	29f4 <serial_registered+0x20>
    29f0:	2301      	movs	r3, #1
    29f2:	e000      	b.n	29f6 <serial_registered+0x22>
    29f4:	2300      	movs	r3, #0
    29f6:	b2db      	uxtb	r3, r3
}
    29f8:	0018      	movs	r0, r3
    29fa:	46bd      	mov	sp, r7
    29fc:	bd80      	pop	{r7, pc}
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	20000464 	.word	0x20000464
    2a04:	2000046c 	.word	0x2000046c

00002a08 <serial_unregister>:

//==============================================================================
void serial_unregister(serial_t callback) {
    2a08:	b580      	push	{r7, lr}
    2a0a:	b082      	sub	sp, #8
    2a0c:	af00      	add	r7, sp, #0
    2a0e:	003b      	movs	r3, r7
    2a10:	6018      	str	r0, [r3, #0]
    2a12:	6059      	str	r1, [r3, #4]
    serial_unregister_rx(callback.rx);
    2a14:	003b      	movs	r3, r7
    2a16:	681b      	ldr	r3, [r3, #0]
    2a18:	0018      	movs	r0, r3
    2a1a:	4b05      	ldr	r3, [pc, #20]	; (2a30 <serial_unregister+0x28>)
    2a1c:	4798      	blx	r3
    serial_unregister_tx(callback.tx);
    2a1e:	003b      	movs	r3, r7
    2a20:	685b      	ldr	r3, [r3, #4]
    2a22:	0018      	movs	r0, r3
    2a24:	4b03      	ldr	r3, [pc, #12]	; (2a34 <serial_unregister+0x2c>)
    2a26:	4798      	blx	r3
}
    2a28:	46c0      	nop			; (mov r8, r8)
    2a2a:	46bd      	mov	sp, r7
    2a2c:	b002      	add	sp, #8
    2a2e:	bd80      	pop	{r7, pc}
    2a30:	00002a71 	.word	0x00002a71
    2a34:	00002b05 	.word	0x00002b05

00002a38 <serial_register_rx>:
void serial_set_default(serial_t callback) {
    _serial_default = callback;
}

//==============================================================================
uint8_t serial_register_rx(serial_callback_t callback) {
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	6078      	str	r0, [r7, #4]
    if (!_serial_rx_registered()) {
    2a40:	4b08      	ldr	r3, [pc, #32]	; (2a64 <serial_register_rx+0x2c>)
    2a42:	4798      	blx	r3
    2a44:	1e03      	subs	r3, r0, #0
    2a46:	d107      	bne.n	2a58 <serial_register_rx+0x20>
        _serial_active = 1;
    2a48:	4b07      	ldr	r3, [pc, #28]	; (2a68 <serial_register_rx+0x30>)
    2a4a:	2201      	movs	r2, #1
    2a4c:	701a      	strb	r2, [r3, #0]
        _serial_callback.rx = callback;
    2a4e:	4b07      	ldr	r3, [pc, #28]	; (2a6c <serial_register_rx+0x34>)
    2a50:	687a      	ldr	r2, [r7, #4]
    2a52:	601a      	str	r2, [r3, #0]
        return 1;
    2a54:	2301      	movs	r3, #1
    2a56:	e000      	b.n	2a5a <serial_register_rx+0x22>
    }
    return 0;
    2a58:	2300      	movs	r3, #0
}
    2a5a:	0018      	movs	r0, r3
    2a5c:	46bd      	mov	sp, r7
    2a5e:	b002      	add	sp, #8
    2a60:	bd80      	pop	{r7, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	00002b39 	.word	0x00002b39
    2a68:	20000524 	.word	0x20000524
    2a6c:	20000464 	.word	0x20000464

00002a70 <serial_unregister_rx>:

//==============================================================================
void serial_unregister_rx(serial_callback_t callback) {
    2a70:	b580      	push	{r7, lr}
    2a72:	b082      	sub	sp, #8
    2a74:	af00      	add	r7, sp, #0
    2a76:	6078      	str	r0, [r7, #4]
    if (_serial_callback.rx == callback) {
    2a78:	4b07      	ldr	r3, [pc, #28]	; (2a98 <serial_unregister_rx+0x28>)
    2a7a:	681a      	ldr	r2, [r3, #0]
    2a7c:	687b      	ldr	r3, [r7, #4]
    2a7e:	429a      	cmp	r2, r3
    2a80:	d106      	bne.n	2a90 <serial_unregister_rx+0x20>
        _serial_active = 1;
    2a82:	4b06      	ldr	r3, [pc, #24]	; (2a9c <serial_unregister_rx+0x2c>)
    2a84:	2201      	movs	r2, #1
    2a86:	701a      	strb	r2, [r3, #0]
        _serial_callback.rx = _serial_default.rx;
    2a88:	4b05      	ldr	r3, [pc, #20]	; (2aa0 <serial_unregister_rx+0x30>)
    2a8a:	681a      	ldr	r2, [r3, #0]
    2a8c:	4b02      	ldr	r3, [pc, #8]	; (2a98 <serial_unregister_rx+0x28>)
    2a8e:	601a      	str	r2, [r3, #0]
    }
}
    2a90:	46c0      	nop			; (mov r8, r8)
    2a92:	46bd      	mov	sp, r7
    2a94:	b002      	add	sp, #8
    2a96:	bd80      	pop	{r7, pc}
    2a98:	20000464 	.word	0x20000464
    2a9c:	20000524 	.word	0x20000524
    2aa0:	2000046c 	.word	0x2000046c

00002aa4 <serial_set_default_rx>:

//==============================================================================
void serial_set_default_rx(serial_callback_t callback) {
    2aa4:	b580      	push	{r7, lr}
    2aa6:	b082      	sub	sp, #8
    2aa8:	af00      	add	r7, sp, #0
    2aaa:	6078      	str	r0, [r7, #4]
    serial_register_rx(callback);
    2aac:	687b      	ldr	r3, [r7, #4]
    2aae:	0018      	movs	r0, r3
    2ab0:	4b04      	ldr	r3, [pc, #16]	; (2ac4 <serial_set_default_rx+0x20>)
    2ab2:	4798      	blx	r3
    _serial_default.rx = callback;
    2ab4:	4b04      	ldr	r3, [pc, #16]	; (2ac8 <serial_set_default_rx+0x24>)
    2ab6:	687a      	ldr	r2, [r7, #4]
    2ab8:	601a      	str	r2, [r3, #0]
}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	46bd      	mov	sp, r7
    2abe:	b002      	add	sp, #8
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	00002a39 	.word	0x00002a39
    2ac8:	2000046c 	.word	0x2000046c

00002acc <serial_register_tx>:

//==============================================================================
uint8_t serial_register_tx(serial_callback_t callback) {
    2acc:	b580      	push	{r7, lr}
    2ace:	b082      	sub	sp, #8
    2ad0:	af00      	add	r7, sp, #0
    2ad2:	6078      	str	r0, [r7, #4]
    if (!_serial_tx_registered()) {
    2ad4:	4b08      	ldr	r3, [pc, #32]	; (2af8 <serial_register_tx+0x2c>)
    2ad6:	4798      	blx	r3
    2ad8:	1e03      	subs	r3, r0, #0
    2ada:	d107      	bne.n	2aec <serial_register_tx+0x20>
        _serial_active = 1;
    2adc:	4b07      	ldr	r3, [pc, #28]	; (2afc <serial_register_tx+0x30>)
    2ade:	2201      	movs	r2, #1
    2ae0:	701a      	strb	r2, [r3, #0]
        _serial_callback.tx = callback;
    2ae2:	4b07      	ldr	r3, [pc, #28]	; (2b00 <serial_register_tx+0x34>)
    2ae4:	687a      	ldr	r2, [r7, #4]
    2ae6:	605a      	str	r2, [r3, #4]
        return 1;
    2ae8:	2301      	movs	r3, #1
    2aea:	e000      	b.n	2aee <serial_register_tx+0x22>
    }

    return 0;
    2aec:	2300      	movs	r3, #0
}
    2aee:	0018      	movs	r0, r3
    2af0:	46bd      	mov	sp, r7
    2af2:	b002      	add	sp, #8
    2af4:	bd80      	pop	{r7, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00002b5d 	.word	0x00002b5d
    2afc:	20000524 	.word	0x20000524
    2b00:	20000464 	.word	0x20000464

00002b04 <serial_unregister_tx>:

//==============================================================================
void serial_unregister_tx(serial_callback_t callback) {
    2b04:	b580      	push	{r7, lr}
    2b06:	b082      	sub	sp, #8
    2b08:	af00      	add	r7, sp, #0
    2b0a:	6078      	str	r0, [r7, #4]
    if (_serial_callback.tx == callback) {
    2b0c:	4b07      	ldr	r3, [pc, #28]	; (2b2c <serial_unregister_tx+0x28>)
    2b0e:	685a      	ldr	r2, [r3, #4]
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	429a      	cmp	r2, r3
    2b14:	d106      	bne.n	2b24 <serial_unregister_tx+0x20>
        _serial_active = 1;
    2b16:	4b06      	ldr	r3, [pc, #24]	; (2b30 <serial_unregister_tx+0x2c>)
    2b18:	2201      	movs	r2, #1
    2b1a:	701a      	strb	r2, [r3, #0]
        _serial_callback.tx = _serial_default.tx;
    2b1c:	4b05      	ldr	r3, [pc, #20]	; (2b34 <serial_unregister_tx+0x30>)
    2b1e:	685a      	ldr	r2, [r3, #4]
    2b20:	4b02      	ldr	r3, [pc, #8]	; (2b2c <serial_unregister_tx+0x28>)
    2b22:	605a      	str	r2, [r3, #4]
    }
}
    2b24:	46c0      	nop			; (mov r8, r8)
    2b26:	46bd      	mov	sp, r7
    2b28:	b002      	add	sp, #8
    2b2a:	bd80      	pop	{r7, pc}
    2b2c:	20000464 	.word	0x20000464
    2b30:	20000524 	.word	0x20000524
    2b34:	2000046c 	.word	0x2000046c

00002b38 <_serial_rx_registered>:
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _serial_rx_registered() {
    2b38:	b580      	push	{r7, lr}
    2b3a:	af00      	add	r7, sp, #0
    return (_serial_callback.rx != _serial_default.rx);
    2b3c:	4b05      	ldr	r3, [pc, #20]	; (2b54 <_serial_rx_registered+0x1c>)
    2b3e:	681a      	ldr	r2, [r3, #0]
    2b40:	4b05      	ldr	r3, [pc, #20]	; (2b58 <_serial_rx_registered+0x20>)
    2b42:	681b      	ldr	r3, [r3, #0]
    2b44:	1ad3      	subs	r3, r2, r3
    2b46:	1e5a      	subs	r2, r3, #1
    2b48:	4193      	sbcs	r3, r2
    2b4a:	b2db      	uxtb	r3, r3
}
    2b4c:	0018      	movs	r0, r3
    2b4e:	46bd      	mov	sp, r7
    2b50:	bd80      	pop	{r7, pc}
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	20000464 	.word	0x20000464
    2b58:	2000046c 	.word	0x2000046c

00002b5c <_serial_tx_registered>:

//==============================================================================
uint8_t _serial_tx_registered() {
    2b5c:	b580      	push	{r7, lr}
    2b5e:	af00      	add	r7, sp, #0
    return (_serial_callback.tx != _serial_default.tx);
    2b60:	4b05      	ldr	r3, [pc, #20]	; (2b78 <_serial_tx_registered+0x1c>)
    2b62:	685a      	ldr	r2, [r3, #4]
    2b64:	4b05      	ldr	r3, [pc, #20]	; (2b7c <_serial_tx_registered+0x20>)
    2b66:	685b      	ldr	r3, [r3, #4]
    2b68:	1ad3      	subs	r3, r2, r3
    2b6a:	1e5a      	subs	r2, r3, #1
    2b6c:	4193      	sbcs	r3, r2
    2b6e:	b2db      	uxtb	r3, r3
}
    2b70:	0018      	movs	r0, r3
    2b72:	46bd      	mov	sp, r7
    2b74:	bd80      	pop	{r7, pc}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	20000464 	.word	0x20000464
    2b7c:	2000046c 	.word	0x2000046c

00002b80 <_serial_tx_clear>:

//==============================================================================
void _serial_tx_clear() {
    2b80:	b580      	push	{r7, lr}
    2b82:	af00      	add	r7, sp, #0
    SERCOM5->USART.INTFLAG.bit.TXC = 1;
    2b84:	4a03      	ldr	r2, [pc, #12]	; (2b94 <_serial_tx_clear+0x14>)
    2b86:	7e13      	ldrb	r3, [r2, #24]
    2b88:	2102      	movs	r1, #2
    2b8a:	430b      	orrs	r3, r1
    2b8c:	7613      	strb	r3, [r2, #24]
}
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	46bd      	mov	sp, r7
    2b92:	bd80      	pop	{r7, pc}
    2b94:	42001c00 	.word	0x42001c00

00002b98 <_serial_default_tx>:
//
//------------------------------------------------------------------------------

//==============================================================================
uint8_t _serial_default_tx()
{
    2b98:	b580      	push	{r7, lr}
    2b9a:	af00      	add	r7, sp, #0
    return 0;
    2b9c:	2300      	movs	r3, #0
}
    2b9e:	0018      	movs	r0, r3
    2ba0:	46bd      	mov	sp, r7
    2ba2:	bd80      	pop	{r7, pc}

00002ba4 <_serial_default_rx>:

//==============================================================================
uint8_t _serial_default_rx()
{
    2ba4:	b580      	push	{r7, lr}
    2ba6:	af00      	add	r7, sp, #0
    serial_read();
    2ba8:	4b02      	ldr	r3, [pc, #8]	; (2bb4 <_serial_default_rx+0x10>)
    2baa:	4798      	blx	r3
    return 0;
    2bac:	2300      	movs	r3, #0
}
    2bae:	0018      	movs	r0, r3
    2bb0:	46bd      	mov	sp, r7
    2bb2:	bd80      	pop	{r7, pc}
    2bb4:	000028c9 	.word	0x000028c9

00002bb8 <SERCOM5_Handler>:
//     | .__/ |  \  .__/
//
//------------------------------------------------------------------------------

//==============================================================================
void SERCOM5_Handler() {
    2bb8:	b580      	push	{r7, lr}
    2bba:	af00      	add	r7, sp, #0
    // Prevent timeout
    _serial_active = 1;
    2bbc:	4b11      	ldr	r3, [pc, #68]	; (2c04 <SERCOM5_Handler+0x4c>)
    2bbe:	2201      	movs	r2, #1
    2bc0:	701a      	strb	r2, [r3, #0]

	if (serial_tx_flag()) {
    2bc2:	4b11      	ldr	r3, [pc, #68]	; (2c08 <SERCOM5_Handler+0x50>)
    2bc4:	4798      	blx	r3
    2bc6:	1e03      	subs	r3, r0, #0
    2bc8:	d00b      	beq.n	2be2 <SERCOM5_Handler+0x2a>
		// Clear the TX flag and call callback
		if (_serial_callback.tx()) {
    2bca:	4b10      	ldr	r3, [pc, #64]	; (2c0c <SERCOM5_Handler+0x54>)
    2bcc:	685b      	ldr	r3, [r3, #4]
    2bce:	4798      	blx	r3
    2bd0:	1e03      	subs	r3, r0, #0
    2bd2:	d003      	beq.n	2bdc <SERCOM5_Handler+0x24>
            _serial_callback.tx = _serial_default.tx;
    2bd4:	4b0e      	ldr	r3, [pc, #56]	; (2c10 <SERCOM5_Handler+0x58>)
    2bd6:	685a      	ldr	r2, [r3, #4]
    2bd8:	4b0c      	ldr	r3, [pc, #48]	; (2c0c <SERCOM5_Handler+0x54>)
    2bda:	605a      	str	r2, [r3, #4]
        }

        _serial_tx_clear();
    2bdc:	4b0d      	ldr	r3, [pc, #52]	; (2c14 <SERCOM5_Handler+0x5c>)
    2bde:	4798      	blx	r3
	} else if (serial_rx_flag()) {
		if (_serial_callback.rx()) {
            _serial_callback.rx = _serial_default.rx;
        }
	}
}
    2be0:	e00c      	b.n	2bfc <SERCOM5_Handler+0x44>
	} else if (serial_rx_flag()) {
    2be2:	4b0d      	ldr	r3, [pc, #52]	; (2c18 <SERCOM5_Handler+0x60>)
    2be4:	4798      	blx	r3
    2be6:	1e03      	subs	r3, r0, #0
    2be8:	d008      	beq.n	2bfc <SERCOM5_Handler+0x44>
		if (_serial_callback.rx()) {
    2bea:	4b08      	ldr	r3, [pc, #32]	; (2c0c <SERCOM5_Handler+0x54>)
    2bec:	681b      	ldr	r3, [r3, #0]
    2bee:	4798      	blx	r3
    2bf0:	1e03      	subs	r3, r0, #0
    2bf2:	d003      	beq.n	2bfc <SERCOM5_Handler+0x44>
            _serial_callback.rx = _serial_default.rx;
    2bf4:	4b06      	ldr	r3, [pc, #24]	; (2c10 <SERCOM5_Handler+0x58>)
    2bf6:	681a      	ldr	r2, [r3, #0]
    2bf8:	4b04      	ldr	r3, [pc, #16]	; (2c0c <SERCOM5_Handler+0x54>)
    2bfa:	601a      	str	r2, [r3, #0]
}
    2bfc:	46c0      	nop			; (mov r8, r8)
    2bfe:	46bd      	mov	sp, r7
    2c00:	bd80      	pop	{r7, pc}
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	20000524 	.word	0x20000524
    2c08:	00002899 	.word	0x00002899
    2c0c:	20000464 	.word	0x20000464
    2c10:	2000046c 	.word	0x2000046c
    2c14:	00002b81 	.word	0x00002b81
    2c18:	000028b1 	.word	0x000028b1

00002c1c <servos_init>:
//     |    \__/ |__) |___ | \__,
//
//------------------------------------------------------------------------------

//==============================================================================
void servos_init(uint8_t addr) {
    2c1c:	b580      	push	{r7, lr}
    2c1e:	b082      	sub	sp, #8
    2c20:	af00      	add	r7, sp, #0
    2c22:	0002      	movs	r2, r0
    2c24:	1dfb      	adds	r3, r7, #7
    2c26:	701a      	strb	r2, [r3, #0]
    // Turn the device off (sleep)
    servos_stop(addr);
    2c28:	1dfb      	adds	r3, r7, #7
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	0018      	movs	r0, r3
    2c2e:	4b24      	ldr	r3, [pc, #144]	; (2cc0 <servos_init+0xa4>)
    2c30:	4798      	blx	r3

    timer_delay(50);
    2c32:	2032      	movs	r0, #50	; 0x32
    2c34:	4b23      	ldr	r3, [pc, #140]	; (2cc4 <servos_init+0xa8>)
    2c36:	4798      	blx	r3

    // Set prescale
    while (i2c_registered());
    2c38:	46c0      	nop			; (mov r8, r8)
    2c3a:	4b23      	ldr	r3, [pc, #140]	; (2cc8 <servos_init+0xac>)
    2c3c:	4798      	blx	r3
    2c3e:	1e03      	subs	r3, r0, #0
    2c40:	d1fb      	bne.n	2c3a <servos_init+0x1e>
    while (!i2c_register(_servos_byte_callback));
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	4b21      	ldr	r3, [pc, #132]	; (2ccc <servos_init+0xb0>)
    2c46:	0018      	movs	r0, r3
    2c48:	4b21      	ldr	r3, [pc, #132]	; (2cd0 <servos_init+0xb4>)
    2c4a:	4798      	blx	r3
    2c4c:	1e03      	subs	r3, r0, #0
    2c4e:	d0f9      	beq.n	2c44 <servos_init+0x28>
    _servos_mode = SERVOS_REG;
    2c50:	4b20      	ldr	r3, [pc, #128]	; (2cd4 <servos_init+0xb8>)
    2c52:	2200      	movs	r2, #0
    2c54:	701a      	strb	r2, [r3, #0]
    _servos_reg = PRE_SCALE;    // 20ms period -> 50 Hz
    2c56:	4b20      	ldr	r3, [pc, #128]	; (2cd8 <servos_init+0xbc>)
    2c58:	22fe      	movs	r2, #254	; 0xfe
    2c5a:	701a      	strb	r2, [r3, #0]
    _servos_data = 0x79;        // 50Hz = round(25MHz/4096* 50) - 1
    2c5c:	4b1f      	ldr	r3, [pc, #124]	; (2cdc <servos_init+0xc0>)
    2c5e:	2279      	movs	r2, #121	; 0x79
    2c60:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    2c62:	1dfb      	adds	r3, r7, #7
    2c64:	781b      	ldrb	r3, [r3, #0]
    2c66:	0018      	movs	r0, r3
    2c68:	4b1d      	ldr	r3, [pc, #116]	; (2ce0 <servos_init+0xc4>)
    2c6a:	4798      	blx	r3

    timer_delay(10);
    2c6c:	200a      	movs	r0, #10
    2c6e:	4b15      	ldr	r3, [pc, #84]	; (2cc4 <servos_init+0xa8>)
    2c70:	4798      	blx	r3

    // Turn the device back on
    while (i2c_registered());
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	4b14      	ldr	r3, [pc, #80]	; (2cc8 <servos_init+0xac>)
    2c76:	4798      	blx	r3
    2c78:	1e03      	subs	r3, r0, #0
    2c7a:	d1fb      	bne.n	2c74 <servos_init+0x58>
    while (!i2c_register(_servos_byte_callback));
    2c7c:	46c0      	nop			; (mov r8, r8)
    2c7e:	4b13      	ldr	r3, [pc, #76]	; (2ccc <servos_init+0xb0>)
    2c80:	0018      	movs	r0, r3
    2c82:	4b13      	ldr	r3, [pc, #76]	; (2cd0 <servos_init+0xb4>)
    2c84:	4798      	blx	r3
    2c86:	1e03      	subs	r3, r0, #0
    2c88:	d0f9      	beq.n	2c7e <servos_init+0x62>
    _servos_mode = SERVOS_REG;
    2c8a:	4b12      	ldr	r3, [pc, #72]	; (2cd4 <servos_init+0xb8>)
    2c8c:	2200      	movs	r2, #0
    2c8e:	701a      	strb	r2, [r3, #0]
    _servos_reg = PWM_MODE_1;
    2c90:	4b11      	ldr	r3, [pc, #68]	; (2cd8 <servos_init+0xbc>)
    2c92:	2200      	movs	r2, #0
    2c94:	701a      	strb	r2, [r3, #0]
    _servos_data = PWM_MODE_1_AI;
    2c96:	4b11      	ldr	r3, [pc, #68]	; (2cdc <servos_init+0xc0>)
    2c98:	2220      	movs	r2, #32
    2c9a:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    2c9c:	1dfb      	adds	r3, r7, #7
    2c9e:	781b      	ldrb	r3, [r3, #0]
    2ca0:	0018      	movs	r0, r3
    2ca2:	4b0f      	ldr	r3, [pc, #60]	; (2ce0 <servos_init+0xc4>)
    2ca4:	4798      	blx	r3
    while (i2c_registered());
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	4b07      	ldr	r3, [pc, #28]	; (2cc8 <servos_init+0xac>)
    2caa:	4798      	blx	r3
    2cac:	1e03      	subs	r3, r0, #0
    2cae:	d1fb      	bne.n	2ca8 <servos_init+0x8c>

    timer_delay(10);
    2cb0:	200a      	movs	r0, #10
    2cb2:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <servos_init+0xa8>)
    2cb4:	4798      	blx	r3
}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	46bd      	mov	sp, r7
    2cba:	b002      	add	sp, #8
    2cbc:	bd80      	pop	{r7, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	00002ce5 	.word	0x00002ce5
    2cc4:	00003559 	.word	0x00003559
    2cc8:	000015ad 	.word	0x000015ad
    2ccc:	0000326d 	.word	0x0000326d
    2cd0:	000014d1 	.word	0x000014d1
    2cd4:	2000053d 	.word	0x2000053d
    2cd8:	2000053c 	.word	0x2000053c
    2cdc:	20000531 	.word	0x20000531
    2ce0:	000013e5 	.word	0x000013e5

00002ce4 <servos_stop>:

//==============================================================================
void servos_stop(uint8_t addr) {
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b082      	sub	sp, #8
    2ce8:	af00      	add	r7, sp, #0
    2cea:	0002      	movs	r2, r0
    2cec:	1dfb      	adds	r3, r7, #7
    2cee:	701a      	strb	r2, [r3, #0]
    // Turn the device off
    while (i2c_registered());
    2cf0:	46c0      	nop			; (mov r8, r8)
    2cf2:	4b11      	ldr	r3, [pc, #68]	; (2d38 <servos_stop+0x54>)
    2cf4:	4798      	blx	r3
    2cf6:	1e03      	subs	r3, r0, #0
    2cf8:	d1fb      	bne.n	2cf2 <servos_stop+0xe>
    while (!i2c_register(_servos_byte_callback));
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	4b0f      	ldr	r3, [pc, #60]	; (2d3c <servos_stop+0x58>)
    2cfe:	0018      	movs	r0, r3
    2d00:	4b0f      	ldr	r3, [pc, #60]	; (2d40 <servos_stop+0x5c>)
    2d02:	4798      	blx	r3
    2d04:	1e03      	subs	r3, r0, #0
    2d06:	d0f9      	beq.n	2cfc <servos_stop+0x18>
    _servos_mode = SERVOS_REG;
    2d08:	4b0e      	ldr	r3, [pc, #56]	; (2d44 <servos_stop+0x60>)
    2d0a:	2200      	movs	r2, #0
    2d0c:	701a      	strb	r2, [r3, #0]
    _servos_reg = PWM_MODE_1;
    2d0e:	4b0e      	ldr	r3, [pc, #56]	; (2d48 <servos_stop+0x64>)
    2d10:	2200      	movs	r2, #0
    2d12:	701a      	strb	r2, [r3, #0]
    _servos_data = PWM_MODE_1_SLEEP;
    2d14:	4b0d      	ldr	r3, [pc, #52]	; (2d4c <servos_stop+0x68>)
    2d16:	2210      	movs	r2, #16
    2d18:	701a      	strb	r2, [r3, #0]
    i2c_begin_write(addr);
    2d1a:	1dfb      	adds	r3, r7, #7
    2d1c:	781b      	ldrb	r3, [r3, #0]
    2d1e:	0018      	movs	r0, r3
    2d20:	4b0b      	ldr	r3, [pc, #44]	; (2d50 <servos_stop+0x6c>)
    2d22:	4798      	blx	r3
    while (i2c_registered());
    2d24:	46c0      	nop			; (mov r8, r8)
    2d26:	4b04      	ldr	r3, [pc, #16]	; (2d38 <servos_stop+0x54>)
    2d28:	4798      	blx	r3
    2d2a:	1e03      	subs	r3, r0, #0
    2d2c:	d1fb      	bne.n	2d26 <servos_stop+0x42>
}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	46bd      	mov	sp, r7
    2d32:	b002      	add	sp, #8
    2d34:	bd80      	pop	{r7, pc}
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	000015ad 	.word	0x000015ad
    2d3c:	0000326d 	.word	0x0000326d
    2d40:	000014d1 	.word	0x000014d1
    2d44:	2000053d 	.word	0x2000053d
    2d48:	2000053c 	.word	0x2000053c
    2d4c:	20000531 	.word	0x20000531
    2d50:	000013e5 	.word	0x000013e5

00002d54 <servos_write>:

//==============================================================================
uint8_t servos_write(uint8_t addr, hand_ang_t* bytes) {
    2d54:	b580      	push	{r7, lr}
    2d56:	b082      	sub	sp, #8
    2d58:	af00      	add	r7, sp, #0
    2d5a:	0002      	movs	r2, r0
    2d5c:	6039      	str	r1, [r7, #0]
    2d5e:	1dfb      	adds	r3, r7, #7
    2d60:	701a      	strb	r2, [r3, #0]
    // 20ms -> 50Hz
    // 1ms = -90 deg
    // 2ms = +90 deg
    // 1ms = 4096/20 ~= 205
    // pw = 205+(ang*205/255) <- convert angle to steps
    if (i2c_register(_servos_regs_callback)) {
    2d62:	4b0d      	ldr	r3, [pc, #52]	; (2d98 <servos_write+0x44>)
    2d64:	0018      	movs	r0, r3
    2d66:	4b0d      	ldr	r3, [pc, #52]	; (2d9c <servos_write+0x48>)
    2d68:	4798      	blx	r3
    2d6a:	1e03      	subs	r3, r0, #0
    2d6c:	d00f      	beq.n	2d8e <servos_write+0x3a>
        _servos_mode = SERVOS_REG;
    2d6e:	4b0c      	ldr	r3, [pc, #48]	; (2da0 <servos_write+0x4c>)
    2d70:	2200      	movs	r2, #0
    2d72:	701a      	strb	r2, [r3, #0]
        _servos_reg = PWM0_ON_L;
    2d74:	4b0b      	ldr	r3, [pc, #44]	; (2da4 <servos_write+0x50>)
    2d76:	2206      	movs	r2, #6
    2d78:	701a      	strb	r2, [r3, #0]
        _servos_list = bytes;
    2d7a:	4b0b      	ldr	r3, [pc, #44]	; (2da8 <servos_write+0x54>)
    2d7c:	683a      	ldr	r2, [r7, #0]
    2d7e:	601a      	str	r2, [r3, #0]
        i2c_begin_write(addr);
    2d80:	1dfb      	adds	r3, r7, #7
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	0018      	movs	r0, r3
    2d86:	4b09      	ldr	r3, [pc, #36]	; (2dac <servos_write+0x58>)
    2d88:	4798      	blx	r3
        return 1;
    2d8a:	2301      	movs	r3, #1
    2d8c:	e000      	b.n	2d90 <servos_write+0x3c>
    }

    return 0;
    2d8e:	2300      	movs	r3, #0
}
    2d90:	0018      	movs	r0, r3
    2d92:	46bd      	mov	sp, r7
    2d94:	b002      	add	sp, #8
    2d96:	bd80      	pop	{r7, pc}
    2d98:	000032dd 	.word	0x000032dd
    2d9c:	000014d1 	.word	0x000014d1
    2da0:	2000053d 	.word	0x2000053d
    2da4:	2000053c 	.word	0x2000053c
    2da8:	20000534 	.word	0x20000534
    2dac:	000013e5 	.word	0x000013e5

00002db0 <servos_write_complete>:

//==============================================================================
uint8_t servos_write_complete() {
    2db0:	b580      	push	{r7, lr}
    2db2:	af00      	add	r7, sp, #0
    return (_servos_mode == SERVOS_DONE);
    2db4:	4b04      	ldr	r3, [pc, #16]	; (2dc8 <servos_write_complete+0x18>)
    2db6:	781b      	ldrb	r3, [r3, #0]
    2db8:	b2db      	uxtb	r3, r3
    2dba:	3b03      	subs	r3, #3
    2dbc:	425a      	negs	r2, r3
    2dbe:	4153      	adcs	r3, r2
    2dc0:	b2db      	uxtb	r3, r3
}
    2dc2:	0018      	movs	r0, r3
    2dc4:	46bd      	mov	sp, r7
    2dc6:	bd80      	pop	{r7, pc}
    2dc8:	2000053d 	.word	0x2000053d

00002dcc <servos_compute>:

//==============================================================================
uint8_t servos_compute(hand_pos_t* data, hand_ang_t* output) {
    2dcc:	b580      	push	{r7, lr}
    2dce:	b082      	sub	sp, #8
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
    2dd4:	6039      	str	r1, [r7, #0]
    _servos_comp_idx = 0;
    2dd6:	4b07      	ldr	r3, [pc, #28]	; (2df4 <servos_compute+0x28>)
    2dd8:	2200      	movs	r2, #0
    2dda:	701a      	strb	r2, [r3, #0]
    _servos_comp_data = data;
    2ddc:	4b06      	ldr	r3, [pc, #24]	; (2df8 <servos_compute+0x2c>)
    2dde:	687a      	ldr	r2, [r7, #4]
    2de0:	601a      	str	r2, [r3, #0]
    _servos_comp_output = output;
    2de2:	4b06      	ldr	r3, [pc, #24]	; (2dfc <servos_compute+0x30>)
    2de4:	683a      	ldr	r2, [r7, #0]
    2de6:	601a      	str	r2, [r3, #0]
    return 1;
    2de8:	2301      	movs	r3, #1
}
    2dea:	0018      	movs	r0, r3
    2dec:	46bd      	mov	sp, r7
    2dee:	b002      	add	sp, #8
    2df0:	bd80      	pop	{r7, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	20000530 	.word	0x20000530
    2df8:	2000052c 	.word	0x2000052c
    2dfc:	20000538 	.word	0x20000538

00002e00 <servos_compute_complete>:

//==============================================================================
uint8_t servos_compute_complete() {
    2e00:	b590      	push	{r4, r7, lr}
    2e02:	b083      	sub	sp, #12
    2e04:	af00      	add	r7, sp, #0
    uint8_t complete;

    switch (_servos_comp_idx) {
    2e06:	4bb5      	ldr	r3, [pc, #724]	; (30dc <servos_compute_complete+0x2dc>)
    2e08:	781b      	ldrb	r3, [r3, #0]
    2e0a:	2b0f      	cmp	r3, #15
    2e0c:	d900      	bls.n	2e10 <servos_compute_complete+0x10>
    2e0e:	e15e      	b.n	30ce <servos_compute_complete+0x2ce>
    2e10:	009a      	lsls	r2, r3, #2
    2e12:	4bb3      	ldr	r3, [pc, #716]	; (30e0 <servos_compute_complete+0x2e0>)
    2e14:	18d3      	adds	r3, r2, r3
    2e16:	681b      	ldr	r3, [r3, #0]
    2e18:	469f      	mov	pc, r3
        case SERVOS_COMP_PNT_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e1a:	4bb2      	ldr	r3, [pc, #712]	; (30e4 <servos_compute_complete+0x2e4>)
    2e1c:	681a      	ldr	r2, [r3, #0]
    2e1e:	4baf      	ldr	r3, [pc, #700]	; (30dc <servos_compute_complete+0x2dc>)
    2e20:	781b      	ldrb	r3, [r3, #0]
    2e22:	1c59      	adds	r1, r3, #1
    2e24:	b2c8      	uxtb	r0, r1
    2e26:	49ad      	ldr	r1, [pc, #692]	; (30dc <servos_compute_complete+0x2dc>)
    2e28:	7008      	strb	r0, [r1, #0]
    2e2a:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnt.tip, 
    2e2c:	4bae      	ldr	r3, [pc, #696]	; (30e8 <servos_compute_complete+0x2e8>)
    2e2e:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e30:	001a      	movs	r2, r3
                &_servos_comp_data->pnt.mid);
    2e32:	4bad      	ldr	r3, [pc, #692]	; (30e8 <servos_compute_complete+0x2e8>)
    2e34:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e36:	3306      	adds	r3, #6
    2e38:	0019      	movs	r1, r3
    2e3a:	0010      	movs	r0, r2
    2e3c:	4bab      	ldr	r3, [pc, #684]	; (30ec <servos_compute_complete+0x2ec>)
    2e3e:	4798      	blx	r3
    2e40:	0003      	movs	r3, r0
    2e42:	7023      	strb	r3, [r4, #0]
        } break;
    2e44:	e143      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNT_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e46:	4ba7      	ldr	r3, [pc, #668]	; (30e4 <servos_compute_complete+0x2e4>)
    2e48:	681a      	ldr	r2, [r3, #0]
    2e4a:	4ba4      	ldr	r3, [pc, #656]	; (30dc <servos_compute_complete+0x2dc>)
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	1c59      	adds	r1, r3, #1
    2e50:	b2c8      	uxtb	r0, r1
    2e52:	49a2      	ldr	r1, [pc, #648]	; (30dc <servos_compute_complete+0x2dc>)
    2e54:	7008      	strb	r0, [r1, #0]
    2e56:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnt.mid,
    2e58:	4ba3      	ldr	r3, [pc, #652]	; (30e8 <servos_compute_complete+0x2e8>)
    2e5a:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e5c:	1d9a      	adds	r2, r3, #6
                &_servos_comp_data->pnt.bs);
    2e5e:	4ba2      	ldr	r3, [pc, #648]	; (30e8 <servos_compute_complete+0x2e8>)
    2e60:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e62:	330c      	adds	r3, #12
    2e64:	0019      	movs	r1, r3
    2e66:	0010      	movs	r0, r2
    2e68:	4ba0      	ldr	r3, [pc, #640]	; (30ec <servos_compute_complete+0x2ec>)
    2e6a:	4798      	blx	r3
    2e6c:	0003      	movs	r3, r0
    2e6e:	7023      	strb	r3, [r4, #0]
        } break;
    2e70:	e12d      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNT_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e72:	4b9c      	ldr	r3, [pc, #624]	; (30e4 <servos_compute_complete+0x2e4>)
    2e74:	681a      	ldr	r2, [r3, #0]
    2e76:	4b99      	ldr	r3, [pc, #612]	; (30dc <servos_compute_complete+0x2dc>)
    2e78:	781b      	ldrb	r3, [r3, #0]
    2e7a:	1c59      	adds	r1, r3, #1
    2e7c:	b2c8      	uxtb	r0, r1
    2e7e:	4997      	ldr	r1, [pc, #604]	; (30dc <servos_compute_complete+0x2dc>)
    2e80:	7008      	strb	r0, [r1, #0]
    2e82:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnt.bs,
    2e84:	4b98      	ldr	r3, [pc, #608]	; (30e8 <servos_compute_complete+0x2e8>)
    2e86:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e88:	330c      	adds	r3, #12
    2e8a:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    2e8c:	4b96      	ldr	r3, [pc, #600]	; (30e8 <servos_compute_complete+0x2e8>)
    2e8e:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2e90:	335a      	adds	r3, #90	; 0x5a
    2e92:	0019      	movs	r1, r3
    2e94:	0010      	movs	r0, r2
    2e96:	4b95      	ldr	r3, [pc, #596]	; (30ec <servos_compute_complete+0x2ec>)
    2e98:	4798      	blx	r3
    2e9a:	0003      	movs	r3, r0
    2e9c:	7023      	strb	r3, [r4, #0]
        } break;
    2e9e:	e116      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_MID_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2ea0:	4b90      	ldr	r3, [pc, #576]	; (30e4 <servos_compute_complete+0x2e4>)
    2ea2:	681a      	ldr	r2, [r3, #0]
    2ea4:	4b8d      	ldr	r3, [pc, #564]	; (30dc <servos_compute_complete+0x2dc>)
    2ea6:	781b      	ldrb	r3, [r3, #0]
    2ea8:	1c59      	adds	r1, r3, #1
    2eaa:	b2c8      	uxtb	r0, r1
    2eac:	498b      	ldr	r1, [pc, #556]	; (30dc <servos_compute_complete+0x2dc>)
    2eae:	7008      	strb	r0, [r1, #0]
    2eb0:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->mid.tip,
    2eb2:	4b8d      	ldr	r3, [pc, #564]	; (30e8 <servos_compute_complete+0x2e8>)
    2eb4:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2eb6:	3312      	adds	r3, #18
    2eb8:	001a      	movs	r2, r3
                &_servos_comp_data->mid.mid);
    2eba:	4b8b      	ldr	r3, [pc, #556]	; (30e8 <servos_compute_complete+0x2e8>)
    2ebc:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2ebe:	3318      	adds	r3, #24
    2ec0:	0019      	movs	r1, r3
    2ec2:	0010      	movs	r0, r2
    2ec4:	4b89      	ldr	r3, [pc, #548]	; (30ec <servos_compute_complete+0x2ec>)
    2ec6:	4798      	blx	r3
    2ec8:	0003      	movs	r3, r0
    2eca:	7023      	strb	r3, [r4, #0]
        } break;
    2ecc:	e0ff      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_MID_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2ece:	4b85      	ldr	r3, [pc, #532]	; (30e4 <servos_compute_complete+0x2e4>)
    2ed0:	681a      	ldr	r2, [r3, #0]
    2ed2:	4b82      	ldr	r3, [pc, #520]	; (30dc <servos_compute_complete+0x2dc>)
    2ed4:	781b      	ldrb	r3, [r3, #0]
    2ed6:	1c59      	adds	r1, r3, #1
    2ed8:	b2c8      	uxtb	r0, r1
    2eda:	4980      	ldr	r1, [pc, #512]	; (30dc <servos_compute_complete+0x2dc>)
    2edc:	7008      	strb	r0, [r1, #0]
    2ede:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->mid.mid,
    2ee0:	4b81      	ldr	r3, [pc, #516]	; (30e8 <servos_compute_complete+0x2e8>)
    2ee2:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2ee4:	3318      	adds	r3, #24
    2ee6:	001a      	movs	r2, r3
                &_servos_comp_data->mid.bs);
    2ee8:	4b7f      	ldr	r3, [pc, #508]	; (30e8 <servos_compute_complete+0x2e8>)
    2eea:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2eec:	331e      	adds	r3, #30
    2eee:	0019      	movs	r1, r3
    2ef0:	0010      	movs	r0, r2
    2ef2:	4b7e      	ldr	r3, [pc, #504]	; (30ec <servos_compute_complete+0x2ec>)
    2ef4:	4798      	blx	r3
    2ef6:	0003      	movs	r3, r0
    2ef8:	7023      	strb	r3, [r4, #0]
        } break;
    2efa:	e0e8      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_MID_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2efc:	4b79      	ldr	r3, [pc, #484]	; (30e4 <servos_compute_complete+0x2e4>)
    2efe:	681a      	ldr	r2, [r3, #0]
    2f00:	4b76      	ldr	r3, [pc, #472]	; (30dc <servos_compute_complete+0x2dc>)
    2f02:	781b      	ldrb	r3, [r3, #0]
    2f04:	1c59      	adds	r1, r3, #1
    2f06:	b2c8      	uxtb	r0, r1
    2f08:	4974      	ldr	r1, [pc, #464]	; (30dc <servos_compute_complete+0x2dc>)
    2f0a:	7008      	strb	r0, [r1, #0]
    2f0c:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->mid.bs,
    2f0e:	4b76      	ldr	r3, [pc, #472]	; (30e8 <servos_compute_complete+0x2e8>)
    2f10:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f12:	331e      	adds	r3, #30
    2f14:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    2f16:	4b74      	ldr	r3, [pc, #464]	; (30e8 <servos_compute_complete+0x2e8>)
    2f18:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f1a:	335a      	adds	r3, #90	; 0x5a
    2f1c:	0019      	movs	r1, r3
    2f1e:	0010      	movs	r0, r2
    2f20:	4b72      	ldr	r3, [pc, #456]	; (30ec <servos_compute_complete+0x2ec>)
    2f22:	4798      	blx	r3
    2f24:	0003      	movs	r3, r0
    2f26:	7023      	strb	r3, [r4, #0]
        } break;
    2f28:	e0d1      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_RNG_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f2a:	4b6e      	ldr	r3, [pc, #440]	; (30e4 <servos_compute_complete+0x2e4>)
    2f2c:	681a      	ldr	r2, [r3, #0]
    2f2e:	4b6b      	ldr	r3, [pc, #428]	; (30dc <servos_compute_complete+0x2dc>)
    2f30:	781b      	ldrb	r3, [r3, #0]
    2f32:	1c59      	adds	r1, r3, #1
    2f34:	b2c8      	uxtb	r0, r1
    2f36:	4969      	ldr	r1, [pc, #420]	; (30dc <servos_compute_complete+0x2dc>)
    2f38:	7008      	strb	r0, [r1, #0]
    2f3a:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->rng.tip,
    2f3c:	4b6a      	ldr	r3, [pc, #424]	; (30e8 <servos_compute_complete+0x2e8>)
    2f3e:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f40:	3324      	adds	r3, #36	; 0x24
    2f42:	001a      	movs	r2, r3
                &_servos_comp_data->rng.mid);
    2f44:	4b68      	ldr	r3, [pc, #416]	; (30e8 <servos_compute_complete+0x2e8>)
    2f46:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f48:	332a      	adds	r3, #42	; 0x2a
    2f4a:	0019      	movs	r1, r3
    2f4c:	0010      	movs	r0, r2
    2f4e:	4b67      	ldr	r3, [pc, #412]	; (30ec <servos_compute_complete+0x2ec>)
    2f50:	4798      	blx	r3
    2f52:	0003      	movs	r3, r0
    2f54:	7023      	strb	r3, [r4, #0]
        } break;
    2f56:	e0ba      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_RNG_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f58:	4b62      	ldr	r3, [pc, #392]	; (30e4 <servos_compute_complete+0x2e4>)
    2f5a:	681a      	ldr	r2, [r3, #0]
    2f5c:	4b5f      	ldr	r3, [pc, #380]	; (30dc <servos_compute_complete+0x2dc>)
    2f5e:	781b      	ldrb	r3, [r3, #0]
    2f60:	1c59      	adds	r1, r3, #1
    2f62:	b2c8      	uxtb	r0, r1
    2f64:	495d      	ldr	r1, [pc, #372]	; (30dc <servos_compute_complete+0x2dc>)
    2f66:	7008      	strb	r0, [r1, #0]
    2f68:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->rng.mid,
    2f6a:	4b5f      	ldr	r3, [pc, #380]	; (30e8 <servos_compute_complete+0x2e8>)
    2f6c:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f6e:	332a      	adds	r3, #42	; 0x2a
    2f70:	001a      	movs	r2, r3
                &_servos_comp_data->rng.bs);
    2f72:	4b5d      	ldr	r3, [pc, #372]	; (30e8 <servos_compute_complete+0x2e8>)
    2f74:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f76:	3330      	adds	r3, #48	; 0x30
    2f78:	0019      	movs	r1, r3
    2f7a:	0010      	movs	r0, r2
    2f7c:	4b5b      	ldr	r3, [pc, #364]	; (30ec <servos_compute_complete+0x2ec>)
    2f7e:	4798      	blx	r3
    2f80:	0003      	movs	r3, r0
    2f82:	7023      	strb	r3, [r4, #0]
        } break;
    2f84:	e0a3      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_RNG_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f86:	4b57      	ldr	r3, [pc, #348]	; (30e4 <servos_compute_complete+0x2e4>)
    2f88:	681a      	ldr	r2, [r3, #0]
    2f8a:	4b54      	ldr	r3, [pc, #336]	; (30dc <servos_compute_complete+0x2dc>)
    2f8c:	781b      	ldrb	r3, [r3, #0]
    2f8e:	1c59      	adds	r1, r3, #1
    2f90:	b2c8      	uxtb	r0, r1
    2f92:	4952      	ldr	r1, [pc, #328]	; (30dc <servos_compute_complete+0x2dc>)
    2f94:	7008      	strb	r0, [r1, #0]
    2f96:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->rng.bs,
    2f98:	4b53      	ldr	r3, [pc, #332]	; (30e8 <servos_compute_complete+0x2e8>)
    2f9a:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2f9c:	3330      	adds	r3, #48	; 0x30
    2f9e:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    2fa0:	4b51      	ldr	r3, [pc, #324]	; (30e8 <servos_compute_complete+0x2e8>)
    2fa2:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2fa4:	335a      	adds	r3, #90	; 0x5a
    2fa6:	0019      	movs	r1, r3
    2fa8:	0010      	movs	r0, r2
    2faa:	4b50      	ldr	r3, [pc, #320]	; (30ec <servos_compute_complete+0x2ec>)
    2fac:	4798      	blx	r3
    2fae:	0003      	movs	r3, r0
    2fb0:	7023      	strb	r3, [r4, #0]
        } break;
    2fb2:	e08c      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNK_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2fb4:	4b4b      	ldr	r3, [pc, #300]	; (30e4 <servos_compute_complete+0x2e4>)
    2fb6:	681a      	ldr	r2, [r3, #0]
    2fb8:	4b48      	ldr	r3, [pc, #288]	; (30dc <servos_compute_complete+0x2dc>)
    2fba:	781b      	ldrb	r3, [r3, #0]
    2fbc:	1c59      	adds	r1, r3, #1
    2fbe:	b2c8      	uxtb	r0, r1
    2fc0:	4946      	ldr	r1, [pc, #280]	; (30dc <servos_compute_complete+0x2dc>)
    2fc2:	7008      	strb	r0, [r1, #0]
    2fc4:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnk.tip,
    2fc6:	4b48      	ldr	r3, [pc, #288]	; (30e8 <servos_compute_complete+0x2e8>)
    2fc8:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2fca:	3336      	adds	r3, #54	; 0x36
    2fcc:	001a      	movs	r2, r3
                &_servos_comp_data->pnk.mid);
    2fce:	4b46      	ldr	r3, [pc, #280]	; (30e8 <servos_compute_complete+0x2e8>)
    2fd0:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2fd2:	333c      	adds	r3, #60	; 0x3c
    2fd4:	0019      	movs	r1, r3
    2fd6:	0010      	movs	r0, r2
    2fd8:	4b44      	ldr	r3, [pc, #272]	; (30ec <servos_compute_complete+0x2ec>)
    2fda:	4798      	blx	r3
    2fdc:	0003      	movs	r3, r0
    2fde:	7023      	strb	r3, [r4, #0]
        } break;
    2fe0:	e075      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNK_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2fe2:	4b40      	ldr	r3, [pc, #256]	; (30e4 <servos_compute_complete+0x2e4>)
    2fe4:	681a      	ldr	r2, [r3, #0]
    2fe6:	4b3d      	ldr	r3, [pc, #244]	; (30dc <servos_compute_complete+0x2dc>)
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	1c59      	adds	r1, r3, #1
    2fec:	b2c8      	uxtb	r0, r1
    2fee:	493b      	ldr	r1, [pc, #236]	; (30dc <servos_compute_complete+0x2dc>)
    2ff0:	7008      	strb	r0, [r1, #0]
    2ff2:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnk.mid,
    2ff4:	4b3c      	ldr	r3, [pc, #240]	; (30e8 <servos_compute_complete+0x2e8>)
    2ff6:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    2ff8:	333c      	adds	r3, #60	; 0x3c
    2ffa:	001a      	movs	r2, r3
                &_servos_comp_data->pnk.bs);
    2ffc:	4b3a      	ldr	r3, [pc, #232]	; (30e8 <servos_compute_complete+0x2e8>)
    2ffe:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3000:	3342      	adds	r3, #66	; 0x42
    3002:	0019      	movs	r1, r3
    3004:	0010      	movs	r0, r2
    3006:	4b39      	ldr	r3, [pc, #228]	; (30ec <servos_compute_complete+0x2ec>)
    3008:	4798      	blx	r3
    300a:	0003      	movs	r3, r0
    300c:	7023      	strb	r3, [r4, #0]
        } break;
    300e:	e05e      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_PNK_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3010:	4b34      	ldr	r3, [pc, #208]	; (30e4 <servos_compute_complete+0x2e4>)
    3012:	681a      	ldr	r2, [r3, #0]
    3014:	4b31      	ldr	r3, [pc, #196]	; (30dc <servos_compute_complete+0x2dc>)
    3016:	781b      	ldrb	r3, [r3, #0]
    3018:	1c59      	adds	r1, r3, #1
    301a:	b2c8      	uxtb	r0, r1
    301c:	492f      	ldr	r1, [pc, #188]	; (30dc <servos_compute_complete+0x2dc>)
    301e:	7008      	strb	r0, [r1, #0]
    3020:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->pnk.bs,
    3022:	4b31      	ldr	r3, [pc, #196]	; (30e8 <servos_compute_complete+0x2e8>)
    3024:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3026:	3342      	adds	r3, #66	; 0x42
    3028:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    302a:	4b2f      	ldr	r3, [pc, #188]	; (30e8 <servos_compute_complete+0x2e8>)
    302c:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    302e:	335a      	adds	r3, #90	; 0x5a
    3030:	0019      	movs	r1, r3
    3032:	0010      	movs	r0, r2
    3034:	4b2d      	ldr	r3, [pc, #180]	; (30ec <servos_compute_complete+0x2ec>)
    3036:	4798      	blx	r3
    3038:	0003      	movs	r3, r0
    303a:	7023      	strb	r3, [r4, #0]
        } break;
    303c:	e047      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_THM_TIP: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    303e:	4b29      	ldr	r3, [pc, #164]	; (30e4 <servos_compute_complete+0x2e4>)
    3040:	681a      	ldr	r2, [r3, #0]
    3042:	4b26      	ldr	r3, [pc, #152]	; (30dc <servos_compute_complete+0x2dc>)
    3044:	781b      	ldrb	r3, [r3, #0]
    3046:	1c59      	adds	r1, r3, #1
    3048:	b2c8      	uxtb	r0, r1
    304a:	4924      	ldr	r1, [pc, #144]	; (30dc <servos_compute_complete+0x2dc>)
    304c:	7008      	strb	r0, [r1, #0]
    304e:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->thm.tip,
    3050:	4b25      	ldr	r3, [pc, #148]	; (30e8 <servos_compute_complete+0x2e8>)
    3052:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3054:	3348      	adds	r3, #72	; 0x48
    3056:	001a      	movs	r2, r3
                &_servos_comp_data->thm.mid);
    3058:	4b23      	ldr	r3, [pc, #140]	; (30e8 <servos_compute_complete+0x2e8>)
    305a:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    305c:	334e      	adds	r3, #78	; 0x4e
    305e:	0019      	movs	r1, r3
    3060:	0010      	movs	r0, r2
    3062:	4b22      	ldr	r3, [pc, #136]	; (30ec <servos_compute_complete+0x2ec>)
    3064:	4798      	blx	r3
    3066:	0003      	movs	r3, r0
    3068:	7023      	strb	r3, [r4, #0]
        } break;
    306a:	e030      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_THM_MID: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    306c:	4b1d      	ldr	r3, [pc, #116]	; (30e4 <servos_compute_complete+0x2e4>)
    306e:	681a      	ldr	r2, [r3, #0]
    3070:	4b1a      	ldr	r3, [pc, #104]	; (30dc <servos_compute_complete+0x2dc>)
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	1c59      	adds	r1, r3, #1
    3076:	b2c8      	uxtb	r0, r1
    3078:	4918      	ldr	r1, [pc, #96]	; (30dc <servos_compute_complete+0x2dc>)
    307a:	7008      	strb	r0, [r1, #0]
    307c:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->thm.mid,
    307e:	4b1a      	ldr	r3, [pc, #104]	; (30e8 <servos_compute_complete+0x2e8>)
    3080:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    3082:	334e      	adds	r3, #78	; 0x4e
    3084:	001a      	movs	r2, r3
                &_servos_comp_data->thm.bs);
    3086:	4b18      	ldr	r3, [pc, #96]	; (30e8 <servos_compute_complete+0x2e8>)
    3088:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    308a:	3354      	adds	r3, #84	; 0x54
    308c:	0019      	movs	r1, r3
    308e:	0010      	movs	r0, r2
    3090:	4b16      	ldr	r3, [pc, #88]	; (30ec <servos_compute_complete+0x2ec>)
    3092:	4798      	blx	r3
    3094:	0003      	movs	r3, r0
    3096:	7023      	strb	r3, [r4, #0]
        } break;
    3098:	e019      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_THM_BS: {
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    309a:	4b12      	ldr	r3, [pc, #72]	; (30e4 <servos_compute_complete+0x2e4>)
    309c:	681a      	ldr	r2, [r3, #0]
    309e:	4b0f      	ldr	r3, [pc, #60]	; (30dc <servos_compute_complete+0x2dc>)
    30a0:	781b      	ldrb	r3, [r3, #0]
    30a2:	1c59      	adds	r1, r3, #1
    30a4:	b2c8      	uxtb	r0, r1
    30a6:	490d      	ldr	r1, [pc, #52]	; (30dc <servos_compute_complete+0x2dc>)
    30a8:	7008      	strb	r0, [r1, #0]
    30aa:	18d4      	adds	r4, r2, r3
                &_servos_comp_data->thm.bs,
    30ac:	4b0e      	ldr	r3, [pc, #56]	; (30e8 <servos_compute_complete+0x2e8>)
    30ae:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    30b0:	3354      	adds	r3, #84	; 0x54
    30b2:	001a      	movs	r2, r3
                &_servos_comp_data->hnd);
    30b4:	4b0c      	ldr	r3, [pc, #48]	; (30e8 <servos_compute_complete+0x2e8>)
    30b6:	681b      	ldr	r3, [r3, #0]
            _servos_comp_output[_servos_comp_idx++] = _servos_comp(
    30b8:	335a      	adds	r3, #90	; 0x5a
    30ba:	0019      	movs	r1, r3
    30bc:	0010      	movs	r0, r2
    30be:	4b0b      	ldr	r3, [pc, #44]	; (30ec <servos_compute_complete+0x2ec>)
    30c0:	4798      	blx	r3
    30c2:	0003      	movs	r3, r0
    30c4:	7023      	strb	r3, [r4, #0]
        } break;
    30c6:	e002      	b.n	30ce <servos_compute_complete+0x2ce>

        case SERVOS_COMP_DONE: {
            complete = 1;
    30c8:	1dfb      	adds	r3, r7, #7
    30ca:	2201      	movs	r2, #1
    30cc:	701a      	strb	r2, [r3, #0]
        }
    }

    return complete;
    30ce:	1dfb      	adds	r3, r7, #7
    30d0:	781b      	ldrb	r3, [r3, #0]
}
    30d2:	0018      	movs	r0, r3
    30d4:	46bd      	mov	sp, r7
    30d6:	b003      	add	sp, #12
    30d8:	bd90      	pop	{r4, r7, pc}
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	20000530 	.word	0x20000530
    30e0:	00005e8c 	.word	0x00005e8c
    30e4:	20000538 	.word	0x20000538
    30e8:	2000052c 	.word	0x2000052c
    30ec:	000030f1 	.word	0x000030f1

000030f0 <_servos_comp>:
//     |__) |__) | \  /  /\   |  |__
//     |    |  \ |  \/  /~~\  |  |___
//
//------------------------------------------------------------------------------

uint8_t _servos_comp(joint_pos_t* joint1, joint_pos_t* joint2) {
    30f0:	b590      	push	{r4, r7, lr}
    30f2:	b085      	sub	sp, #20
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
    30f8:	6039      	str	r1, [r7, #0]
    float ang = _servos_dot(joint1, joint2);
    30fa:	683a      	ldr	r2, [r7, #0]
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	0011      	movs	r1, r2
    3100:	0018      	movs	r0, r3
    3102:	4b23      	ldr	r3, [pc, #140]	; (3190 <_servos_comp+0xa0>)
    3104:	4798      	blx	r3
    3106:	1c03      	adds	r3, r0, #0
    3108:	60fb      	str	r3, [r7, #12]
    ang /= _servos_mag(joint1);
    310a:	687b      	ldr	r3, [r7, #4]
    310c:	0018      	movs	r0, r3
    310e:	4b21      	ldr	r3, [pc, #132]	; (3194 <_servos_comp+0xa4>)
    3110:	4798      	blx	r3
    3112:	1c02      	adds	r2, r0, #0
    3114:	4b20      	ldr	r3, [pc, #128]	; (3198 <_servos_comp+0xa8>)
    3116:	1c11      	adds	r1, r2, #0
    3118:	68f8      	ldr	r0, [r7, #12]
    311a:	4798      	blx	r3
    311c:	1c03      	adds	r3, r0, #0
    311e:	60fb      	str	r3, [r7, #12]
    ang /= _servos_mag(joint2);
    3120:	683b      	ldr	r3, [r7, #0]
    3122:	0018      	movs	r0, r3
    3124:	4b1b      	ldr	r3, [pc, #108]	; (3194 <_servos_comp+0xa4>)
    3126:	4798      	blx	r3
    3128:	1c02      	adds	r2, r0, #0
    312a:	4b1b      	ldr	r3, [pc, #108]	; (3198 <_servos_comp+0xa8>)
    312c:	1c11      	adds	r1, r2, #0
    312e:	68f8      	ldr	r0, [r7, #12]
    3130:	4798      	blx	r3
    3132:	1c03      	adds	r3, r0, #0
    3134:	60fb      	str	r3, [r7, #12]
    ang = acosf(ang);
    3136:	68fb      	ldr	r3, [r7, #12]
    3138:	1c18      	adds	r0, r3, #0
    313a:	4b18      	ldr	r3, [pc, #96]	; (319c <_servos_comp+0xac>)
    313c:	4798      	blx	r3
    313e:	1c03      	adds	r3, r0, #0
    3140:	60fb      	str	r3, [r7, #12]
    if (ang < 0.0) ang *= -1; // brute force absolute value
    3142:	4b17      	ldr	r3, [pc, #92]	; (31a0 <_servos_comp+0xb0>)
    3144:	2100      	movs	r1, #0
    3146:	68f8      	ldr	r0, [r7, #12]
    3148:	4798      	blx	r3
    314a:	1e03      	subs	r3, r0, #0
    314c:	d004      	beq.n	3158 <_servos_comp+0x68>
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	2280      	movs	r2, #128	; 0x80
    3152:	0612      	lsls	r2, r2, #24
    3154:	4053      	eors	r3, r2
    3156:	60fb      	str	r3, [r7, #12]

    // ang is 0 to pi -> convert to 0 to 255 (-90 to 90)
    return (255 * ang) / M_PI;
    3158:	4b12      	ldr	r3, [pc, #72]	; (31a4 <_servos_comp+0xb4>)
    315a:	4913      	ldr	r1, [pc, #76]	; (31a8 <_servos_comp+0xb8>)
    315c:	68f8      	ldr	r0, [r7, #12]
    315e:	4798      	blx	r3
    3160:	1c03      	adds	r3, r0, #0
    3162:	1c1a      	adds	r2, r3, #0
    3164:	4b11      	ldr	r3, [pc, #68]	; (31ac <_servos_comp+0xbc>)
    3166:	1c10      	adds	r0, r2, #0
    3168:	4798      	blx	r3
    316a:	4c11      	ldr	r4, [pc, #68]	; (31b0 <_servos_comp+0xc0>)
    316c:	4a11      	ldr	r2, [pc, #68]	; (31b4 <_servos_comp+0xc4>)
    316e:	4b12      	ldr	r3, [pc, #72]	; (31b8 <_servos_comp+0xc8>)
    3170:	47a0      	blx	r4
    3172:	0003      	movs	r3, r0
    3174:	000c      	movs	r4, r1
    3176:	0019      	movs	r1, r3
    3178:	0022      	movs	r2, r4
    317a:	4b10      	ldr	r3, [pc, #64]	; (31bc <_servos_comp+0xcc>)
    317c:	0008      	movs	r0, r1
    317e:	0011      	movs	r1, r2
    3180:	4798      	blx	r3
    3182:	0003      	movs	r3, r0
    3184:	b2db      	uxtb	r3, r3
}
    3186:	0018      	movs	r0, r3
    3188:	46bd      	mov	sp, r7
    318a:	b005      	add	sp, #20
    318c:	bd90      	pop	{r4, r7, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	000031c1 	.word	0x000031c1
    3194:	0000323d 	.word	0x0000323d
    3198:	00003f91 	.word	0x00003f91
    319c:	000035c1 	.word	0x000035c1
    31a0:	00003be1 	.word	0x00003be1
    31a4:	00004371 	.word	0x00004371
    31a8:	437f0000 	.word	0x437f0000
    31ac:	00005725 	.word	0x00005725
    31b0:	000049b9 	.word	0x000049b9
    31b4:	54442d18 	.word	0x54442d18
    31b8:	400921fb 	.word	0x400921fb
    31bc:	00003c31 	.word	0x00003c31

000031c0 <_servos_dot>:

float _servos_dot(joint_pos_t* joint1, joint_pos_t* joint2) {
    31c0:	b580      	push	{r7, lr}
    31c2:	b084      	sub	sp, #16
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
    31c8:	6039      	str	r1, [r7, #0]
    float dot = 0;
    31ca:	2300      	movs	r3, #0
    31cc:	60fb      	str	r3, [r7, #12]
    for (uint8_t x = 0; x < 3; x++) {
    31ce:	230b      	movs	r3, #11
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	2200      	movs	r2, #0
    31d4:	701a      	strb	r2, [r3, #0]
    31d6:	e023      	b.n	3220 <_servos_dot+0x60>
        dot += ((int8_t)(joint1->bytes[2*x+1])*(int8_t)(joint2->bytes[2*x+1]));
    31d8:	230b      	movs	r3, #11
    31da:	18fb      	adds	r3, r7, r3
    31dc:	781b      	ldrb	r3, [r3, #0]
    31de:	005b      	lsls	r3, r3, #1
    31e0:	3301      	adds	r3, #1
    31e2:	687a      	ldr	r2, [r7, #4]
    31e4:	5cd3      	ldrb	r3, [r2, r3]
    31e6:	b25b      	sxtb	r3, r3
    31e8:	0019      	movs	r1, r3
    31ea:	230b      	movs	r3, #11
    31ec:	18fb      	adds	r3, r7, r3
    31ee:	781b      	ldrb	r3, [r3, #0]
    31f0:	005b      	lsls	r3, r3, #1
    31f2:	3301      	adds	r3, #1
    31f4:	683a      	ldr	r2, [r7, #0]
    31f6:	5cd3      	ldrb	r3, [r2, r3]
    31f8:	b25b      	sxtb	r3, r3
    31fa:	434b      	muls	r3, r1
    31fc:	001a      	movs	r2, r3
    31fe:	4b0d      	ldr	r3, [pc, #52]	; (3234 <_servos_dot+0x74>)
    3200:	0010      	movs	r0, r2
    3202:	4798      	blx	r3
    3204:	1c02      	adds	r2, r0, #0
    3206:	4b0c      	ldr	r3, [pc, #48]	; (3238 <_servos_dot+0x78>)
    3208:	1c11      	adds	r1, r2, #0
    320a:	68f8      	ldr	r0, [r7, #12]
    320c:	4798      	blx	r3
    320e:	1c03      	adds	r3, r0, #0
    3210:	60fb      	str	r3, [r7, #12]
    for (uint8_t x = 0; x < 3; x++) {
    3212:	230b      	movs	r3, #11
    3214:	18fb      	adds	r3, r7, r3
    3216:	781a      	ldrb	r2, [r3, #0]
    3218:	230b      	movs	r3, #11
    321a:	18fb      	adds	r3, r7, r3
    321c:	3201      	adds	r2, #1
    321e:	701a      	strb	r2, [r3, #0]
    3220:	230b      	movs	r3, #11
    3222:	18fb      	adds	r3, r7, r3
    3224:	781b      	ldrb	r3, [r3, #0]
    3226:	2b02      	cmp	r3, #2
    3228:	d9d6      	bls.n	31d8 <_servos_dot+0x18>
    }
    return dot;
    322a:	68fb      	ldr	r3, [r7, #12]
}
    322c:	1c18      	adds	r0, r3, #0
    322e:	46bd      	mov	sp, r7
    3230:	b004      	add	sp, #16
    3232:	bd80      	pop	{r7, pc}
    3234:	00004919 	.word	0x00004919
    3238:	00003c6d 	.word	0x00003c6d

0000323c <_servos_mag>:

float _servos_mag(joint_pos_t* joint) {
    323c:	b580      	push	{r7, lr}
    323e:	b082      	sub	sp, #8
    3240:	af00      	add	r7, sp, #0
    3242:	6078      	str	r0, [r7, #4]
    return sqrtf(_servos_dot(joint, joint));
    3244:	687a      	ldr	r2, [r7, #4]
    3246:	687b      	ldr	r3, [r7, #4]
    3248:	0011      	movs	r1, r2
    324a:	0018      	movs	r0, r3
    324c:	4b05      	ldr	r3, [pc, #20]	; (3264 <_servos_mag+0x28>)
    324e:	4798      	blx	r3
    3250:	1c03      	adds	r3, r0, #0
    3252:	1c18      	adds	r0, r3, #0
    3254:	4b04      	ldr	r3, [pc, #16]	; (3268 <_servos_mag+0x2c>)
    3256:	4798      	blx	r3
    3258:	1c03      	adds	r3, r0, #0
}
    325a:	1c18      	adds	r0, r3, #0
    325c:	46bd      	mov	sp, r7
    325e:	b002      	add	sp, #8
    3260:	bd80      	pop	{r7, pc}
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	000031c1 	.word	0x000031c1
    3268:	00003669 	.word	0x00003669

0000326c <_servos_byte_callback>:
//     /  `  /\  |    |    |__)  /\  /  ` |__/ /__`
//     \__, /~~\ |___ |___ |__) /~~\ \__, |  \ .__/
//
//------------------------------------------------------------------------------

uint8_t _servos_byte_callback() {
    326c:	b580      	push	{r7, lr}
    326e:	b082      	sub	sp, #8
    3270:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    3272:	1dfb      	adds	r3, r7, #7
    3274:	2200      	movs	r2, #0
    3276:	701a      	strb	r2, [r3, #0]

    switch (_servos_mode) {
    3278:	4b13      	ldr	r3, [pc, #76]	; (32c8 <_servos_byte_callback+0x5c>)
    327a:	781b      	ldrb	r3, [r3, #0]
    327c:	b2db      	uxtb	r3, r3
    327e:	2b01      	cmp	r3, #1
    3280:	d00d      	beq.n	329e <_servos_byte_callback+0x32>
    3282:	2b02      	cmp	r3, #2
    3284:	d014      	beq.n	32b0 <_servos_byte_callback+0x44>
    3286:	2b00      	cmp	r3, #0
    3288:	d118      	bne.n	32bc <_servos_byte_callback+0x50>
        case SERVOS_REG: {
            _servos_mode = SERVOS_TX;
    328a:	4b0f      	ldr	r3, [pc, #60]	; (32c8 <_servos_byte_callback+0x5c>)
    328c:	2201      	movs	r2, #1
    328e:	701a      	strb	r2, [r3, #0]
            i2c_write(_servos_reg);
    3290:	4b0e      	ldr	r3, [pc, #56]	; (32cc <_servos_byte_callback+0x60>)
    3292:	781b      	ldrb	r3, [r3, #0]
    3294:	b2db      	uxtb	r3, r3
    3296:	0018      	movs	r0, r3
    3298:	4b0d      	ldr	r3, [pc, #52]	; (32d0 <_servos_byte_callback+0x64>)
    329a:	4798      	blx	r3
        } break;
    329c:	e00e      	b.n	32bc <_servos_byte_callback+0x50>

        case SERVOS_TX: {
            _servos_mode = SERVOS_STOP;
    329e:	4b0a      	ldr	r3, [pc, #40]	; (32c8 <_servos_byte_callback+0x5c>)
    32a0:	2202      	movs	r2, #2
    32a2:	701a      	strb	r2, [r3, #0]
            i2c_write(_servos_data);
    32a4:	4b0b      	ldr	r3, [pc, #44]	; (32d4 <_servos_byte_callback+0x68>)
    32a6:	781b      	ldrb	r3, [r3, #0]
    32a8:	0018      	movs	r0, r3
    32aa:	4b09      	ldr	r3, [pc, #36]	; (32d0 <_servos_byte_callback+0x64>)
    32ac:	4798      	blx	r3
        } break;
    32ae:	e005      	b.n	32bc <_servos_byte_callback+0x50>

        case SERVOS_STOP: {
            i2c_tx_stop();
    32b0:	4b09      	ldr	r3, [pc, #36]	; (32d8 <_servos_byte_callback+0x6c>)
    32b2:	4798      	blx	r3
            complete = 1;
    32b4:	1dfb      	adds	r3, r7, #7
    32b6:	2201      	movs	r2, #1
    32b8:	701a      	strb	r2, [r3, #0]
        } break;
    32ba:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
    32bc:	1dfb      	adds	r3, r7, #7
    32be:	781b      	ldrb	r3, [r3, #0]
}
    32c0:	0018      	movs	r0, r3
    32c2:	46bd      	mov	sp, r7
    32c4:	b002      	add	sp, #8
    32c6:	bd80      	pop	{r7, pc}
    32c8:	2000053d 	.word	0x2000053d
    32cc:	2000053c 	.word	0x2000053c
    32d0:	0000149d 	.word	0x0000149d
    32d4:	20000531 	.word	0x20000531
    32d8:	0000158d 	.word	0x0000158d

000032dc <_servos_regs_callback>:

uint8_t _servos_regs_callback() {
    32dc:	b580      	push	{r7, lr}
    32de:	b082      	sub	sp, #8
    32e0:	af00      	add	r7, sp, #0
    uint8_t complete = 0;
    32e2:	1dfb      	adds	r3, r7, #7
    32e4:	2200      	movs	r2, #0
    32e6:	701a      	strb	r2, [r3, #0]
    uint32_t data;

    switch (_servos_mode) {
    32e8:	4b39      	ldr	r3, [pc, #228]	; (33d0 <_servos_regs_callback+0xf4>)
    32ea:	781b      	ldrb	r3, [r3, #0]
    32ec:	b2db      	uxtb	r3, r3
    32ee:	2b01      	cmp	r3, #1
    32f0:	d010      	beq.n	3314 <_servos_regs_callback+0x38>
    32f2:	2b02      	cmp	r3, #2
    32f4:	d05c      	beq.n	33b0 <_servos_regs_callback+0xd4>
    32f6:	2b00      	cmp	r3, #0
    32f8:	d163      	bne.n	33c2 <_servos_regs_callback+0xe6>
        case SERVOS_REG: {
            _servos_mode = SERVOS_TX;
    32fa:	4b35      	ldr	r3, [pc, #212]	; (33d0 <_servos_regs_callback+0xf4>)
    32fc:	2201      	movs	r2, #1
    32fe:	701a      	strb	r2, [r3, #0]
            _servos_idx = 0;
    3300:	4b34      	ldr	r3, [pc, #208]	; (33d4 <_servos_regs_callback+0xf8>)
    3302:	2200      	movs	r2, #0
    3304:	701a      	strb	r2, [r3, #0]
            i2c_write(_servos_reg);
    3306:	4b34      	ldr	r3, [pc, #208]	; (33d8 <_servos_regs_callback+0xfc>)
    3308:	781b      	ldrb	r3, [r3, #0]
    330a:	b2db      	uxtb	r3, r3
    330c:	0018      	movs	r0, r3
    330e:	4b33      	ldr	r3, [pc, #204]	; (33dc <_servos_regs_callback+0x100>)
    3310:	4798      	blx	r3
        } break;
    3312:	e056      	b.n	33c2 <_servos_regs_callback+0xe6>

        case SERVOS_TX: {
            switch (_servos_reg++%4) {
    3314:	4b30      	ldr	r3, [pc, #192]	; (33d8 <_servos_regs_callback+0xfc>)
    3316:	781b      	ldrb	r3, [r3, #0]
    3318:	b2db      	uxtb	r3, r3
    331a:	1c5a      	adds	r2, r3, #1
    331c:	b2d1      	uxtb	r1, r2
    331e:	4a2e      	ldr	r2, [pc, #184]	; (33d8 <_servos_regs_callback+0xfc>)
    3320:	7011      	strb	r1, [r2, #0]
    3322:	001a      	movs	r2, r3
    3324:	2303      	movs	r3, #3
    3326:	4013      	ands	r3, r2
    3328:	2b01      	cmp	r3, #1
    332a:	d02d      	beq.n	3388 <_servos_regs_callback+0xac>
    332c:	dc02      	bgt.n	3334 <_servos_regs_callback+0x58>
    332e:	2b00      	cmp	r3, #0
    3330:	d00d      	beq.n	334e <_servos_regs_callback+0x72>
                    if (++_servos_idx >= 15) {
                        _servos_mode = SERVOS_STOP;
                    }
                } break;
            } // end switch
        } break;
    3332:	e046      	b.n	33c2 <_servos_regs_callback+0xe6>
            switch (_servos_reg++%4) {
    3334:	2b02      	cmp	r3, #2
    3336:	d002      	beq.n	333e <_servos_regs_callback+0x62>
    3338:	2b03      	cmp	r3, #3
    333a:	d004      	beq.n	3346 <_servos_regs_callback+0x6a>
        } break;
    333c:	e041      	b.n	33c2 <_servos_regs_callback+0xe6>
                    i2c_write(0);
    333e:	2000      	movs	r0, #0
    3340:	4b26      	ldr	r3, [pc, #152]	; (33dc <_servos_regs_callback+0x100>)
    3342:	4798      	blx	r3
                } break;
    3344:	e033      	b.n	33ae <_servos_regs_callback+0xd2>
                    i2c_write(0);
    3346:	2000      	movs	r0, #0
    3348:	4b24      	ldr	r3, [pc, #144]	; (33dc <_servos_regs_callback+0x100>)
    334a:	4798      	blx	r3
                } break;
    334c:	e02f      	b.n	33ae <_servos_regs_callback+0xd2>
                    data = _servos_list[_servos_idx];
    334e:	4b24      	ldr	r3, [pc, #144]	; (33e0 <_servos_regs_callback+0x104>)
    3350:	681b      	ldr	r3, [r3, #0]
    3352:	4a20      	ldr	r2, [pc, #128]	; (33d4 <_servos_regs_callback+0xf8>)
    3354:	7812      	ldrb	r2, [r2, #0]
    3356:	189b      	adds	r3, r3, r2
    3358:	781b      	ldrb	r3, [r3, #0]
    335a:	603b      	str	r3, [r7, #0]
                    data = (data * 4) / 5; // convert 255 -> 204
    335c:	683b      	ldr	r3, [r7, #0]
    335e:	009a      	lsls	r2, r3, #2
    3360:	4b20      	ldr	r3, [pc, #128]	; (33e4 <_servos_regs_callback+0x108>)
    3362:	2105      	movs	r1, #5
    3364:	0010      	movs	r0, r2
    3366:	4798      	blx	r3
    3368:	0003      	movs	r3, r0
    336a:	603b      	str	r3, [r7, #0]
                    _servos_data = (data + 205) >> 8; // next reg
    336c:	683b      	ldr	r3, [r7, #0]
    336e:	33cd      	adds	r3, #205	; 0xcd
    3370:	0a1b      	lsrs	r3, r3, #8
    3372:	b2da      	uxtb	r2, r3
    3374:	4b1c      	ldr	r3, [pc, #112]	; (33e8 <_servos_regs_callback+0x10c>)
    3376:	701a      	strb	r2, [r3, #0]
                    i2c_write(data+205);
    3378:	683b      	ldr	r3, [r7, #0]
    337a:	b2db      	uxtb	r3, r3
    337c:	3b33      	subs	r3, #51	; 0x33
    337e:	b2db      	uxtb	r3, r3
    3380:	0018      	movs	r0, r3
    3382:	4b16      	ldr	r3, [pc, #88]	; (33dc <_servos_regs_callback+0x100>)
    3384:	4798      	blx	r3
                } break;
    3386:	e012      	b.n	33ae <_servos_regs_callback+0xd2>
                    i2c_write(_servos_data);
    3388:	4b17      	ldr	r3, [pc, #92]	; (33e8 <_servos_regs_callback+0x10c>)
    338a:	781b      	ldrb	r3, [r3, #0]
    338c:	0018      	movs	r0, r3
    338e:	4b13      	ldr	r3, [pc, #76]	; (33dc <_servos_regs_callback+0x100>)
    3390:	4798      	blx	r3
                    if (++_servos_idx >= 15) {
    3392:	4b10      	ldr	r3, [pc, #64]	; (33d4 <_servos_regs_callback+0xf8>)
    3394:	781b      	ldrb	r3, [r3, #0]
    3396:	3301      	adds	r3, #1
    3398:	b2da      	uxtb	r2, r3
    339a:	4b0e      	ldr	r3, [pc, #56]	; (33d4 <_servos_regs_callback+0xf8>)
    339c:	701a      	strb	r2, [r3, #0]
    339e:	4b0d      	ldr	r3, [pc, #52]	; (33d4 <_servos_regs_callback+0xf8>)
    33a0:	781b      	ldrb	r3, [r3, #0]
    33a2:	2b0e      	cmp	r3, #14
    33a4:	d902      	bls.n	33ac <_servos_regs_callback+0xd0>
                        _servos_mode = SERVOS_STOP;
    33a6:	4b0a      	ldr	r3, [pc, #40]	; (33d0 <_servos_regs_callback+0xf4>)
    33a8:	2202      	movs	r2, #2
    33aa:	701a      	strb	r2, [r3, #0]
                } break;
    33ac:	46c0      	nop			; (mov r8, r8)
        } break;
    33ae:	e008      	b.n	33c2 <_servos_regs_callback+0xe6>

        case SERVOS_STOP: {
            _servos_mode = SERVOS_DONE;
    33b0:	4b07      	ldr	r3, [pc, #28]	; (33d0 <_servos_regs_callback+0xf4>)
    33b2:	2203      	movs	r2, #3
    33b4:	701a      	strb	r2, [r3, #0]
            i2c_tx_stop();
    33b6:	4b0d      	ldr	r3, [pc, #52]	; (33ec <_servos_regs_callback+0x110>)
    33b8:	4798      	blx	r3
            complete = 1;
    33ba:	1dfb      	adds	r3, r7, #7
    33bc:	2201      	movs	r2, #1
    33be:	701a      	strb	r2, [r3, #0]
        } break;
    33c0:	46c0      	nop			; (mov r8, r8)
    } // end switch

    return complete;
    33c2:	1dfb      	adds	r3, r7, #7
    33c4:	781b      	ldrb	r3, [r3, #0]
}
    33c6:	0018      	movs	r0, r3
    33c8:	46bd      	mov	sp, r7
    33ca:	b002      	add	sp, #8
    33cc:	bd80      	pop	{r7, pc}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	2000053d 	.word	0x2000053d
    33d4:	20000528 	.word	0x20000528
    33d8:	2000053c 	.word	0x2000053c
    33dc:	0000149d 	.word	0x0000149d
    33e0:	20000534 	.word	0x20000534
    33e4:	00003aa5 	.word	0x00003aa5
    33e8:	20000531 	.word	0x20000531
    33ec:	0000158d 	.word	0x0000158d

000033f0 <NVIC_SetPriority>:
{
    33f0:	b5b0      	push	{r4, r5, r7, lr}
    33f2:	b082      	sub	sp, #8
    33f4:	af00      	add	r7, sp, #0
    33f6:	0002      	movs	r2, r0
    33f8:	6039      	str	r1, [r7, #0]
    33fa:	1dfb      	adds	r3, r7, #7
    33fc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
    33fe:	1dfb      	adds	r3, r7, #7
    3400:	781b      	ldrb	r3, [r3, #0]
    3402:	2b7f      	cmp	r3, #127	; 0x7f
    3404:	d932      	bls.n	346c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    3406:	4c2f      	ldr	r4, [pc, #188]	; (34c4 <NVIC_SetPriority+0xd4>)
    3408:	1dfb      	adds	r3, r7, #7
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	001a      	movs	r2, r3
    340e:	230f      	movs	r3, #15
    3410:	4013      	ands	r3, r2
    3412:	3b08      	subs	r3, #8
    3414:	0899      	lsrs	r1, r3, #2
    3416:	4a2b      	ldr	r2, [pc, #172]	; (34c4 <NVIC_SetPriority+0xd4>)
    3418:	1dfb      	adds	r3, r7, #7
    341a:	781b      	ldrb	r3, [r3, #0]
    341c:	0018      	movs	r0, r3
    341e:	230f      	movs	r3, #15
    3420:	4003      	ands	r3, r0
    3422:	3b08      	subs	r3, #8
    3424:	089b      	lsrs	r3, r3, #2
    3426:	3306      	adds	r3, #6
    3428:	009b      	lsls	r3, r3, #2
    342a:	18d3      	adds	r3, r2, r3
    342c:	3304      	adds	r3, #4
    342e:	681b      	ldr	r3, [r3, #0]
    3430:	1dfa      	adds	r2, r7, #7
    3432:	7812      	ldrb	r2, [r2, #0]
    3434:	0010      	movs	r0, r2
    3436:	2203      	movs	r2, #3
    3438:	4002      	ands	r2, r0
    343a:	00d2      	lsls	r2, r2, #3
    343c:	20ff      	movs	r0, #255	; 0xff
    343e:	4090      	lsls	r0, r2
    3440:	0002      	movs	r2, r0
    3442:	43d2      	mvns	r2, r2
    3444:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    3446:	683b      	ldr	r3, [r7, #0]
    3448:	019b      	lsls	r3, r3, #6
    344a:	20ff      	movs	r0, #255	; 0xff
    344c:	4018      	ands	r0, r3
    344e:	1dfb      	adds	r3, r7, #7
    3450:	781b      	ldrb	r3, [r3, #0]
    3452:	001d      	movs	r5, r3
    3454:	2303      	movs	r3, #3
    3456:	402b      	ands	r3, r5
    3458:	00db      	lsls	r3, r3, #3
    345a:	4098      	lsls	r0, r3
    345c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    345e:	431a      	orrs	r2, r3
    3460:	1d8b      	adds	r3, r1, #6
    3462:	009b      	lsls	r3, r3, #2
    3464:	18e3      	adds	r3, r4, r3
    3466:	3304      	adds	r3, #4
    3468:	601a      	str	r2, [r3, #0]
}
    346a:	e027      	b.n	34bc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    346c:	4c16      	ldr	r4, [pc, #88]	; (34c8 <NVIC_SetPriority+0xd8>)
    346e:	1dfb      	adds	r3, r7, #7
    3470:	781b      	ldrb	r3, [r3, #0]
    3472:	b25b      	sxtb	r3, r3
    3474:	089b      	lsrs	r3, r3, #2
    3476:	4914      	ldr	r1, [pc, #80]	; (34c8 <NVIC_SetPriority+0xd8>)
    3478:	1dfa      	adds	r2, r7, #7
    347a:	7812      	ldrb	r2, [r2, #0]
    347c:	b252      	sxtb	r2, r2
    347e:	0892      	lsrs	r2, r2, #2
    3480:	32c0      	adds	r2, #192	; 0xc0
    3482:	0092      	lsls	r2, r2, #2
    3484:	5852      	ldr	r2, [r2, r1]
    3486:	1df9      	adds	r1, r7, #7
    3488:	7809      	ldrb	r1, [r1, #0]
    348a:	0008      	movs	r0, r1
    348c:	2103      	movs	r1, #3
    348e:	4001      	ands	r1, r0
    3490:	00c9      	lsls	r1, r1, #3
    3492:	20ff      	movs	r0, #255	; 0xff
    3494:	4088      	lsls	r0, r1
    3496:	0001      	movs	r1, r0
    3498:	43c9      	mvns	r1, r1
    349a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
    349c:	683a      	ldr	r2, [r7, #0]
    349e:	0192      	lsls	r2, r2, #6
    34a0:	20ff      	movs	r0, #255	; 0xff
    34a2:	4010      	ands	r0, r2
    34a4:	1dfa      	adds	r2, r7, #7
    34a6:	7812      	ldrb	r2, [r2, #0]
    34a8:	0015      	movs	r5, r2
    34aa:	2203      	movs	r2, #3
    34ac:	402a      	ands	r2, r5
    34ae:	00d2      	lsls	r2, r2, #3
    34b0:	4090      	lsls	r0, r2
    34b2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    34b4:	430a      	orrs	r2, r1
    34b6:	33c0      	adds	r3, #192	; 0xc0
    34b8:	009b      	lsls	r3, r3, #2
    34ba:	511a      	str	r2, [r3, r4]
}
    34bc:	46c0      	nop			; (mov r8, r8)
    34be:	46bd      	mov	sp, r7
    34c0:	b002      	add	sp, #8
    34c2:	bdb0      	pop	{r4, r5, r7, pc}
    34c4:	e000ed00 	.word	0xe000ed00
    34c8:	e000e100 	.word	0xe000e100

000034cc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    34cc:	b580      	push	{r7, lr}
    34ce:	b082      	sub	sp, #8
    34d0:	af00      	add	r7, sp, #0
    34d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    34d4:	687b      	ldr	r3, [r7, #4]
    34d6:	3b01      	subs	r3, #1
    34d8:	4a0c      	ldr	r2, [pc, #48]	; (350c <SysTick_Config+0x40>)
    34da:	4293      	cmp	r3, r2
    34dc:	d901      	bls.n	34e2 <SysTick_Config+0x16>
    34de:	2301      	movs	r3, #1
    34e0:	e010      	b.n	3504 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    34e2:	4b0b      	ldr	r3, [pc, #44]	; (3510 <SysTick_Config+0x44>)
    34e4:	687a      	ldr	r2, [r7, #4]
    34e6:	3a01      	subs	r2, #1
    34e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
    34ea:	2301      	movs	r3, #1
    34ec:	425b      	negs	r3, r3
    34ee:	2103      	movs	r1, #3
    34f0:	0018      	movs	r0, r3
    34f2:	4b08      	ldr	r3, [pc, #32]	; (3514 <SysTick_Config+0x48>)
    34f4:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    34f6:	4b06      	ldr	r3, [pc, #24]	; (3510 <SysTick_Config+0x44>)
    34f8:	2200      	movs	r2, #0
    34fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    34fc:	4b04      	ldr	r3, [pc, #16]	; (3510 <SysTick_Config+0x44>)
    34fe:	2207      	movs	r2, #7
    3500:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
    3502:	2300      	movs	r3, #0
}
    3504:	0018      	movs	r0, r3
    3506:	46bd      	mov	sp, r7
    3508:	b002      	add	sp, #8
    350a:	bd80      	pop	{r7, pc}
    350c:	00ffffff 	.word	0x00ffffff
    3510:	e000e010 	.word	0xe000e010
    3514:	000033f1 	.word	0x000033f1

00003518 <timer_init>:
//
//------------------------------------------------------------------------------

//==============================================================================
void timer_init()
{
    3518:	b5b0      	push	{r4, r5, r7, lr}
    351a:	af00      	add	r7, sp, #0
    SysTick_Config(48000);
    351c:	4b05      	ldr	r3, [pc, #20]	; (3534 <timer_init+0x1c>)
    351e:	0018      	movs	r0, r3
    3520:	4b05      	ldr	r3, [pc, #20]	; (3538 <timer_init+0x20>)
    3522:	4798      	blx	r3
    millis = 0;
    3524:	4a05      	ldr	r2, [pc, #20]	; (353c <timer_init+0x24>)
    3526:	2300      	movs	r3, #0
    3528:	2400      	movs	r4, #0
    352a:	6013      	str	r3, [r2, #0]
    352c:	6054      	str	r4, [r2, #4]
}
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	46bd      	mov	sp, r7
    3532:	bdb0      	pop	{r4, r5, r7, pc}
    3534:	0000bb80 	.word	0x0000bb80
    3538:	000034cd 	.word	0x000034cd
    353c:	20000540 	.word	0x20000540

00003540 <timer_get>:

//==============================================================================
uint64_t timer_get()
{
    3540:	b590      	push	{r4, r7, lr}
    3542:	af00      	add	r7, sp, #0
    return millis;
    3544:	4b03      	ldr	r3, [pc, #12]	; (3554 <timer_get+0x14>)
    3546:	685c      	ldr	r4, [r3, #4]
    3548:	681b      	ldr	r3, [r3, #0]
}
    354a:	0018      	movs	r0, r3
    354c:	0021      	movs	r1, r4
    354e:	46bd      	mov	sp, r7
    3550:	bd90      	pop	{r4, r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	20000540 	.word	0x20000540

00003558 <timer_delay>:

//==============================================================================
void timer_delay(uint32_t delay)
{
    3558:	b5f0      	push	{r4, r5, r6, r7, lr}
    355a:	b085      	sub	sp, #20
    355c:	af00      	add	r7, sp, #0
    355e:	6078      	str	r0, [r7, #4]
    uint64_t start = millis;
    3560:	4b0d      	ldr	r3, [pc, #52]	; (3598 <timer_delay+0x40>)
    3562:	685c      	ldr	r4, [r3, #4]
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	60bb      	str	r3, [r7, #8]
    3568:	60fc      	str	r4, [r7, #12]
    while (millis - start < delay);
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	4b0a      	ldr	r3, [pc, #40]	; (3598 <timer_delay+0x40>)
    356e:	681d      	ldr	r5, [r3, #0]
    3570:	685e      	ldr	r6, [r3, #4]
    3572:	68bb      	ldr	r3, [r7, #8]
    3574:	68fc      	ldr	r4, [r7, #12]
    3576:	1aed      	subs	r5, r5, r3
    3578:	41a6      	sbcs	r6, r4
    357a:	002b      	movs	r3, r5
    357c:	0034      	movs	r4, r6
    357e:	6878      	ldr	r0, [r7, #4]
    3580:	0001      	movs	r1, r0
    3582:	2000      	movs	r0, #0
    3584:	0002      	movs	r2, r0
    3586:	42a2      	cmp	r2, r4
    3588:	d8f0      	bhi.n	356c <timer_delay+0x14>
    358a:	d101      	bne.n	3590 <timer_delay+0x38>
    358c:	4299      	cmp	r1, r3
    358e:	d8ed      	bhi.n	356c <timer_delay+0x14>
}
    3590:	46c0      	nop			; (mov r8, r8)
    3592:	46bd      	mov	sp, r7
    3594:	b005      	add	sp, #20
    3596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3598:	20000540 	.word	0x20000540

0000359c <SysTick_Handler>:
//
//------------------------------------------------------------------------------

//==============================================================================
void SysTick_Handler()
{
    359c:	b590      	push	{r4, r7, lr}
    359e:	af00      	add	r7, sp, #0
    millis++;
    35a0:	4b06      	ldr	r3, [pc, #24]	; (35bc <SysTick_Handler+0x20>)
    35a2:	685c      	ldr	r4, [r3, #4]
    35a4:	681b      	ldr	r3, [r3, #0]
    35a6:	2101      	movs	r1, #1
    35a8:	2200      	movs	r2, #0
    35aa:	185b      	adds	r3, r3, r1
    35ac:	4154      	adcs	r4, r2
    35ae:	4a03      	ldr	r2, [pc, #12]	; (35bc <SysTick_Handler+0x20>)
    35b0:	6013      	str	r3, [r2, #0]
    35b2:	6054      	str	r4, [r2, #4]
}
    35b4:	46c0      	nop			; (mov r8, r8)
    35b6:	46bd      	mov	sp, r7
    35b8:	bd90      	pop	{r4, r7, pc}
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	20000540 	.word	0x20000540

000035c0 <acosf>:
    35c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35c2:	b08d      	sub	sp, #52	; 0x34
    35c4:	1c04      	adds	r4, r0, #0
    35c6:	f000 f8a1 	bl	370c <__ieee754_acosf>
    35ca:	2300      	movs	r3, #0
    35cc:	4e23      	ldr	r6, [pc, #140]	; (365c <acosf+0x9c>)
    35ce:	1c05      	adds	r5, r0, #0
    35d0:	56f3      	ldrsb	r3, [r6, r3]
    35d2:	3301      	adds	r3, #1
    35d4:	d031      	beq.n	363a <acosf+0x7a>
    35d6:	1c21      	adds	r1, r4, #0
    35d8:	1c20      	adds	r0, r4, #0
    35da:	f001 f985 	bl	48e8 <__aeabi_fcmpun>
    35de:	1e07      	subs	r7, r0, #0
    35e0:	d12b      	bne.n	363a <acosf+0x7a>
    35e2:	1c20      	adds	r0, r4, #0
    35e4:	f000 fa5a 	bl	3a9c <fabsf>
    35e8:	21fe      	movs	r1, #254	; 0xfe
    35ea:	0589      	lsls	r1, r1, #22
    35ec:	f000 fb0c 	bl	3c08 <__aeabi_fcmpgt>
    35f0:	2800      	cmp	r0, #0
    35f2:	d022      	beq.n	363a <acosf+0x7a>
    35f4:	2301      	movs	r3, #1
    35f6:	9302      	str	r3, [sp, #8]
    35f8:	4b19      	ldr	r3, [pc, #100]	; (3660 <acosf+0xa0>)
    35fa:	1c20      	adds	r0, r4, #0
    35fc:	9303      	str	r3, [sp, #12]
    35fe:	970a      	str	r7, [sp, #40]	; 0x28
    3600:	f002 f890 	bl	5724 <__aeabi_f2d>
    3604:	9006      	str	r0, [sp, #24]
    3606:	9107      	str	r1, [sp, #28]
    3608:	9004      	str	r0, [sp, #16]
    360a:	9105      	str	r1, [sp, #20]
    360c:	4815      	ldr	r0, [pc, #84]	; (3664 <acosf+0xa4>)
    360e:	f000 fa3f 	bl	3a90 <nan>
    3612:	2300      	movs	r3, #0
    3614:	56f3      	ldrsb	r3, [r6, r3]
    3616:	9008      	str	r0, [sp, #32]
    3618:	9109      	str	r1, [sp, #36]	; 0x24
    361a:	2b02      	cmp	r3, #2
    361c:	d010      	beq.n	3640 <acosf+0x80>
    361e:	a802      	add	r0, sp, #8
    3620:	f000 fa34 	bl	3a8c <matherr>
    3624:	2800      	cmp	r0, #0
    3626:	d00b      	beq.n	3640 <acosf+0x80>
    3628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    362a:	9301      	str	r3, [sp, #4]
    362c:	2b00      	cmp	r3, #0
    362e:	d10f      	bne.n	3650 <acosf+0x90>
    3630:	9808      	ldr	r0, [sp, #32]
    3632:	9909      	ldr	r1, [sp, #36]	; 0x24
    3634:	f002 f8c8 	bl	57c8 <__aeabi_d2f>
    3638:	1c05      	adds	r5, r0, #0
    363a:	1c28      	adds	r0, r5, #0
    363c:	b00d      	add	sp, #52	; 0x34
    363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3640:	f002 faa8 	bl	5b94 <__errno>
    3644:	2321      	movs	r3, #33	; 0x21
    3646:	6003      	str	r3, [r0, #0]
    3648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    364a:	9301      	str	r3, [sp, #4]
    364c:	2b00      	cmp	r3, #0
    364e:	d0ef      	beq.n	3630 <acosf+0x70>
    3650:	f002 faa0 	bl	5b94 <__errno>
    3654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3656:	9301      	str	r3, [sp, #4]
    3658:	6003      	str	r3, [r0, #0]
    365a:	e7e9      	b.n	3630 <acosf+0x70>
    365c:	20000008 	.word	0x20000008
    3660:	00005ecc 	.word	0x00005ecc
    3664:	00005ed4 	.word	0x00005ed4

00003668 <sqrtf>:
    3668:	b5f0      	push	{r4, r5, r6, r7, lr}
    366a:	2500      	movs	r5, #0
    366c:	b08d      	sub	sp, #52	; 0x34
    366e:	1c04      	adds	r4, r0, #0
    3670:	f000 f9b0 	bl	39d4 <__ieee754_sqrtf>
    3674:	4b23      	ldr	r3, [pc, #140]	; (3704 <sqrtf+0x9c>)
    3676:	1c06      	adds	r6, r0, #0
    3678:	575d      	ldrsb	r5, [r3, r5]
    367a:	1c6b      	adds	r3, r5, #1
    367c:	d00b      	beq.n	3696 <sqrtf+0x2e>
    367e:	1c21      	adds	r1, r4, #0
    3680:	1c20      	adds	r0, r4, #0
    3682:	f001 f931 	bl	48e8 <__aeabi_fcmpun>
    3686:	1e07      	subs	r7, r0, #0
    3688:	d105      	bne.n	3696 <sqrtf+0x2e>
    368a:	2100      	movs	r1, #0
    368c:	1c20      	adds	r0, r4, #0
    368e:	f000 faa7 	bl	3be0 <__aeabi_fcmplt>
    3692:	2800      	cmp	r0, #0
    3694:	d102      	bne.n	369c <sqrtf+0x34>
    3696:	1c30      	adds	r0, r6, #0
    3698:	b00d      	add	sp, #52	; 0x34
    369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    369c:	2301      	movs	r3, #1
    369e:	9302      	str	r3, [sp, #8]
    36a0:	4b19      	ldr	r3, [pc, #100]	; (3708 <sqrtf+0xa0>)
    36a2:	1c20      	adds	r0, r4, #0
    36a4:	9303      	str	r3, [sp, #12]
    36a6:	970a      	str	r7, [sp, #40]	; 0x28
    36a8:	f002 f83c 	bl	5724 <__aeabi_f2d>
    36ac:	2200      	movs	r2, #0
    36ae:	9006      	str	r0, [sp, #24]
    36b0:	9107      	str	r1, [sp, #28]
    36b2:	9004      	str	r0, [sp, #16]
    36b4:	9105      	str	r1, [sp, #20]
    36b6:	2300      	movs	r3, #0
    36b8:	2d00      	cmp	r5, #0
    36ba:	d015      	beq.n	36e8 <sqrtf+0x80>
    36bc:	0010      	movs	r0, r2
    36be:	0019      	movs	r1, r3
    36c0:	f001 f97a 	bl	49b8 <__aeabi_ddiv>
    36c4:	9008      	str	r0, [sp, #32]
    36c6:	9109      	str	r1, [sp, #36]	; 0x24
    36c8:	2d02      	cmp	r5, #2
    36ca:	d10f      	bne.n	36ec <sqrtf+0x84>
    36cc:	f002 fa62 	bl	5b94 <__errno>
    36d0:	2321      	movs	r3, #33	; 0x21
    36d2:	6003      	str	r3, [r0, #0]
    36d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    36d6:	9301      	str	r3, [sp, #4]
    36d8:	2b00      	cmp	r3, #0
    36da:	d10d      	bne.n	36f8 <sqrtf+0x90>
    36dc:	9808      	ldr	r0, [sp, #32]
    36de:	9909      	ldr	r1, [sp, #36]	; 0x24
    36e0:	f002 f872 	bl	57c8 <__aeabi_d2f>
    36e4:	1c06      	adds	r6, r0, #0
    36e6:	e7d6      	b.n	3696 <sqrtf+0x2e>
    36e8:	9208      	str	r2, [sp, #32]
    36ea:	9309      	str	r3, [sp, #36]	; 0x24
    36ec:	a802      	add	r0, sp, #8
    36ee:	f000 f9cd 	bl	3a8c <matherr>
    36f2:	2800      	cmp	r0, #0
    36f4:	d1ee      	bne.n	36d4 <sqrtf+0x6c>
    36f6:	e7e9      	b.n	36cc <sqrtf+0x64>
    36f8:	f002 fa4c 	bl	5b94 <__errno>
    36fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    36fe:	9301      	str	r3, [sp, #4]
    3700:	6003      	str	r3, [r0, #0]
    3702:	e7eb      	b.n	36dc <sqrtf+0x74>
    3704:	20000008 	.word	0x20000008
    3708:	00005ed8 	.word	0x00005ed8

0000370c <__ieee754_acosf>:
    370c:	22fe      	movs	r2, #254	; 0xfe
    370e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3710:	0043      	lsls	r3, r0, #1
    3712:	1c04      	adds	r4, r0, #0
    3714:	085b      	lsrs	r3, r3, #1
    3716:	0592      	lsls	r2, r2, #22
    3718:	4293      	cmp	r3, r2
    371a:	d011      	beq.n	3740 <__ieee754_acosf+0x34>
    371c:	dc09      	bgt.n	3732 <__ieee754_acosf+0x26>
    371e:	4a9d      	ldr	r2, [pc, #628]	; (3994 <__ieee754_acosf+0x288>)
    3720:	4293      	cmp	r3, r2
    3722:	dc12      	bgt.n	374a <__ieee754_acosf+0x3e>
    3724:	228c      	movs	r2, #140	; 0x8c
    3726:	0592      	lsls	r2, r2, #22
    3728:	4293      	cmp	r3, r2
    372a:	dd00      	ble.n	372e <__ieee754_acosf+0x22>
    372c:	e080      	b.n	3830 <__ieee754_acosf+0x124>
    372e:	489a      	ldr	r0, [pc, #616]	; (3998 <__ieee754_acosf+0x28c>)
    3730:	e005      	b.n	373e <__ieee754_acosf+0x32>
    3732:	1c01      	adds	r1, r0, #0
    3734:	f000 ff3c 	bl	45b0 <__aeabi_fsub>
    3738:	1c01      	adds	r1, r0, #0
    373a:	f000 fc29 	bl	3f90 <__aeabi_fdiv>
    373e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3740:	2000      	movs	r0, #0
    3742:	2c00      	cmp	r4, #0
    3744:	dcfb      	bgt.n	373e <__ieee754_acosf+0x32>
    3746:	4895      	ldr	r0, [pc, #596]	; (399c <__ieee754_acosf+0x290>)
    3748:	e7f9      	b.n	373e <__ieee754_acosf+0x32>
    374a:	2800      	cmp	r0, #0
    374c:	da00      	bge.n	3750 <__ieee754_acosf+0x44>
    374e:	e0c3      	b.n	38d8 <__ieee754_acosf+0x1cc>
    3750:	1c01      	adds	r1, r0, #0
    3752:	20fe      	movs	r0, #254	; 0xfe
    3754:	0580      	lsls	r0, r0, #22
    3756:	f000 ff2b 	bl	45b0 <__aeabi_fsub>
    375a:	21fc      	movs	r1, #252	; 0xfc
    375c:	0589      	lsls	r1, r1, #22
    375e:	f000 fe07 	bl	4370 <__aeabi_fmul>
    3762:	1c04      	adds	r4, r0, #0
    3764:	f000 f936 	bl	39d4 <__ieee754_sqrtf>
    3768:	498d      	ldr	r1, [pc, #564]	; (39a0 <__ieee754_acosf+0x294>)
    376a:	1c06      	adds	r6, r0, #0
    376c:	0b05      	lsrs	r5, r0, #12
    376e:	1c20      	adds	r0, r4, #0
    3770:	f000 fdfe 	bl	4370 <__aeabi_fmul>
    3774:	498b      	ldr	r1, [pc, #556]	; (39a4 <__ieee754_acosf+0x298>)
    3776:	f000 fa79 	bl	3c6c <__aeabi_fadd>
    377a:	1c21      	adds	r1, r4, #0
    377c:	f000 fdf8 	bl	4370 <__aeabi_fmul>
    3780:	4989      	ldr	r1, [pc, #548]	; (39a8 <__ieee754_acosf+0x29c>)
    3782:	f000 ff15 	bl	45b0 <__aeabi_fsub>
    3786:	1c21      	adds	r1, r4, #0
    3788:	f000 fdf2 	bl	4370 <__aeabi_fmul>
    378c:	4987      	ldr	r1, [pc, #540]	; (39ac <__ieee754_acosf+0x2a0>)
    378e:	f000 fa6d 	bl	3c6c <__aeabi_fadd>
    3792:	1c21      	adds	r1, r4, #0
    3794:	f000 fdec 	bl	4370 <__aeabi_fmul>
    3798:	4985      	ldr	r1, [pc, #532]	; (39b0 <__ieee754_acosf+0x2a4>)
    379a:	f000 ff09 	bl	45b0 <__aeabi_fsub>
    379e:	1c21      	adds	r1, r4, #0
    37a0:	f000 fde6 	bl	4370 <__aeabi_fmul>
    37a4:	4983      	ldr	r1, [pc, #524]	; (39b4 <__ieee754_acosf+0x2a8>)
    37a6:	f000 fa61 	bl	3c6c <__aeabi_fadd>
    37aa:	1c21      	adds	r1, r4, #0
    37ac:	f000 fde0 	bl	4370 <__aeabi_fmul>
    37b0:	4981      	ldr	r1, [pc, #516]	; (39b8 <__ieee754_acosf+0x2ac>)
    37b2:	1c07      	adds	r7, r0, #0
    37b4:	1c20      	adds	r0, r4, #0
    37b6:	f000 fddb 	bl	4370 <__aeabi_fmul>
    37ba:	4980      	ldr	r1, [pc, #512]	; (39bc <__ieee754_acosf+0x2b0>)
    37bc:	f000 fef8 	bl	45b0 <__aeabi_fsub>
    37c0:	1c21      	adds	r1, r4, #0
    37c2:	f000 fdd5 	bl	4370 <__aeabi_fmul>
    37c6:	497e      	ldr	r1, [pc, #504]	; (39c0 <__ieee754_acosf+0x2b4>)
    37c8:	f000 fa50 	bl	3c6c <__aeabi_fadd>
    37cc:	1c21      	adds	r1, r4, #0
    37ce:	f000 fdcf 	bl	4370 <__aeabi_fmul>
    37d2:	497c      	ldr	r1, [pc, #496]	; (39c4 <__ieee754_acosf+0x2b8>)
    37d4:	f000 feec 	bl	45b0 <__aeabi_fsub>
    37d8:	1c21      	adds	r1, r4, #0
    37da:	f000 fdc9 	bl	4370 <__aeabi_fmul>
    37de:	21fe      	movs	r1, #254	; 0xfe
    37e0:	0589      	lsls	r1, r1, #22
    37e2:	f000 fa43 	bl	3c6c <__aeabi_fadd>
    37e6:	1c01      	adds	r1, r0, #0
    37e8:	1c38      	adds	r0, r7, #0
    37ea:	f000 fbd1 	bl	3f90 <__aeabi_fdiv>
    37ee:	1c31      	adds	r1, r6, #0
    37f0:	f000 fdbe 	bl	4370 <__aeabi_fmul>
    37f4:	032d      	lsls	r5, r5, #12
    37f6:	1c07      	adds	r7, r0, #0
    37f8:	1c29      	adds	r1, r5, #0
    37fa:	1c28      	adds	r0, r5, #0
    37fc:	f000 fdb8 	bl	4370 <__aeabi_fmul>
    3800:	1c01      	adds	r1, r0, #0
    3802:	1c20      	adds	r0, r4, #0
    3804:	f000 fed4 	bl	45b0 <__aeabi_fsub>
    3808:	1c31      	adds	r1, r6, #0
    380a:	1c04      	adds	r4, r0, #0
    380c:	1c28      	adds	r0, r5, #0
    380e:	f000 fa2d 	bl	3c6c <__aeabi_fadd>
    3812:	1c01      	adds	r1, r0, #0
    3814:	1c20      	adds	r0, r4, #0
    3816:	f000 fbbb 	bl	3f90 <__aeabi_fdiv>
    381a:	1c01      	adds	r1, r0, #0
    381c:	1c38      	adds	r0, r7, #0
    381e:	f000 fa25 	bl	3c6c <__aeabi_fadd>
    3822:	1c29      	adds	r1, r5, #0
    3824:	f000 fa22 	bl	3c6c <__aeabi_fadd>
    3828:	1c01      	adds	r1, r0, #0
    382a:	f000 fa1f 	bl	3c6c <__aeabi_fadd>
    382e:	e786      	b.n	373e <__ieee754_acosf+0x32>
    3830:	1c01      	adds	r1, r0, #0
    3832:	f000 fd9d 	bl	4370 <__aeabi_fmul>
    3836:	495a      	ldr	r1, [pc, #360]	; (39a0 <__ieee754_acosf+0x294>)
    3838:	1c05      	adds	r5, r0, #0
    383a:	f000 fd99 	bl	4370 <__aeabi_fmul>
    383e:	4959      	ldr	r1, [pc, #356]	; (39a4 <__ieee754_acosf+0x298>)
    3840:	f000 fa14 	bl	3c6c <__aeabi_fadd>
    3844:	1c29      	adds	r1, r5, #0
    3846:	f000 fd93 	bl	4370 <__aeabi_fmul>
    384a:	4957      	ldr	r1, [pc, #348]	; (39a8 <__ieee754_acosf+0x29c>)
    384c:	f000 feb0 	bl	45b0 <__aeabi_fsub>
    3850:	1c29      	adds	r1, r5, #0
    3852:	f000 fd8d 	bl	4370 <__aeabi_fmul>
    3856:	4955      	ldr	r1, [pc, #340]	; (39ac <__ieee754_acosf+0x2a0>)
    3858:	f000 fa08 	bl	3c6c <__aeabi_fadd>
    385c:	1c29      	adds	r1, r5, #0
    385e:	f000 fd87 	bl	4370 <__aeabi_fmul>
    3862:	4953      	ldr	r1, [pc, #332]	; (39b0 <__ieee754_acosf+0x2a4>)
    3864:	f000 fea4 	bl	45b0 <__aeabi_fsub>
    3868:	1c29      	adds	r1, r5, #0
    386a:	f000 fd81 	bl	4370 <__aeabi_fmul>
    386e:	4951      	ldr	r1, [pc, #324]	; (39b4 <__ieee754_acosf+0x2a8>)
    3870:	f000 f9fc 	bl	3c6c <__aeabi_fadd>
    3874:	1c29      	adds	r1, r5, #0
    3876:	f000 fd7b 	bl	4370 <__aeabi_fmul>
    387a:	494f      	ldr	r1, [pc, #316]	; (39b8 <__ieee754_acosf+0x2ac>)
    387c:	1c06      	adds	r6, r0, #0
    387e:	1c28      	adds	r0, r5, #0
    3880:	f000 fd76 	bl	4370 <__aeabi_fmul>
    3884:	494d      	ldr	r1, [pc, #308]	; (39bc <__ieee754_acosf+0x2b0>)
    3886:	f000 fe93 	bl	45b0 <__aeabi_fsub>
    388a:	1c29      	adds	r1, r5, #0
    388c:	f000 fd70 	bl	4370 <__aeabi_fmul>
    3890:	494b      	ldr	r1, [pc, #300]	; (39c0 <__ieee754_acosf+0x2b4>)
    3892:	f000 f9eb 	bl	3c6c <__aeabi_fadd>
    3896:	1c29      	adds	r1, r5, #0
    3898:	f000 fd6a 	bl	4370 <__aeabi_fmul>
    389c:	4949      	ldr	r1, [pc, #292]	; (39c4 <__ieee754_acosf+0x2b8>)
    389e:	f000 fe87 	bl	45b0 <__aeabi_fsub>
    38a2:	1c29      	adds	r1, r5, #0
    38a4:	f000 fd64 	bl	4370 <__aeabi_fmul>
    38a8:	21fe      	movs	r1, #254	; 0xfe
    38aa:	0589      	lsls	r1, r1, #22
    38ac:	f000 f9de 	bl	3c6c <__aeabi_fadd>
    38b0:	1c01      	adds	r1, r0, #0
    38b2:	1c30      	adds	r0, r6, #0
    38b4:	f000 fb6c 	bl	3f90 <__aeabi_fdiv>
    38b8:	1c21      	adds	r1, r4, #0
    38ba:	f000 fd59 	bl	4370 <__aeabi_fmul>
    38be:	1c01      	adds	r1, r0, #0
    38c0:	4841      	ldr	r0, [pc, #260]	; (39c8 <__ieee754_acosf+0x2bc>)
    38c2:	f000 fe75 	bl	45b0 <__aeabi_fsub>
    38c6:	1c01      	adds	r1, r0, #0
    38c8:	1c20      	adds	r0, r4, #0
    38ca:	f000 fe71 	bl	45b0 <__aeabi_fsub>
    38ce:	1c01      	adds	r1, r0, #0
    38d0:	483e      	ldr	r0, [pc, #248]	; (39cc <__ieee754_acosf+0x2c0>)
    38d2:	f000 fe6d 	bl	45b0 <__aeabi_fsub>
    38d6:	e732      	b.n	373e <__ieee754_acosf+0x32>
    38d8:	21fe      	movs	r1, #254	; 0xfe
    38da:	0589      	lsls	r1, r1, #22
    38dc:	f000 f9c6 	bl	3c6c <__aeabi_fadd>
    38e0:	21fc      	movs	r1, #252	; 0xfc
    38e2:	0589      	lsls	r1, r1, #22
    38e4:	f000 fd44 	bl	4370 <__aeabi_fmul>
    38e8:	492d      	ldr	r1, [pc, #180]	; (39a0 <__ieee754_acosf+0x294>)
    38ea:	1c04      	adds	r4, r0, #0
    38ec:	f000 fd40 	bl	4370 <__aeabi_fmul>
    38f0:	492c      	ldr	r1, [pc, #176]	; (39a4 <__ieee754_acosf+0x298>)
    38f2:	f000 f9bb 	bl	3c6c <__aeabi_fadd>
    38f6:	1c21      	adds	r1, r4, #0
    38f8:	f000 fd3a 	bl	4370 <__aeabi_fmul>
    38fc:	492a      	ldr	r1, [pc, #168]	; (39a8 <__ieee754_acosf+0x29c>)
    38fe:	f000 fe57 	bl	45b0 <__aeabi_fsub>
    3902:	1c21      	adds	r1, r4, #0
    3904:	f000 fd34 	bl	4370 <__aeabi_fmul>
    3908:	4928      	ldr	r1, [pc, #160]	; (39ac <__ieee754_acosf+0x2a0>)
    390a:	f000 f9af 	bl	3c6c <__aeabi_fadd>
    390e:	1c21      	adds	r1, r4, #0
    3910:	f000 fd2e 	bl	4370 <__aeabi_fmul>
    3914:	4926      	ldr	r1, [pc, #152]	; (39b0 <__ieee754_acosf+0x2a4>)
    3916:	f000 fe4b 	bl	45b0 <__aeabi_fsub>
    391a:	1c21      	adds	r1, r4, #0
    391c:	f000 fd28 	bl	4370 <__aeabi_fmul>
    3920:	4924      	ldr	r1, [pc, #144]	; (39b4 <__ieee754_acosf+0x2a8>)
    3922:	f000 f9a3 	bl	3c6c <__aeabi_fadd>
    3926:	1c21      	adds	r1, r4, #0
    3928:	f000 fd22 	bl	4370 <__aeabi_fmul>
    392c:	1c06      	adds	r6, r0, #0
    392e:	1c20      	adds	r0, r4, #0
    3930:	f000 f850 	bl	39d4 <__ieee754_sqrtf>
    3934:	4920      	ldr	r1, [pc, #128]	; (39b8 <__ieee754_acosf+0x2ac>)
    3936:	1c05      	adds	r5, r0, #0
    3938:	1c20      	adds	r0, r4, #0
    393a:	f000 fd19 	bl	4370 <__aeabi_fmul>
    393e:	491f      	ldr	r1, [pc, #124]	; (39bc <__ieee754_acosf+0x2b0>)
    3940:	f000 fe36 	bl	45b0 <__aeabi_fsub>
    3944:	1c21      	adds	r1, r4, #0
    3946:	f000 fd13 	bl	4370 <__aeabi_fmul>
    394a:	491d      	ldr	r1, [pc, #116]	; (39c0 <__ieee754_acosf+0x2b4>)
    394c:	f000 f98e 	bl	3c6c <__aeabi_fadd>
    3950:	1c21      	adds	r1, r4, #0
    3952:	f000 fd0d 	bl	4370 <__aeabi_fmul>
    3956:	491b      	ldr	r1, [pc, #108]	; (39c4 <__ieee754_acosf+0x2b8>)
    3958:	f000 fe2a 	bl	45b0 <__aeabi_fsub>
    395c:	1c21      	adds	r1, r4, #0
    395e:	f000 fd07 	bl	4370 <__aeabi_fmul>
    3962:	21fe      	movs	r1, #254	; 0xfe
    3964:	0589      	lsls	r1, r1, #22
    3966:	f000 f981 	bl	3c6c <__aeabi_fadd>
    396a:	1c01      	adds	r1, r0, #0
    396c:	1c30      	adds	r0, r6, #0
    396e:	f000 fb0f 	bl	3f90 <__aeabi_fdiv>
    3972:	1c29      	adds	r1, r5, #0
    3974:	f000 fcfc 	bl	4370 <__aeabi_fmul>
    3978:	4913      	ldr	r1, [pc, #76]	; (39c8 <__ieee754_acosf+0x2bc>)
    397a:	f000 fe19 	bl	45b0 <__aeabi_fsub>
    397e:	1c29      	adds	r1, r5, #0
    3980:	f000 f974 	bl	3c6c <__aeabi_fadd>
    3984:	1c01      	adds	r1, r0, #0
    3986:	f000 f971 	bl	3c6c <__aeabi_fadd>
    398a:	1c01      	adds	r1, r0, #0
    398c:	4810      	ldr	r0, [pc, #64]	; (39d0 <__ieee754_acosf+0x2c4>)
    398e:	f000 fe0f 	bl	45b0 <__aeabi_fsub>
    3992:	e6d4      	b.n	373e <__ieee754_acosf+0x32>
    3994:	3effffff 	.word	0x3effffff
    3998:	3fc90fdb 	.word	0x3fc90fdb
    399c:	40490fdb 	.word	0x40490fdb
    39a0:	3811ef08 	.word	0x3811ef08
    39a4:	3a4f7f04 	.word	0x3a4f7f04
    39a8:	3d241146 	.word	0x3d241146
    39ac:	3e4e0aa8 	.word	0x3e4e0aa8
    39b0:	3ea6b090 	.word	0x3ea6b090
    39b4:	3e2aaaab 	.word	0x3e2aaaab
    39b8:	3d9dc62e 	.word	0x3d9dc62e
    39bc:	3f303361 	.word	0x3f303361
    39c0:	4001572d 	.word	0x4001572d
    39c4:	4019d139 	.word	0x4019d139
    39c8:	33a22168 	.word	0x33a22168
    39cc:	3fc90fda 	.word	0x3fc90fda
    39d0:	40490fda 	.word	0x40490fda

000039d4 <__ieee754_sqrtf>:
    39d4:	492b      	ldr	r1, [pc, #172]	; (3a84 <__ieee754_sqrtf+0xb0>)
    39d6:	0042      	lsls	r2, r0, #1
    39d8:	b570      	push	{r4, r5, r6, lr}
    39da:	0003      	movs	r3, r0
    39dc:	1c04      	adds	r4, r0, #0
    39de:	0852      	lsrs	r2, r2, #1
    39e0:	428a      	cmp	r2, r1
    39e2:	d83a      	bhi.n	3a5a <__ieee754_sqrtf+0x86>
    39e4:	2a00      	cmp	r2, #0
    39e6:	d037      	beq.n	3a58 <__ieee754_sqrtf+0x84>
    39e8:	2800      	cmp	r0, #0
    39ea:	db3f      	blt.n	3a6c <__ieee754_sqrtf+0x98>
    39ec:	4926      	ldr	r1, [pc, #152]	; (3a88 <__ieee754_sqrtf+0xb4>)
    39ee:	15c6      	asrs	r6, r0, #23
    39f0:	428a      	cmp	r2, r1
    39f2:	d80b      	bhi.n	3a0c <__ieee754_sqrtf+0x38>
    39f4:	2080      	movs	r0, #128	; 0x80
    39f6:	0400      	lsls	r0, r0, #16
    39f8:	4220      	tst	r0, r4
    39fa:	d13e      	bne.n	3a7a <__ieee754_sqrtf+0xa6>
    39fc:	2200      	movs	r2, #0
    39fe:	e000      	b.n	3a02 <__ieee754_sqrtf+0x2e>
    3a00:	000a      	movs	r2, r1
    3a02:	005b      	lsls	r3, r3, #1
    3a04:	1c51      	adds	r1, r2, #1
    3a06:	4203      	tst	r3, r0
    3a08:	d0fa      	beq.n	3a00 <__ieee754_sqrtf+0x2c>
    3a0a:	1ab6      	subs	r6, r6, r2
    3a0c:	025b      	lsls	r3, r3, #9
    3a0e:	0a5a      	lsrs	r2, r3, #9
    3a10:	2380      	movs	r3, #128	; 0x80
    3a12:	3e7f      	subs	r6, #127	; 0x7f
    3a14:	041b      	lsls	r3, r3, #16
    3a16:	4313      	orrs	r3, r2
    3a18:	07f2      	lsls	r2, r6, #31
    3a1a:	d425      	bmi.n	3a68 <__ieee754_sqrtf+0x94>
    3a1c:	2280      	movs	r2, #128	; 0x80
    3a1e:	1070      	asrs	r0, r6, #1
    3a20:	2119      	movs	r1, #25
    3a22:	2600      	movs	r6, #0
    3a24:	2500      	movs	r5, #0
    3a26:	005b      	lsls	r3, r3, #1
    3a28:	0452      	lsls	r2, r2, #17
    3a2a:	18ac      	adds	r4, r5, r2
    3a2c:	429c      	cmp	r4, r3
    3a2e:	dc02      	bgt.n	3a36 <__ieee754_sqrtf+0x62>
    3a30:	18a5      	adds	r5, r4, r2
    3a32:	1b1b      	subs	r3, r3, r4
    3a34:	18b6      	adds	r6, r6, r2
    3a36:	3901      	subs	r1, #1
    3a38:	005b      	lsls	r3, r3, #1
    3a3a:	0852      	lsrs	r2, r2, #1
    3a3c:	2900      	cmp	r1, #0
    3a3e:	d1f4      	bne.n	3a2a <__ieee754_sqrtf+0x56>
    3a40:	2b00      	cmp	r3, #0
    3a42:	d002      	beq.n	3a4a <__ieee754_sqrtf+0x76>
    3a44:	2301      	movs	r3, #1
    3a46:	3601      	adds	r6, #1
    3a48:	439e      	bics	r6, r3
    3a4a:	23fc      	movs	r3, #252	; 0xfc
    3a4c:	059b      	lsls	r3, r3, #22
    3a4e:	469c      	mov	ip, r3
    3a50:	1076      	asrs	r6, r6, #1
    3a52:	4466      	add	r6, ip
    3a54:	05c0      	lsls	r0, r0, #23
    3a56:	1980      	adds	r0, r0, r6
    3a58:	bd70      	pop	{r4, r5, r6, pc}
    3a5a:	1c01      	adds	r1, r0, #0
    3a5c:	f000 fc88 	bl	4370 <__aeabi_fmul>
    3a60:	1c21      	adds	r1, r4, #0
    3a62:	f000 f903 	bl	3c6c <__aeabi_fadd>
    3a66:	e7f7      	b.n	3a58 <__ieee754_sqrtf+0x84>
    3a68:	005b      	lsls	r3, r3, #1
    3a6a:	e7d7      	b.n	3a1c <__ieee754_sqrtf+0x48>
    3a6c:	1c01      	adds	r1, r0, #0
    3a6e:	f000 fd9f 	bl	45b0 <__aeabi_fsub>
    3a72:	1c01      	adds	r1, r0, #0
    3a74:	f000 fa8c 	bl	3f90 <__aeabi_fdiv>
    3a78:	e7ee      	b.n	3a58 <__ieee754_sqrtf+0x84>
    3a7a:	2201      	movs	r2, #1
    3a7c:	4252      	negs	r2, r2
    3a7e:	1ab6      	subs	r6, r6, r2
    3a80:	e7c4      	b.n	3a0c <__ieee754_sqrtf+0x38>
    3a82:	46c0      	nop			; (mov r8, r8)
    3a84:	7f7fffff 	.word	0x7f7fffff
    3a88:	007fffff 	.word	0x007fffff

00003a8c <matherr>:
    3a8c:	2000      	movs	r0, #0
    3a8e:	4770      	bx	lr

00003a90 <nan>:
    3a90:	2000      	movs	r0, #0
    3a92:	4901      	ldr	r1, [pc, #4]	; (3a98 <nan+0x8>)
    3a94:	4770      	bx	lr
    3a96:	46c0      	nop			; (mov r8, r8)
    3a98:	7ff80000 	.word	0x7ff80000

00003a9c <fabsf>:
    3a9c:	0040      	lsls	r0, r0, #1
    3a9e:	0840      	lsrs	r0, r0, #1
    3aa0:	4770      	bx	lr
    3aa2:	46c0      	nop			; (mov r8, r8)

00003aa4 <__udivsi3>:
    3aa4:	2200      	movs	r2, #0
    3aa6:	0843      	lsrs	r3, r0, #1
    3aa8:	428b      	cmp	r3, r1
    3aaa:	d374      	bcc.n	3b96 <__udivsi3+0xf2>
    3aac:	0903      	lsrs	r3, r0, #4
    3aae:	428b      	cmp	r3, r1
    3ab0:	d35f      	bcc.n	3b72 <__udivsi3+0xce>
    3ab2:	0a03      	lsrs	r3, r0, #8
    3ab4:	428b      	cmp	r3, r1
    3ab6:	d344      	bcc.n	3b42 <__udivsi3+0x9e>
    3ab8:	0b03      	lsrs	r3, r0, #12
    3aba:	428b      	cmp	r3, r1
    3abc:	d328      	bcc.n	3b10 <__udivsi3+0x6c>
    3abe:	0c03      	lsrs	r3, r0, #16
    3ac0:	428b      	cmp	r3, r1
    3ac2:	d30d      	bcc.n	3ae0 <__udivsi3+0x3c>
    3ac4:	22ff      	movs	r2, #255	; 0xff
    3ac6:	0209      	lsls	r1, r1, #8
    3ac8:	ba12      	rev	r2, r2
    3aca:	0c03      	lsrs	r3, r0, #16
    3acc:	428b      	cmp	r3, r1
    3ace:	d302      	bcc.n	3ad6 <__udivsi3+0x32>
    3ad0:	1212      	asrs	r2, r2, #8
    3ad2:	0209      	lsls	r1, r1, #8
    3ad4:	d065      	beq.n	3ba2 <__udivsi3+0xfe>
    3ad6:	0b03      	lsrs	r3, r0, #12
    3ad8:	428b      	cmp	r3, r1
    3ada:	d319      	bcc.n	3b10 <__udivsi3+0x6c>
    3adc:	e000      	b.n	3ae0 <__udivsi3+0x3c>
    3ade:	0a09      	lsrs	r1, r1, #8
    3ae0:	0bc3      	lsrs	r3, r0, #15
    3ae2:	428b      	cmp	r3, r1
    3ae4:	d301      	bcc.n	3aea <__udivsi3+0x46>
    3ae6:	03cb      	lsls	r3, r1, #15
    3ae8:	1ac0      	subs	r0, r0, r3
    3aea:	4152      	adcs	r2, r2
    3aec:	0b83      	lsrs	r3, r0, #14
    3aee:	428b      	cmp	r3, r1
    3af0:	d301      	bcc.n	3af6 <__udivsi3+0x52>
    3af2:	038b      	lsls	r3, r1, #14
    3af4:	1ac0      	subs	r0, r0, r3
    3af6:	4152      	adcs	r2, r2
    3af8:	0b43      	lsrs	r3, r0, #13
    3afa:	428b      	cmp	r3, r1
    3afc:	d301      	bcc.n	3b02 <__udivsi3+0x5e>
    3afe:	034b      	lsls	r3, r1, #13
    3b00:	1ac0      	subs	r0, r0, r3
    3b02:	4152      	adcs	r2, r2
    3b04:	0b03      	lsrs	r3, r0, #12
    3b06:	428b      	cmp	r3, r1
    3b08:	d301      	bcc.n	3b0e <__udivsi3+0x6a>
    3b0a:	030b      	lsls	r3, r1, #12
    3b0c:	1ac0      	subs	r0, r0, r3
    3b0e:	4152      	adcs	r2, r2
    3b10:	0ac3      	lsrs	r3, r0, #11
    3b12:	428b      	cmp	r3, r1
    3b14:	d301      	bcc.n	3b1a <__udivsi3+0x76>
    3b16:	02cb      	lsls	r3, r1, #11
    3b18:	1ac0      	subs	r0, r0, r3
    3b1a:	4152      	adcs	r2, r2
    3b1c:	0a83      	lsrs	r3, r0, #10
    3b1e:	428b      	cmp	r3, r1
    3b20:	d301      	bcc.n	3b26 <__udivsi3+0x82>
    3b22:	028b      	lsls	r3, r1, #10
    3b24:	1ac0      	subs	r0, r0, r3
    3b26:	4152      	adcs	r2, r2
    3b28:	0a43      	lsrs	r3, r0, #9
    3b2a:	428b      	cmp	r3, r1
    3b2c:	d301      	bcc.n	3b32 <__udivsi3+0x8e>
    3b2e:	024b      	lsls	r3, r1, #9
    3b30:	1ac0      	subs	r0, r0, r3
    3b32:	4152      	adcs	r2, r2
    3b34:	0a03      	lsrs	r3, r0, #8
    3b36:	428b      	cmp	r3, r1
    3b38:	d301      	bcc.n	3b3e <__udivsi3+0x9a>
    3b3a:	020b      	lsls	r3, r1, #8
    3b3c:	1ac0      	subs	r0, r0, r3
    3b3e:	4152      	adcs	r2, r2
    3b40:	d2cd      	bcs.n	3ade <__udivsi3+0x3a>
    3b42:	09c3      	lsrs	r3, r0, #7
    3b44:	428b      	cmp	r3, r1
    3b46:	d301      	bcc.n	3b4c <__udivsi3+0xa8>
    3b48:	01cb      	lsls	r3, r1, #7
    3b4a:	1ac0      	subs	r0, r0, r3
    3b4c:	4152      	adcs	r2, r2
    3b4e:	0983      	lsrs	r3, r0, #6
    3b50:	428b      	cmp	r3, r1
    3b52:	d301      	bcc.n	3b58 <__udivsi3+0xb4>
    3b54:	018b      	lsls	r3, r1, #6
    3b56:	1ac0      	subs	r0, r0, r3
    3b58:	4152      	adcs	r2, r2
    3b5a:	0943      	lsrs	r3, r0, #5
    3b5c:	428b      	cmp	r3, r1
    3b5e:	d301      	bcc.n	3b64 <__udivsi3+0xc0>
    3b60:	014b      	lsls	r3, r1, #5
    3b62:	1ac0      	subs	r0, r0, r3
    3b64:	4152      	adcs	r2, r2
    3b66:	0903      	lsrs	r3, r0, #4
    3b68:	428b      	cmp	r3, r1
    3b6a:	d301      	bcc.n	3b70 <__udivsi3+0xcc>
    3b6c:	010b      	lsls	r3, r1, #4
    3b6e:	1ac0      	subs	r0, r0, r3
    3b70:	4152      	adcs	r2, r2
    3b72:	08c3      	lsrs	r3, r0, #3
    3b74:	428b      	cmp	r3, r1
    3b76:	d301      	bcc.n	3b7c <__udivsi3+0xd8>
    3b78:	00cb      	lsls	r3, r1, #3
    3b7a:	1ac0      	subs	r0, r0, r3
    3b7c:	4152      	adcs	r2, r2
    3b7e:	0883      	lsrs	r3, r0, #2
    3b80:	428b      	cmp	r3, r1
    3b82:	d301      	bcc.n	3b88 <__udivsi3+0xe4>
    3b84:	008b      	lsls	r3, r1, #2
    3b86:	1ac0      	subs	r0, r0, r3
    3b88:	4152      	adcs	r2, r2
    3b8a:	0843      	lsrs	r3, r0, #1
    3b8c:	428b      	cmp	r3, r1
    3b8e:	d301      	bcc.n	3b94 <__udivsi3+0xf0>
    3b90:	004b      	lsls	r3, r1, #1
    3b92:	1ac0      	subs	r0, r0, r3
    3b94:	4152      	adcs	r2, r2
    3b96:	1a41      	subs	r1, r0, r1
    3b98:	d200      	bcs.n	3b9c <__udivsi3+0xf8>
    3b9a:	4601      	mov	r1, r0
    3b9c:	4152      	adcs	r2, r2
    3b9e:	4610      	mov	r0, r2
    3ba0:	4770      	bx	lr
    3ba2:	e7ff      	b.n	3ba4 <__udivsi3+0x100>
    3ba4:	b501      	push	{r0, lr}
    3ba6:	2000      	movs	r0, #0
    3ba8:	f000 f806 	bl	3bb8 <__aeabi_idiv0>
    3bac:	bd02      	pop	{r1, pc}
    3bae:	46c0      	nop			; (mov r8, r8)

00003bb0 <__aeabi_uidivmod>:
    3bb0:	2900      	cmp	r1, #0
    3bb2:	d0f7      	beq.n	3ba4 <__udivsi3+0x100>
    3bb4:	e776      	b.n	3aa4 <__udivsi3>
    3bb6:	4770      	bx	lr

00003bb8 <__aeabi_idiv0>:
    3bb8:	4770      	bx	lr
    3bba:	46c0      	nop			; (mov r8, r8)

00003bbc <__aeabi_cfrcmple>:
    3bbc:	4684      	mov	ip, r0
    3bbe:	1c08      	adds	r0, r1, #0
    3bc0:	4661      	mov	r1, ip
    3bc2:	e7ff      	b.n	3bc4 <__aeabi_cfcmpeq>

00003bc4 <__aeabi_cfcmpeq>:
    3bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3bc6:	f000 fb91 	bl	42ec <__lesf2>
    3bca:	2800      	cmp	r0, #0
    3bcc:	d401      	bmi.n	3bd2 <__aeabi_cfcmpeq+0xe>
    3bce:	2100      	movs	r1, #0
    3bd0:	42c8      	cmn	r0, r1
    3bd2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003bd4 <__aeabi_fcmpeq>:
    3bd4:	b510      	push	{r4, lr}
    3bd6:	f000 fb23 	bl	4220 <__eqsf2>
    3bda:	4240      	negs	r0, r0
    3bdc:	3001      	adds	r0, #1
    3bde:	bd10      	pop	{r4, pc}

00003be0 <__aeabi_fcmplt>:
    3be0:	b510      	push	{r4, lr}
    3be2:	f000 fb83 	bl	42ec <__lesf2>
    3be6:	2800      	cmp	r0, #0
    3be8:	db01      	blt.n	3bee <__aeabi_fcmplt+0xe>
    3bea:	2000      	movs	r0, #0
    3bec:	bd10      	pop	{r4, pc}
    3bee:	2001      	movs	r0, #1
    3bf0:	bd10      	pop	{r4, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)

00003bf4 <__aeabi_fcmple>:
    3bf4:	b510      	push	{r4, lr}
    3bf6:	f000 fb79 	bl	42ec <__lesf2>
    3bfa:	2800      	cmp	r0, #0
    3bfc:	dd01      	ble.n	3c02 <__aeabi_fcmple+0xe>
    3bfe:	2000      	movs	r0, #0
    3c00:	bd10      	pop	{r4, pc}
    3c02:	2001      	movs	r0, #1
    3c04:	bd10      	pop	{r4, pc}
    3c06:	46c0      	nop			; (mov r8, r8)

00003c08 <__aeabi_fcmpgt>:
    3c08:	b510      	push	{r4, lr}
    3c0a:	f000 fb2f 	bl	426c <__gesf2>
    3c0e:	2800      	cmp	r0, #0
    3c10:	dc01      	bgt.n	3c16 <__aeabi_fcmpgt+0xe>
    3c12:	2000      	movs	r0, #0
    3c14:	bd10      	pop	{r4, pc}
    3c16:	2001      	movs	r0, #1
    3c18:	bd10      	pop	{r4, pc}
    3c1a:	46c0      	nop			; (mov r8, r8)

00003c1c <__aeabi_fcmpge>:
    3c1c:	b510      	push	{r4, lr}
    3c1e:	f000 fb25 	bl	426c <__gesf2>
    3c22:	2800      	cmp	r0, #0
    3c24:	da01      	bge.n	3c2a <__aeabi_fcmpge+0xe>
    3c26:	2000      	movs	r0, #0
    3c28:	bd10      	pop	{r4, pc}
    3c2a:	2001      	movs	r0, #1
    3c2c:	bd10      	pop	{r4, pc}
    3c2e:	46c0      	nop			; (mov r8, r8)

00003c30 <__aeabi_d2uiz>:
    3c30:	b570      	push	{r4, r5, r6, lr}
    3c32:	2200      	movs	r2, #0
    3c34:	4b0c      	ldr	r3, [pc, #48]	; (3c68 <__aeabi_d2uiz+0x38>)
    3c36:	0004      	movs	r4, r0
    3c38:	000d      	movs	r5, r1
    3c3a:	f001 fe83 	bl	5944 <__aeabi_dcmpge>
    3c3e:	2800      	cmp	r0, #0
    3c40:	d104      	bne.n	3c4c <__aeabi_d2uiz+0x1c>
    3c42:	0020      	movs	r0, r4
    3c44:	0029      	movs	r1, r5
    3c46:	f001 fd01 	bl	564c <__aeabi_d2iz>
    3c4a:	bd70      	pop	{r4, r5, r6, pc}
    3c4c:	4b06      	ldr	r3, [pc, #24]	; (3c68 <__aeabi_d2uiz+0x38>)
    3c4e:	2200      	movs	r2, #0
    3c50:	0020      	movs	r0, r4
    3c52:	0029      	movs	r1, r5
    3c54:	f001 f9e4 	bl	5020 <__aeabi_dsub>
    3c58:	f001 fcf8 	bl	564c <__aeabi_d2iz>
    3c5c:	2380      	movs	r3, #128	; 0x80
    3c5e:	061b      	lsls	r3, r3, #24
    3c60:	469c      	mov	ip, r3
    3c62:	4460      	add	r0, ip
    3c64:	e7f1      	b.n	3c4a <__aeabi_d2uiz+0x1a>
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	41e00000 	.word	0x41e00000

00003c6c <__aeabi_fadd>:
    3c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c6e:	46c6      	mov	lr, r8
    3c70:	024e      	lsls	r6, r1, #9
    3c72:	0247      	lsls	r7, r0, #9
    3c74:	0a76      	lsrs	r6, r6, #9
    3c76:	0a7b      	lsrs	r3, r7, #9
    3c78:	0044      	lsls	r4, r0, #1
    3c7a:	0fc5      	lsrs	r5, r0, #31
    3c7c:	00f7      	lsls	r7, r6, #3
    3c7e:	0048      	lsls	r0, r1, #1
    3c80:	4698      	mov	r8, r3
    3c82:	b500      	push	{lr}
    3c84:	0e24      	lsrs	r4, r4, #24
    3c86:	002a      	movs	r2, r5
    3c88:	00db      	lsls	r3, r3, #3
    3c8a:	0e00      	lsrs	r0, r0, #24
    3c8c:	0fc9      	lsrs	r1, r1, #31
    3c8e:	46bc      	mov	ip, r7
    3c90:	428d      	cmp	r5, r1
    3c92:	d067      	beq.n	3d64 <__aeabi_fadd+0xf8>
    3c94:	1a22      	subs	r2, r4, r0
    3c96:	2a00      	cmp	r2, #0
    3c98:	dc00      	bgt.n	3c9c <__aeabi_fadd+0x30>
    3c9a:	e0a5      	b.n	3de8 <__aeabi_fadd+0x17c>
    3c9c:	2800      	cmp	r0, #0
    3c9e:	d13a      	bne.n	3d16 <__aeabi_fadd+0xaa>
    3ca0:	2f00      	cmp	r7, #0
    3ca2:	d100      	bne.n	3ca6 <__aeabi_fadd+0x3a>
    3ca4:	e093      	b.n	3dce <__aeabi_fadd+0x162>
    3ca6:	1e51      	subs	r1, r2, #1
    3ca8:	2900      	cmp	r1, #0
    3caa:	d000      	beq.n	3cae <__aeabi_fadd+0x42>
    3cac:	e0bc      	b.n	3e28 <__aeabi_fadd+0x1bc>
    3cae:	2401      	movs	r4, #1
    3cb0:	1bdb      	subs	r3, r3, r7
    3cb2:	015a      	lsls	r2, r3, #5
    3cb4:	d546      	bpl.n	3d44 <__aeabi_fadd+0xd8>
    3cb6:	019b      	lsls	r3, r3, #6
    3cb8:	099e      	lsrs	r6, r3, #6
    3cba:	0030      	movs	r0, r6
    3cbc:	f001 fe4c 	bl	5958 <__clzsi2>
    3cc0:	3805      	subs	r0, #5
    3cc2:	4086      	lsls	r6, r0
    3cc4:	4284      	cmp	r4, r0
    3cc6:	dd00      	ble.n	3cca <__aeabi_fadd+0x5e>
    3cc8:	e09d      	b.n	3e06 <__aeabi_fadd+0x19a>
    3cca:	1b04      	subs	r4, r0, r4
    3ccc:	0032      	movs	r2, r6
    3cce:	2020      	movs	r0, #32
    3cd0:	3401      	adds	r4, #1
    3cd2:	40e2      	lsrs	r2, r4
    3cd4:	1b04      	subs	r4, r0, r4
    3cd6:	40a6      	lsls	r6, r4
    3cd8:	0033      	movs	r3, r6
    3cda:	1e5e      	subs	r6, r3, #1
    3cdc:	41b3      	sbcs	r3, r6
    3cde:	2400      	movs	r4, #0
    3ce0:	4313      	orrs	r3, r2
    3ce2:	075a      	lsls	r2, r3, #29
    3ce4:	d004      	beq.n	3cf0 <__aeabi_fadd+0x84>
    3ce6:	220f      	movs	r2, #15
    3ce8:	401a      	ands	r2, r3
    3cea:	2a04      	cmp	r2, #4
    3cec:	d000      	beq.n	3cf0 <__aeabi_fadd+0x84>
    3cee:	3304      	adds	r3, #4
    3cf0:	015a      	lsls	r2, r3, #5
    3cf2:	d529      	bpl.n	3d48 <__aeabi_fadd+0xdc>
    3cf4:	3401      	adds	r4, #1
    3cf6:	2cff      	cmp	r4, #255	; 0xff
    3cf8:	d100      	bne.n	3cfc <__aeabi_fadd+0x90>
    3cfa:	e081      	b.n	3e00 <__aeabi_fadd+0x194>
    3cfc:	002a      	movs	r2, r5
    3cfe:	019b      	lsls	r3, r3, #6
    3d00:	0a5b      	lsrs	r3, r3, #9
    3d02:	b2e4      	uxtb	r4, r4
    3d04:	025b      	lsls	r3, r3, #9
    3d06:	05e4      	lsls	r4, r4, #23
    3d08:	0a58      	lsrs	r0, r3, #9
    3d0a:	07d2      	lsls	r2, r2, #31
    3d0c:	4320      	orrs	r0, r4
    3d0e:	4310      	orrs	r0, r2
    3d10:	bc04      	pop	{r2}
    3d12:	4690      	mov	r8, r2
    3d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d16:	2cff      	cmp	r4, #255	; 0xff
    3d18:	d0e3      	beq.n	3ce2 <__aeabi_fadd+0x76>
    3d1a:	2180      	movs	r1, #128	; 0x80
    3d1c:	0038      	movs	r0, r7
    3d1e:	04c9      	lsls	r1, r1, #19
    3d20:	4308      	orrs	r0, r1
    3d22:	4684      	mov	ip, r0
    3d24:	2a1b      	cmp	r2, #27
    3d26:	dd00      	ble.n	3d2a <__aeabi_fadd+0xbe>
    3d28:	e082      	b.n	3e30 <__aeabi_fadd+0x1c4>
    3d2a:	2020      	movs	r0, #32
    3d2c:	4661      	mov	r1, ip
    3d2e:	40d1      	lsrs	r1, r2
    3d30:	1a82      	subs	r2, r0, r2
    3d32:	4660      	mov	r0, ip
    3d34:	4090      	lsls	r0, r2
    3d36:	0002      	movs	r2, r0
    3d38:	1e50      	subs	r0, r2, #1
    3d3a:	4182      	sbcs	r2, r0
    3d3c:	430a      	orrs	r2, r1
    3d3e:	1a9b      	subs	r3, r3, r2
    3d40:	015a      	lsls	r2, r3, #5
    3d42:	d4b8      	bmi.n	3cb6 <__aeabi_fadd+0x4a>
    3d44:	075a      	lsls	r2, r3, #29
    3d46:	d1ce      	bne.n	3ce6 <__aeabi_fadd+0x7a>
    3d48:	08de      	lsrs	r6, r3, #3
    3d4a:	002a      	movs	r2, r5
    3d4c:	2cff      	cmp	r4, #255	; 0xff
    3d4e:	d13a      	bne.n	3dc6 <__aeabi_fadd+0x15a>
    3d50:	2e00      	cmp	r6, #0
    3d52:	d100      	bne.n	3d56 <__aeabi_fadd+0xea>
    3d54:	e0ae      	b.n	3eb4 <__aeabi_fadd+0x248>
    3d56:	2380      	movs	r3, #128	; 0x80
    3d58:	03db      	lsls	r3, r3, #15
    3d5a:	4333      	orrs	r3, r6
    3d5c:	025b      	lsls	r3, r3, #9
    3d5e:	0a5b      	lsrs	r3, r3, #9
    3d60:	24ff      	movs	r4, #255	; 0xff
    3d62:	e7cf      	b.n	3d04 <__aeabi_fadd+0x98>
    3d64:	1a21      	subs	r1, r4, r0
    3d66:	2900      	cmp	r1, #0
    3d68:	dd52      	ble.n	3e10 <__aeabi_fadd+0x1a4>
    3d6a:	2800      	cmp	r0, #0
    3d6c:	d031      	beq.n	3dd2 <__aeabi_fadd+0x166>
    3d6e:	2cff      	cmp	r4, #255	; 0xff
    3d70:	d0b7      	beq.n	3ce2 <__aeabi_fadd+0x76>
    3d72:	2080      	movs	r0, #128	; 0x80
    3d74:	003e      	movs	r6, r7
    3d76:	04c0      	lsls	r0, r0, #19
    3d78:	4306      	orrs	r6, r0
    3d7a:	46b4      	mov	ip, r6
    3d7c:	291b      	cmp	r1, #27
    3d7e:	dd00      	ble.n	3d82 <__aeabi_fadd+0x116>
    3d80:	e0aa      	b.n	3ed8 <__aeabi_fadd+0x26c>
    3d82:	2620      	movs	r6, #32
    3d84:	4660      	mov	r0, ip
    3d86:	40c8      	lsrs	r0, r1
    3d88:	1a71      	subs	r1, r6, r1
    3d8a:	4666      	mov	r6, ip
    3d8c:	408e      	lsls	r6, r1
    3d8e:	0031      	movs	r1, r6
    3d90:	1e4e      	subs	r6, r1, #1
    3d92:	41b1      	sbcs	r1, r6
    3d94:	4301      	orrs	r1, r0
    3d96:	185b      	adds	r3, r3, r1
    3d98:	0159      	lsls	r1, r3, #5
    3d9a:	d5d3      	bpl.n	3d44 <__aeabi_fadd+0xd8>
    3d9c:	3401      	adds	r4, #1
    3d9e:	2cff      	cmp	r4, #255	; 0xff
    3da0:	d100      	bne.n	3da4 <__aeabi_fadd+0x138>
    3da2:	e087      	b.n	3eb4 <__aeabi_fadd+0x248>
    3da4:	2201      	movs	r2, #1
    3da6:	4978      	ldr	r1, [pc, #480]	; (3f88 <__aeabi_fadd+0x31c>)
    3da8:	401a      	ands	r2, r3
    3daa:	085b      	lsrs	r3, r3, #1
    3dac:	400b      	ands	r3, r1
    3dae:	4313      	orrs	r3, r2
    3db0:	e797      	b.n	3ce2 <__aeabi_fadd+0x76>
    3db2:	2c00      	cmp	r4, #0
    3db4:	d000      	beq.n	3db8 <__aeabi_fadd+0x14c>
    3db6:	e0a7      	b.n	3f08 <__aeabi_fadd+0x29c>
    3db8:	2b00      	cmp	r3, #0
    3dba:	d000      	beq.n	3dbe <__aeabi_fadd+0x152>
    3dbc:	e0b6      	b.n	3f2c <__aeabi_fadd+0x2c0>
    3dbe:	1e3b      	subs	r3, r7, #0
    3dc0:	d162      	bne.n	3e88 <__aeabi_fadd+0x21c>
    3dc2:	2600      	movs	r6, #0
    3dc4:	2200      	movs	r2, #0
    3dc6:	0273      	lsls	r3, r6, #9
    3dc8:	0a5b      	lsrs	r3, r3, #9
    3dca:	b2e4      	uxtb	r4, r4
    3dcc:	e79a      	b.n	3d04 <__aeabi_fadd+0x98>
    3dce:	0014      	movs	r4, r2
    3dd0:	e787      	b.n	3ce2 <__aeabi_fadd+0x76>
    3dd2:	2f00      	cmp	r7, #0
    3dd4:	d04d      	beq.n	3e72 <__aeabi_fadd+0x206>
    3dd6:	1e48      	subs	r0, r1, #1
    3dd8:	2800      	cmp	r0, #0
    3dda:	d157      	bne.n	3e8c <__aeabi_fadd+0x220>
    3ddc:	4463      	add	r3, ip
    3dde:	2401      	movs	r4, #1
    3de0:	015a      	lsls	r2, r3, #5
    3de2:	d5af      	bpl.n	3d44 <__aeabi_fadd+0xd8>
    3de4:	2402      	movs	r4, #2
    3de6:	e7dd      	b.n	3da4 <__aeabi_fadd+0x138>
    3de8:	2a00      	cmp	r2, #0
    3dea:	d124      	bne.n	3e36 <__aeabi_fadd+0x1ca>
    3dec:	1c62      	adds	r2, r4, #1
    3dee:	b2d2      	uxtb	r2, r2
    3df0:	2a01      	cmp	r2, #1
    3df2:	ddde      	ble.n	3db2 <__aeabi_fadd+0x146>
    3df4:	1bde      	subs	r6, r3, r7
    3df6:	0172      	lsls	r2, r6, #5
    3df8:	d535      	bpl.n	3e66 <__aeabi_fadd+0x1fa>
    3dfa:	1afe      	subs	r6, r7, r3
    3dfc:	000d      	movs	r5, r1
    3dfe:	e75c      	b.n	3cba <__aeabi_fadd+0x4e>
    3e00:	002a      	movs	r2, r5
    3e02:	2300      	movs	r3, #0
    3e04:	e77e      	b.n	3d04 <__aeabi_fadd+0x98>
    3e06:	0033      	movs	r3, r6
    3e08:	4a60      	ldr	r2, [pc, #384]	; (3f8c <__aeabi_fadd+0x320>)
    3e0a:	1a24      	subs	r4, r4, r0
    3e0c:	4013      	ands	r3, r2
    3e0e:	e768      	b.n	3ce2 <__aeabi_fadd+0x76>
    3e10:	2900      	cmp	r1, #0
    3e12:	d163      	bne.n	3edc <__aeabi_fadd+0x270>
    3e14:	1c61      	adds	r1, r4, #1
    3e16:	b2c8      	uxtb	r0, r1
    3e18:	2801      	cmp	r0, #1
    3e1a:	dd4e      	ble.n	3eba <__aeabi_fadd+0x24e>
    3e1c:	29ff      	cmp	r1, #255	; 0xff
    3e1e:	d049      	beq.n	3eb4 <__aeabi_fadd+0x248>
    3e20:	4463      	add	r3, ip
    3e22:	085b      	lsrs	r3, r3, #1
    3e24:	000c      	movs	r4, r1
    3e26:	e75c      	b.n	3ce2 <__aeabi_fadd+0x76>
    3e28:	2aff      	cmp	r2, #255	; 0xff
    3e2a:	d041      	beq.n	3eb0 <__aeabi_fadd+0x244>
    3e2c:	000a      	movs	r2, r1
    3e2e:	e779      	b.n	3d24 <__aeabi_fadd+0xb8>
    3e30:	2201      	movs	r2, #1
    3e32:	1a9b      	subs	r3, r3, r2
    3e34:	e784      	b.n	3d40 <__aeabi_fadd+0xd4>
    3e36:	2c00      	cmp	r4, #0
    3e38:	d01d      	beq.n	3e76 <__aeabi_fadd+0x20a>
    3e3a:	28ff      	cmp	r0, #255	; 0xff
    3e3c:	d022      	beq.n	3e84 <__aeabi_fadd+0x218>
    3e3e:	2480      	movs	r4, #128	; 0x80
    3e40:	04e4      	lsls	r4, r4, #19
    3e42:	4252      	negs	r2, r2
    3e44:	4323      	orrs	r3, r4
    3e46:	2a1b      	cmp	r2, #27
    3e48:	dd00      	ble.n	3e4c <__aeabi_fadd+0x1e0>
    3e4a:	e08a      	b.n	3f62 <__aeabi_fadd+0x2f6>
    3e4c:	001c      	movs	r4, r3
    3e4e:	2520      	movs	r5, #32
    3e50:	40d4      	lsrs	r4, r2
    3e52:	1aaa      	subs	r2, r5, r2
    3e54:	4093      	lsls	r3, r2
    3e56:	1e5a      	subs	r2, r3, #1
    3e58:	4193      	sbcs	r3, r2
    3e5a:	4323      	orrs	r3, r4
    3e5c:	4662      	mov	r2, ip
    3e5e:	0004      	movs	r4, r0
    3e60:	1ad3      	subs	r3, r2, r3
    3e62:	000d      	movs	r5, r1
    3e64:	e725      	b.n	3cb2 <__aeabi_fadd+0x46>
    3e66:	2e00      	cmp	r6, #0
    3e68:	d000      	beq.n	3e6c <__aeabi_fadd+0x200>
    3e6a:	e726      	b.n	3cba <__aeabi_fadd+0x4e>
    3e6c:	2200      	movs	r2, #0
    3e6e:	2400      	movs	r4, #0
    3e70:	e7a9      	b.n	3dc6 <__aeabi_fadd+0x15a>
    3e72:	000c      	movs	r4, r1
    3e74:	e735      	b.n	3ce2 <__aeabi_fadd+0x76>
    3e76:	2b00      	cmp	r3, #0
    3e78:	d04d      	beq.n	3f16 <__aeabi_fadd+0x2aa>
    3e7a:	43d2      	mvns	r2, r2
    3e7c:	2a00      	cmp	r2, #0
    3e7e:	d0ed      	beq.n	3e5c <__aeabi_fadd+0x1f0>
    3e80:	28ff      	cmp	r0, #255	; 0xff
    3e82:	d1e0      	bne.n	3e46 <__aeabi_fadd+0x1da>
    3e84:	4663      	mov	r3, ip
    3e86:	24ff      	movs	r4, #255	; 0xff
    3e88:	000d      	movs	r5, r1
    3e8a:	e72a      	b.n	3ce2 <__aeabi_fadd+0x76>
    3e8c:	29ff      	cmp	r1, #255	; 0xff
    3e8e:	d00f      	beq.n	3eb0 <__aeabi_fadd+0x244>
    3e90:	0001      	movs	r1, r0
    3e92:	e773      	b.n	3d7c <__aeabi_fadd+0x110>
    3e94:	2b00      	cmp	r3, #0
    3e96:	d061      	beq.n	3f5c <__aeabi_fadd+0x2f0>
    3e98:	24ff      	movs	r4, #255	; 0xff
    3e9a:	2f00      	cmp	r7, #0
    3e9c:	d100      	bne.n	3ea0 <__aeabi_fadd+0x234>
    3e9e:	e720      	b.n	3ce2 <__aeabi_fadd+0x76>
    3ea0:	2280      	movs	r2, #128	; 0x80
    3ea2:	4641      	mov	r1, r8
    3ea4:	03d2      	lsls	r2, r2, #15
    3ea6:	4211      	tst	r1, r2
    3ea8:	d002      	beq.n	3eb0 <__aeabi_fadd+0x244>
    3eaa:	4216      	tst	r6, r2
    3eac:	d100      	bne.n	3eb0 <__aeabi_fadd+0x244>
    3eae:	003b      	movs	r3, r7
    3eb0:	24ff      	movs	r4, #255	; 0xff
    3eb2:	e716      	b.n	3ce2 <__aeabi_fadd+0x76>
    3eb4:	24ff      	movs	r4, #255	; 0xff
    3eb6:	2300      	movs	r3, #0
    3eb8:	e724      	b.n	3d04 <__aeabi_fadd+0x98>
    3eba:	2c00      	cmp	r4, #0
    3ebc:	d1ea      	bne.n	3e94 <__aeabi_fadd+0x228>
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d058      	beq.n	3f74 <__aeabi_fadd+0x308>
    3ec2:	2f00      	cmp	r7, #0
    3ec4:	d100      	bne.n	3ec8 <__aeabi_fadd+0x25c>
    3ec6:	e70c      	b.n	3ce2 <__aeabi_fadd+0x76>
    3ec8:	4463      	add	r3, ip
    3eca:	015a      	lsls	r2, r3, #5
    3ecc:	d400      	bmi.n	3ed0 <__aeabi_fadd+0x264>
    3ece:	e739      	b.n	3d44 <__aeabi_fadd+0xd8>
    3ed0:	4a2e      	ldr	r2, [pc, #184]	; (3f8c <__aeabi_fadd+0x320>)
    3ed2:	000c      	movs	r4, r1
    3ed4:	4013      	ands	r3, r2
    3ed6:	e704      	b.n	3ce2 <__aeabi_fadd+0x76>
    3ed8:	2101      	movs	r1, #1
    3eda:	e75c      	b.n	3d96 <__aeabi_fadd+0x12a>
    3edc:	2c00      	cmp	r4, #0
    3ede:	d11e      	bne.n	3f1e <__aeabi_fadd+0x2b2>
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d040      	beq.n	3f66 <__aeabi_fadd+0x2fa>
    3ee4:	43c9      	mvns	r1, r1
    3ee6:	2900      	cmp	r1, #0
    3ee8:	d00b      	beq.n	3f02 <__aeabi_fadd+0x296>
    3eea:	28ff      	cmp	r0, #255	; 0xff
    3eec:	d036      	beq.n	3f5c <__aeabi_fadd+0x2f0>
    3eee:	291b      	cmp	r1, #27
    3ef0:	dc47      	bgt.n	3f82 <__aeabi_fadd+0x316>
    3ef2:	001c      	movs	r4, r3
    3ef4:	2620      	movs	r6, #32
    3ef6:	40cc      	lsrs	r4, r1
    3ef8:	1a71      	subs	r1, r6, r1
    3efa:	408b      	lsls	r3, r1
    3efc:	1e59      	subs	r1, r3, #1
    3efe:	418b      	sbcs	r3, r1
    3f00:	4323      	orrs	r3, r4
    3f02:	4463      	add	r3, ip
    3f04:	0004      	movs	r4, r0
    3f06:	e747      	b.n	3d98 <__aeabi_fadd+0x12c>
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d118      	bne.n	3f3e <__aeabi_fadd+0x2d2>
    3f0c:	1e3b      	subs	r3, r7, #0
    3f0e:	d02d      	beq.n	3f6c <__aeabi_fadd+0x300>
    3f10:	000d      	movs	r5, r1
    3f12:	24ff      	movs	r4, #255	; 0xff
    3f14:	e6e5      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f16:	003b      	movs	r3, r7
    3f18:	0004      	movs	r4, r0
    3f1a:	000d      	movs	r5, r1
    3f1c:	e6e1      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f1e:	28ff      	cmp	r0, #255	; 0xff
    3f20:	d01c      	beq.n	3f5c <__aeabi_fadd+0x2f0>
    3f22:	2480      	movs	r4, #128	; 0x80
    3f24:	04e4      	lsls	r4, r4, #19
    3f26:	4249      	negs	r1, r1
    3f28:	4323      	orrs	r3, r4
    3f2a:	e7e0      	b.n	3eee <__aeabi_fadd+0x282>
    3f2c:	2f00      	cmp	r7, #0
    3f2e:	d100      	bne.n	3f32 <__aeabi_fadd+0x2c6>
    3f30:	e6d7      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f32:	1bde      	subs	r6, r3, r7
    3f34:	0172      	lsls	r2, r6, #5
    3f36:	d51f      	bpl.n	3f78 <__aeabi_fadd+0x30c>
    3f38:	1afb      	subs	r3, r7, r3
    3f3a:	000d      	movs	r5, r1
    3f3c:	e6d1      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f3e:	24ff      	movs	r4, #255	; 0xff
    3f40:	2f00      	cmp	r7, #0
    3f42:	d100      	bne.n	3f46 <__aeabi_fadd+0x2da>
    3f44:	e6cd      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f46:	2280      	movs	r2, #128	; 0x80
    3f48:	4640      	mov	r0, r8
    3f4a:	03d2      	lsls	r2, r2, #15
    3f4c:	4210      	tst	r0, r2
    3f4e:	d0af      	beq.n	3eb0 <__aeabi_fadd+0x244>
    3f50:	4216      	tst	r6, r2
    3f52:	d1ad      	bne.n	3eb0 <__aeabi_fadd+0x244>
    3f54:	003b      	movs	r3, r7
    3f56:	000d      	movs	r5, r1
    3f58:	24ff      	movs	r4, #255	; 0xff
    3f5a:	e6c2      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f5c:	4663      	mov	r3, ip
    3f5e:	24ff      	movs	r4, #255	; 0xff
    3f60:	e6bf      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f62:	2301      	movs	r3, #1
    3f64:	e77a      	b.n	3e5c <__aeabi_fadd+0x1f0>
    3f66:	003b      	movs	r3, r7
    3f68:	0004      	movs	r4, r0
    3f6a:	e6ba      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f6c:	2680      	movs	r6, #128	; 0x80
    3f6e:	2200      	movs	r2, #0
    3f70:	03f6      	lsls	r6, r6, #15
    3f72:	e6f0      	b.n	3d56 <__aeabi_fadd+0xea>
    3f74:	003b      	movs	r3, r7
    3f76:	e6b4      	b.n	3ce2 <__aeabi_fadd+0x76>
    3f78:	1e33      	subs	r3, r6, #0
    3f7a:	d000      	beq.n	3f7e <__aeabi_fadd+0x312>
    3f7c:	e6e2      	b.n	3d44 <__aeabi_fadd+0xd8>
    3f7e:	2200      	movs	r2, #0
    3f80:	e721      	b.n	3dc6 <__aeabi_fadd+0x15a>
    3f82:	2301      	movs	r3, #1
    3f84:	e7bd      	b.n	3f02 <__aeabi_fadd+0x296>
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	7dffffff 	.word	0x7dffffff
    3f8c:	fbffffff 	.word	0xfbffffff

00003f90 <__aeabi_fdiv>:
    3f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f92:	4657      	mov	r7, sl
    3f94:	464e      	mov	r6, r9
    3f96:	46de      	mov	lr, fp
    3f98:	4645      	mov	r5, r8
    3f9a:	b5e0      	push	{r5, r6, r7, lr}
    3f9c:	0244      	lsls	r4, r0, #9
    3f9e:	0043      	lsls	r3, r0, #1
    3fa0:	0fc6      	lsrs	r6, r0, #31
    3fa2:	b083      	sub	sp, #12
    3fa4:	1c0f      	adds	r7, r1, #0
    3fa6:	0a64      	lsrs	r4, r4, #9
    3fa8:	0e1b      	lsrs	r3, r3, #24
    3faa:	46b2      	mov	sl, r6
    3fac:	d053      	beq.n	4056 <__aeabi_fdiv+0xc6>
    3fae:	2bff      	cmp	r3, #255	; 0xff
    3fb0:	d027      	beq.n	4002 <__aeabi_fdiv+0x72>
    3fb2:	2280      	movs	r2, #128	; 0x80
    3fb4:	00e4      	lsls	r4, r4, #3
    3fb6:	04d2      	lsls	r2, r2, #19
    3fb8:	4314      	orrs	r4, r2
    3fba:	227f      	movs	r2, #127	; 0x7f
    3fbc:	4252      	negs	r2, r2
    3fbe:	4690      	mov	r8, r2
    3fc0:	4498      	add	r8, r3
    3fc2:	2300      	movs	r3, #0
    3fc4:	4699      	mov	r9, r3
    3fc6:	469b      	mov	fp, r3
    3fc8:	027d      	lsls	r5, r7, #9
    3fca:	0078      	lsls	r0, r7, #1
    3fcc:	0ffb      	lsrs	r3, r7, #31
    3fce:	0a6d      	lsrs	r5, r5, #9
    3fd0:	0e00      	lsrs	r0, r0, #24
    3fd2:	9300      	str	r3, [sp, #0]
    3fd4:	d024      	beq.n	4020 <__aeabi_fdiv+0x90>
    3fd6:	28ff      	cmp	r0, #255	; 0xff
    3fd8:	d046      	beq.n	4068 <__aeabi_fdiv+0xd8>
    3fda:	2380      	movs	r3, #128	; 0x80
    3fdc:	2100      	movs	r1, #0
    3fde:	00ed      	lsls	r5, r5, #3
    3fe0:	04db      	lsls	r3, r3, #19
    3fe2:	431d      	orrs	r5, r3
    3fe4:	387f      	subs	r0, #127	; 0x7f
    3fe6:	4647      	mov	r7, r8
    3fe8:	1a38      	subs	r0, r7, r0
    3fea:	464f      	mov	r7, r9
    3fec:	430f      	orrs	r7, r1
    3fee:	00bf      	lsls	r7, r7, #2
    3ff0:	46b9      	mov	r9, r7
    3ff2:	0033      	movs	r3, r6
    3ff4:	9a00      	ldr	r2, [sp, #0]
    3ff6:	4f87      	ldr	r7, [pc, #540]	; (4214 <__aeabi_fdiv+0x284>)
    3ff8:	4053      	eors	r3, r2
    3ffa:	464a      	mov	r2, r9
    3ffc:	58ba      	ldr	r2, [r7, r2]
    3ffe:	9301      	str	r3, [sp, #4]
    4000:	4697      	mov	pc, r2
    4002:	2c00      	cmp	r4, #0
    4004:	d14e      	bne.n	40a4 <__aeabi_fdiv+0x114>
    4006:	2308      	movs	r3, #8
    4008:	4699      	mov	r9, r3
    400a:	33f7      	adds	r3, #247	; 0xf7
    400c:	4698      	mov	r8, r3
    400e:	3bfd      	subs	r3, #253	; 0xfd
    4010:	469b      	mov	fp, r3
    4012:	027d      	lsls	r5, r7, #9
    4014:	0078      	lsls	r0, r7, #1
    4016:	0ffb      	lsrs	r3, r7, #31
    4018:	0a6d      	lsrs	r5, r5, #9
    401a:	0e00      	lsrs	r0, r0, #24
    401c:	9300      	str	r3, [sp, #0]
    401e:	d1da      	bne.n	3fd6 <__aeabi_fdiv+0x46>
    4020:	2d00      	cmp	r5, #0
    4022:	d126      	bne.n	4072 <__aeabi_fdiv+0xe2>
    4024:	2000      	movs	r0, #0
    4026:	2101      	movs	r1, #1
    4028:	0033      	movs	r3, r6
    402a:	9a00      	ldr	r2, [sp, #0]
    402c:	4f7a      	ldr	r7, [pc, #488]	; (4218 <__aeabi_fdiv+0x288>)
    402e:	4053      	eors	r3, r2
    4030:	4642      	mov	r2, r8
    4032:	1a10      	subs	r0, r2, r0
    4034:	464a      	mov	r2, r9
    4036:	430a      	orrs	r2, r1
    4038:	0092      	lsls	r2, r2, #2
    403a:	58ba      	ldr	r2, [r7, r2]
    403c:	001d      	movs	r5, r3
    403e:	4697      	mov	pc, r2
    4040:	9b00      	ldr	r3, [sp, #0]
    4042:	002c      	movs	r4, r5
    4044:	469a      	mov	sl, r3
    4046:	468b      	mov	fp, r1
    4048:	465b      	mov	r3, fp
    404a:	2b02      	cmp	r3, #2
    404c:	d131      	bne.n	40b2 <__aeabi_fdiv+0x122>
    404e:	4653      	mov	r3, sl
    4050:	21ff      	movs	r1, #255	; 0xff
    4052:	2400      	movs	r4, #0
    4054:	e038      	b.n	40c8 <__aeabi_fdiv+0x138>
    4056:	2c00      	cmp	r4, #0
    4058:	d117      	bne.n	408a <__aeabi_fdiv+0xfa>
    405a:	2304      	movs	r3, #4
    405c:	4699      	mov	r9, r3
    405e:	2300      	movs	r3, #0
    4060:	4698      	mov	r8, r3
    4062:	3301      	adds	r3, #1
    4064:	469b      	mov	fp, r3
    4066:	e7af      	b.n	3fc8 <__aeabi_fdiv+0x38>
    4068:	20ff      	movs	r0, #255	; 0xff
    406a:	2d00      	cmp	r5, #0
    406c:	d10b      	bne.n	4086 <__aeabi_fdiv+0xf6>
    406e:	2102      	movs	r1, #2
    4070:	e7da      	b.n	4028 <__aeabi_fdiv+0x98>
    4072:	0028      	movs	r0, r5
    4074:	f001 fc70 	bl	5958 <__clzsi2>
    4078:	1f43      	subs	r3, r0, #5
    407a:	409d      	lsls	r5, r3
    407c:	2376      	movs	r3, #118	; 0x76
    407e:	425b      	negs	r3, r3
    4080:	1a18      	subs	r0, r3, r0
    4082:	2100      	movs	r1, #0
    4084:	e7af      	b.n	3fe6 <__aeabi_fdiv+0x56>
    4086:	2103      	movs	r1, #3
    4088:	e7ad      	b.n	3fe6 <__aeabi_fdiv+0x56>
    408a:	0020      	movs	r0, r4
    408c:	f001 fc64 	bl	5958 <__clzsi2>
    4090:	1f43      	subs	r3, r0, #5
    4092:	409c      	lsls	r4, r3
    4094:	2376      	movs	r3, #118	; 0x76
    4096:	425b      	negs	r3, r3
    4098:	1a1b      	subs	r3, r3, r0
    409a:	4698      	mov	r8, r3
    409c:	2300      	movs	r3, #0
    409e:	4699      	mov	r9, r3
    40a0:	469b      	mov	fp, r3
    40a2:	e791      	b.n	3fc8 <__aeabi_fdiv+0x38>
    40a4:	230c      	movs	r3, #12
    40a6:	4699      	mov	r9, r3
    40a8:	33f3      	adds	r3, #243	; 0xf3
    40aa:	4698      	mov	r8, r3
    40ac:	3bfc      	subs	r3, #252	; 0xfc
    40ae:	469b      	mov	fp, r3
    40b0:	e78a      	b.n	3fc8 <__aeabi_fdiv+0x38>
    40b2:	2b03      	cmp	r3, #3
    40b4:	d100      	bne.n	40b8 <__aeabi_fdiv+0x128>
    40b6:	e0a5      	b.n	4204 <__aeabi_fdiv+0x274>
    40b8:	4655      	mov	r5, sl
    40ba:	2b01      	cmp	r3, #1
    40bc:	d000      	beq.n	40c0 <__aeabi_fdiv+0x130>
    40be:	e081      	b.n	41c4 <__aeabi_fdiv+0x234>
    40c0:	2301      	movs	r3, #1
    40c2:	2100      	movs	r1, #0
    40c4:	2400      	movs	r4, #0
    40c6:	402b      	ands	r3, r5
    40c8:	0264      	lsls	r4, r4, #9
    40ca:	05c9      	lsls	r1, r1, #23
    40cc:	0a60      	lsrs	r0, r4, #9
    40ce:	07db      	lsls	r3, r3, #31
    40d0:	4308      	orrs	r0, r1
    40d2:	4318      	orrs	r0, r3
    40d4:	b003      	add	sp, #12
    40d6:	bc3c      	pop	{r2, r3, r4, r5}
    40d8:	4690      	mov	r8, r2
    40da:	4699      	mov	r9, r3
    40dc:	46a2      	mov	sl, r4
    40de:	46ab      	mov	fp, r5
    40e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40e2:	2480      	movs	r4, #128	; 0x80
    40e4:	2300      	movs	r3, #0
    40e6:	03e4      	lsls	r4, r4, #15
    40e8:	21ff      	movs	r1, #255	; 0xff
    40ea:	e7ed      	b.n	40c8 <__aeabi_fdiv+0x138>
    40ec:	21ff      	movs	r1, #255	; 0xff
    40ee:	2400      	movs	r4, #0
    40f0:	e7ea      	b.n	40c8 <__aeabi_fdiv+0x138>
    40f2:	2301      	movs	r3, #1
    40f4:	1a59      	subs	r1, r3, r1
    40f6:	291b      	cmp	r1, #27
    40f8:	dd66      	ble.n	41c8 <__aeabi_fdiv+0x238>
    40fa:	9a01      	ldr	r2, [sp, #4]
    40fc:	4013      	ands	r3, r2
    40fe:	2100      	movs	r1, #0
    4100:	2400      	movs	r4, #0
    4102:	e7e1      	b.n	40c8 <__aeabi_fdiv+0x138>
    4104:	2380      	movs	r3, #128	; 0x80
    4106:	03db      	lsls	r3, r3, #15
    4108:	421c      	tst	r4, r3
    410a:	d038      	beq.n	417e <__aeabi_fdiv+0x1ee>
    410c:	421d      	tst	r5, r3
    410e:	d051      	beq.n	41b4 <__aeabi_fdiv+0x224>
    4110:	431c      	orrs	r4, r3
    4112:	0264      	lsls	r4, r4, #9
    4114:	0a64      	lsrs	r4, r4, #9
    4116:	0033      	movs	r3, r6
    4118:	21ff      	movs	r1, #255	; 0xff
    411a:	e7d5      	b.n	40c8 <__aeabi_fdiv+0x138>
    411c:	0163      	lsls	r3, r4, #5
    411e:	016c      	lsls	r4, r5, #5
    4120:	42a3      	cmp	r3, r4
    4122:	d23b      	bcs.n	419c <__aeabi_fdiv+0x20c>
    4124:	261b      	movs	r6, #27
    4126:	2100      	movs	r1, #0
    4128:	3801      	subs	r0, #1
    412a:	2501      	movs	r5, #1
    412c:	001f      	movs	r7, r3
    412e:	0049      	lsls	r1, r1, #1
    4130:	005b      	lsls	r3, r3, #1
    4132:	2f00      	cmp	r7, #0
    4134:	db01      	blt.n	413a <__aeabi_fdiv+0x1aa>
    4136:	429c      	cmp	r4, r3
    4138:	d801      	bhi.n	413e <__aeabi_fdiv+0x1ae>
    413a:	1b1b      	subs	r3, r3, r4
    413c:	4329      	orrs	r1, r5
    413e:	3e01      	subs	r6, #1
    4140:	2e00      	cmp	r6, #0
    4142:	d1f3      	bne.n	412c <__aeabi_fdiv+0x19c>
    4144:	001c      	movs	r4, r3
    4146:	1e63      	subs	r3, r4, #1
    4148:	419c      	sbcs	r4, r3
    414a:	430c      	orrs	r4, r1
    414c:	0001      	movs	r1, r0
    414e:	317f      	adds	r1, #127	; 0x7f
    4150:	2900      	cmp	r1, #0
    4152:	ddce      	ble.n	40f2 <__aeabi_fdiv+0x162>
    4154:	0763      	lsls	r3, r4, #29
    4156:	d004      	beq.n	4162 <__aeabi_fdiv+0x1d2>
    4158:	230f      	movs	r3, #15
    415a:	4023      	ands	r3, r4
    415c:	2b04      	cmp	r3, #4
    415e:	d000      	beq.n	4162 <__aeabi_fdiv+0x1d2>
    4160:	3404      	adds	r4, #4
    4162:	0123      	lsls	r3, r4, #4
    4164:	d503      	bpl.n	416e <__aeabi_fdiv+0x1de>
    4166:	0001      	movs	r1, r0
    4168:	4b2c      	ldr	r3, [pc, #176]	; (421c <__aeabi_fdiv+0x28c>)
    416a:	3180      	adds	r1, #128	; 0x80
    416c:	401c      	ands	r4, r3
    416e:	29fe      	cmp	r1, #254	; 0xfe
    4170:	dd0d      	ble.n	418e <__aeabi_fdiv+0x1fe>
    4172:	2301      	movs	r3, #1
    4174:	9a01      	ldr	r2, [sp, #4]
    4176:	21ff      	movs	r1, #255	; 0xff
    4178:	4013      	ands	r3, r2
    417a:	2400      	movs	r4, #0
    417c:	e7a4      	b.n	40c8 <__aeabi_fdiv+0x138>
    417e:	2380      	movs	r3, #128	; 0x80
    4180:	03db      	lsls	r3, r3, #15
    4182:	431c      	orrs	r4, r3
    4184:	0264      	lsls	r4, r4, #9
    4186:	0a64      	lsrs	r4, r4, #9
    4188:	0033      	movs	r3, r6
    418a:	21ff      	movs	r1, #255	; 0xff
    418c:	e79c      	b.n	40c8 <__aeabi_fdiv+0x138>
    418e:	2301      	movs	r3, #1
    4190:	9a01      	ldr	r2, [sp, #4]
    4192:	01a4      	lsls	r4, r4, #6
    4194:	0a64      	lsrs	r4, r4, #9
    4196:	b2c9      	uxtb	r1, r1
    4198:	4013      	ands	r3, r2
    419a:	e795      	b.n	40c8 <__aeabi_fdiv+0x138>
    419c:	1b1b      	subs	r3, r3, r4
    419e:	261a      	movs	r6, #26
    41a0:	2101      	movs	r1, #1
    41a2:	e7c2      	b.n	412a <__aeabi_fdiv+0x19a>
    41a4:	9b00      	ldr	r3, [sp, #0]
    41a6:	468b      	mov	fp, r1
    41a8:	469a      	mov	sl, r3
    41aa:	2400      	movs	r4, #0
    41ac:	e74c      	b.n	4048 <__aeabi_fdiv+0xb8>
    41ae:	0263      	lsls	r3, r4, #9
    41b0:	d5e5      	bpl.n	417e <__aeabi_fdiv+0x1ee>
    41b2:	2500      	movs	r5, #0
    41b4:	2480      	movs	r4, #128	; 0x80
    41b6:	03e4      	lsls	r4, r4, #15
    41b8:	432c      	orrs	r4, r5
    41ba:	0264      	lsls	r4, r4, #9
    41bc:	0a64      	lsrs	r4, r4, #9
    41be:	9b00      	ldr	r3, [sp, #0]
    41c0:	21ff      	movs	r1, #255	; 0xff
    41c2:	e781      	b.n	40c8 <__aeabi_fdiv+0x138>
    41c4:	9501      	str	r5, [sp, #4]
    41c6:	e7c1      	b.n	414c <__aeabi_fdiv+0x1bc>
    41c8:	0023      	movs	r3, r4
    41ca:	2020      	movs	r0, #32
    41cc:	40cb      	lsrs	r3, r1
    41ce:	1a41      	subs	r1, r0, r1
    41d0:	408c      	lsls	r4, r1
    41d2:	1e61      	subs	r1, r4, #1
    41d4:	418c      	sbcs	r4, r1
    41d6:	431c      	orrs	r4, r3
    41d8:	0763      	lsls	r3, r4, #29
    41da:	d004      	beq.n	41e6 <__aeabi_fdiv+0x256>
    41dc:	230f      	movs	r3, #15
    41de:	4023      	ands	r3, r4
    41e0:	2b04      	cmp	r3, #4
    41e2:	d000      	beq.n	41e6 <__aeabi_fdiv+0x256>
    41e4:	3404      	adds	r4, #4
    41e6:	0163      	lsls	r3, r4, #5
    41e8:	d505      	bpl.n	41f6 <__aeabi_fdiv+0x266>
    41ea:	2301      	movs	r3, #1
    41ec:	9a01      	ldr	r2, [sp, #4]
    41ee:	2101      	movs	r1, #1
    41f0:	4013      	ands	r3, r2
    41f2:	2400      	movs	r4, #0
    41f4:	e768      	b.n	40c8 <__aeabi_fdiv+0x138>
    41f6:	2301      	movs	r3, #1
    41f8:	9a01      	ldr	r2, [sp, #4]
    41fa:	01a4      	lsls	r4, r4, #6
    41fc:	0a64      	lsrs	r4, r4, #9
    41fe:	4013      	ands	r3, r2
    4200:	2100      	movs	r1, #0
    4202:	e761      	b.n	40c8 <__aeabi_fdiv+0x138>
    4204:	2380      	movs	r3, #128	; 0x80
    4206:	03db      	lsls	r3, r3, #15
    4208:	431c      	orrs	r4, r3
    420a:	0264      	lsls	r4, r4, #9
    420c:	0a64      	lsrs	r4, r4, #9
    420e:	4653      	mov	r3, sl
    4210:	21ff      	movs	r1, #255	; 0xff
    4212:	e759      	b.n	40c8 <__aeabi_fdiv+0x138>
    4214:	00005ee0 	.word	0x00005ee0
    4218:	00005f20 	.word	0x00005f20
    421c:	f7ffffff 	.word	0xf7ffffff

00004220 <__eqsf2>:
    4220:	b570      	push	{r4, r5, r6, lr}
    4222:	0042      	lsls	r2, r0, #1
    4224:	0245      	lsls	r5, r0, #9
    4226:	024e      	lsls	r6, r1, #9
    4228:	004c      	lsls	r4, r1, #1
    422a:	0fc3      	lsrs	r3, r0, #31
    422c:	0a6d      	lsrs	r5, r5, #9
    422e:	0e12      	lsrs	r2, r2, #24
    4230:	0a76      	lsrs	r6, r6, #9
    4232:	0e24      	lsrs	r4, r4, #24
    4234:	0fc9      	lsrs	r1, r1, #31
    4236:	2001      	movs	r0, #1
    4238:	2aff      	cmp	r2, #255	; 0xff
    423a:	d006      	beq.n	424a <__eqsf2+0x2a>
    423c:	2cff      	cmp	r4, #255	; 0xff
    423e:	d003      	beq.n	4248 <__eqsf2+0x28>
    4240:	42a2      	cmp	r2, r4
    4242:	d101      	bne.n	4248 <__eqsf2+0x28>
    4244:	42b5      	cmp	r5, r6
    4246:	d006      	beq.n	4256 <__eqsf2+0x36>
    4248:	bd70      	pop	{r4, r5, r6, pc}
    424a:	2d00      	cmp	r5, #0
    424c:	d1fc      	bne.n	4248 <__eqsf2+0x28>
    424e:	2cff      	cmp	r4, #255	; 0xff
    4250:	d1fa      	bne.n	4248 <__eqsf2+0x28>
    4252:	2e00      	cmp	r6, #0
    4254:	d1f8      	bne.n	4248 <__eqsf2+0x28>
    4256:	428b      	cmp	r3, r1
    4258:	d006      	beq.n	4268 <__eqsf2+0x48>
    425a:	2001      	movs	r0, #1
    425c:	2a00      	cmp	r2, #0
    425e:	d1f3      	bne.n	4248 <__eqsf2+0x28>
    4260:	0028      	movs	r0, r5
    4262:	1e45      	subs	r5, r0, #1
    4264:	41a8      	sbcs	r0, r5
    4266:	e7ef      	b.n	4248 <__eqsf2+0x28>
    4268:	2000      	movs	r0, #0
    426a:	e7ed      	b.n	4248 <__eqsf2+0x28>

0000426c <__gesf2>:
    426c:	b5f0      	push	{r4, r5, r6, r7, lr}
    426e:	0042      	lsls	r2, r0, #1
    4270:	0245      	lsls	r5, r0, #9
    4272:	024c      	lsls	r4, r1, #9
    4274:	0fc3      	lsrs	r3, r0, #31
    4276:	0048      	lsls	r0, r1, #1
    4278:	0a6d      	lsrs	r5, r5, #9
    427a:	0e12      	lsrs	r2, r2, #24
    427c:	0a64      	lsrs	r4, r4, #9
    427e:	0e00      	lsrs	r0, r0, #24
    4280:	0fc9      	lsrs	r1, r1, #31
    4282:	2aff      	cmp	r2, #255	; 0xff
    4284:	d01e      	beq.n	42c4 <__gesf2+0x58>
    4286:	28ff      	cmp	r0, #255	; 0xff
    4288:	d021      	beq.n	42ce <__gesf2+0x62>
    428a:	2a00      	cmp	r2, #0
    428c:	d10a      	bne.n	42a4 <__gesf2+0x38>
    428e:	426e      	negs	r6, r5
    4290:	416e      	adcs	r6, r5
    4292:	b2f6      	uxtb	r6, r6
    4294:	2800      	cmp	r0, #0
    4296:	d10f      	bne.n	42b8 <__gesf2+0x4c>
    4298:	2c00      	cmp	r4, #0
    429a:	d10d      	bne.n	42b8 <__gesf2+0x4c>
    429c:	2000      	movs	r0, #0
    429e:	2d00      	cmp	r5, #0
    42a0:	d009      	beq.n	42b6 <__gesf2+0x4a>
    42a2:	e005      	b.n	42b0 <__gesf2+0x44>
    42a4:	2800      	cmp	r0, #0
    42a6:	d101      	bne.n	42ac <__gesf2+0x40>
    42a8:	2c00      	cmp	r4, #0
    42aa:	d001      	beq.n	42b0 <__gesf2+0x44>
    42ac:	428b      	cmp	r3, r1
    42ae:	d011      	beq.n	42d4 <__gesf2+0x68>
    42b0:	2101      	movs	r1, #1
    42b2:	4258      	negs	r0, r3
    42b4:	4308      	orrs	r0, r1
    42b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42b8:	2e00      	cmp	r6, #0
    42ba:	d0f7      	beq.n	42ac <__gesf2+0x40>
    42bc:	2001      	movs	r0, #1
    42be:	3901      	subs	r1, #1
    42c0:	4308      	orrs	r0, r1
    42c2:	e7f8      	b.n	42b6 <__gesf2+0x4a>
    42c4:	2d00      	cmp	r5, #0
    42c6:	d0de      	beq.n	4286 <__gesf2+0x1a>
    42c8:	2002      	movs	r0, #2
    42ca:	4240      	negs	r0, r0
    42cc:	e7f3      	b.n	42b6 <__gesf2+0x4a>
    42ce:	2c00      	cmp	r4, #0
    42d0:	d0db      	beq.n	428a <__gesf2+0x1e>
    42d2:	e7f9      	b.n	42c8 <__gesf2+0x5c>
    42d4:	4282      	cmp	r2, r0
    42d6:	dceb      	bgt.n	42b0 <__gesf2+0x44>
    42d8:	db04      	blt.n	42e4 <__gesf2+0x78>
    42da:	42a5      	cmp	r5, r4
    42dc:	d8e8      	bhi.n	42b0 <__gesf2+0x44>
    42de:	2000      	movs	r0, #0
    42e0:	42a5      	cmp	r5, r4
    42e2:	d2e8      	bcs.n	42b6 <__gesf2+0x4a>
    42e4:	2101      	movs	r1, #1
    42e6:	1e58      	subs	r0, r3, #1
    42e8:	4308      	orrs	r0, r1
    42ea:	e7e4      	b.n	42b6 <__gesf2+0x4a>

000042ec <__lesf2>:
    42ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ee:	0042      	lsls	r2, r0, #1
    42f0:	024d      	lsls	r5, r1, #9
    42f2:	004c      	lsls	r4, r1, #1
    42f4:	0246      	lsls	r6, r0, #9
    42f6:	0a76      	lsrs	r6, r6, #9
    42f8:	0e12      	lsrs	r2, r2, #24
    42fa:	0fc3      	lsrs	r3, r0, #31
    42fc:	0a6d      	lsrs	r5, r5, #9
    42fe:	0e24      	lsrs	r4, r4, #24
    4300:	0fc9      	lsrs	r1, r1, #31
    4302:	2aff      	cmp	r2, #255	; 0xff
    4304:	d016      	beq.n	4334 <__lesf2+0x48>
    4306:	2cff      	cmp	r4, #255	; 0xff
    4308:	d018      	beq.n	433c <__lesf2+0x50>
    430a:	2a00      	cmp	r2, #0
    430c:	d10a      	bne.n	4324 <__lesf2+0x38>
    430e:	4270      	negs	r0, r6
    4310:	4170      	adcs	r0, r6
    4312:	b2c0      	uxtb	r0, r0
    4314:	2c00      	cmp	r4, #0
    4316:	d015      	beq.n	4344 <__lesf2+0x58>
    4318:	2800      	cmp	r0, #0
    431a:	d005      	beq.n	4328 <__lesf2+0x3c>
    431c:	2001      	movs	r0, #1
    431e:	3901      	subs	r1, #1
    4320:	4308      	orrs	r0, r1
    4322:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4324:	2c00      	cmp	r4, #0
    4326:	d013      	beq.n	4350 <__lesf2+0x64>
    4328:	4299      	cmp	r1, r3
    432a:	d014      	beq.n	4356 <__lesf2+0x6a>
    432c:	2001      	movs	r0, #1
    432e:	425b      	negs	r3, r3
    4330:	4318      	orrs	r0, r3
    4332:	e7f6      	b.n	4322 <__lesf2+0x36>
    4334:	2002      	movs	r0, #2
    4336:	2e00      	cmp	r6, #0
    4338:	d1f3      	bne.n	4322 <__lesf2+0x36>
    433a:	e7e4      	b.n	4306 <__lesf2+0x1a>
    433c:	2002      	movs	r0, #2
    433e:	2d00      	cmp	r5, #0
    4340:	d1ef      	bne.n	4322 <__lesf2+0x36>
    4342:	e7e2      	b.n	430a <__lesf2+0x1e>
    4344:	2d00      	cmp	r5, #0
    4346:	d1e7      	bne.n	4318 <__lesf2+0x2c>
    4348:	2000      	movs	r0, #0
    434a:	2e00      	cmp	r6, #0
    434c:	d0e9      	beq.n	4322 <__lesf2+0x36>
    434e:	e7ed      	b.n	432c <__lesf2+0x40>
    4350:	2d00      	cmp	r5, #0
    4352:	d1e9      	bne.n	4328 <__lesf2+0x3c>
    4354:	e7ea      	b.n	432c <__lesf2+0x40>
    4356:	42a2      	cmp	r2, r4
    4358:	dc06      	bgt.n	4368 <__lesf2+0x7c>
    435a:	dbdf      	blt.n	431c <__lesf2+0x30>
    435c:	42ae      	cmp	r6, r5
    435e:	d803      	bhi.n	4368 <__lesf2+0x7c>
    4360:	2000      	movs	r0, #0
    4362:	42ae      	cmp	r6, r5
    4364:	d3da      	bcc.n	431c <__lesf2+0x30>
    4366:	e7dc      	b.n	4322 <__lesf2+0x36>
    4368:	2001      	movs	r0, #1
    436a:	4249      	negs	r1, r1
    436c:	4308      	orrs	r0, r1
    436e:	e7d8      	b.n	4322 <__lesf2+0x36>

00004370 <__aeabi_fmul>:
    4370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4372:	4657      	mov	r7, sl
    4374:	464e      	mov	r6, r9
    4376:	4645      	mov	r5, r8
    4378:	46de      	mov	lr, fp
    437a:	b5e0      	push	{r5, r6, r7, lr}
    437c:	0247      	lsls	r7, r0, #9
    437e:	0046      	lsls	r6, r0, #1
    4380:	4688      	mov	r8, r1
    4382:	0a7f      	lsrs	r7, r7, #9
    4384:	0e36      	lsrs	r6, r6, #24
    4386:	0fc4      	lsrs	r4, r0, #31
    4388:	2e00      	cmp	r6, #0
    438a:	d047      	beq.n	441c <__aeabi_fmul+0xac>
    438c:	2eff      	cmp	r6, #255	; 0xff
    438e:	d024      	beq.n	43da <__aeabi_fmul+0x6a>
    4390:	00fb      	lsls	r3, r7, #3
    4392:	2780      	movs	r7, #128	; 0x80
    4394:	04ff      	lsls	r7, r7, #19
    4396:	431f      	orrs	r7, r3
    4398:	2300      	movs	r3, #0
    439a:	4699      	mov	r9, r3
    439c:	469a      	mov	sl, r3
    439e:	3e7f      	subs	r6, #127	; 0x7f
    43a0:	4643      	mov	r3, r8
    43a2:	025d      	lsls	r5, r3, #9
    43a4:	0058      	lsls	r0, r3, #1
    43a6:	0fdb      	lsrs	r3, r3, #31
    43a8:	0a6d      	lsrs	r5, r5, #9
    43aa:	0e00      	lsrs	r0, r0, #24
    43ac:	4698      	mov	r8, r3
    43ae:	d043      	beq.n	4438 <__aeabi_fmul+0xc8>
    43b0:	28ff      	cmp	r0, #255	; 0xff
    43b2:	d03b      	beq.n	442c <__aeabi_fmul+0xbc>
    43b4:	00eb      	lsls	r3, r5, #3
    43b6:	2580      	movs	r5, #128	; 0x80
    43b8:	2200      	movs	r2, #0
    43ba:	04ed      	lsls	r5, r5, #19
    43bc:	431d      	orrs	r5, r3
    43be:	387f      	subs	r0, #127	; 0x7f
    43c0:	1836      	adds	r6, r6, r0
    43c2:	1c73      	adds	r3, r6, #1
    43c4:	4641      	mov	r1, r8
    43c6:	469b      	mov	fp, r3
    43c8:	464b      	mov	r3, r9
    43ca:	4061      	eors	r1, r4
    43cc:	4313      	orrs	r3, r2
    43ce:	2b0f      	cmp	r3, #15
    43d0:	d864      	bhi.n	449c <__aeabi_fmul+0x12c>
    43d2:	4875      	ldr	r0, [pc, #468]	; (45a8 <__aeabi_fmul+0x238>)
    43d4:	009b      	lsls	r3, r3, #2
    43d6:	58c3      	ldr	r3, [r0, r3]
    43d8:	469f      	mov	pc, r3
    43da:	2f00      	cmp	r7, #0
    43dc:	d142      	bne.n	4464 <__aeabi_fmul+0xf4>
    43de:	2308      	movs	r3, #8
    43e0:	4699      	mov	r9, r3
    43e2:	3b06      	subs	r3, #6
    43e4:	26ff      	movs	r6, #255	; 0xff
    43e6:	469a      	mov	sl, r3
    43e8:	e7da      	b.n	43a0 <__aeabi_fmul+0x30>
    43ea:	4641      	mov	r1, r8
    43ec:	2a02      	cmp	r2, #2
    43ee:	d028      	beq.n	4442 <__aeabi_fmul+0xd2>
    43f0:	2a03      	cmp	r2, #3
    43f2:	d100      	bne.n	43f6 <__aeabi_fmul+0x86>
    43f4:	e0ce      	b.n	4594 <__aeabi_fmul+0x224>
    43f6:	2a01      	cmp	r2, #1
    43f8:	d000      	beq.n	43fc <__aeabi_fmul+0x8c>
    43fa:	e0ac      	b.n	4556 <__aeabi_fmul+0x1e6>
    43fc:	4011      	ands	r1, r2
    43fe:	2000      	movs	r0, #0
    4400:	2200      	movs	r2, #0
    4402:	b2cc      	uxtb	r4, r1
    4404:	0240      	lsls	r0, r0, #9
    4406:	05d2      	lsls	r2, r2, #23
    4408:	0a40      	lsrs	r0, r0, #9
    440a:	07e4      	lsls	r4, r4, #31
    440c:	4310      	orrs	r0, r2
    440e:	4320      	orrs	r0, r4
    4410:	bc3c      	pop	{r2, r3, r4, r5}
    4412:	4690      	mov	r8, r2
    4414:	4699      	mov	r9, r3
    4416:	46a2      	mov	sl, r4
    4418:	46ab      	mov	fp, r5
    441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    441c:	2f00      	cmp	r7, #0
    441e:	d115      	bne.n	444c <__aeabi_fmul+0xdc>
    4420:	2304      	movs	r3, #4
    4422:	4699      	mov	r9, r3
    4424:	3b03      	subs	r3, #3
    4426:	2600      	movs	r6, #0
    4428:	469a      	mov	sl, r3
    442a:	e7b9      	b.n	43a0 <__aeabi_fmul+0x30>
    442c:	20ff      	movs	r0, #255	; 0xff
    442e:	2202      	movs	r2, #2
    4430:	2d00      	cmp	r5, #0
    4432:	d0c5      	beq.n	43c0 <__aeabi_fmul+0x50>
    4434:	2203      	movs	r2, #3
    4436:	e7c3      	b.n	43c0 <__aeabi_fmul+0x50>
    4438:	2d00      	cmp	r5, #0
    443a:	d119      	bne.n	4470 <__aeabi_fmul+0x100>
    443c:	2000      	movs	r0, #0
    443e:	2201      	movs	r2, #1
    4440:	e7be      	b.n	43c0 <__aeabi_fmul+0x50>
    4442:	2401      	movs	r4, #1
    4444:	22ff      	movs	r2, #255	; 0xff
    4446:	400c      	ands	r4, r1
    4448:	2000      	movs	r0, #0
    444a:	e7db      	b.n	4404 <__aeabi_fmul+0x94>
    444c:	0038      	movs	r0, r7
    444e:	f001 fa83 	bl	5958 <__clzsi2>
    4452:	2676      	movs	r6, #118	; 0x76
    4454:	1f43      	subs	r3, r0, #5
    4456:	409f      	lsls	r7, r3
    4458:	2300      	movs	r3, #0
    445a:	4276      	negs	r6, r6
    445c:	1a36      	subs	r6, r6, r0
    445e:	4699      	mov	r9, r3
    4460:	469a      	mov	sl, r3
    4462:	e79d      	b.n	43a0 <__aeabi_fmul+0x30>
    4464:	230c      	movs	r3, #12
    4466:	4699      	mov	r9, r3
    4468:	3b09      	subs	r3, #9
    446a:	26ff      	movs	r6, #255	; 0xff
    446c:	469a      	mov	sl, r3
    446e:	e797      	b.n	43a0 <__aeabi_fmul+0x30>
    4470:	0028      	movs	r0, r5
    4472:	f001 fa71 	bl	5958 <__clzsi2>
    4476:	1f43      	subs	r3, r0, #5
    4478:	409d      	lsls	r5, r3
    447a:	2376      	movs	r3, #118	; 0x76
    447c:	425b      	negs	r3, r3
    447e:	1a18      	subs	r0, r3, r0
    4480:	2200      	movs	r2, #0
    4482:	e79d      	b.n	43c0 <__aeabi_fmul+0x50>
    4484:	2080      	movs	r0, #128	; 0x80
    4486:	2400      	movs	r4, #0
    4488:	03c0      	lsls	r0, r0, #15
    448a:	22ff      	movs	r2, #255	; 0xff
    448c:	e7ba      	b.n	4404 <__aeabi_fmul+0x94>
    448e:	003d      	movs	r5, r7
    4490:	4652      	mov	r2, sl
    4492:	e7ab      	b.n	43ec <__aeabi_fmul+0x7c>
    4494:	003d      	movs	r5, r7
    4496:	0021      	movs	r1, r4
    4498:	4652      	mov	r2, sl
    449a:	e7a7      	b.n	43ec <__aeabi_fmul+0x7c>
    449c:	0c3b      	lsrs	r3, r7, #16
    449e:	469c      	mov	ip, r3
    44a0:	042a      	lsls	r2, r5, #16
    44a2:	0c12      	lsrs	r2, r2, #16
    44a4:	0c2b      	lsrs	r3, r5, #16
    44a6:	0014      	movs	r4, r2
    44a8:	4660      	mov	r0, ip
    44aa:	4665      	mov	r5, ip
    44ac:	043f      	lsls	r7, r7, #16
    44ae:	0c3f      	lsrs	r7, r7, #16
    44b0:	437c      	muls	r4, r7
    44b2:	4342      	muls	r2, r0
    44b4:	435d      	muls	r5, r3
    44b6:	437b      	muls	r3, r7
    44b8:	0c27      	lsrs	r7, r4, #16
    44ba:	189b      	adds	r3, r3, r2
    44bc:	18ff      	adds	r7, r7, r3
    44be:	42ba      	cmp	r2, r7
    44c0:	d903      	bls.n	44ca <__aeabi_fmul+0x15a>
    44c2:	2380      	movs	r3, #128	; 0x80
    44c4:	025b      	lsls	r3, r3, #9
    44c6:	469c      	mov	ip, r3
    44c8:	4465      	add	r5, ip
    44ca:	0424      	lsls	r4, r4, #16
    44cc:	043a      	lsls	r2, r7, #16
    44ce:	0c24      	lsrs	r4, r4, #16
    44d0:	1912      	adds	r2, r2, r4
    44d2:	0193      	lsls	r3, r2, #6
    44d4:	1e5c      	subs	r4, r3, #1
    44d6:	41a3      	sbcs	r3, r4
    44d8:	0c3f      	lsrs	r7, r7, #16
    44da:	0e92      	lsrs	r2, r2, #26
    44dc:	197d      	adds	r5, r7, r5
    44de:	431a      	orrs	r2, r3
    44e0:	01ad      	lsls	r5, r5, #6
    44e2:	4315      	orrs	r5, r2
    44e4:	012b      	lsls	r3, r5, #4
    44e6:	d504      	bpl.n	44f2 <__aeabi_fmul+0x182>
    44e8:	2301      	movs	r3, #1
    44ea:	465e      	mov	r6, fp
    44ec:	086a      	lsrs	r2, r5, #1
    44ee:	401d      	ands	r5, r3
    44f0:	4315      	orrs	r5, r2
    44f2:	0032      	movs	r2, r6
    44f4:	327f      	adds	r2, #127	; 0x7f
    44f6:	2a00      	cmp	r2, #0
    44f8:	dd25      	ble.n	4546 <__aeabi_fmul+0x1d6>
    44fa:	076b      	lsls	r3, r5, #29
    44fc:	d004      	beq.n	4508 <__aeabi_fmul+0x198>
    44fe:	230f      	movs	r3, #15
    4500:	402b      	ands	r3, r5
    4502:	2b04      	cmp	r3, #4
    4504:	d000      	beq.n	4508 <__aeabi_fmul+0x198>
    4506:	3504      	adds	r5, #4
    4508:	012b      	lsls	r3, r5, #4
    450a:	d503      	bpl.n	4514 <__aeabi_fmul+0x1a4>
    450c:	0032      	movs	r2, r6
    450e:	4b27      	ldr	r3, [pc, #156]	; (45ac <__aeabi_fmul+0x23c>)
    4510:	3280      	adds	r2, #128	; 0x80
    4512:	401d      	ands	r5, r3
    4514:	2afe      	cmp	r2, #254	; 0xfe
    4516:	dc94      	bgt.n	4442 <__aeabi_fmul+0xd2>
    4518:	2401      	movs	r4, #1
    451a:	01a8      	lsls	r0, r5, #6
    451c:	0a40      	lsrs	r0, r0, #9
    451e:	b2d2      	uxtb	r2, r2
    4520:	400c      	ands	r4, r1
    4522:	e76f      	b.n	4404 <__aeabi_fmul+0x94>
    4524:	2080      	movs	r0, #128	; 0x80
    4526:	03c0      	lsls	r0, r0, #15
    4528:	4207      	tst	r7, r0
    452a:	d007      	beq.n	453c <__aeabi_fmul+0x1cc>
    452c:	4205      	tst	r5, r0
    452e:	d105      	bne.n	453c <__aeabi_fmul+0x1cc>
    4530:	4328      	orrs	r0, r5
    4532:	0240      	lsls	r0, r0, #9
    4534:	0a40      	lsrs	r0, r0, #9
    4536:	4644      	mov	r4, r8
    4538:	22ff      	movs	r2, #255	; 0xff
    453a:	e763      	b.n	4404 <__aeabi_fmul+0x94>
    453c:	4338      	orrs	r0, r7
    453e:	0240      	lsls	r0, r0, #9
    4540:	0a40      	lsrs	r0, r0, #9
    4542:	22ff      	movs	r2, #255	; 0xff
    4544:	e75e      	b.n	4404 <__aeabi_fmul+0x94>
    4546:	2401      	movs	r4, #1
    4548:	1aa3      	subs	r3, r4, r2
    454a:	2b1b      	cmp	r3, #27
    454c:	dd05      	ble.n	455a <__aeabi_fmul+0x1ea>
    454e:	400c      	ands	r4, r1
    4550:	2200      	movs	r2, #0
    4552:	2000      	movs	r0, #0
    4554:	e756      	b.n	4404 <__aeabi_fmul+0x94>
    4556:	465e      	mov	r6, fp
    4558:	e7cb      	b.n	44f2 <__aeabi_fmul+0x182>
    455a:	002a      	movs	r2, r5
    455c:	2020      	movs	r0, #32
    455e:	40da      	lsrs	r2, r3
    4560:	1ac3      	subs	r3, r0, r3
    4562:	409d      	lsls	r5, r3
    4564:	002b      	movs	r3, r5
    4566:	1e5d      	subs	r5, r3, #1
    4568:	41ab      	sbcs	r3, r5
    456a:	4313      	orrs	r3, r2
    456c:	075a      	lsls	r2, r3, #29
    456e:	d004      	beq.n	457a <__aeabi_fmul+0x20a>
    4570:	220f      	movs	r2, #15
    4572:	401a      	ands	r2, r3
    4574:	2a04      	cmp	r2, #4
    4576:	d000      	beq.n	457a <__aeabi_fmul+0x20a>
    4578:	3304      	adds	r3, #4
    457a:	015a      	lsls	r2, r3, #5
    457c:	d504      	bpl.n	4588 <__aeabi_fmul+0x218>
    457e:	2401      	movs	r4, #1
    4580:	2201      	movs	r2, #1
    4582:	400c      	ands	r4, r1
    4584:	2000      	movs	r0, #0
    4586:	e73d      	b.n	4404 <__aeabi_fmul+0x94>
    4588:	2401      	movs	r4, #1
    458a:	019b      	lsls	r3, r3, #6
    458c:	0a58      	lsrs	r0, r3, #9
    458e:	400c      	ands	r4, r1
    4590:	2200      	movs	r2, #0
    4592:	e737      	b.n	4404 <__aeabi_fmul+0x94>
    4594:	2080      	movs	r0, #128	; 0x80
    4596:	2401      	movs	r4, #1
    4598:	03c0      	lsls	r0, r0, #15
    459a:	4328      	orrs	r0, r5
    459c:	0240      	lsls	r0, r0, #9
    459e:	0a40      	lsrs	r0, r0, #9
    45a0:	400c      	ands	r4, r1
    45a2:	22ff      	movs	r2, #255	; 0xff
    45a4:	e72e      	b.n	4404 <__aeabi_fmul+0x94>
    45a6:	46c0      	nop			; (mov r8, r8)
    45a8:	00005f60 	.word	0x00005f60
    45ac:	f7ffffff 	.word	0xf7ffffff

000045b0 <__aeabi_fsub>:
    45b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45b2:	464f      	mov	r7, r9
    45b4:	46d6      	mov	lr, sl
    45b6:	4646      	mov	r6, r8
    45b8:	0044      	lsls	r4, r0, #1
    45ba:	b5c0      	push	{r6, r7, lr}
    45bc:	0fc2      	lsrs	r2, r0, #31
    45be:	0247      	lsls	r7, r0, #9
    45c0:	0248      	lsls	r0, r1, #9
    45c2:	0a40      	lsrs	r0, r0, #9
    45c4:	4684      	mov	ip, r0
    45c6:	4666      	mov	r6, ip
    45c8:	0a7b      	lsrs	r3, r7, #9
    45ca:	0048      	lsls	r0, r1, #1
    45cc:	0fc9      	lsrs	r1, r1, #31
    45ce:	469a      	mov	sl, r3
    45d0:	0e24      	lsrs	r4, r4, #24
    45d2:	0015      	movs	r5, r2
    45d4:	00db      	lsls	r3, r3, #3
    45d6:	0e00      	lsrs	r0, r0, #24
    45d8:	4689      	mov	r9, r1
    45da:	00f6      	lsls	r6, r6, #3
    45dc:	28ff      	cmp	r0, #255	; 0xff
    45de:	d100      	bne.n	45e2 <__aeabi_fsub+0x32>
    45e0:	e08f      	b.n	4702 <__aeabi_fsub+0x152>
    45e2:	2101      	movs	r1, #1
    45e4:	464f      	mov	r7, r9
    45e6:	404f      	eors	r7, r1
    45e8:	0039      	movs	r1, r7
    45ea:	4291      	cmp	r1, r2
    45ec:	d066      	beq.n	46bc <__aeabi_fsub+0x10c>
    45ee:	1a22      	subs	r2, r4, r0
    45f0:	2a00      	cmp	r2, #0
    45f2:	dc00      	bgt.n	45f6 <__aeabi_fsub+0x46>
    45f4:	e09d      	b.n	4732 <__aeabi_fsub+0x182>
    45f6:	2800      	cmp	r0, #0
    45f8:	d13d      	bne.n	4676 <__aeabi_fsub+0xc6>
    45fa:	2e00      	cmp	r6, #0
    45fc:	d100      	bne.n	4600 <__aeabi_fsub+0x50>
    45fe:	e08b      	b.n	4718 <__aeabi_fsub+0x168>
    4600:	1e51      	subs	r1, r2, #1
    4602:	2900      	cmp	r1, #0
    4604:	d000      	beq.n	4608 <__aeabi_fsub+0x58>
    4606:	e0b5      	b.n	4774 <__aeabi_fsub+0x1c4>
    4608:	2401      	movs	r4, #1
    460a:	1b9b      	subs	r3, r3, r6
    460c:	015a      	lsls	r2, r3, #5
    460e:	d544      	bpl.n	469a <__aeabi_fsub+0xea>
    4610:	019b      	lsls	r3, r3, #6
    4612:	099f      	lsrs	r7, r3, #6
    4614:	0038      	movs	r0, r7
    4616:	f001 f99f 	bl	5958 <__clzsi2>
    461a:	3805      	subs	r0, #5
    461c:	4087      	lsls	r7, r0
    461e:	4284      	cmp	r4, r0
    4620:	dd00      	ble.n	4624 <__aeabi_fsub+0x74>
    4622:	e096      	b.n	4752 <__aeabi_fsub+0x1a2>
    4624:	1b04      	subs	r4, r0, r4
    4626:	003a      	movs	r2, r7
    4628:	2020      	movs	r0, #32
    462a:	3401      	adds	r4, #1
    462c:	40e2      	lsrs	r2, r4
    462e:	1b04      	subs	r4, r0, r4
    4630:	40a7      	lsls	r7, r4
    4632:	003b      	movs	r3, r7
    4634:	1e5f      	subs	r7, r3, #1
    4636:	41bb      	sbcs	r3, r7
    4638:	2400      	movs	r4, #0
    463a:	4313      	orrs	r3, r2
    463c:	075a      	lsls	r2, r3, #29
    463e:	d004      	beq.n	464a <__aeabi_fsub+0x9a>
    4640:	220f      	movs	r2, #15
    4642:	401a      	ands	r2, r3
    4644:	2a04      	cmp	r2, #4
    4646:	d000      	beq.n	464a <__aeabi_fsub+0x9a>
    4648:	3304      	adds	r3, #4
    464a:	015a      	lsls	r2, r3, #5
    464c:	d527      	bpl.n	469e <__aeabi_fsub+0xee>
    464e:	3401      	adds	r4, #1
    4650:	2cff      	cmp	r4, #255	; 0xff
    4652:	d100      	bne.n	4656 <__aeabi_fsub+0xa6>
    4654:	e079      	b.n	474a <__aeabi_fsub+0x19a>
    4656:	2201      	movs	r2, #1
    4658:	019b      	lsls	r3, r3, #6
    465a:	0a5b      	lsrs	r3, r3, #9
    465c:	b2e4      	uxtb	r4, r4
    465e:	402a      	ands	r2, r5
    4660:	025b      	lsls	r3, r3, #9
    4662:	05e4      	lsls	r4, r4, #23
    4664:	0a58      	lsrs	r0, r3, #9
    4666:	07d2      	lsls	r2, r2, #31
    4668:	4320      	orrs	r0, r4
    466a:	4310      	orrs	r0, r2
    466c:	bc1c      	pop	{r2, r3, r4}
    466e:	4690      	mov	r8, r2
    4670:	4699      	mov	r9, r3
    4672:	46a2      	mov	sl, r4
    4674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4676:	2cff      	cmp	r4, #255	; 0xff
    4678:	d0e0      	beq.n	463c <__aeabi_fsub+0x8c>
    467a:	2180      	movs	r1, #128	; 0x80
    467c:	04c9      	lsls	r1, r1, #19
    467e:	430e      	orrs	r6, r1
    4680:	2a1b      	cmp	r2, #27
    4682:	dc7b      	bgt.n	477c <__aeabi_fsub+0x1cc>
    4684:	0031      	movs	r1, r6
    4686:	2020      	movs	r0, #32
    4688:	40d1      	lsrs	r1, r2
    468a:	1a82      	subs	r2, r0, r2
    468c:	4096      	lsls	r6, r2
    468e:	1e72      	subs	r2, r6, #1
    4690:	4196      	sbcs	r6, r2
    4692:	430e      	orrs	r6, r1
    4694:	1b9b      	subs	r3, r3, r6
    4696:	015a      	lsls	r2, r3, #5
    4698:	d4ba      	bmi.n	4610 <__aeabi_fsub+0x60>
    469a:	075a      	lsls	r2, r3, #29
    469c:	d1d0      	bne.n	4640 <__aeabi_fsub+0x90>
    469e:	2201      	movs	r2, #1
    46a0:	08df      	lsrs	r7, r3, #3
    46a2:	402a      	ands	r2, r5
    46a4:	2cff      	cmp	r4, #255	; 0xff
    46a6:	d133      	bne.n	4710 <__aeabi_fsub+0x160>
    46a8:	2f00      	cmp	r7, #0
    46aa:	d100      	bne.n	46ae <__aeabi_fsub+0xfe>
    46ac:	e0a8      	b.n	4800 <__aeabi_fsub+0x250>
    46ae:	2380      	movs	r3, #128	; 0x80
    46b0:	03db      	lsls	r3, r3, #15
    46b2:	433b      	orrs	r3, r7
    46b4:	025b      	lsls	r3, r3, #9
    46b6:	0a5b      	lsrs	r3, r3, #9
    46b8:	24ff      	movs	r4, #255	; 0xff
    46ba:	e7d1      	b.n	4660 <__aeabi_fsub+0xb0>
    46bc:	1a21      	subs	r1, r4, r0
    46be:	2900      	cmp	r1, #0
    46c0:	dd4c      	ble.n	475c <__aeabi_fsub+0x1ac>
    46c2:	2800      	cmp	r0, #0
    46c4:	d02a      	beq.n	471c <__aeabi_fsub+0x16c>
    46c6:	2cff      	cmp	r4, #255	; 0xff
    46c8:	d0b8      	beq.n	463c <__aeabi_fsub+0x8c>
    46ca:	2080      	movs	r0, #128	; 0x80
    46cc:	04c0      	lsls	r0, r0, #19
    46ce:	4306      	orrs	r6, r0
    46d0:	291b      	cmp	r1, #27
    46d2:	dd00      	ble.n	46d6 <__aeabi_fsub+0x126>
    46d4:	e0af      	b.n	4836 <__aeabi_fsub+0x286>
    46d6:	0030      	movs	r0, r6
    46d8:	2720      	movs	r7, #32
    46da:	40c8      	lsrs	r0, r1
    46dc:	1a79      	subs	r1, r7, r1
    46de:	408e      	lsls	r6, r1
    46e0:	1e71      	subs	r1, r6, #1
    46e2:	418e      	sbcs	r6, r1
    46e4:	4306      	orrs	r6, r0
    46e6:	199b      	adds	r3, r3, r6
    46e8:	0159      	lsls	r1, r3, #5
    46ea:	d5d6      	bpl.n	469a <__aeabi_fsub+0xea>
    46ec:	3401      	adds	r4, #1
    46ee:	2cff      	cmp	r4, #255	; 0xff
    46f0:	d100      	bne.n	46f4 <__aeabi_fsub+0x144>
    46f2:	e085      	b.n	4800 <__aeabi_fsub+0x250>
    46f4:	2201      	movs	r2, #1
    46f6:	497a      	ldr	r1, [pc, #488]	; (48e0 <__aeabi_fsub+0x330>)
    46f8:	401a      	ands	r2, r3
    46fa:	085b      	lsrs	r3, r3, #1
    46fc:	400b      	ands	r3, r1
    46fe:	4313      	orrs	r3, r2
    4700:	e79c      	b.n	463c <__aeabi_fsub+0x8c>
    4702:	2e00      	cmp	r6, #0
    4704:	d000      	beq.n	4708 <__aeabi_fsub+0x158>
    4706:	e770      	b.n	45ea <__aeabi_fsub+0x3a>
    4708:	e76b      	b.n	45e2 <__aeabi_fsub+0x32>
    470a:	1e3b      	subs	r3, r7, #0
    470c:	d1c5      	bne.n	469a <__aeabi_fsub+0xea>
    470e:	2200      	movs	r2, #0
    4710:	027b      	lsls	r3, r7, #9
    4712:	0a5b      	lsrs	r3, r3, #9
    4714:	b2e4      	uxtb	r4, r4
    4716:	e7a3      	b.n	4660 <__aeabi_fsub+0xb0>
    4718:	0014      	movs	r4, r2
    471a:	e78f      	b.n	463c <__aeabi_fsub+0x8c>
    471c:	2e00      	cmp	r6, #0
    471e:	d04d      	beq.n	47bc <__aeabi_fsub+0x20c>
    4720:	1e48      	subs	r0, r1, #1
    4722:	2800      	cmp	r0, #0
    4724:	d157      	bne.n	47d6 <__aeabi_fsub+0x226>
    4726:	199b      	adds	r3, r3, r6
    4728:	2401      	movs	r4, #1
    472a:	015a      	lsls	r2, r3, #5
    472c:	d5b5      	bpl.n	469a <__aeabi_fsub+0xea>
    472e:	2402      	movs	r4, #2
    4730:	e7e0      	b.n	46f4 <__aeabi_fsub+0x144>
    4732:	2a00      	cmp	r2, #0
    4734:	d125      	bne.n	4782 <__aeabi_fsub+0x1d2>
    4736:	1c62      	adds	r2, r4, #1
    4738:	b2d2      	uxtb	r2, r2
    473a:	2a01      	cmp	r2, #1
    473c:	dd72      	ble.n	4824 <__aeabi_fsub+0x274>
    473e:	1b9f      	subs	r7, r3, r6
    4740:	017a      	lsls	r2, r7, #5
    4742:	d535      	bpl.n	47b0 <__aeabi_fsub+0x200>
    4744:	1af7      	subs	r7, r6, r3
    4746:	000d      	movs	r5, r1
    4748:	e764      	b.n	4614 <__aeabi_fsub+0x64>
    474a:	2201      	movs	r2, #1
    474c:	2300      	movs	r3, #0
    474e:	402a      	ands	r2, r5
    4750:	e786      	b.n	4660 <__aeabi_fsub+0xb0>
    4752:	003b      	movs	r3, r7
    4754:	4a63      	ldr	r2, [pc, #396]	; (48e4 <__aeabi_fsub+0x334>)
    4756:	1a24      	subs	r4, r4, r0
    4758:	4013      	ands	r3, r2
    475a:	e76f      	b.n	463c <__aeabi_fsub+0x8c>
    475c:	2900      	cmp	r1, #0
    475e:	d16c      	bne.n	483a <__aeabi_fsub+0x28a>
    4760:	1c61      	adds	r1, r4, #1
    4762:	b2c8      	uxtb	r0, r1
    4764:	2801      	cmp	r0, #1
    4766:	dd4e      	ble.n	4806 <__aeabi_fsub+0x256>
    4768:	29ff      	cmp	r1, #255	; 0xff
    476a:	d049      	beq.n	4800 <__aeabi_fsub+0x250>
    476c:	199b      	adds	r3, r3, r6
    476e:	085b      	lsrs	r3, r3, #1
    4770:	000c      	movs	r4, r1
    4772:	e763      	b.n	463c <__aeabi_fsub+0x8c>
    4774:	2aff      	cmp	r2, #255	; 0xff
    4776:	d041      	beq.n	47fc <__aeabi_fsub+0x24c>
    4778:	000a      	movs	r2, r1
    477a:	e781      	b.n	4680 <__aeabi_fsub+0xd0>
    477c:	2601      	movs	r6, #1
    477e:	1b9b      	subs	r3, r3, r6
    4780:	e789      	b.n	4696 <__aeabi_fsub+0xe6>
    4782:	2c00      	cmp	r4, #0
    4784:	d01c      	beq.n	47c0 <__aeabi_fsub+0x210>
    4786:	28ff      	cmp	r0, #255	; 0xff
    4788:	d021      	beq.n	47ce <__aeabi_fsub+0x21e>
    478a:	2480      	movs	r4, #128	; 0x80
    478c:	04e4      	lsls	r4, r4, #19
    478e:	4252      	negs	r2, r2
    4790:	4323      	orrs	r3, r4
    4792:	2a1b      	cmp	r2, #27
    4794:	dd00      	ble.n	4798 <__aeabi_fsub+0x1e8>
    4796:	e096      	b.n	48c6 <__aeabi_fsub+0x316>
    4798:	001c      	movs	r4, r3
    479a:	2520      	movs	r5, #32
    479c:	40d4      	lsrs	r4, r2
    479e:	1aaa      	subs	r2, r5, r2
    47a0:	4093      	lsls	r3, r2
    47a2:	1e5a      	subs	r2, r3, #1
    47a4:	4193      	sbcs	r3, r2
    47a6:	4323      	orrs	r3, r4
    47a8:	1af3      	subs	r3, r6, r3
    47aa:	0004      	movs	r4, r0
    47ac:	000d      	movs	r5, r1
    47ae:	e72d      	b.n	460c <__aeabi_fsub+0x5c>
    47b0:	2f00      	cmp	r7, #0
    47b2:	d000      	beq.n	47b6 <__aeabi_fsub+0x206>
    47b4:	e72e      	b.n	4614 <__aeabi_fsub+0x64>
    47b6:	2200      	movs	r2, #0
    47b8:	2400      	movs	r4, #0
    47ba:	e7a9      	b.n	4710 <__aeabi_fsub+0x160>
    47bc:	000c      	movs	r4, r1
    47be:	e73d      	b.n	463c <__aeabi_fsub+0x8c>
    47c0:	2b00      	cmp	r3, #0
    47c2:	d058      	beq.n	4876 <__aeabi_fsub+0x2c6>
    47c4:	43d2      	mvns	r2, r2
    47c6:	2a00      	cmp	r2, #0
    47c8:	d0ee      	beq.n	47a8 <__aeabi_fsub+0x1f8>
    47ca:	28ff      	cmp	r0, #255	; 0xff
    47cc:	d1e1      	bne.n	4792 <__aeabi_fsub+0x1e2>
    47ce:	0033      	movs	r3, r6
    47d0:	24ff      	movs	r4, #255	; 0xff
    47d2:	000d      	movs	r5, r1
    47d4:	e732      	b.n	463c <__aeabi_fsub+0x8c>
    47d6:	29ff      	cmp	r1, #255	; 0xff
    47d8:	d010      	beq.n	47fc <__aeabi_fsub+0x24c>
    47da:	0001      	movs	r1, r0
    47dc:	e778      	b.n	46d0 <__aeabi_fsub+0x120>
    47de:	2b00      	cmp	r3, #0
    47e0:	d06e      	beq.n	48c0 <__aeabi_fsub+0x310>
    47e2:	24ff      	movs	r4, #255	; 0xff
    47e4:	2e00      	cmp	r6, #0
    47e6:	d100      	bne.n	47ea <__aeabi_fsub+0x23a>
    47e8:	e728      	b.n	463c <__aeabi_fsub+0x8c>
    47ea:	2280      	movs	r2, #128	; 0x80
    47ec:	4651      	mov	r1, sl
    47ee:	03d2      	lsls	r2, r2, #15
    47f0:	4211      	tst	r1, r2
    47f2:	d003      	beq.n	47fc <__aeabi_fsub+0x24c>
    47f4:	4661      	mov	r1, ip
    47f6:	4211      	tst	r1, r2
    47f8:	d100      	bne.n	47fc <__aeabi_fsub+0x24c>
    47fa:	0033      	movs	r3, r6
    47fc:	24ff      	movs	r4, #255	; 0xff
    47fe:	e71d      	b.n	463c <__aeabi_fsub+0x8c>
    4800:	24ff      	movs	r4, #255	; 0xff
    4802:	2300      	movs	r3, #0
    4804:	e72c      	b.n	4660 <__aeabi_fsub+0xb0>
    4806:	2c00      	cmp	r4, #0
    4808:	d1e9      	bne.n	47de <__aeabi_fsub+0x22e>
    480a:	2b00      	cmp	r3, #0
    480c:	d063      	beq.n	48d6 <__aeabi_fsub+0x326>
    480e:	2e00      	cmp	r6, #0
    4810:	d100      	bne.n	4814 <__aeabi_fsub+0x264>
    4812:	e713      	b.n	463c <__aeabi_fsub+0x8c>
    4814:	199b      	adds	r3, r3, r6
    4816:	015a      	lsls	r2, r3, #5
    4818:	d400      	bmi.n	481c <__aeabi_fsub+0x26c>
    481a:	e73e      	b.n	469a <__aeabi_fsub+0xea>
    481c:	4a31      	ldr	r2, [pc, #196]	; (48e4 <__aeabi_fsub+0x334>)
    481e:	000c      	movs	r4, r1
    4820:	4013      	ands	r3, r2
    4822:	e70b      	b.n	463c <__aeabi_fsub+0x8c>
    4824:	2c00      	cmp	r4, #0
    4826:	d11e      	bne.n	4866 <__aeabi_fsub+0x2b6>
    4828:	2b00      	cmp	r3, #0
    482a:	d12f      	bne.n	488c <__aeabi_fsub+0x2dc>
    482c:	2e00      	cmp	r6, #0
    482e:	d04f      	beq.n	48d0 <__aeabi_fsub+0x320>
    4830:	0033      	movs	r3, r6
    4832:	000d      	movs	r5, r1
    4834:	e702      	b.n	463c <__aeabi_fsub+0x8c>
    4836:	2601      	movs	r6, #1
    4838:	e755      	b.n	46e6 <__aeabi_fsub+0x136>
    483a:	2c00      	cmp	r4, #0
    483c:	d11f      	bne.n	487e <__aeabi_fsub+0x2ce>
    483e:	2b00      	cmp	r3, #0
    4840:	d043      	beq.n	48ca <__aeabi_fsub+0x31a>
    4842:	43c9      	mvns	r1, r1
    4844:	2900      	cmp	r1, #0
    4846:	d00b      	beq.n	4860 <__aeabi_fsub+0x2b0>
    4848:	28ff      	cmp	r0, #255	; 0xff
    484a:	d039      	beq.n	48c0 <__aeabi_fsub+0x310>
    484c:	291b      	cmp	r1, #27
    484e:	dc44      	bgt.n	48da <__aeabi_fsub+0x32a>
    4850:	001c      	movs	r4, r3
    4852:	2720      	movs	r7, #32
    4854:	40cc      	lsrs	r4, r1
    4856:	1a79      	subs	r1, r7, r1
    4858:	408b      	lsls	r3, r1
    485a:	1e59      	subs	r1, r3, #1
    485c:	418b      	sbcs	r3, r1
    485e:	4323      	orrs	r3, r4
    4860:	199b      	adds	r3, r3, r6
    4862:	0004      	movs	r4, r0
    4864:	e740      	b.n	46e8 <__aeabi_fsub+0x138>
    4866:	2b00      	cmp	r3, #0
    4868:	d11a      	bne.n	48a0 <__aeabi_fsub+0x2f0>
    486a:	2e00      	cmp	r6, #0
    486c:	d124      	bne.n	48b8 <__aeabi_fsub+0x308>
    486e:	2780      	movs	r7, #128	; 0x80
    4870:	2200      	movs	r2, #0
    4872:	03ff      	lsls	r7, r7, #15
    4874:	e71b      	b.n	46ae <__aeabi_fsub+0xfe>
    4876:	0033      	movs	r3, r6
    4878:	0004      	movs	r4, r0
    487a:	000d      	movs	r5, r1
    487c:	e6de      	b.n	463c <__aeabi_fsub+0x8c>
    487e:	28ff      	cmp	r0, #255	; 0xff
    4880:	d01e      	beq.n	48c0 <__aeabi_fsub+0x310>
    4882:	2480      	movs	r4, #128	; 0x80
    4884:	04e4      	lsls	r4, r4, #19
    4886:	4249      	negs	r1, r1
    4888:	4323      	orrs	r3, r4
    488a:	e7df      	b.n	484c <__aeabi_fsub+0x29c>
    488c:	2e00      	cmp	r6, #0
    488e:	d100      	bne.n	4892 <__aeabi_fsub+0x2e2>
    4890:	e6d4      	b.n	463c <__aeabi_fsub+0x8c>
    4892:	1b9f      	subs	r7, r3, r6
    4894:	017a      	lsls	r2, r7, #5
    4896:	d400      	bmi.n	489a <__aeabi_fsub+0x2ea>
    4898:	e737      	b.n	470a <__aeabi_fsub+0x15a>
    489a:	1af3      	subs	r3, r6, r3
    489c:	000d      	movs	r5, r1
    489e:	e6cd      	b.n	463c <__aeabi_fsub+0x8c>
    48a0:	24ff      	movs	r4, #255	; 0xff
    48a2:	2e00      	cmp	r6, #0
    48a4:	d100      	bne.n	48a8 <__aeabi_fsub+0x2f8>
    48a6:	e6c9      	b.n	463c <__aeabi_fsub+0x8c>
    48a8:	2280      	movs	r2, #128	; 0x80
    48aa:	4650      	mov	r0, sl
    48ac:	03d2      	lsls	r2, r2, #15
    48ae:	4210      	tst	r0, r2
    48b0:	d0a4      	beq.n	47fc <__aeabi_fsub+0x24c>
    48b2:	4660      	mov	r0, ip
    48b4:	4210      	tst	r0, r2
    48b6:	d1a1      	bne.n	47fc <__aeabi_fsub+0x24c>
    48b8:	0033      	movs	r3, r6
    48ba:	000d      	movs	r5, r1
    48bc:	24ff      	movs	r4, #255	; 0xff
    48be:	e6bd      	b.n	463c <__aeabi_fsub+0x8c>
    48c0:	0033      	movs	r3, r6
    48c2:	24ff      	movs	r4, #255	; 0xff
    48c4:	e6ba      	b.n	463c <__aeabi_fsub+0x8c>
    48c6:	2301      	movs	r3, #1
    48c8:	e76e      	b.n	47a8 <__aeabi_fsub+0x1f8>
    48ca:	0033      	movs	r3, r6
    48cc:	0004      	movs	r4, r0
    48ce:	e6b5      	b.n	463c <__aeabi_fsub+0x8c>
    48d0:	2700      	movs	r7, #0
    48d2:	2200      	movs	r2, #0
    48d4:	e71c      	b.n	4710 <__aeabi_fsub+0x160>
    48d6:	0033      	movs	r3, r6
    48d8:	e6b0      	b.n	463c <__aeabi_fsub+0x8c>
    48da:	2301      	movs	r3, #1
    48dc:	e7c0      	b.n	4860 <__aeabi_fsub+0x2b0>
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	7dffffff 	.word	0x7dffffff
    48e4:	fbffffff 	.word	0xfbffffff

000048e8 <__aeabi_fcmpun>:
    48e8:	0242      	lsls	r2, r0, #9
    48ea:	024b      	lsls	r3, r1, #9
    48ec:	0040      	lsls	r0, r0, #1
    48ee:	0049      	lsls	r1, r1, #1
    48f0:	0a52      	lsrs	r2, r2, #9
    48f2:	0e00      	lsrs	r0, r0, #24
    48f4:	0a5b      	lsrs	r3, r3, #9
    48f6:	0e09      	lsrs	r1, r1, #24
    48f8:	28ff      	cmp	r0, #255	; 0xff
    48fa:	d003      	beq.n	4904 <__aeabi_fcmpun+0x1c>
    48fc:	2000      	movs	r0, #0
    48fe:	29ff      	cmp	r1, #255	; 0xff
    4900:	d006      	beq.n	4910 <__aeabi_fcmpun+0x28>
    4902:	4770      	bx	lr
    4904:	38fe      	subs	r0, #254	; 0xfe
    4906:	2a00      	cmp	r2, #0
    4908:	d1fb      	bne.n	4902 <__aeabi_fcmpun+0x1a>
    490a:	2000      	movs	r0, #0
    490c:	29ff      	cmp	r1, #255	; 0xff
    490e:	d1f8      	bne.n	4902 <__aeabi_fcmpun+0x1a>
    4910:	0018      	movs	r0, r3
    4912:	1e43      	subs	r3, r0, #1
    4914:	4198      	sbcs	r0, r3
    4916:	e7f4      	b.n	4902 <__aeabi_fcmpun+0x1a>

00004918 <__aeabi_i2f>:
    4918:	b570      	push	{r4, r5, r6, lr}
    491a:	2800      	cmp	r0, #0
    491c:	d030      	beq.n	4980 <__aeabi_i2f+0x68>
    491e:	17c3      	asrs	r3, r0, #31
    4920:	18c4      	adds	r4, r0, r3
    4922:	405c      	eors	r4, r3
    4924:	0fc5      	lsrs	r5, r0, #31
    4926:	0020      	movs	r0, r4
    4928:	f001 f816 	bl	5958 <__clzsi2>
    492c:	239e      	movs	r3, #158	; 0x9e
    492e:	1a1b      	subs	r3, r3, r0
    4930:	2b96      	cmp	r3, #150	; 0x96
    4932:	dc0d      	bgt.n	4950 <__aeabi_i2f+0x38>
    4934:	2296      	movs	r2, #150	; 0x96
    4936:	1ad2      	subs	r2, r2, r3
    4938:	4094      	lsls	r4, r2
    493a:	002a      	movs	r2, r5
    493c:	0264      	lsls	r4, r4, #9
    493e:	0a64      	lsrs	r4, r4, #9
    4940:	b2db      	uxtb	r3, r3
    4942:	0264      	lsls	r4, r4, #9
    4944:	05db      	lsls	r3, r3, #23
    4946:	0a60      	lsrs	r0, r4, #9
    4948:	07d2      	lsls	r2, r2, #31
    494a:	4318      	orrs	r0, r3
    494c:	4310      	orrs	r0, r2
    494e:	bd70      	pop	{r4, r5, r6, pc}
    4950:	2b99      	cmp	r3, #153	; 0x99
    4952:	dc19      	bgt.n	4988 <__aeabi_i2f+0x70>
    4954:	2299      	movs	r2, #153	; 0x99
    4956:	1ad2      	subs	r2, r2, r3
    4958:	2a00      	cmp	r2, #0
    495a:	dd29      	ble.n	49b0 <__aeabi_i2f+0x98>
    495c:	4094      	lsls	r4, r2
    495e:	0022      	movs	r2, r4
    4960:	4c14      	ldr	r4, [pc, #80]	; (49b4 <__aeabi_i2f+0x9c>)
    4962:	4014      	ands	r4, r2
    4964:	0751      	lsls	r1, r2, #29
    4966:	d004      	beq.n	4972 <__aeabi_i2f+0x5a>
    4968:	210f      	movs	r1, #15
    496a:	400a      	ands	r2, r1
    496c:	2a04      	cmp	r2, #4
    496e:	d000      	beq.n	4972 <__aeabi_i2f+0x5a>
    4970:	3404      	adds	r4, #4
    4972:	0162      	lsls	r2, r4, #5
    4974:	d413      	bmi.n	499e <__aeabi_i2f+0x86>
    4976:	01a4      	lsls	r4, r4, #6
    4978:	0a64      	lsrs	r4, r4, #9
    497a:	b2db      	uxtb	r3, r3
    497c:	002a      	movs	r2, r5
    497e:	e7e0      	b.n	4942 <__aeabi_i2f+0x2a>
    4980:	2200      	movs	r2, #0
    4982:	2300      	movs	r3, #0
    4984:	2400      	movs	r4, #0
    4986:	e7dc      	b.n	4942 <__aeabi_i2f+0x2a>
    4988:	2205      	movs	r2, #5
    498a:	0021      	movs	r1, r4
    498c:	1a12      	subs	r2, r2, r0
    498e:	40d1      	lsrs	r1, r2
    4990:	22b9      	movs	r2, #185	; 0xb9
    4992:	1ad2      	subs	r2, r2, r3
    4994:	4094      	lsls	r4, r2
    4996:	1e62      	subs	r2, r4, #1
    4998:	4194      	sbcs	r4, r2
    499a:	430c      	orrs	r4, r1
    499c:	e7da      	b.n	4954 <__aeabi_i2f+0x3c>
    499e:	4b05      	ldr	r3, [pc, #20]	; (49b4 <__aeabi_i2f+0x9c>)
    49a0:	002a      	movs	r2, r5
    49a2:	401c      	ands	r4, r3
    49a4:	239f      	movs	r3, #159	; 0x9f
    49a6:	01a4      	lsls	r4, r4, #6
    49a8:	1a1b      	subs	r3, r3, r0
    49aa:	0a64      	lsrs	r4, r4, #9
    49ac:	b2db      	uxtb	r3, r3
    49ae:	e7c8      	b.n	4942 <__aeabi_i2f+0x2a>
    49b0:	0022      	movs	r2, r4
    49b2:	e7d5      	b.n	4960 <__aeabi_i2f+0x48>
    49b4:	fbffffff 	.word	0xfbffffff

000049b8 <__aeabi_ddiv>:
    49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ba:	4657      	mov	r7, sl
    49bc:	4645      	mov	r5, r8
    49be:	46de      	mov	lr, fp
    49c0:	464e      	mov	r6, r9
    49c2:	b5e0      	push	{r5, r6, r7, lr}
    49c4:	004c      	lsls	r4, r1, #1
    49c6:	030e      	lsls	r6, r1, #12
    49c8:	b087      	sub	sp, #28
    49ca:	4683      	mov	fp, r0
    49cc:	4692      	mov	sl, r2
    49ce:	001d      	movs	r5, r3
    49d0:	4680      	mov	r8, r0
    49d2:	0b36      	lsrs	r6, r6, #12
    49d4:	0d64      	lsrs	r4, r4, #21
    49d6:	0fcf      	lsrs	r7, r1, #31
    49d8:	2c00      	cmp	r4, #0
    49da:	d04f      	beq.n	4a7c <__aeabi_ddiv+0xc4>
    49dc:	4b6f      	ldr	r3, [pc, #444]	; (4b9c <__aeabi_ddiv+0x1e4>)
    49de:	429c      	cmp	r4, r3
    49e0:	d035      	beq.n	4a4e <__aeabi_ddiv+0x96>
    49e2:	2380      	movs	r3, #128	; 0x80
    49e4:	0f42      	lsrs	r2, r0, #29
    49e6:	041b      	lsls	r3, r3, #16
    49e8:	00f6      	lsls	r6, r6, #3
    49ea:	4313      	orrs	r3, r2
    49ec:	4333      	orrs	r3, r6
    49ee:	4699      	mov	r9, r3
    49f0:	00c3      	lsls	r3, r0, #3
    49f2:	4698      	mov	r8, r3
    49f4:	4b6a      	ldr	r3, [pc, #424]	; (4ba0 <__aeabi_ddiv+0x1e8>)
    49f6:	2600      	movs	r6, #0
    49f8:	469c      	mov	ip, r3
    49fa:	2300      	movs	r3, #0
    49fc:	4464      	add	r4, ip
    49fe:	9303      	str	r3, [sp, #12]
    4a00:	032b      	lsls	r3, r5, #12
    4a02:	0b1b      	lsrs	r3, r3, #12
    4a04:	469b      	mov	fp, r3
    4a06:	006b      	lsls	r3, r5, #1
    4a08:	0fed      	lsrs	r5, r5, #31
    4a0a:	4650      	mov	r0, sl
    4a0c:	0d5b      	lsrs	r3, r3, #21
    4a0e:	9501      	str	r5, [sp, #4]
    4a10:	d05e      	beq.n	4ad0 <__aeabi_ddiv+0x118>
    4a12:	4a62      	ldr	r2, [pc, #392]	; (4b9c <__aeabi_ddiv+0x1e4>)
    4a14:	4293      	cmp	r3, r2
    4a16:	d053      	beq.n	4ac0 <__aeabi_ddiv+0x108>
    4a18:	465a      	mov	r2, fp
    4a1a:	00d1      	lsls	r1, r2, #3
    4a1c:	2280      	movs	r2, #128	; 0x80
    4a1e:	0f40      	lsrs	r0, r0, #29
    4a20:	0412      	lsls	r2, r2, #16
    4a22:	4302      	orrs	r2, r0
    4a24:	430a      	orrs	r2, r1
    4a26:	4693      	mov	fp, r2
    4a28:	4652      	mov	r2, sl
    4a2a:	00d1      	lsls	r1, r2, #3
    4a2c:	4a5c      	ldr	r2, [pc, #368]	; (4ba0 <__aeabi_ddiv+0x1e8>)
    4a2e:	4694      	mov	ip, r2
    4a30:	2200      	movs	r2, #0
    4a32:	4463      	add	r3, ip
    4a34:	0038      	movs	r0, r7
    4a36:	4068      	eors	r0, r5
    4a38:	4684      	mov	ip, r0
    4a3a:	9002      	str	r0, [sp, #8]
    4a3c:	1ae4      	subs	r4, r4, r3
    4a3e:	4316      	orrs	r6, r2
    4a40:	2e0f      	cmp	r6, #15
    4a42:	d900      	bls.n	4a46 <__aeabi_ddiv+0x8e>
    4a44:	e0b4      	b.n	4bb0 <__aeabi_ddiv+0x1f8>
    4a46:	4b57      	ldr	r3, [pc, #348]	; (4ba4 <__aeabi_ddiv+0x1ec>)
    4a48:	00b6      	lsls	r6, r6, #2
    4a4a:	599b      	ldr	r3, [r3, r6]
    4a4c:	469f      	mov	pc, r3
    4a4e:	0003      	movs	r3, r0
    4a50:	4333      	orrs	r3, r6
    4a52:	4699      	mov	r9, r3
    4a54:	d16c      	bne.n	4b30 <__aeabi_ddiv+0x178>
    4a56:	2300      	movs	r3, #0
    4a58:	4698      	mov	r8, r3
    4a5a:	3302      	adds	r3, #2
    4a5c:	2608      	movs	r6, #8
    4a5e:	9303      	str	r3, [sp, #12]
    4a60:	e7ce      	b.n	4a00 <__aeabi_ddiv+0x48>
    4a62:	46cb      	mov	fp, r9
    4a64:	4641      	mov	r1, r8
    4a66:	9a03      	ldr	r2, [sp, #12]
    4a68:	9701      	str	r7, [sp, #4]
    4a6a:	2a02      	cmp	r2, #2
    4a6c:	d165      	bne.n	4b3a <__aeabi_ddiv+0x182>
    4a6e:	9b01      	ldr	r3, [sp, #4]
    4a70:	4c4a      	ldr	r4, [pc, #296]	; (4b9c <__aeabi_ddiv+0x1e4>)
    4a72:	469c      	mov	ip, r3
    4a74:	2300      	movs	r3, #0
    4a76:	2200      	movs	r2, #0
    4a78:	4698      	mov	r8, r3
    4a7a:	e06b      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4a7c:	0003      	movs	r3, r0
    4a7e:	4333      	orrs	r3, r6
    4a80:	4699      	mov	r9, r3
    4a82:	d04e      	beq.n	4b22 <__aeabi_ddiv+0x16a>
    4a84:	2e00      	cmp	r6, #0
    4a86:	d100      	bne.n	4a8a <__aeabi_ddiv+0xd2>
    4a88:	e1bc      	b.n	4e04 <__aeabi_ddiv+0x44c>
    4a8a:	0030      	movs	r0, r6
    4a8c:	f000 ff64 	bl	5958 <__clzsi2>
    4a90:	0003      	movs	r3, r0
    4a92:	3b0b      	subs	r3, #11
    4a94:	2b1c      	cmp	r3, #28
    4a96:	dd00      	ble.n	4a9a <__aeabi_ddiv+0xe2>
    4a98:	e1ac      	b.n	4df4 <__aeabi_ddiv+0x43c>
    4a9a:	221d      	movs	r2, #29
    4a9c:	1ad3      	subs	r3, r2, r3
    4a9e:	465a      	mov	r2, fp
    4aa0:	0001      	movs	r1, r0
    4aa2:	40da      	lsrs	r2, r3
    4aa4:	3908      	subs	r1, #8
    4aa6:	408e      	lsls	r6, r1
    4aa8:	0013      	movs	r3, r2
    4aaa:	4333      	orrs	r3, r6
    4aac:	4699      	mov	r9, r3
    4aae:	465b      	mov	r3, fp
    4ab0:	408b      	lsls	r3, r1
    4ab2:	4698      	mov	r8, r3
    4ab4:	2300      	movs	r3, #0
    4ab6:	4c3c      	ldr	r4, [pc, #240]	; (4ba8 <__aeabi_ddiv+0x1f0>)
    4ab8:	2600      	movs	r6, #0
    4aba:	1a24      	subs	r4, r4, r0
    4abc:	9303      	str	r3, [sp, #12]
    4abe:	e79f      	b.n	4a00 <__aeabi_ddiv+0x48>
    4ac0:	4651      	mov	r1, sl
    4ac2:	465a      	mov	r2, fp
    4ac4:	4311      	orrs	r1, r2
    4ac6:	d129      	bne.n	4b1c <__aeabi_ddiv+0x164>
    4ac8:	2200      	movs	r2, #0
    4aca:	4693      	mov	fp, r2
    4acc:	3202      	adds	r2, #2
    4ace:	e7b1      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4ad0:	4659      	mov	r1, fp
    4ad2:	4301      	orrs	r1, r0
    4ad4:	d01e      	beq.n	4b14 <__aeabi_ddiv+0x15c>
    4ad6:	465b      	mov	r3, fp
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d100      	bne.n	4ade <__aeabi_ddiv+0x126>
    4adc:	e19e      	b.n	4e1c <__aeabi_ddiv+0x464>
    4ade:	4658      	mov	r0, fp
    4ae0:	f000 ff3a 	bl	5958 <__clzsi2>
    4ae4:	0003      	movs	r3, r0
    4ae6:	3b0b      	subs	r3, #11
    4ae8:	2b1c      	cmp	r3, #28
    4aea:	dd00      	ble.n	4aee <__aeabi_ddiv+0x136>
    4aec:	e18f      	b.n	4e0e <__aeabi_ddiv+0x456>
    4aee:	0002      	movs	r2, r0
    4af0:	4659      	mov	r1, fp
    4af2:	3a08      	subs	r2, #8
    4af4:	4091      	lsls	r1, r2
    4af6:	468b      	mov	fp, r1
    4af8:	211d      	movs	r1, #29
    4afa:	1acb      	subs	r3, r1, r3
    4afc:	4651      	mov	r1, sl
    4afe:	40d9      	lsrs	r1, r3
    4b00:	000b      	movs	r3, r1
    4b02:	4659      	mov	r1, fp
    4b04:	430b      	orrs	r3, r1
    4b06:	4651      	mov	r1, sl
    4b08:	469b      	mov	fp, r3
    4b0a:	4091      	lsls	r1, r2
    4b0c:	4b26      	ldr	r3, [pc, #152]	; (4ba8 <__aeabi_ddiv+0x1f0>)
    4b0e:	2200      	movs	r2, #0
    4b10:	1a1b      	subs	r3, r3, r0
    4b12:	e78f      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4b14:	2300      	movs	r3, #0
    4b16:	2201      	movs	r2, #1
    4b18:	469b      	mov	fp, r3
    4b1a:	e78b      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4b1c:	4651      	mov	r1, sl
    4b1e:	2203      	movs	r2, #3
    4b20:	e788      	b.n	4a34 <__aeabi_ddiv+0x7c>
    4b22:	2300      	movs	r3, #0
    4b24:	4698      	mov	r8, r3
    4b26:	3301      	adds	r3, #1
    4b28:	2604      	movs	r6, #4
    4b2a:	2400      	movs	r4, #0
    4b2c:	9303      	str	r3, [sp, #12]
    4b2e:	e767      	b.n	4a00 <__aeabi_ddiv+0x48>
    4b30:	2303      	movs	r3, #3
    4b32:	46b1      	mov	r9, r6
    4b34:	9303      	str	r3, [sp, #12]
    4b36:	260c      	movs	r6, #12
    4b38:	e762      	b.n	4a00 <__aeabi_ddiv+0x48>
    4b3a:	2a03      	cmp	r2, #3
    4b3c:	d100      	bne.n	4b40 <__aeabi_ddiv+0x188>
    4b3e:	e25c      	b.n	4ffa <__aeabi_ddiv+0x642>
    4b40:	9b01      	ldr	r3, [sp, #4]
    4b42:	2a01      	cmp	r2, #1
    4b44:	d000      	beq.n	4b48 <__aeabi_ddiv+0x190>
    4b46:	e1e4      	b.n	4f12 <__aeabi_ddiv+0x55a>
    4b48:	4013      	ands	r3, r2
    4b4a:	469c      	mov	ip, r3
    4b4c:	2300      	movs	r3, #0
    4b4e:	2400      	movs	r4, #0
    4b50:	2200      	movs	r2, #0
    4b52:	4698      	mov	r8, r3
    4b54:	2100      	movs	r1, #0
    4b56:	0312      	lsls	r2, r2, #12
    4b58:	0b13      	lsrs	r3, r2, #12
    4b5a:	0d0a      	lsrs	r2, r1, #20
    4b5c:	0512      	lsls	r2, r2, #20
    4b5e:	431a      	orrs	r2, r3
    4b60:	0523      	lsls	r3, r4, #20
    4b62:	4c12      	ldr	r4, [pc, #72]	; (4bac <__aeabi_ddiv+0x1f4>)
    4b64:	4640      	mov	r0, r8
    4b66:	4022      	ands	r2, r4
    4b68:	4313      	orrs	r3, r2
    4b6a:	4662      	mov	r2, ip
    4b6c:	005b      	lsls	r3, r3, #1
    4b6e:	07d2      	lsls	r2, r2, #31
    4b70:	085b      	lsrs	r3, r3, #1
    4b72:	4313      	orrs	r3, r2
    4b74:	0019      	movs	r1, r3
    4b76:	b007      	add	sp, #28
    4b78:	bc3c      	pop	{r2, r3, r4, r5}
    4b7a:	4690      	mov	r8, r2
    4b7c:	4699      	mov	r9, r3
    4b7e:	46a2      	mov	sl, r4
    4b80:	46ab      	mov	fp, r5
    4b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b84:	2300      	movs	r3, #0
    4b86:	2280      	movs	r2, #128	; 0x80
    4b88:	469c      	mov	ip, r3
    4b8a:	0312      	lsls	r2, r2, #12
    4b8c:	4698      	mov	r8, r3
    4b8e:	4c03      	ldr	r4, [pc, #12]	; (4b9c <__aeabi_ddiv+0x1e4>)
    4b90:	e7e0      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4b92:	2300      	movs	r3, #0
    4b94:	4c01      	ldr	r4, [pc, #4]	; (4b9c <__aeabi_ddiv+0x1e4>)
    4b96:	2200      	movs	r2, #0
    4b98:	4698      	mov	r8, r3
    4b9a:	e7db      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4b9c:	000007ff 	.word	0x000007ff
    4ba0:	fffffc01 	.word	0xfffffc01
    4ba4:	00005fa0 	.word	0x00005fa0
    4ba8:	fffffc0d 	.word	0xfffffc0d
    4bac:	800fffff 	.word	0x800fffff
    4bb0:	45d9      	cmp	r9, fp
    4bb2:	d900      	bls.n	4bb6 <__aeabi_ddiv+0x1fe>
    4bb4:	e139      	b.n	4e2a <__aeabi_ddiv+0x472>
    4bb6:	d100      	bne.n	4bba <__aeabi_ddiv+0x202>
    4bb8:	e134      	b.n	4e24 <__aeabi_ddiv+0x46c>
    4bba:	2300      	movs	r3, #0
    4bbc:	4646      	mov	r6, r8
    4bbe:	464d      	mov	r5, r9
    4bc0:	469a      	mov	sl, r3
    4bc2:	3c01      	subs	r4, #1
    4bc4:	465b      	mov	r3, fp
    4bc6:	0e0a      	lsrs	r2, r1, #24
    4bc8:	021b      	lsls	r3, r3, #8
    4bca:	431a      	orrs	r2, r3
    4bcc:	020b      	lsls	r3, r1, #8
    4bce:	0c17      	lsrs	r7, r2, #16
    4bd0:	9303      	str	r3, [sp, #12]
    4bd2:	0413      	lsls	r3, r2, #16
    4bd4:	0c1b      	lsrs	r3, r3, #16
    4bd6:	0039      	movs	r1, r7
    4bd8:	0028      	movs	r0, r5
    4bda:	4690      	mov	r8, r2
    4bdc:	9301      	str	r3, [sp, #4]
    4bde:	f7fe ff61 	bl	3aa4 <__udivsi3>
    4be2:	0002      	movs	r2, r0
    4be4:	9b01      	ldr	r3, [sp, #4]
    4be6:	4683      	mov	fp, r0
    4be8:	435a      	muls	r2, r3
    4bea:	0028      	movs	r0, r5
    4bec:	0039      	movs	r1, r7
    4bee:	4691      	mov	r9, r2
    4bf0:	f7fe ffde 	bl	3bb0 <__aeabi_uidivmod>
    4bf4:	0c35      	lsrs	r5, r6, #16
    4bf6:	0409      	lsls	r1, r1, #16
    4bf8:	430d      	orrs	r5, r1
    4bfa:	45a9      	cmp	r9, r5
    4bfc:	d90d      	bls.n	4c1a <__aeabi_ddiv+0x262>
    4bfe:	465b      	mov	r3, fp
    4c00:	4445      	add	r5, r8
    4c02:	3b01      	subs	r3, #1
    4c04:	45a8      	cmp	r8, r5
    4c06:	d900      	bls.n	4c0a <__aeabi_ddiv+0x252>
    4c08:	e13a      	b.n	4e80 <__aeabi_ddiv+0x4c8>
    4c0a:	45a9      	cmp	r9, r5
    4c0c:	d800      	bhi.n	4c10 <__aeabi_ddiv+0x258>
    4c0e:	e137      	b.n	4e80 <__aeabi_ddiv+0x4c8>
    4c10:	2302      	movs	r3, #2
    4c12:	425b      	negs	r3, r3
    4c14:	469c      	mov	ip, r3
    4c16:	4445      	add	r5, r8
    4c18:	44e3      	add	fp, ip
    4c1a:	464b      	mov	r3, r9
    4c1c:	1aeb      	subs	r3, r5, r3
    4c1e:	0039      	movs	r1, r7
    4c20:	0018      	movs	r0, r3
    4c22:	9304      	str	r3, [sp, #16]
    4c24:	f7fe ff3e 	bl	3aa4 <__udivsi3>
    4c28:	9b01      	ldr	r3, [sp, #4]
    4c2a:	0005      	movs	r5, r0
    4c2c:	4343      	muls	r3, r0
    4c2e:	0039      	movs	r1, r7
    4c30:	9804      	ldr	r0, [sp, #16]
    4c32:	4699      	mov	r9, r3
    4c34:	f7fe ffbc 	bl	3bb0 <__aeabi_uidivmod>
    4c38:	0433      	lsls	r3, r6, #16
    4c3a:	0409      	lsls	r1, r1, #16
    4c3c:	0c1b      	lsrs	r3, r3, #16
    4c3e:	430b      	orrs	r3, r1
    4c40:	4599      	cmp	r9, r3
    4c42:	d909      	bls.n	4c58 <__aeabi_ddiv+0x2a0>
    4c44:	4443      	add	r3, r8
    4c46:	1e6a      	subs	r2, r5, #1
    4c48:	4598      	cmp	r8, r3
    4c4a:	d900      	bls.n	4c4e <__aeabi_ddiv+0x296>
    4c4c:	e11a      	b.n	4e84 <__aeabi_ddiv+0x4cc>
    4c4e:	4599      	cmp	r9, r3
    4c50:	d800      	bhi.n	4c54 <__aeabi_ddiv+0x29c>
    4c52:	e117      	b.n	4e84 <__aeabi_ddiv+0x4cc>
    4c54:	3d02      	subs	r5, #2
    4c56:	4443      	add	r3, r8
    4c58:	464a      	mov	r2, r9
    4c5a:	1a9b      	subs	r3, r3, r2
    4c5c:	465a      	mov	r2, fp
    4c5e:	0412      	lsls	r2, r2, #16
    4c60:	432a      	orrs	r2, r5
    4c62:	9903      	ldr	r1, [sp, #12]
    4c64:	4693      	mov	fp, r2
    4c66:	0c10      	lsrs	r0, r2, #16
    4c68:	0c0a      	lsrs	r2, r1, #16
    4c6a:	4691      	mov	r9, r2
    4c6c:	0409      	lsls	r1, r1, #16
    4c6e:	465a      	mov	r2, fp
    4c70:	0c09      	lsrs	r1, r1, #16
    4c72:	464e      	mov	r6, r9
    4c74:	000d      	movs	r5, r1
    4c76:	0412      	lsls	r2, r2, #16
    4c78:	0c12      	lsrs	r2, r2, #16
    4c7a:	4345      	muls	r5, r0
    4c7c:	9105      	str	r1, [sp, #20]
    4c7e:	4351      	muls	r1, r2
    4c80:	4372      	muls	r2, r6
    4c82:	4370      	muls	r0, r6
    4c84:	1952      	adds	r2, r2, r5
    4c86:	0c0e      	lsrs	r6, r1, #16
    4c88:	18b2      	adds	r2, r6, r2
    4c8a:	4295      	cmp	r5, r2
    4c8c:	d903      	bls.n	4c96 <__aeabi_ddiv+0x2de>
    4c8e:	2580      	movs	r5, #128	; 0x80
    4c90:	026d      	lsls	r5, r5, #9
    4c92:	46ac      	mov	ip, r5
    4c94:	4460      	add	r0, ip
    4c96:	0c15      	lsrs	r5, r2, #16
    4c98:	0409      	lsls	r1, r1, #16
    4c9a:	0412      	lsls	r2, r2, #16
    4c9c:	0c09      	lsrs	r1, r1, #16
    4c9e:	1828      	adds	r0, r5, r0
    4ca0:	1852      	adds	r2, r2, r1
    4ca2:	4283      	cmp	r3, r0
    4ca4:	d200      	bcs.n	4ca8 <__aeabi_ddiv+0x2f0>
    4ca6:	e0ce      	b.n	4e46 <__aeabi_ddiv+0x48e>
    4ca8:	d100      	bne.n	4cac <__aeabi_ddiv+0x2f4>
    4caa:	e0c8      	b.n	4e3e <__aeabi_ddiv+0x486>
    4cac:	1a1d      	subs	r5, r3, r0
    4cae:	4653      	mov	r3, sl
    4cb0:	1a9e      	subs	r6, r3, r2
    4cb2:	45b2      	cmp	sl, r6
    4cb4:	4192      	sbcs	r2, r2
    4cb6:	4252      	negs	r2, r2
    4cb8:	1aab      	subs	r3, r5, r2
    4cba:	469a      	mov	sl, r3
    4cbc:	4598      	cmp	r8, r3
    4cbe:	d100      	bne.n	4cc2 <__aeabi_ddiv+0x30a>
    4cc0:	e117      	b.n	4ef2 <__aeabi_ddiv+0x53a>
    4cc2:	0039      	movs	r1, r7
    4cc4:	0018      	movs	r0, r3
    4cc6:	f7fe feed 	bl	3aa4 <__udivsi3>
    4cca:	9b01      	ldr	r3, [sp, #4]
    4ccc:	0005      	movs	r5, r0
    4cce:	4343      	muls	r3, r0
    4cd0:	0039      	movs	r1, r7
    4cd2:	4650      	mov	r0, sl
    4cd4:	9304      	str	r3, [sp, #16]
    4cd6:	f7fe ff6b 	bl	3bb0 <__aeabi_uidivmod>
    4cda:	9804      	ldr	r0, [sp, #16]
    4cdc:	040b      	lsls	r3, r1, #16
    4cde:	0c31      	lsrs	r1, r6, #16
    4ce0:	4319      	orrs	r1, r3
    4ce2:	4288      	cmp	r0, r1
    4ce4:	d909      	bls.n	4cfa <__aeabi_ddiv+0x342>
    4ce6:	4441      	add	r1, r8
    4ce8:	1e6b      	subs	r3, r5, #1
    4cea:	4588      	cmp	r8, r1
    4cec:	d900      	bls.n	4cf0 <__aeabi_ddiv+0x338>
    4cee:	e107      	b.n	4f00 <__aeabi_ddiv+0x548>
    4cf0:	4288      	cmp	r0, r1
    4cf2:	d800      	bhi.n	4cf6 <__aeabi_ddiv+0x33e>
    4cf4:	e104      	b.n	4f00 <__aeabi_ddiv+0x548>
    4cf6:	3d02      	subs	r5, #2
    4cf8:	4441      	add	r1, r8
    4cfa:	9b04      	ldr	r3, [sp, #16]
    4cfc:	1acb      	subs	r3, r1, r3
    4cfe:	0018      	movs	r0, r3
    4d00:	0039      	movs	r1, r7
    4d02:	9304      	str	r3, [sp, #16]
    4d04:	f7fe fece 	bl	3aa4 <__udivsi3>
    4d08:	9b01      	ldr	r3, [sp, #4]
    4d0a:	4682      	mov	sl, r0
    4d0c:	4343      	muls	r3, r0
    4d0e:	0039      	movs	r1, r7
    4d10:	9804      	ldr	r0, [sp, #16]
    4d12:	9301      	str	r3, [sp, #4]
    4d14:	f7fe ff4c 	bl	3bb0 <__aeabi_uidivmod>
    4d18:	9801      	ldr	r0, [sp, #4]
    4d1a:	040b      	lsls	r3, r1, #16
    4d1c:	0431      	lsls	r1, r6, #16
    4d1e:	0c09      	lsrs	r1, r1, #16
    4d20:	4319      	orrs	r1, r3
    4d22:	4288      	cmp	r0, r1
    4d24:	d90d      	bls.n	4d42 <__aeabi_ddiv+0x38a>
    4d26:	4653      	mov	r3, sl
    4d28:	4441      	add	r1, r8
    4d2a:	3b01      	subs	r3, #1
    4d2c:	4588      	cmp	r8, r1
    4d2e:	d900      	bls.n	4d32 <__aeabi_ddiv+0x37a>
    4d30:	e0e8      	b.n	4f04 <__aeabi_ddiv+0x54c>
    4d32:	4288      	cmp	r0, r1
    4d34:	d800      	bhi.n	4d38 <__aeabi_ddiv+0x380>
    4d36:	e0e5      	b.n	4f04 <__aeabi_ddiv+0x54c>
    4d38:	2302      	movs	r3, #2
    4d3a:	425b      	negs	r3, r3
    4d3c:	469c      	mov	ip, r3
    4d3e:	4441      	add	r1, r8
    4d40:	44e2      	add	sl, ip
    4d42:	9b01      	ldr	r3, [sp, #4]
    4d44:	042d      	lsls	r5, r5, #16
    4d46:	1ace      	subs	r6, r1, r3
    4d48:	4651      	mov	r1, sl
    4d4a:	4329      	orrs	r1, r5
    4d4c:	9d05      	ldr	r5, [sp, #20]
    4d4e:	464f      	mov	r7, r9
    4d50:	002a      	movs	r2, r5
    4d52:	040b      	lsls	r3, r1, #16
    4d54:	0c08      	lsrs	r0, r1, #16
    4d56:	0c1b      	lsrs	r3, r3, #16
    4d58:	435a      	muls	r2, r3
    4d5a:	4345      	muls	r5, r0
    4d5c:	437b      	muls	r3, r7
    4d5e:	4378      	muls	r0, r7
    4d60:	195b      	adds	r3, r3, r5
    4d62:	0c17      	lsrs	r7, r2, #16
    4d64:	18fb      	adds	r3, r7, r3
    4d66:	429d      	cmp	r5, r3
    4d68:	d903      	bls.n	4d72 <__aeabi_ddiv+0x3ba>
    4d6a:	2580      	movs	r5, #128	; 0x80
    4d6c:	026d      	lsls	r5, r5, #9
    4d6e:	46ac      	mov	ip, r5
    4d70:	4460      	add	r0, ip
    4d72:	0c1d      	lsrs	r5, r3, #16
    4d74:	0412      	lsls	r2, r2, #16
    4d76:	041b      	lsls	r3, r3, #16
    4d78:	0c12      	lsrs	r2, r2, #16
    4d7a:	1828      	adds	r0, r5, r0
    4d7c:	189b      	adds	r3, r3, r2
    4d7e:	4286      	cmp	r6, r0
    4d80:	d200      	bcs.n	4d84 <__aeabi_ddiv+0x3cc>
    4d82:	e093      	b.n	4eac <__aeabi_ddiv+0x4f4>
    4d84:	d100      	bne.n	4d88 <__aeabi_ddiv+0x3d0>
    4d86:	e08e      	b.n	4ea6 <__aeabi_ddiv+0x4ee>
    4d88:	2301      	movs	r3, #1
    4d8a:	4319      	orrs	r1, r3
    4d8c:	4ba0      	ldr	r3, [pc, #640]	; (5010 <__aeabi_ddiv+0x658>)
    4d8e:	18e3      	adds	r3, r4, r3
    4d90:	2b00      	cmp	r3, #0
    4d92:	dc00      	bgt.n	4d96 <__aeabi_ddiv+0x3de>
    4d94:	e099      	b.n	4eca <__aeabi_ddiv+0x512>
    4d96:	074a      	lsls	r2, r1, #29
    4d98:	d000      	beq.n	4d9c <__aeabi_ddiv+0x3e4>
    4d9a:	e09e      	b.n	4eda <__aeabi_ddiv+0x522>
    4d9c:	465a      	mov	r2, fp
    4d9e:	01d2      	lsls	r2, r2, #7
    4da0:	d506      	bpl.n	4db0 <__aeabi_ddiv+0x3f8>
    4da2:	465a      	mov	r2, fp
    4da4:	4b9b      	ldr	r3, [pc, #620]	; (5014 <__aeabi_ddiv+0x65c>)
    4da6:	401a      	ands	r2, r3
    4da8:	2380      	movs	r3, #128	; 0x80
    4daa:	4693      	mov	fp, r2
    4dac:	00db      	lsls	r3, r3, #3
    4dae:	18e3      	adds	r3, r4, r3
    4db0:	4a99      	ldr	r2, [pc, #612]	; (5018 <__aeabi_ddiv+0x660>)
    4db2:	4293      	cmp	r3, r2
    4db4:	dd68      	ble.n	4e88 <__aeabi_ddiv+0x4d0>
    4db6:	2301      	movs	r3, #1
    4db8:	9a02      	ldr	r2, [sp, #8]
    4dba:	4c98      	ldr	r4, [pc, #608]	; (501c <__aeabi_ddiv+0x664>)
    4dbc:	401a      	ands	r2, r3
    4dbe:	2300      	movs	r3, #0
    4dc0:	4694      	mov	ip, r2
    4dc2:	4698      	mov	r8, r3
    4dc4:	2200      	movs	r2, #0
    4dc6:	e6c5      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4dc8:	2280      	movs	r2, #128	; 0x80
    4dca:	464b      	mov	r3, r9
    4dcc:	0312      	lsls	r2, r2, #12
    4dce:	4213      	tst	r3, r2
    4dd0:	d00a      	beq.n	4de8 <__aeabi_ddiv+0x430>
    4dd2:	465b      	mov	r3, fp
    4dd4:	4213      	tst	r3, r2
    4dd6:	d106      	bne.n	4de6 <__aeabi_ddiv+0x42e>
    4dd8:	431a      	orrs	r2, r3
    4dda:	0312      	lsls	r2, r2, #12
    4ddc:	0b12      	lsrs	r2, r2, #12
    4dde:	46ac      	mov	ip, r5
    4de0:	4688      	mov	r8, r1
    4de2:	4c8e      	ldr	r4, [pc, #568]	; (501c <__aeabi_ddiv+0x664>)
    4de4:	e6b6      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4de6:	464b      	mov	r3, r9
    4de8:	431a      	orrs	r2, r3
    4dea:	0312      	lsls	r2, r2, #12
    4dec:	0b12      	lsrs	r2, r2, #12
    4dee:	46bc      	mov	ip, r7
    4df0:	4c8a      	ldr	r4, [pc, #552]	; (501c <__aeabi_ddiv+0x664>)
    4df2:	e6af      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4df4:	0003      	movs	r3, r0
    4df6:	465a      	mov	r2, fp
    4df8:	3b28      	subs	r3, #40	; 0x28
    4dfa:	409a      	lsls	r2, r3
    4dfc:	2300      	movs	r3, #0
    4dfe:	4691      	mov	r9, r2
    4e00:	4698      	mov	r8, r3
    4e02:	e657      	b.n	4ab4 <__aeabi_ddiv+0xfc>
    4e04:	4658      	mov	r0, fp
    4e06:	f000 fda7 	bl	5958 <__clzsi2>
    4e0a:	3020      	adds	r0, #32
    4e0c:	e640      	b.n	4a90 <__aeabi_ddiv+0xd8>
    4e0e:	0003      	movs	r3, r0
    4e10:	4652      	mov	r2, sl
    4e12:	3b28      	subs	r3, #40	; 0x28
    4e14:	409a      	lsls	r2, r3
    4e16:	2100      	movs	r1, #0
    4e18:	4693      	mov	fp, r2
    4e1a:	e677      	b.n	4b0c <__aeabi_ddiv+0x154>
    4e1c:	f000 fd9c 	bl	5958 <__clzsi2>
    4e20:	3020      	adds	r0, #32
    4e22:	e65f      	b.n	4ae4 <__aeabi_ddiv+0x12c>
    4e24:	4588      	cmp	r8, r1
    4e26:	d200      	bcs.n	4e2a <__aeabi_ddiv+0x472>
    4e28:	e6c7      	b.n	4bba <__aeabi_ddiv+0x202>
    4e2a:	464b      	mov	r3, r9
    4e2c:	07de      	lsls	r6, r3, #31
    4e2e:	085d      	lsrs	r5, r3, #1
    4e30:	4643      	mov	r3, r8
    4e32:	085b      	lsrs	r3, r3, #1
    4e34:	431e      	orrs	r6, r3
    4e36:	4643      	mov	r3, r8
    4e38:	07db      	lsls	r3, r3, #31
    4e3a:	469a      	mov	sl, r3
    4e3c:	e6c2      	b.n	4bc4 <__aeabi_ddiv+0x20c>
    4e3e:	2500      	movs	r5, #0
    4e40:	4592      	cmp	sl, r2
    4e42:	d300      	bcc.n	4e46 <__aeabi_ddiv+0x48e>
    4e44:	e733      	b.n	4cae <__aeabi_ddiv+0x2f6>
    4e46:	9e03      	ldr	r6, [sp, #12]
    4e48:	4659      	mov	r1, fp
    4e4a:	46b4      	mov	ip, r6
    4e4c:	44e2      	add	sl, ip
    4e4e:	45b2      	cmp	sl, r6
    4e50:	41ad      	sbcs	r5, r5
    4e52:	426d      	negs	r5, r5
    4e54:	4445      	add	r5, r8
    4e56:	18eb      	adds	r3, r5, r3
    4e58:	3901      	subs	r1, #1
    4e5a:	4598      	cmp	r8, r3
    4e5c:	d207      	bcs.n	4e6e <__aeabi_ddiv+0x4b6>
    4e5e:	4298      	cmp	r0, r3
    4e60:	d900      	bls.n	4e64 <__aeabi_ddiv+0x4ac>
    4e62:	e07f      	b.n	4f64 <__aeabi_ddiv+0x5ac>
    4e64:	d100      	bne.n	4e68 <__aeabi_ddiv+0x4b0>
    4e66:	e0bc      	b.n	4fe2 <__aeabi_ddiv+0x62a>
    4e68:	1a1d      	subs	r5, r3, r0
    4e6a:	468b      	mov	fp, r1
    4e6c:	e71f      	b.n	4cae <__aeabi_ddiv+0x2f6>
    4e6e:	4598      	cmp	r8, r3
    4e70:	d1fa      	bne.n	4e68 <__aeabi_ddiv+0x4b0>
    4e72:	9d03      	ldr	r5, [sp, #12]
    4e74:	4555      	cmp	r5, sl
    4e76:	d9f2      	bls.n	4e5e <__aeabi_ddiv+0x4a6>
    4e78:	4643      	mov	r3, r8
    4e7a:	468b      	mov	fp, r1
    4e7c:	1a1d      	subs	r5, r3, r0
    4e7e:	e716      	b.n	4cae <__aeabi_ddiv+0x2f6>
    4e80:	469b      	mov	fp, r3
    4e82:	e6ca      	b.n	4c1a <__aeabi_ddiv+0x262>
    4e84:	0015      	movs	r5, r2
    4e86:	e6e7      	b.n	4c58 <__aeabi_ddiv+0x2a0>
    4e88:	465a      	mov	r2, fp
    4e8a:	08c9      	lsrs	r1, r1, #3
    4e8c:	0752      	lsls	r2, r2, #29
    4e8e:	430a      	orrs	r2, r1
    4e90:	055b      	lsls	r3, r3, #21
    4e92:	4690      	mov	r8, r2
    4e94:	0d5c      	lsrs	r4, r3, #21
    4e96:	465a      	mov	r2, fp
    4e98:	2301      	movs	r3, #1
    4e9a:	9902      	ldr	r1, [sp, #8]
    4e9c:	0252      	lsls	r2, r2, #9
    4e9e:	4019      	ands	r1, r3
    4ea0:	0b12      	lsrs	r2, r2, #12
    4ea2:	468c      	mov	ip, r1
    4ea4:	e656      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d100      	bne.n	4eac <__aeabi_ddiv+0x4f4>
    4eaa:	e76f      	b.n	4d8c <__aeabi_ddiv+0x3d4>
    4eac:	4446      	add	r6, r8
    4eae:	1e4a      	subs	r2, r1, #1
    4eb0:	45b0      	cmp	r8, r6
    4eb2:	d929      	bls.n	4f08 <__aeabi_ddiv+0x550>
    4eb4:	0011      	movs	r1, r2
    4eb6:	4286      	cmp	r6, r0
    4eb8:	d000      	beq.n	4ebc <__aeabi_ddiv+0x504>
    4eba:	e765      	b.n	4d88 <__aeabi_ddiv+0x3d0>
    4ebc:	9a03      	ldr	r2, [sp, #12]
    4ebe:	4293      	cmp	r3, r2
    4ec0:	d000      	beq.n	4ec4 <__aeabi_ddiv+0x50c>
    4ec2:	e761      	b.n	4d88 <__aeabi_ddiv+0x3d0>
    4ec4:	e762      	b.n	4d8c <__aeabi_ddiv+0x3d4>
    4ec6:	2101      	movs	r1, #1
    4ec8:	4249      	negs	r1, r1
    4eca:	2001      	movs	r0, #1
    4ecc:	1ac2      	subs	r2, r0, r3
    4ece:	2a38      	cmp	r2, #56	; 0x38
    4ed0:	dd21      	ble.n	4f16 <__aeabi_ddiv+0x55e>
    4ed2:	9b02      	ldr	r3, [sp, #8]
    4ed4:	4003      	ands	r3, r0
    4ed6:	469c      	mov	ip, r3
    4ed8:	e638      	b.n	4b4c <__aeabi_ddiv+0x194>
    4eda:	220f      	movs	r2, #15
    4edc:	400a      	ands	r2, r1
    4ede:	2a04      	cmp	r2, #4
    4ee0:	d100      	bne.n	4ee4 <__aeabi_ddiv+0x52c>
    4ee2:	e75b      	b.n	4d9c <__aeabi_ddiv+0x3e4>
    4ee4:	000a      	movs	r2, r1
    4ee6:	1d11      	adds	r1, r2, #4
    4ee8:	4291      	cmp	r1, r2
    4eea:	4192      	sbcs	r2, r2
    4eec:	4252      	negs	r2, r2
    4eee:	4493      	add	fp, r2
    4ef0:	e754      	b.n	4d9c <__aeabi_ddiv+0x3e4>
    4ef2:	4b47      	ldr	r3, [pc, #284]	; (5010 <__aeabi_ddiv+0x658>)
    4ef4:	18e3      	adds	r3, r4, r3
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	dde5      	ble.n	4ec6 <__aeabi_ddiv+0x50e>
    4efa:	2201      	movs	r2, #1
    4efc:	4252      	negs	r2, r2
    4efe:	e7f2      	b.n	4ee6 <__aeabi_ddiv+0x52e>
    4f00:	001d      	movs	r5, r3
    4f02:	e6fa      	b.n	4cfa <__aeabi_ddiv+0x342>
    4f04:	469a      	mov	sl, r3
    4f06:	e71c      	b.n	4d42 <__aeabi_ddiv+0x38a>
    4f08:	42b0      	cmp	r0, r6
    4f0a:	d839      	bhi.n	4f80 <__aeabi_ddiv+0x5c8>
    4f0c:	d06e      	beq.n	4fec <__aeabi_ddiv+0x634>
    4f0e:	0011      	movs	r1, r2
    4f10:	e73a      	b.n	4d88 <__aeabi_ddiv+0x3d0>
    4f12:	9302      	str	r3, [sp, #8]
    4f14:	e73a      	b.n	4d8c <__aeabi_ddiv+0x3d4>
    4f16:	2a1f      	cmp	r2, #31
    4f18:	dc3c      	bgt.n	4f94 <__aeabi_ddiv+0x5dc>
    4f1a:	2320      	movs	r3, #32
    4f1c:	1a9b      	subs	r3, r3, r2
    4f1e:	000c      	movs	r4, r1
    4f20:	4658      	mov	r0, fp
    4f22:	4099      	lsls	r1, r3
    4f24:	4098      	lsls	r0, r3
    4f26:	1e4b      	subs	r3, r1, #1
    4f28:	4199      	sbcs	r1, r3
    4f2a:	465b      	mov	r3, fp
    4f2c:	40d4      	lsrs	r4, r2
    4f2e:	40d3      	lsrs	r3, r2
    4f30:	4320      	orrs	r0, r4
    4f32:	4308      	orrs	r0, r1
    4f34:	001a      	movs	r2, r3
    4f36:	0743      	lsls	r3, r0, #29
    4f38:	d009      	beq.n	4f4e <__aeabi_ddiv+0x596>
    4f3a:	230f      	movs	r3, #15
    4f3c:	4003      	ands	r3, r0
    4f3e:	2b04      	cmp	r3, #4
    4f40:	d005      	beq.n	4f4e <__aeabi_ddiv+0x596>
    4f42:	0001      	movs	r1, r0
    4f44:	1d08      	adds	r0, r1, #4
    4f46:	4288      	cmp	r0, r1
    4f48:	419b      	sbcs	r3, r3
    4f4a:	425b      	negs	r3, r3
    4f4c:	18d2      	adds	r2, r2, r3
    4f4e:	0213      	lsls	r3, r2, #8
    4f50:	d53a      	bpl.n	4fc8 <__aeabi_ddiv+0x610>
    4f52:	2301      	movs	r3, #1
    4f54:	9a02      	ldr	r2, [sp, #8]
    4f56:	2401      	movs	r4, #1
    4f58:	401a      	ands	r2, r3
    4f5a:	2300      	movs	r3, #0
    4f5c:	4694      	mov	ip, r2
    4f5e:	4698      	mov	r8, r3
    4f60:	2200      	movs	r2, #0
    4f62:	e5f7      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4f64:	2102      	movs	r1, #2
    4f66:	4249      	negs	r1, r1
    4f68:	468c      	mov	ip, r1
    4f6a:	9d03      	ldr	r5, [sp, #12]
    4f6c:	44e3      	add	fp, ip
    4f6e:	46ac      	mov	ip, r5
    4f70:	44e2      	add	sl, ip
    4f72:	45aa      	cmp	sl, r5
    4f74:	41ad      	sbcs	r5, r5
    4f76:	426d      	negs	r5, r5
    4f78:	4445      	add	r5, r8
    4f7a:	18ed      	adds	r5, r5, r3
    4f7c:	1a2d      	subs	r5, r5, r0
    4f7e:	e696      	b.n	4cae <__aeabi_ddiv+0x2f6>
    4f80:	1e8a      	subs	r2, r1, #2
    4f82:	9903      	ldr	r1, [sp, #12]
    4f84:	004d      	lsls	r5, r1, #1
    4f86:	428d      	cmp	r5, r1
    4f88:	4189      	sbcs	r1, r1
    4f8a:	4249      	negs	r1, r1
    4f8c:	4441      	add	r1, r8
    4f8e:	1876      	adds	r6, r6, r1
    4f90:	9503      	str	r5, [sp, #12]
    4f92:	e78f      	b.n	4eb4 <__aeabi_ddiv+0x4fc>
    4f94:	201f      	movs	r0, #31
    4f96:	4240      	negs	r0, r0
    4f98:	1ac3      	subs	r3, r0, r3
    4f9a:	4658      	mov	r0, fp
    4f9c:	40d8      	lsrs	r0, r3
    4f9e:	0003      	movs	r3, r0
    4fa0:	2a20      	cmp	r2, #32
    4fa2:	d028      	beq.n	4ff6 <__aeabi_ddiv+0x63e>
    4fa4:	2040      	movs	r0, #64	; 0x40
    4fa6:	465d      	mov	r5, fp
    4fa8:	1a82      	subs	r2, r0, r2
    4faa:	4095      	lsls	r5, r2
    4fac:	4329      	orrs	r1, r5
    4fae:	1e4a      	subs	r2, r1, #1
    4fb0:	4191      	sbcs	r1, r2
    4fb2:	4319      	orrs	r1, r3
    4fb4:	2307      	movs	r3, #7
    4fb6:	2200      	movs	r2, #0
    4fb8:	400b      	ands	r3, r1
    4fba:	d009      	beq.n	4fd0 <__aeabi_ddiv+0x618>
    4fbc:	230f      	movs	r3, #15
    4fbe:	2200      	movs	r2, #0
    4fc0:	400b      	ands	r3, r1
    4fc2:	0008      	movs	r0, r1
    4fc4:	2b04      	cmp	r3, #4
    4fc6:	d1bd      	bne.n	4f44 <__aeabi_ddiv+0x58c>
    4fc8:	0001      	movs	r1, r0
    4fca:	0753      	lsls	r3, r2, #29
    4fcc:	0252      	lsls	r2, r2, #9
    4fce:	0b12      	lsrs	r2, r2, #12
    4fd0:	08c9      	lsrs	r1, r1, #3
    4fd2:	4319      	orrs	r1, r3
    4fd4:	2301      	movs	r3, #1
    4fd6:	4688      	mov	r8, r1
    4fd8:	9902      	ldr	r1, [sp, #8]
    4fda:	2400      	movs	r4, #0
    4fdc:	4019      	ands	r1, r3
    4fde:	468c      	mov	ip, r1
    4fe0:	e5b8      	b.n	4b54 <__aeabi_ddiv+0x19c>
    4fe2:	4552      	cmp	r2, sl
    4fe4:	d8be      	bhi.n	4f64 <__aeabi_ddiv+0x5ac>
    4fe6:	468b      	mov	fp, r1
    4fe8:	2500      	movs	r5, #0
    4fea:	e660      	b.n	4cae <__aeabi_ddiv+0x2f6>
    4fec:	9d03      	ldr	r5, [sp, #12]
    4fee:	429d      	cmp	r5, r3
    4ff0:	d3c6      	bcc.n	4f80 <__aeabi_ddiv+0x5c8>
    4ff2:	0011      	movs	r1, r2
    4ff4:	e762      	b.n	4ebc <__aeabi_ddiv+0x504>
    4ff6:	2500      	movs	r5, #0
    4ff8:	e7d8      	b.n	4fac <__aeabi_ddiv+0x5f4>
    4ffa:	2280      	movs	r2, #128	; 0x80
    4ffc:	465b      	mov	r3, fp
    4ffe:	0312      	lsls	r2, r2, #12
    5000:	431a      	orrs	r2, r3
    5002:	9b01      	ldr	r3, [sp, #4]
    5004:	0312      	lsls	r2, r2, #12
    5006:	0b12      	lsrs	r2, r2, #12
    5008:	469c      	mov	ip, r3
    500a:	4688      	mov	r8, r1
    500c:	4c03      	ldr	r4, [pc, #12]	; (501c <__aeabi_ddiv+0x664>)
    500e:	e5a1      	b.n	4b54 <__aeabi_ddiv+0x19c>
    5010:	000003ff 	.word	0x000003ff
    5014:	feffffff 	.word	0xfeffffff
    5018:	000007fe 	.word	0x000007fe
    501c:	000007ff 	.word	0x000007ff

00005020 <__aeabi_dsub>:
    5020:	b5f0      	push	{r4, r5, r6, r7, lr}
    5022:	4646      	mov	r6, r8
    5024:	46d6      	mov	lr, sl
    5026:	464f      	mov	r7, r9
    5028:	030c      	lsls	r4, r1, #12
    502a:	b5c0      	push	{r6, r7, lr}
    502c:	0fcd      	lsrs	r5, r1, #31
    502e:	004e      	lsls	r6, r1, #1
    5030:	0a61      	lsrs	r1, r4, #9
    5032:	0f44      	lsrs	r4, r0, #29
    5034:	430c      	orrs	r4, r1
    5036:	00c1      	lsls	r1, r0, #3
    5038:	0058      	lsls	r0, r3, #1
    503a:	0d40      	lsrs	r0, r0, #21
    503c:	4684      	mov	ip, r0
    503e:	468a      	mov	sl, r1
    5040:	000f      	movs	r7, r1
    5042:	0319      	lsls	r1, r3, #12
    5044:	0f50      	lsrs	r0, r2, #29
    5046:	0a49      	lsrs	r1, r1, #9
    5048:	4301      	orrs	r1, r0
    504a:	48c6      	ldr	r0, [pc, #792]	; (5364 <__aeabi_dsub+0x344>)
    504c:	0d76      	lsrs	r6, r6, #21
    504e:	46a8      	mov	r8, r5
    5050:	0fdb      	lsrs	r3, r3, #31
    5052:	00d2      	lsls	r2, r2, #3
    5054:	4584      	cmp	ip, r0
    5056:	d100      	bne.n	505a <__aeabi_dsub+0x3a>
    5058:	e0d8      	b.n	520c <__aeabi_dsub+0x1ec>
    505a:	2001      	movs	r0, #1
    505c:	4043      	eors	r3, r0
    505e:	42ab      	cmp	r3, r5
    5060:	d100      	bne.n	5064 <__aeabi_dsub+0x44>
    5062:	e0a6      	b.n	51b2 <__aeabi_dsub+0x192>
    5064:	4660      	mov	r0, ip
    5066:	1a35      	subs	r5, r6, r0
    5068:	2d00      	cmp	r5, #0
    506a:	dc00      	bgt.n	506e <__aeabi_dsub+0x4e>
    506c:	e105      	b.n	527a <__aeabi_dsub+0x25a>
    506e:	2800      	cmp	r0, #0
    5070:	d110      	bne.n	5094 <__aeabi_dsub+0x74>
    5072:	000b      	movs	r3, r1
    5074:	4313      	orrs	r3, r2
    5076:	d100      	bne.n	507a <__aeabi_dsub+0x5a>
    5078:	e0d7      	b.n	522a <__aeabi_dsub+0x20a>
    507a:	1e6b      	subs	r3, r5, #1
    507c:	2b00      	cmp	r3, #0
    507e:	d000      	beq.n	5082 <__aeabi_dsub+0x62>
    5080:	e14b      	b.n	531a <__aeabi_dsub+0x2fa>
    5082:	4653      	mov	r3, sl
    5084:	1a9f      	subs	r7, r3, r2
    5086:	45ba      	cmp	sl, r7
    5088:	4180      	sbcs	r0, r0
    508a:	1a64      	subs	r4, r4, r1
    508c:	4240      	negs	r0, r0
    508e:	1a24      	subs	r4, r4, r0
    5090:	2601      	movs	r6, #1
    5092:	e01e      	b.n	50d2 <__aeabi_dsub+0xb2>
    5094:	4bb3      	ldr	r3, [pc, #716]	; (5364 <__aeabi_dsub+0x344>)
    5096:	429e      	cmp	r6, r3
    5098:	d048      	beq.n	512c <__aeabi_dsub+0x10c>
    509a:	2380      	movs	r3, #128	; 0x80
    509c:	041b      	lsls	r3, r3, #16
    509e:	4319      	orrs	r1, r3
    50a0:	2d38      	cmp	r5, #56	; 0x38
    50a2:	dd00      	ble.n	50a6 <__aeabi_dsub+0x86>
    50a4:	e119      	b.n	52da <__aeabi_dsub+0x2ba>
    50a6:	2d1f      	cmp	r5, #31
    50a8:	dd00      	ble.n	50ac <__aeabi_dsub+0x8c>
    50aa:	e14c      	b.n	5346 <__aeabi_dsub+0x326>
    50ac:	2320      	movs	r3, #32
    50ae:	000f      	movs	r7, r1
    50b0:	1b5b      	subs	r3, r3, r5
    50b2:	0010      	movs	r0, r2
    50b4:	409a      	lsls	r2, r3
    50b6:	409f      	lsls	r7, r3
    50b8:	40e8      	lsrs	r0, r5
    50ba:	1e53      	subs	r3, r2, #1
    50bc:	419a      	sbcs	r2, r3
    50be:	40e9      	lsrs	r1, r5
    50c0:	4307      	orrs	r7, r0
    50c2:	4317      	orrs	r7, r2
    50c4:	4653      	mov	r3, sl
    50c6:	1bdf      	subs	r7, r3, r7
    50c8:	1a61      	subs	r1, r4, r1
    50ca:	45ba      	cmp	sl, r7
    50cc:	41a4      	sbcs	r4, r4
    50ce:	4264      	negs	r4, r4
    50d0:	1b0c      	subs	r4, r1, r4
    50d2:	0223      	lsls	r3, r4, #8
    50d4:	d400      	bmi.n	50d8 <__aeabi_dsub+0xb8>
    50d6:	e0c5      	b.n	5264 <__aeabi_dsub+0x244>
    50d8:	0264      	lsls	r4, r4, #9
    50da:	0a65      	lsrs	r5, r4, #9
    50dc:	2d00      	cmp	r5, #0
    50de:	d100      	bne.n	50e2 <__aeabi_dsub+0xc2>
    50e0:	e0f6      	b.n	52d0 <__aeabi_dsub+0x2b0>
    50e2:	0028      	movs	r0, r5
    50e4:	f000 fc38 	bl	5958 <__clzsi2>
    50e8:	0003      	movs	r3, r0
    50ea:	3b08      	subs	r3, #8
    50ec:	2b1f      	cmp	r3, #31
    50ee:	dd00      	ble.n	50f2 <__aeabi_dsub+0xd2>
    50f0:	e0e9      	b.n	52c6 <__aeabi_dsub+0x2a6>
    50f2:	2220      	movs	r2, #32
    50f4:	003c      	movs	r4, r7
    50f6:	1ad2      	subs	r2, r2, r3
    50f8:	409d      	lsls	r5, r3
    50fa:	40d4      	lsrs	r4, r2
    50fc:	409f      	lsls	r7, r3
    50fe:	4325      	orrs	r5, r4
    5100:	429e      	cmp	r6, r3
    5102:	dd00      	ble.n	5106 <__aeabi_dsub+0xe6>
    5104:	e0db      	b.n	52be <__aeabi_dsub+0x29e>
    5106:	1b9e      	subs	r6, r3, r6
    5108:	1c73      	adds	r3, r6, #1
    510a:	2b1f      	cmp	r3, #31
    510c:	dd00      	ble.n	5110 <__aeabi_dsub+0xf0>
    510e:	e10a      	b.n	5326 <__aeabi_dsub+0x306>
    5110:	2220      	movs	r2, #32
    5112:	0038      	movs	r0, r7
    5114:	1ad2      	subs	r2, r2, r3
    5116:	0029      	movs	r1, r5
    5118:	4097      	lsls	r7, r2
    511a:	002c      	movs	r4, r5
    511c:	4091      	lsls	r1, r2
    511e:	40d8      	lsrs	r0, r3
    5120:	1e7a      	subs	r2, r7, #1
    5122:	4197      	sbcs	r7, r2
    5124:	40dc      	lsrs	r4, r3
    5126:	2600      	movs	r6, #0
    5128:	4301      	orrs	r1, r0
    512a:	430f      	orrs	r7, r1
    512c:	077b      	lsls	r3, r7, #29
    512e:	d009      	beq.n	5144 <__aeabi_dsub+0x124>
    5130:	230f      	movs	r3, #15
    5132:	403b      	ands	r3, r7
    5134:	2b04      	cmp	r3, #4
    5136:	d005      	beq.n	5144 <__aeabi_dsub+0x124>
    5138:	1d3b      	adds	r3, r7, #4
    513a:	42bb      	cmp	r3, r7
    513c:	41bf      	sbcs	r7, r7
    513e:	427f      	negs	r7, r7
    5140:	19e4      	adds	r4, r4, r7
    5142:	001f      	movs	r7, r3
    5144:	0223      	lsls	r3, r4, #8
    5146:	d525      	bpl.n	5194 <__aeabi_dsub+0x174>
    5148:	4b86      	ldr	r3, [pc, #536]	; (5364 <__aeabi_dsub+0x344>)
    514a:	3601      	adds	r6, #1
    514c:	429e      	cmp	r6, r3
    514e:	d100      	bne.n	5152 <__aeabi_dsub+0x132>
    5150:	e0af      	b.n	52b2 <__aeabi_dsub+0x292>
    5152:	4b85      	ldr	r3, [pc, #532]	; (5368 <__aeabi_dsub+0x348>)
    5154:	2501      	movs	r5, #1
    5156:	401c      	ands	r4, r3
    5158:	4643      	mov	r3, r8
    515a:	0762      	lsls	r2, r4, #29
    515c:	08ff      	lsrs	r7, r7, #3
    515e:	0264      	lsls	r4, r4, #9
    5160:	0576      	lsls	r6, r6, #21
    5162:	4317      	orrs	r7, r2
    5164:	0b24      	lsrs	r4, r4, #12
    5166:	0d76      	lsrs	r6, r6, #21
    5168:	401d      	ands	r5, r3
    516a:	2100      	movs	r1, #0
    516c:	0324      	lsls	r4, r4, #12
    516e:	0b23      	lsrs	r3, r4, #12
    5170:	0d0c      	lsrs	r4, r1, #20
    5172:	4a7e      	ldr	r2, [pc, #504]	; (536c <__aeabi_dsub+0x34c>)
    5174:	0524      	lsls	r4, r4, #20
    5176:	431c      	orrs	r4, r3
    5178:	4014      	ands	r4, r2
    517a:	0533      	lsls	r3, r6, #20
    517c:	4323      	orrs	r3, r4
    517e:	005b      	lsls	r3, r3, #1
    5180:	07ed      	lsls	r5, r5, #31
    5182:	085b      	lsrs	r3, r3, #1
    5184:	432b      	orrs	r3, r5
    5186:	0038      	movs	r0, r7
    5188:	0019      	movs	r1, r3
    518a:	bc1c      	pop	{r2, r3, r4}
    518c:	4690      	mov	r8, r2
    518e:	4699      	mov	r9, r3
    5190:	46a2      	mov	sl, r4
    5192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5194:	2501      	movs	r5, #1
    5196:	4643      	mov	r3, r8
    5198:	0762      	lsls	r2, r4, #29
    519a:	08ff      	lsrs	r7, r7, #3
    519c:	4317      	orrs	r7, r2
    519e:	08e4      	lsrs	r4, r4, #3
    51a0:	401d      	ands	r5, r3
    51a2:	4b70      	ldr	r3, [pc, #448]	; (5364 <__aeabi_dsub+0x344>)
    51a4:	429e      	cmp	r6, r3
    51a6:	d036      	beq.n	5216 <__aeabi_dsub+0x1f6>
    51a8:	0324      	lsls	r4, r4, #12
    51aa:	0576      	lsls	r6, r6, #21
    51ac:	0b24      	lsrs	r4, r4, #12
    51ae:	0d76      	lsrs	r6, r6, #21
    51b0:	e7db      	b.n	516a <__aeabi_dsub+0x14a>
    51b2:	4663      	mov	r3, ip
    51b4:	1af3      	subs	r3, r6, r3
    51b6:	2b00      	cmp	r3, #0
    51b8:	dc00      	bgt.n	51bc <__aeabi_dsub+0x19c>
    51ba:	e094      	b.n	52e6 <__aeabi_dsub+0x2c6>
    51bc:	4660      	mov	r0, ip
    51be:	2800      	cmp	r0, #0
    51c0:	d035      	beq.n	522e <__aeabi_dsub+0x20e>
    51c2:	4868      	ldr	r0, [pc, #416]	; (5364 <__aeabi_dsub+0x344>)
    51c4:	4286      	cmp	r6, r0
    51c6:	d0b1      	beq.n	512c <__aeabi_dsub+0x10c>
    51c8:	2780      	movs	r7, #128	; 0x80
    51ca:	043f      	lsls	r7, r7, #16
    51cc:	4339      	orrs	r1, r7
    51ce:	2b38      	cmp	r3, #56	; 0x38
    51d0:	dc00      	bgt.n	51d4 <__aeabi_dsub+0x1b4>
    51d2:	e0fd      	b.n	53d0 <__aeabi_dsub+0x3b0>
    51d4:	430a      	orrs	r2, r1
    51d6:	0017      	movs	r7, r2
    51d8:	2100      	movs	r1, #0
    51da:	1e7a      	subs	r2, r7, #1
    51dc:	4197      	sbcs	r7, r2
    51de:	4457      	add	r7, sl
    51e0:	4557      	cmp	r7, sl
    51e2:	4180      	sbcs	r0, r0
    51e4:	1909      	adds	r1, r1, r4
    51e6:	4244      	negs	r4, r0
    51e8:	190c      	adds	r4, r1, r4
    51ea:	0223      	lsls	r3, r4, #8
    51ec:	d53a      	bpl.n	5264 <__aeabi_dsub+0x244>
    51ee:	4b5d      	ldr	r3, [pc, #372]	; (5364 <__aeabi_dsub+0x344>)
    51f0:	3601      	adds	r6, #1
    51f2:	429e      	cmp	r6, r3
    51f4:	d100      	bne.n	51f8 <__aeabi_dsub+0x1d8>
    51f6:	e14b      	b.n	5490 <__aeabi_dsub+0x470>
    51f8:	2201      	movs	r2, #1
    51fa:	4b5b      	ldr	r3, [pc, #364]	; (5368 <__aeabi_dsub+0x348>)
    51fc:	401c      	ands	r4, r3
    51fe:	087b      	lsrs	r3, r7, #1
    5200:	4017      	ands	r7, r2
    5202:	431f      	orrs	r7, r3
    5204:	07e2      	lsls	r2, r4, #31
    5206:	4317      	orrs	r7, r2
    5208:	0864      	lsrs	r4, r4, #1
    520a:	e78f      	b.n	512c <__aeabi_dsub+0x10c>
    520c:	0008      	movs	r0, r1
    520e:	4310      	orrs	r0, r2
    5210:	d000      	beq.n	5214 <__aeabi_dsub+0x1f4>
    5212:	e724      	b.n	505e <__aeabi_dsub+0x3e>
    5214:	e721      	b.n	505a <__aeabi_dsub+0x3a>
    5216:	0023      	movs	r3, r4
    5218:	433b      	orrs	r3, r7
    521a:	d100      	bne.n	521e <__aeabi_dsub+0x1fe>
    521c:	e1b9      	b.n	5592 <__aeabi_dsub+0x572>
    521e:	2280      	movs	r2, #128	; 0x80
    5220:	0312      	lsls	r2, r2, #12
    5222:	4314      	orrs	r4, r2
    5224:	0324      	lsls	r4, r4, #12
    5226:	0b24      	lsrs	r4, r4, #12
    5228:	e79f      	b.n	516a <__aeabi_dsub+0x14a>
    522a:	002e      	movs	r6, r5
    522c:	e77e      	b.n	512c <__aeabi_dsub+0x10c>
    522e:	0008      	movs	r0, r1
    5230:	4310      	orrs	r0, r2
    5232:	d100      	bne.n	5236 <__aeabi_dsub+0x216>
    5234:	e0ca      	b.n	53cc <__aeabi_dsub+0x3ac>
    5236:	1e58      	subs	r0, r3, #1
    5238:	4684      	mov	ip, r0
    523a:	2800      	cmp	r0, #0
    523c:	d000      	beq.n	5240 <__aeabi_dsub+0x220>
    523e:	e0e7      	b.n	5410 <__aeabi_dsub+0x3f0>
    5240:	4452      	add	r2, sl
    5242:	4552      	cmp	r2, sl
    5244:	4180      	sbcs	r0, r0
    5246:	1864      	adds	r4, r4, r1
    5248:	4240      	negs	r0, r0
    524a:	1824      	adds	r4, r4, r0
    524c:	0017      	movs	r7, r2
    524e:	2601      	movs	r6, #1
    5250:	0223      	lsls	r3, r4, #8
    5252:	d507      	bpl.n	5264 <__aeabi_dsub+0x244>
    5254:	2602      	movs	r6, #2
    5256:	e7cf      	b.n	51f8 <__aeabi_dsub+0x1d8>
    5258:	4664      	mov	r4, ip
    525a:	432c      	orrs	r4, r5
    525c:	d100      	bne.n	5260 <__aeabi_dsub+0x240>
    525e:	e1b3      	b.n	55c8 <__aeabi_dsub+0x5a8>
    5260:	002c      	movs	r4, r5
    5262:	4667      	mov	r7, ip
    5264:	077b      	lsls	r3, r7, #29
    5266:	d000      	beq.n	526a <__aeabi_dsub+0x24a>
    5268:	e762      	b.n	5130 <__aeabi_dsub+0x110>
    526a:	0763      	lsls	r3, r4, #29
    526c:	08ff      	lsrs	r7, r7, #3
    526e:	431f      	orrs	r7, r3
    5270:	2501      	movs	r5, #1
    5272:	4643      	mov	r3, r8
    5274:	08e4      	lsrs	r4, r4, #3
    5276:	401d      	ands	r5, r3
    5278:	e793      	b.n	51a2 <__aeabi_dsub+0x182>
    527a:	2d00      	cmp	r5, #0
    527c:	d178      	bne.n	5370 <__aeabi_dsub+0x350>
    527e:	1c75      	adds	r5, r6, #1
    5280:	056d      	lsls	r5, r5, #21
    5282:	0d6d      	lsrs	r5, r5, #21
    5284:	2d01      	cmp	r5, #1
    5286:	dc00      	bgt.n	528a <__aeabi_dsub+0x26a>
    5288:	e0f2      	b.n	5470 <__aeabi_dsub+0x450>
    528a:	4650      	mov	r0, sl
    528c:	1a80      	subs	r0, r0, r2
    528e:	4582      	cmp	sl, r0
    5290:	41bf      	sbcs	r7, r7
    5292:	1a65      	subs	r5, r4, r1
    5294:	427f      	negs	r7, r7
    5296:	1bed      	subs	r5, r5, r7
    5298:	4684      	mov	ip, r0
    529a:	0228      	lsls	r0, r5, #8
    529c:	d400      	bmi.n	52a0 <__aeabi_dsub+0x280>
    529e:	e08c      	b.n	53ba <__aeabi_dsub+0x39a>
    52a0:	4650      	mov	r0, sl
    52a2:	1a17      	subs	r7, r2, r0
    52a4:	42ba      	cmp	r2, r7
    52a6:	4192      	sbcs	r2, r2
    52a8:	1b0c      	subs	r4, r1, r4
    52aa:	4255      	negs	r5, r2
    52ac:	1b65      	subs	r5, r4, r5
    52ae:	4698      	mov	r8, r3
    52b0:	e714      	b.n	50dc <__aeabi_dsub+0xbc>
    52b2:	2501      	movs	r5, #1
    52b4:	4643      	mov	r3, r8
    52b6:	2400      	movs	r4, #0
    52b8:	401d      	ands	r5, r3
    52ba:	2700      	movs	r7, #0
    52bc:	e755      	b.n	516a <__aeabi_dsub+0x14a>
    52be:	4c2a      	ldr	r4, [pc, #168]	; (5368 <__aeabi_dsub+0x348>)
    52c0:	1af6      	subs	r6, r6, r3
    52c2:	402c      	ands	r4, r5
    52c4:	e732      	b.n	512c <__aeabi_dsub+0x10c>
    52c6:	003d      	movs	r5, r7
    52c8:	3828      	subs	r0, #40	; 0x28
    52ca:	4085      	lsls	r5, r0
    52cc:	2700      	movs	r7, #0
    52ce:	e717      	b.n	5100 <__aeabi_dsub+0xe0>
    52d0:	0038      	movs	r0, r7
    52d2:	f000 fb41 	bl	5958 <__clzsi2>
    52d6:	3020      	adds	r0, #32
    52d8:	e706      	b.n	50e8 <__aeabi_dsub+0xc8>
    52da:	430a      	orrs	r2, r1
    52dc:	0017      	movs	r7, r2
    52de:	2100      	movs	r1, #0
    52e0:	1e7a      	subs	r2, r7, #1
    52e2:	4197      	sbcs	r7, r2
    52e4:	e6ee      	b.n	50c4 <__aeabi_dsub+0xa4>
    52e6:	2b00      	cmp	r3, #0
    52e8:	d000      	beq.n	52ec <__aeabi_dsub+0x2cc>
    52ea:	e0e5      	b.n	54b8 <__aeabi_dsub+0x498>
    52ec:	1c73      	adds	r3, r6, #1
    52ee:	469c      	mov	ip, r3
    52f0:	055b      	lsls	r3, r3, #21
    52f2:	0d5b      	lsrs	r3, r3, #21
    52f4:	2b01      	cmp	r3, #1
    52f6:	dc00      	bgt.n	52fa <__aeabi_dsub+0x2da>
    52f8:	e09f      	b.n	543a <__aeabi_dsub+0x41a>
    52fa:	4b1a      	ldr	r3, [pc, #104]	; (5364 <__aeabi_dsub+0x344>)
    52fc:	459c      	cmp	ip, r3
    52fe:	d100      	bne.n	5302 <__aeabi_dsub+0x2e2>
    5300:	e0c5      	b.n	548e <__aeabi_dsub+0x46e>
    5302:	4452      	add	r2, sl
    5304:	4552      	cmp	r2, sl
    5306:	4180      	sbcs	r0, r0
    5308:	1864      	adds	r4, r4, r1
    530a:	4240      	negs	r0, r0
    530c:	1824      	adds	r4, r4, r0
    530e:	07e7      	lsls	r7, r4, #31
    5310:	0852      	lsrs	r2, r2, #1
    5312:	4317      	orrs	r7, r2
    5314:	0864      	lsrs	r4, r4, #1
    5316:	4666      	mov	r6, ip
    5318:	e708      	b.n	512c <__aeabi_dsub+0x10c>
    531a:	4812      	ldr	r0, [pc, #72]	; (5364 <__aeabi_dsub+0x344>)
    531c:	4285      	cmp	r5, r0
    531e:	d100      	bne.n	5322 <__aeabi_dsub+0x302>
    5320:	e085      	b.n	542e <__aeabi_dsub+0x40e>
    5322:	001d      	movs	r5, r3
    5324:	e6bc      	b.n	50a0 <__aeabi_dsub+0x80>
    5326:	0029      	movs	r1, r5
    5328:	3e1f      	subs	r6, #31
    532a:	40f1      	lsrs	r1, r6
    532c:	2b20      	cmp	r3, #32
    532e:	d100      	bne.n	5332 <__aeabi_dsub+0x312>
    5330:	e07f      	b.n	5432 <__aeabi_dsub+0x412>
    5332:	2240      	movs	r2, #64	; 0x40
    5334:	1ad3      	subs	r3, r2, r3
    5336:	409d      	lsls	r5, r3
    5338:	432f      	orrs	r7, r5
    533a:	1e7d      	subs	r5, r7, #1
    533c:	41af      	sbcs	r7, r5
    533e:	2400      	movs	r4, #0
    5340:	430f      	orrs	r7, r1
    5342:	2600      	movs	r6, #0
    5344:	e78e      	b.n	5264 <__aeabi_dsub+0x244>
    5346:	002b      	movs	r3, r5
    5348:	000f      	movs	r7, r1
    534a:	3b20      	subs	r3, #32
    534c:	40df      	lsrs	r7, r3
    534e:	2d20      	cmp	r5, #32
    5350:	d071      	beq.n	5436 <__aeabi_dsub+0x416>
    5352:	2340      	movs	r3, #64	; 0x40
    5354:	1b5d      	subs	r5, r3, r5
    5356:	40a9      	lsls	r1, r5
    5358:	430a      	orrs	r2, r1
    535a:	1e51      	subs	r1, r2, #1
    535c:	418a      	sbcs	r2, r1
    535e:	2100      	movs	r1, #0
    5360:	4317      	orrs	r7, r2
    5362:	e6af      	b.n	50c4 <__aeabi_dsub+0xa4>
    5364:	000007ff 	.word	0x000007ff
    5368:	ff7fffff 	.word	0xff7fffff
    536c:	800fffff 	.word	0x800fffff
    5370:	2e00      	cmp	r6, #0
    5372:	d03e      	beq.n	53f2 <__aeabi_dsub+0x3d2>
    5374:	4eb3      	ldr	r6, [pc, #716]	; (5644 <__aeabi_dsub+0x624>)
    5376:	45b4      	cmp	ip, r6
    5378:	d045      	beq.n	5406 <__aeabi_dsub+0x3e6>
    537a:	2680      	movs	r6, #128	; 0x80
    537c:	0436      	lsls	r6, r6, #16
    537e:	426d      	negs	r5, r5
    5380:	4334      	orrs	r4, r6
    5382:	2d38      	cmp	r5, #56	; 0x38
    5384:	dd00      	ble.n	5388 <__aeabi_dsub+0x368>
    5386:	e0a8      	b.n	54da <__aeabi_dsub+0x4ba>
    5388:	2d1f      	cmp	r5, #31
    538a:	dd00      	ble.n	538e <__aeabi_dsub+0x36e>
    538c:	e11f      	b.n	55ce <__aeabi_dsub+0x5ae>
    538e:	2620      	movs	r6, #32
    5390:	0027      	movs	r7, r4
    5392:	4650      	mov	r0, sl
    5394:	1b76      	subs	r6, r6, r5
    5396:	40b7      	lsls	r7, r6
    5398:	40e8      	lsrs	r0, r5
    539a:	4307      	orrs	r7, r0
    539c:	4650      	mov	r0, sl
    539e:	40b0      	lsls	r0, r6
    53a0:	1e46      	subs	r6, r0, #1
    53a2:	41b0      	sbcs	r0, r6
    53a4:	40ec      	lsrs	r4, r5
    53a6:	4338      	orrs	r0, r7
    53a8:	1a17      	subs	r7, r2, r0
    53aa:	42ba      	cmp	r2, r7
    53ac:	4192      	sbcs	r2, r2
    53ae:	1b0c      	subs	r4, r1, r4
    53b0:	4252      	negs	r2, r2
    53b2:	1aa4      	subs	r4, r4, r2
    53b4:	4666      	mov	r6, ip
    53b6:	4698      	mov	r8, r3
    53b8:	e68b      	b.n	50d2 <__aeabi_dsub+0xb2>
    53ba:	4664      	mov	r4, ip
    53bc:	4667      	mov	r7, ip
    53be:	432c      	orrs	r4, r5
    53c0:	d000      	beq.n	53c4 <__aeabi_dsub+0x3a4>
    53c2:	e68b      	b.n	50dc <__aeabi_dsub+0xbc>
    53c4:	2500      	movs	r5, #0
    53c6:	2600      	movs	r6, #0
    53c8:	2700      	movs	r7, #0
    53ca:	e6ea      	b.n	51a2 <__aeabi_dsub+0x182>
    53cc:	001e      	movs	r6, r3
    53ce:	e6ad      	b.n	512c <__aeabi_dsub+0x10c>
    53d0:	2b1f      	cmp	r3, #31
    53d2:	dc60      	bgt.n	5496 <__aeabi_dsub+0x476>
    53d4:	2720      	movs	r7, #32
    53d6:	1af8      	subs	r0, r7, r3
    53d8:	000f      	movs	r7, r1
    53da:	4684      	mov	ip, r0
    53dc:	4087      	lsls	r7, r0
    53de:	0010      	movs	r0, r2
    53e0:	40d8      	lsrs	r0, r3
    53e2:	4307      	orrs	r7, r0
    53e4:	4660      	mov	r0, ip
    53e6:	4082      	lsls	r2, r0
    53e8:	1e50      	subs	r0, r2, #1
    53ea:	4182      	sbcs	r2, r0
    53ec:	40d9      	lsrs	r1, r3
    53ee:	4317      	orrs	r7, r2
    53f0:	e6f5      	b.n	51de <__aeabi_dsub+0x1be>
    53f2:	0026      	movs	r6, r4
    53f4:	4650      	mov	r0, sl
    53f6:	4306      	orrs	r6, r0
    53f8:	d005      	beq.n	5406 <__aeabi_dsub+0x3e6>
    53fa:	43ed      	mvns	r5, r5
    53fc:	2d00      	cmp	r5, #0
    53fe:	d0d3      	beq.n	53a8 <__aeabi_dsub+0x388>
    5400:	4e90      	ldr	r6, [pc, #576]	; (5644 <__aeabi_dsub+0x624>)
    5402:	45b4      	cmp	ip, r6
    5404:	d1bd      	bne.n	5382 <__aeabi_dsub+0x362>
    5406:	000c      	movs	r4, r1
    5408:	0017      	movs	r7, r2
    540a:	4666      	mov	r6, ip
    540c:	4698      	mov	r8, r3
    540e:	e68d      	b.n	512c <__aeabi_dsub+0x10c>
    5410:	488c      	ldr	r0, [pc, #560]	; (5644 <__aeabi_dsub+0x624>)
    5412:	4283      	cmp	r3, r0
    5414:	d00b      	beq.n	542e <__aeabi_dsub+0x40e>
    5416:	4663      	mov	r3, ip
    5418:	e6d9      	b.n	51ce <__aeabi_dsub+0x1ae>
    541a:	2d00      	cmp	r5, #0
    541c:	d000      	beq.n	5420 <__aeabi_dsub+0x400>
    541e:	e096      	b.n	554e <__aeabi_dsub+0x52e>
    5420:	0008      	movs	r0, r1
    5422:	4310      	orrs	r0, r2
    5424:	d100      	bne.n	5428 <__aeabi_dsub+0x408>
    5426:	e0e2      	b.n	55ee <__aeabi_dsub+0x5ce>
    5428:	000c      	movs	r4, r1
    542a:	0017      	movs	r7, r2
    542c:	4698      	mov	r8, r3
    542e:	4e85      	ldr	r6, [pc, #532]	; (5644 <__aeabi_dsub+0x624>)
    5430:	e67c      	b.n	512c <__aeabi_dsub+0x10c>
    5432:	2500      	movs	r5, #0
    5434:	e780      	b.n	5338 <__aeabi_dsub+0x318>
    5436:	2100      	movs	r1, #0
    5438:	e78e      	b.n	5358 <__aeabi_dsub+0x338>
    543a:	0023      	movs	r3, r4
    543c:	4650      	mov	r0, sl
    543e:	4303      	orrs	r3, r0
    5440:	2e00      	cmp	r6, #0
    5442:	d000      	beq.n	5446 <__aeabi_dsub+0x426>
    5444:	e0a8      	b.n	5598 <__aeabi_dsub+0x578>
    5446:	2b00      	cmp	r3, #0
    5448:	d100      	bne.n	544c <__aeabi_dsub+0x42c>
    544a:	e0de      	b.n	560a <__aeabi_dsub+0x5ea>
    544c:	000b      	movs	r3, r1
    544e:	4313      	orrs	r3, r2
    5450:	d100      	bne.n	5454 <__aeabi_dsub+0x434>
    5452:	e66b      	b.n	512c <__aeabi_dsub+0x10c>
    5454:	4452      	add	r2, sl
    5456:	4552      	cmp	r2, sl
    5458:	4180      	sbcs	r0, r0
    545a:	1864      	adds	r4, r4, r1
    545c:	4240      	negs	r0, r0
    545e:	1824      	adds	r4, r4, r0
    5460:	0017      	movs	r7, r2
    5462:	0223      	lsls	r3, r4, #8
    5464:	d400      	bmi.n	5468 <__aeabi_dsub+0x448>
    5466:	e6fd      	b.n	5264 <__aeabi_dsub+0x244>
    5468:	4b77      	ldr	r3, [pc, #476]	; (5648 <__aeabi_dsub+0x628>)
    546a:	4666      	mov	r6, ip
    546c:	401c      	ands	r4, r3
    546e:	e65d      	b.n	512c <__aeabi_dsub+0x10c>
    5470:	0025      	movs	r5, r4
    5472:	4650      	mov	r0, sl
    5474:	4305      	orrs	r5, r0
    5476:	2e00      	cmp	r6, #0
    5478:	d1cf      	bne.n	541a <__aeabi_dsub+0x3fa>
    547a:	2d00      	cmp	r5, #0
    547c:	d14f      	bne.n	551e <__aeabi_dsub+0x4fe>
    547e:	000c      	movs	r4, r1
    5480:	4314      	orrs	r4, r2
    5482:	d100      	bne.n	5486 <__aeabi_dsub+0x466>
    5484:	e0a0      	b.n	55c8 <__aeabi_dsub+0x5a8>
    5486:	000c      	movs	r4, r1
    5488:	0017      	movs	r7, r2
    548a:	4698      	mov	r8, r3
    548c:	e64e      	b.n	512c <__aeabi_dsub+0x10c>
    548e:	4666      	mov	r6, ip
    5490:	2400      	movs	r4, #0
    5492:	2700      	movs	r7, #0
    5494:	e685      	b.n	51a2 <__aeabi_dsub+0x182>
    5496:	001f      	movs	r7, r3
    5498:	0008      	movs	r0, r1
    549a:	3f20      	subs	r7, #32
    549c:	40f8      	lsrs	r0, r7
    549e:	0007      	movs	r7, r0
    54a0:	2b20      	cmp	r3, #32
    54a2:	d100      	bne.n	54a6 <__aeabi_dsub+0x486>
    54a4:	e08e      	b.n	55c4 <__aeabi_dsub+0x5a4>
    54a6:	2040      	movs	r0, #64	; 0x40
    54a8:	1ac3      	subs	r3, r0, r3
    54aa:	4099      	lsls	r1, r3
    54ac:	430a      	orrs	r2, r1
    54ae:	1e51      	subs	r1, r2, #1
    54b0:	418a      	sbcs	r2, r1
    54b2:	2100      	movs	r1, #0
    54b4:	4317      	orrs	r7, r2
    54b6:	e692      	b.n	51de <__aeabi_dsub+0x1be>
    54b8:	2e00      	cmp	r6, #0
    54ba:	d114      	bne.n	54e6 <__aeabi_dsub+0x4c6>
    54bc:	0026      	movs	r6, r4
    54be:	4650      	mov	r0, sl
    54c0:	4306      	orrs	r6, r0
    54c2:	d062      	beq.n	558a <__aeabi_dsub+0x56a>
    54c4:	43db      	mvns	r3, r3
    54c6:	2b00      	cmp	r3, #0
    54c8:	d15c      	bne.n	5584 <__aeabi_dsub+0x564>
    54ca:	1887      	adds	r7, r0, r2
    54cc:	4297      	cmp	r7, r2
    54ce:	4192      	sbcs	r2, r2
    54d0:	1864      	adds	r4, r4, r1
    54d2:	4252      	negs	r2, r2
    54d4:	18a4      	adds	r4, r4, r2
    54d6:	4666      	mov	r6, ip
    54d8:	e687      	b.n	51ea <__aeabi_dsub+0x1ca>
    54da:	4650      	mov	r0, sl
    54dc:	4320      	orrs	r0, r4
    54de:	1e44      	subs	r4, r0, #1
    54e0:	41a0      	sbcs	r0, r4
    54e2:	2400      	movs	r4, #0
    54e4:	e760      	b.n	53a8 <__aeabi_dsub+0x388>
    54e6:	4e57      	ldr	r6, [pc, #348]	; (5644 <__aeabi_dsub+0x624>)
    54e8:	45b4      	cmp	ip, r6
    54ea:	d04e      	beq.n	558a <__aeabi_dsub+0x56a>
    54ec:	2680      	movs	r6, #128	; 0x80
    54ee:	0436      	lsls	r6, r6, #16
    54f0:	425b      	negs	r3, r3
    54f2:	4334      	orrs	r4, r6
    54f4:	2b38      	cmp	r3, #56	; 0x38
    54f6:	dd00      	ble.n	54fa <__aeabi_dsub+0x4da>
    54f8:	e07f      	b.n	55fa <__aeabi_dsub+0x5da>
    54fa:	2b1f      	cmp	r3, #31
    54fc:	dd00      	ble.n	5500 <__aeabi_dsub+0x4e0>
    54fe:	e08b      	b.n	5618 <__aeabi_dsub+0x5f8>
    5500:	2620      	movs	r6, #32
    5502:	0027      	movs	r7, r4
    5504:	4650      	mov	r0, sl
    5506:	1af6      	subs	r6, r6, r3
    5508:	40b7      	lsls	r7, r6
    550a:	40d8      	lsrs	r0, r3
    550c:	4307      	orrs	r7, r0
    550e:	4650      	mov	r0, sl
    5510:	40b0      	lsls	r0, r6
    5512:	1e46      	subs	r6, r0, #1
    5514:	41b0      	sbcs	r0, r6
    5516:	4307      	orrs	r7, r0
    5518:	40dc      	lsrs	r4, r3
    551a:	18bf      	adds	r7, r7, r2
    551c:	e7d6      	b.n	54cc <__aeabi_dsub+0x4ac>
    551e:	000d      	movs	r5, r1
    5520:	4315      	orrs	r5, r2
    5522:	d100      	bne.n	5526 <__aeabi_dsub+0x506>
    5524:	e602      	b.n	512c <__aeabi_dsub+0x10c>
    5526:	4650      	mov	r0, sl
    5528:	1a80      	subs	r0, r0, r2
    552a:	4582      	cmp	sl, r0
    552c:	41bf      	sbcs	r7, r7
    552e:	1a65      	subs	r5, r4, r1
    5530:	427f      	negs	r7, r7
    5532:	1bed      	subs	r5, r5, r7
    5534:	4684      	mov	ip, r0
    5536:	0228      	lsls	r0, r5, #8
    5538:	d400      	bmi.n	553c <__aeabi_dsub+0x51c>
    553a:	e68d      	b.n	5258 <__aeabi_dsub+0x238>
    553c:	4650      	mov	r0, sl
    553e:	1a17      	subs	r7, r2, r0
    5540:	42ba      	cmp	r2, r7
    5542:	4192      	sbcs	r2, r2
    5544:	1b0c      	subs	r4, r1, r4
    5546:	4252      	negs	r2, r2
    5548:	1aa4      	subs	r4, r4, r2
    554a:	4698      	mov	r8, r3
    554c:	e5ee      	b.n	512c <__aeabi_dsub+0x10c>
    554e:	000d      	movs	r5, r1
    5550:	4315      	orrs	r5, r2
    5552:	d100      	bne.n	5556 <__aeabi_dsub+0x536>
    5554:	e76b      	b.n	542e <__aeabi_dsub+0x40e>
    5556:	4650      	mov	r0, sl
    5558:	0767      	lsls	r7, r4, #29
    555a:	08c0      	lsrs	r0, r0, #3
    555c:	4307      	orrs	r7, r0
    555e:	2080      	movs	r0, #128	; 0x80
    5560:	08e4      	lsrs	r4, r4, #3
    5562:	0300      	lsls	r0, r0, #12
    5564:	4204      	tst	r4, r0
    5566:	d007      	beq.n	5578 <__aeabi_dsub+0x558>
    5568:	08cd      	lsrs	r5, r1, #3
    556a:	4205      	tst	r5, r0
    556c:	d104      	bne.n	5578 <__aeabi_dsub+0x558>
    556e:	002c      	movs	r4, r5
    5570:	4698      	mov	r8, r3
    5572:	08d7      	lsrs	r7, r2, #3
    5574:	0749      	lsls	r1, r1, #29
    5576:	430f      	orrs	r7, r1
    5578:	0f7b      	lsrs	r3, r7, #29
    557a:	00e4      	lsls	r4, r4, #3
    557c:	431c      	orrs	r4, r3
    557e:	00ff      	lsls	r7, r7, #3
    5580:	4e30      	ldr	r6, [pc, #192]	; (5644 <__aeabi_dsub+0x624>)
    5582:	e5d3      	b.n	512c <__aeabi_dsub+0x10c>
    5584:	4e2f      	ldr	r6, [pc, #188]	; (5644 <__aeabi_dsub+0x624>)
    5586:	45b4      	cmp	ip, r6
    5588:	d1b4      	bne.n	54f4 <__aeabi_dsub+0x4d4>
    558a:	000c      	movs	r4, r1
    558c:	0017      	movs	r7, r2
    558e:	4666      	mov	r6, ip
    5590:	e5cc      	b.n	512c <__aeabi_dsub+0x10c>
    5592:	2700      	movs	r7, #0
    5594:	2400      	movs	r4, #0
    5596:	e5e8      	b.n	516a <__aeabi_dsub+0x14a>
    5598:	2b00      	cmp	r3, #0
    559a:	d039      	beq.n	5610 <__aeabi_dsub+0x5f0>
    559c:	000b      	movs	r3, r1
    559e:	4313      	orrs	r3, r2
    55a0:	d100      	bne.n	55a4 <__aeabi_dsub+0x584>
    55a2:	e744      	b.n	542e <__aeabi_dsub+0x40e>
    55a4:	08c0      	lsrs	r0, r0, #3
    55a6:	0767      	lsls	r7, r4, #29
    55a8:	4307      	orrs	r7, r0
    55aa:	2080      	movs	r0, #128	; 0x80
    55ac:	08e4      	lsrs	r4, r4, #3
    55ae:	0300      	lsls	r0, r0, #12
    55b0:	4204      	tst	r4, r0
    55b2:	d0e1      	beq.n	5578 <__aeabi_dsub+0x558>
    55b4:	08cb      	lsrs	r3, r1, #3
    55b6:	4203      	tst	r3, r0
    55b8:	d1de      	bne.n	5578 <__aeabi_dsub+0x558>
    55ba:	08d7      	lsrs	r7, r2, #3
    55bc:	0749      	lsls	r1, r1, #29
    55be:	430f      	orrs	r7, r1
    55c0:	001c      	movs	r4, r3
    55c2:	e7d9      	b.n	5578 <__aeabi_dsub+0x558>
    55c4:	2100      	movs	r1, #0
    55c6:	e771      	b.n	54ac <__aeabi_dsub+0x48c>
    55c8:	2500      	movs	r5, #0
    55ca:	2700      	movs	r7, #0
    55cc:	e5e9      	b.n	51a2 <__aeabi_dsub+0x182>
    55ce:	002e      	movs	r6, r5
    55d0:	0027      	movs	r7, r4
    55d2:	3e20      	subs	r6, #32
    55d4:	40f7      	lsrs	r7, r6
    55d6:	2d20      	cmp	r5, #32
    55d8:	d02f      	beq.n	563a <__aeabi_dsub+0x61a>
    55da:	2640      	movs	r6, #64	; 0x40
    55dc:	1b75      	subs	r5, r6, r5
    55de:	40ac      	lsls	r4, r5
    55e0:	4650      	mov	r0, sl
    55e2:	4320      	orrs	r0, r4
    55e4:	1e44      	subs	r4, r0, #1
    55e6:	41a0      	sbcs	r0, r4
    55e8:	2400      	movs	r4, #0
    55ea:	4338      	orrs	r0, r7
    55ec:	e6dc      	b.n	53a8 <__aeabi_dsub+0x388>
    55ee:	2480      	movs	r4, #128	; 0x80
    55f0:	2500      	movs	r5, #0
    55f2:	0324      	lsls	r4, r4, #12
    55f4:	4e13      	ldr	r6, [pc, #76]	; (5644 <__aeabi_dsub+0x624>)
    55f6:	2700      	movs	r7, #0
    55f8:	e5d3      	b.n	51a2 <__aeabi_dsub+0x182>
    55fa:	4650      	mov	r0, sl
    55fc:	4320      	orrs	r0, r4
    55fe:	0007      	movs	r7, r0
    5600:	1e78      	subs	r0, r7, #1
    5602:	4187      	sbcs	r7, r0
    5604:	2400      	movs	r4, #0
    5606:	18bf      	adds	r7, r7, r2
    5608:	e760      	b.n	54cc <__aeabi_dsub+0x4ac>
    560a:	000c      	movs	r4, r1
    560c:	0017      	movs	r7, r2
    560e:	e58d      	b.n	512c <__aeabi_dsub+0x10c>
    5610:	000c      	movs	r4, r1
    5612:	0017      	movs	r7, r2
    5614:	4e0b      	ldr	r6, [pc, #44]	; (5644 <__aeabi_dsub+0x624>)
    5616:	e589      	b.n	512c <__aeabi_dsub+0x10c>
    5618:	001e      	movs	r6, r3
    561a:	0027      	movs	r7, r4
    561c:	3e20      	subs	r6, #32
    561e:	40f7      	lsrs	r7, r6
    5620:	2b20      	cmp	r3, #32
    5622:	d00c      	beq.n	563e <__aeabi_dsub+0x61e>
    5624:	2640      	movs	r6, #64	; 0x40
    5626:	1af3      	subs	r3, r6, r3
    5628:	409c      	lsls	r4, r3
    562a:	4650      	mov	r0, sl
    562c:	4320      	orrs	r0, r4
    562e:	1e44      	subs	r4, r0, #1
    5630:	41a0      	sbcs	r0, r4
    5632:	4307      	orrs	r7, r0
    5634:	2400      	movs	r4, #0
    5636:	18bf      	adds	r7, r7, r2
    5638:	e748      	b.n	54cc <__aeabi_dsub+0x4ac>
    563a:	2400      	movs	r4, #0
    563c:	e7d0      	b.n	55e0 <__aeabi_dsub+0x5c0>
    563e:	2400      	movs	r4, #0
    5640:	e7f3      	b.n	562a <__aeabi_dsub+0x60a>
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	000007ff 	.word	0x000007ff
    5648:	ff7fffff 	.word	0xff7fffff

0000564c <__aeabi_d2iz>:
    564c:	b530      	push	{r4, r5, lr}
    564e:	4d13      	ldr	r5, [pc, #76]	; (569c <__aeabi_d2iz+0x50>)
    5650:	030a      	lsls	r2, r1, #12
    5652:	004b      	lsls	r3, r1, #1
    5654:	0b12      	lsrs	r2, r2, #12
    5656:	0d5b      	lsrs	r3, r3, #21
    5658:	0fc9      	lsrs	r1, r1, #31
    565a:	2400      	movs	r4, #0
    565c:	42ab      	cmp	r3, r5
    565e:	dd10      	ble.n	5682 <__aeabi_d2iz+0x36>
    5660:	4c0f      	ldr	r4, [pc, #60]	; (56a0 <__aeabi_d2iz+0x54>)
    5662:	42a3      	cmp	r3, r4
    5664:	dc0f      	bgt.n	5686 <__aeabi_d2iz+0x3a>
    5666:	2480      	movs	r4, #128	; 0x80
    5668:	4d0e      	ldr	r5, [pc, #56]	; (56a4 <__aeabi_d2iz+0x58>)
    566a:	0364      	lsls	r4, r4, #13
    566c:	4322      	orrs	r2, r4
    566e:	1aed      	subs	r5, r5, r3
    5670:	2d1f      	cmp	r5, #31
    5672:	dd0b      	ble.n	568c <__aeabi_d2iz+0x40>
    5674:	480c      	ldr	r0, [pc, #48]	; (56a8 <__aeabi_d2iz+0x5c>)
    5676:	1ac3      	subs	r3, r0, r3
    5678:	40da      	lsrs	r2, r3
    567a:	4254      	negs	r4, r2
    567c:	2900      	cmp	r1, #0
    567e:	d100      	bne.n	5682 <__aeabi_d2iz+0x36>
    5680:	0014      	movs	r4, r2
    5682:	0020      	movs	r0, r4
    5684:	bd30      	pop	{r4, r5, pc}
    5686:	4b09      	ldr	r3, [pc, #36]	; (56ac <__aeabi_d2iz+0x60>)
    5688:	18cc      	adds	r4, r1, r3
    568a:	e7fa      	b.n	5682 <__aeabi_d2iz+0x36>
    568c:	4c08      	ldr	r4, [pc, #32]	; (56b0 <__aeabi_d2iz+0x64>)
    568e:	40e8      	lsrs	r0, r5
    5690:	46a4      	mov	ip, r4
    5692:	4463      	add	r3, ip
    5694:	409a      	lsls	r2, r3
    5696:	4302      	orrs	r2, r0
    5698:	e7ef      	b.n	567a <__aeabi_d2iz+0x2e>
    569a:	46c0      	nop			; (mov r8, r8)
    569c:	000003fe 	.word	0x000003fe
    56a0:	0000041d 	.word	0x0000041d
    56a4:	00000433 	.word	0x00000433
    56a8:	00000413 	.word	0x00000413
    56ac:	7fffffff 	.word	0x7fffffff
    56b0:	fffffbed 	.word	0xfffffbed

000056b4 <__aeabi_ui2d>:
    56b4:	b510      	push	{r4, lr}
    56b6:	1e04      	subs	r4, r0, #0
    56b8:	d028      	beq.n	570c <__aeabi_ui2d+0x58>
    56ba:	f000 f94d 	bl	5958 <__clzsi2>
    56be:	4b15      	ldr	r3, [pc, #84]	; (5714 <__aeabi_ui2d+0x60>)
    56c0:	4a15      	ldr	r2, [pc, #84]	; (5718 <__aeabi_ui2d+0x64>)
    56c2:	1a1b      	subs	r3, r3, r0
    56c4:	1ad2      	subs	r2, r2, r3
    56c6:	2a1f      	cmp	r2, #31
    56c8:	dd15      	ble.n	56f6 <__aeabi_ui2d+0x42>
    56ca:	4a14      	ldr	r2, [pc, #80]	; (571c <__aeabi_ui2d+0x68>)
    56cc:	1ad2      	subs	r2, r2, r3
    56ce:	4094      	lsls	r4, r2
    56d0:	2200      	movs	r2, #0
    56d2:	0324      	lsls	r4, r4, #12
    56d4:	055b      	lsls	r3, r3, #21
    56d6:	0b24      	lsrs	r4, r4, #12
    56d8:	0d5b      	lsrs	r3, r3, #21
    56da:	2100      	movs	r1, #0
    56dc:	0010      	movs	r0, r2
    56de:	0324      	lsls	r4, r4, #12
    56e0:	0d0a      	lsrs	r2, r1, #20
    56e2:	0b24      	lsrs	r4, r4, #12
    56e4:	0512      	lsls	r2, r2, #20
    56e6:	4322      	orrs	r2, r4
    56e8:	4c0d      	ldr	r4, [pc, #52]	; (5720 <__aeabi_ui2d+0x6c>)
    56ea:	051b      	lsls	r3, r3, #20
    56ec:	4022      	ands	r2, r4
    56ee:	4313      	orrs	r3, r2
    56f0:	005b      	lsls	r3, r3, #1
    56f2:	0859      	lsrs	r1, r3, #1
    56f4:	bd10      	pop	{r4, pc}
    56f6:	0021      	movs	r1, r4
    56f8:	4091      	lsls	r1, r2
    56fa:	000a      	movs	r2, r1
    56fc:	210b      	movs	r1, #11
    56fe:	1a08      	subs	r0, r1, r0
    5700:	40c4      	lsrs	r4, r0
    5702:	055b      	lsls	r3, r3, #21
    5704:	0324      	lsls	r4, r4, #12
    5706:	0b24      	lsrs	r4, r4, #12
    5708:	0d5b      	lsrs	r3, r3, #21
    570a:	e7e6      	b.n	56da <__aeabi_ui2d+0x26>
    570c:	2300      	movs	r3, #0
    570e:	2400      	movs	r4, #0
    5710:	2200      	movs	r2, #0
    5712:	e7e2      	b.n	56da <__aeabi_ui2d+0x26>
    5714:	0000041e 	.word	0x0000041e
    5718:	00000433 	.word	0x00000433
    571c:	00000413 	.word	0x00000413
    5720:	800fffff 	.word	0x800fffff

00005724 <__aeabi_f2d>:
    5724:	0041      	lsls	r1, r0, #1
    5726:	0e09      	lsrs	r1, r1, #24
    5728:	1c4b      	adds	r3, r1, #1
    572a:	b570      	push	{r4, r5, r6, lr}
    572c:	b2db      	uxtb	r3, r3
    572e:	0246      	lsls	r6, r0, #9
    5730:	0a75      	lsrs	r5, r6, #9
    5732:	0fc4      	lsrs	r4, r0, #31
    5734:	2b01      	cmp	r3, #1
    5736:	dd14      	ble.n	5762 <__aeabi_f2d+0x3e>
    5738:	23e0      	movs	r3, #224	; 0xe0
    573a:	009b      	lsls	r3, r3, #2
    573c:	076d      	lsls	r5, r5, #29
    573e:	0b36      	lsrs	r6, r6, #12
    5740:	18cb      	adds	r3, r1, r3
    5742:	2100      	movs	r1, #0
    5744:	0d0a      	lsrs	r2, r1, #20
    5746:	0028      	movs	r0, r5
    5748:	0512      	lsls	r2, r2, #20
    574a:	4d1c      	ldr	r5, [pc, #112]	; (57bc <__aeabi_f2d+0x98>)
    574c:	4332      	orrs	r2, r6
    574e:	055b      	lsls	r3, r3, #21
    5750:	402a      	ands	r2, r5
    5752:	085b      	lsrs	r3, r3, #1
    5754:	4313      	orrs	r3, r2
    5756:	005b      	lsls	r3, r3, #1
    5758:	07e4      	lsls	r4, r4, #31
    575a:	085b      	lsrs	r3, r3, #1
    575c:	4323      	orrs	r3, r4
    575e:	0019      	movs	r1, r3
    5760:	bd70      	pop	{r4, r5, r6, pc}
    5762:	2900      	cmp	r1, #0
    5764:	d114      	bne.n	5790 <__aeabi_f2d+0x6c>
    5766:	2d00      	cmp	r5, #0
    5768:	d01e      	beq.n	57a8 <__aeabi_f2d+0x84>
    576a:	0028      	movs	r0, r5
    576c:	f000 f8f4 	bl	5958 <__clzsi2>
    5770:	280a      	cmp	r0, #10
    5772:	dc1c      	bgt.n	57ae <__aeabi_f2d+0x8a>
    5774:	230b      	movs	r3, #11
    5776:	002a      	movs	r2, r5
    5778:	1a1b      	subs	r3, r3, r0
    577a:	40da      	lsrs	r2, r3
    577c:	0003      	movs	r3, r0
    577e:	3315      	adds	r3, #21
    5780:	409d      	lsls	r5, r3
    5782:	4b0f      	ldr	r3, [pc, #60]	; (57c0 <__aeabi_f2d+0x9c>)
    5784:	0312      	lsls	r2, r2, #12
    5786:	1a1b      	subs	r3, r3, r0
    5788:	055b      	lsls	r3, r3, #21
    578a:	0b16      	lsrs	r6, r2, #12
    578c:	0d5b      	lsrs	r3, r3, #21
    578e:	e7d8      	b.n	5742 <__aeabi_f2d+0x1e>
    5790:	2d00      	cmp	r5, #0
    5792:	d006      	beq.n	57a2 <__aeabi_f2d+0x7e>
    5794:	0b32      	lsrs	r2, r6, #12
    5796:	2680      	movs	r6, #128	; 0x80
    5798:	0336      	lsls	r6, r6, #12
    579a:	076d      	lsls	r5, r5, #29
    579c:	4316      	orrs	r6, r2
    579e:	4b09      	ldr	r3, [pc, #36]	; (57c4 <__aeabi_f2d+0xa0>)
    57a0:	e7cf      	b.n	5742 <__aeabi_f2d+0x1e>
    57a2:	4b08      	ldr	r3, [pc, #32]	; (57c4 <__aeabi_f2d+0xa0>)
    57a4:	2600      	movs	r6, #0
    57a6:	e7cc      	b.n	5742 <__aeabi_f2d+0x1e>
    57a8:	2300      	movs	r3, #0
    57aa:	2600      	movs	r6, #0
    57ac:	e7c9      	b.n	5742 <__aeabi_f2d+0x1e>
    57ae:	0003      	movs	r3, r0
    57b0:	002a      	movs	r2, r5
    57b2:	3b0b      	subs	r3, #11
    57b4:	409a      	lsls	r2, r3
    57b6:	2500      	movs	r5, #0
    57b8:	e7e3      	b.n	5782 <__aeabi_f2d+0x5e>
    57ba:	46c0      	nop			; (mov r8, r8)
    57bc:	800fffff 	.word	0x800fffff
    57c0:	00000389 	.word	0x00000389
    57c4:	000007ff 	.word	0x000007ff

000057c8 <__aeabi_d2f>:
    57c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ca:	004c      	lsls	r4, r1, #1
    57cc:	0d64      	lsrs	r4, r4, #21
    57ce:	030b      	lsls	r3, r1, #12
    57d0:	1c62      	adds	r2, r4, #1
    57d2:	0f45      	lsrs	r5, r0, #29
    57d4:	0a5b      	lsrs	r3, r3, #9
    57d6:	0552      	lsls	r2, r2, #21
    57d8:	432b      	orrs	r3, r5
    57da:	0fc9      	lsrs	r1, r1, #31
    57dc:	00c5      	lsls	r5, r0, #3
    57de:	0d52      	lsrs	r2, r2, #21
    57e0:	2a01      	cmp	r2, #1
    57e2:	dd28      	ble.n	5836 <__aeabi_d2f+0x6e>
    57e4:	4a3a      	ldr	r2, [pc, #232]	; (58d0 <__aeabi_d2f+0x108>)
    57e6:	18a6      	adds	r6, r4, r2
    57e8:	2efe      	cmp	r6, #254	; 0xfe
    57ea:	dc1b      	bgt.n	5824 <__aeabi_d2f+0x5c>
    57ec:	2e00      	cmp	r6, #0
    57ee:	dd3e      	ble.n	586e <__aeabi_d2f+0xa6>
    57f0:	0180      	lsls	r0, r0, #6
    57f2:	0002      	movs	r2, r0
    57f4:	1e50      	subs	r0, r2, #1
    57f6:	4182      	sbcs	r2, r0
    57f8:	0f6d      	lsrs	r5, r5, #29
    57fa:	432a      	orrs	r2, r5
    57fc:	00db      	lsls	r3, r3, #3
    57fe:	4313      	orrs	r3, r2
    5800:	075a      	lsls	r2, r3, #29
    5802:	d004      	beq.n	580e <__aeabi_d2f+0x46>
    5804:	220f      	movs	r2, #15
    5806:	401a      	ands	r2, r3
    5808:	2a04      	cmp	r2, #4
    580a:	d000      	beq.n	580e <__aeabi_d2f+0x46>
    580c:	3304      	adds	r3, #4
    580e:	2280      	movs	r2, #128	; 0x80
    5810:	04d2      	lsls	r2, r2, #19
    5812:	401a      	ands	r2, r3
    5814:	d05a      	beq.n	58cc <__aeabi_d2f+0x104>
    5816:	3601      	adds	r6, #1
    5818:	2eff      	cmp	r6, #255	; 0xff
    581a:	d003      	beq.n	5824 <__aeabi_d2f+0x5c>
    581c:	019b      	lsls	r3, r3, #6
    581e:	0a5b      	lsrs	r3, r3, #9
    5820:	b2f4      	uxtb	r4, r6
    5822:	e001      	b.n	5828 <__aeabi_d2f+0x60>
    5824:	24ff      	movs	r4, #255	; 0xff
    5826:	2300      	movs	r3, #0
    5828:	0258      	lsls	r0, r3, #9
    582a:	05e4      	lsls	r4, r4, #23
    582c:	0a40      	lsrs	r0, r0, #9
    582e:	07c9      	lsls	r1, r1, #31
    5830:	4320      	orrs	r0, r4
    5832:	4308      	orrs	r0, r1
    5834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5836:	2c00      	cmp	r4, #0
    5838:	d007      	beq.n	584a <__aeabi_d2f+0x82>
    583a:	431d      	orrs	r5, r3
    583c:	d0f2      	beq.n	5824 <__aeabi_d2f+0x5c>
    583e:	2080      	movs	r0, #128	; 0x80
    5840:	00db      	lsls	r3, r3, #3
    5842:	0480      	lsls	r0, r0, #18
    5844:	4303      	orrs	r3, r0
    5846:	26ff      	movs	r6, #255	; 0xff
    5848:	e7da      	b.n	5800 <__aeabi_d2f+0x38>
    584a:	432b      	orrs	r3, r5
    584c:	d003      	beq.n	5856 <__aeabi_d2f+0x8e>
    584e:	2305      	movs	r3, #5
    5850:	08db      	lsrs	r3, r3, #3
    5852:	2cff      	cmp	r4, #255	; 0xff
    5854:	d003      	beq.n	585e <__aeabi_d2f+0x96>
    5856:	025b      	lsls	r3, r3, #9
    5858:	0a5b      	lsrs	r3, r3, #9
    585a:	b2e4      	uxtb	r4, r4
    585c:	e7e4      	b.n	5828 <__aeabi_d2f+0x60>
    585e:	2b00      	cmp	r3, #0
    5860:	d032      	beq.n	58c8 <__aeabi_d2f+0x100>
    5862:	2080      	movs	r0, #128	; 0x80
    5864:	03c0      	lsls	r0, r0, #15
    5866:	4303      	orrs	r3, r0
    5868:	025b      	lsls	r3, r3, #9
    586a:	0a5b      	lsrs	r3, r3, #9
    586c:	e7dc      	b.n	5828 <__aeabi_d2f+0x60>
    586e:	0032      	movs	r2, r6
    5870:	3217      	adds	r2, #23
    5872:	db14      	blt.n	589e <__aeabi_d2f+0xd6>
    5874:	2280      	movs	r2, #128	; 0x80
    5876:	271e      	movs	r7, #30
    5878:	0412      	lsls	r2, r2, #16
    587a:	4313      	orrs	r3, r2
    587c:	1bbf      	subs	r7, r7, r6
    587e:	2f1f      	cmp	r7, #31
    5880:	dc0f      	bgt.n	58a2 <__aeabi_d2f+0xda>
    5882:	4a14      	ldr	r2, [pc, #80]	; (58d4 <__aeabi_d2f+0x10c>)
    5884:	4694      	mov	ip, r2
    5886:	4464      	add	r4, ip
    5888:	002a      	movs	r2, r5
    588a:	40a5      	lsls	r5, r4
    588c:	002e      	movs	r6, r5
    588e:	40a3      	lsls	r3, r4
    5890:	1e75      	subs	r5, r6, #1
    5892:	41ae      	sbcs	r6, r5
    5894:	40fa      	lsrs	r2, r7
    5896:	4333      	orrs	r3, r6
    5898:	4313      	orrs	r3, r2
    589a:	2600      	movs	r6, #0
    589c:	e7b0      	b.n	5800 <__aeabi_d2f+0x38>
    589e:	2400      	movs	r4, #0
    58a0:	e7d5      	b.n	584e <__aeabi_d2f+0x86>
    58a2:	2202      	movs	r2, #2
    58a4:	4252      	negs	r2, r2
    58a6:	1b96      	subs	r6, r2, r6
    58a8:	001a      	movs	r2, r3
    58aa:	40f2      	lsrs	r2, r6
    58ac:	2f20      	cmp	r7, #32
    58ae:	d009      	beq.n	58c4 <__aeabi_d2f+0xfc>
    58b0:	4809      	ldr	r0, [pc, #36]	; (58d8 <__aeabi_d2f+0x110>)
    58b2:	4684      	mov	ip, r0
    58b4:	4464      	add	r4, ip
    58b6:	40a3      	lsls	r3, r4
    58b8:	432b      	orrs	r3, r5
    58ba:	1e5d      	subs	r5, r3, #1
    58bc:	41ab      	sbcs	r3, r5
    58be:	2600      	movs	r6, #0
    58c0:	4313      	orrs	r3, r2
    58c2:	e79d      	b.n	5800 <__aeabi_d2f+0x38>
    58c4:	2300      	movs	r3, #0
    58c6:	e7f7      	b.n	58b8 <__aeabi_d2f+0xf0>
    58c8:	2300      	movs	r3, #0
    58ca:	e7ad      	b.n	5828 <__aeabi_d2f+0x60>
    58cc:	0034      	movs	r4, r6
    58ce:	e7bf      	b.n	5850 <__aeabi_d2f+0x88>
    58d0:	fffffc80 	.word	0xfffffc80
    58d4:	fffffc82 	.word	0xfffffc82
    58d8:	fffffca2 	.word	0xfffffca2

000058dc <__aeabi_cdrcmple>:
    58dc:	4684      	mov	ip, r0
    58de:	1c10      	adds	r0, r2, #0
    58e0:	4662      	mov	r2, ip
    58e2:	468c      	mov	ip, r1
    58e4:	1c19      	adds	r1, r3, #0
    58e6:	4663      	mov	r3, ip
    58e8:	e000      	b.n	58ec <__aeabi_cdcmpeq>
    58ea:	46c0      	nop			; (mov r8, r8)

000058ec <__aeabi_cdcmpeq>:
    58ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    58ee:	f000 f8ef 	bl	5ad0 <__ledf2>
    58f2:	2800      	cmp	r0, #0
    58f4:	d401      	bmi.n	58fa <__aeabi_cdcmpeq+0xe>
    58f6:	2100      	movs	r1, #0
    58f8:	42c8      	cmn	r0, r1
    58fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000058fc <__aeabi_dcmpeq>:
    58fc:	b510      	push	{r4, lr}
    58fe:	f000 f849 	bl	5994 <__eqdf2>
    5902:	4240      	negs	r0, r0
    5904:	3001      	adds	r0, #1
    5906:	bd10      	pop	{r4, pc}

00005908 <__aeabi_dcmplt>:
    5908:	b510      	push	{r4, lr}
    590a:	f000 f8e1 	bl	5ad0 <__ledf2>
    590e:	2800      	cmp	r0, #0
    5910:	db01      	blt.n	5916 <__aeabi_dcmplt+0xe>
    5912:	2000      	movs	r0, #0
    5914:	bd10      	pop	{r4, pc}
    5916:	2001      	movs	r0, #1
    5918:	bd10      	pop	{r4, pc}
    591a:	46c0      	nop			; (mov r8, r8)

0000591c <__aeabi_dcmple>:
    591c:	b510      	push	{r4, lr}
    591e:	f000 f8d7 	bl	5ad0 <__ledf2>
    5922:	2800      	cmp	r0, #0
    5924:	dd01      	ble.n	592a <__aeabi_dcmple+0xe>
    5926:	2000      	movs	r0, #0
    5928:	bd10      	pop	{r4, pc}
    592a:	2001      	movs	r0, #1
    592c:	bd10      	pop	{r4, pc}
    592e:	46c0      	nop			; (mov r8, r8)

00005930 <__aeabi_dcmpgt>:
    5930:	b510      	push	{r4, lr}
    5932:	f000 f869 	bl	5a08 <__gedf2>
    5936:	2800      	cmp	r0, #0
    5938:	dc01      	bgt.n	593e <__aeabi_dcmpgt+0xe>
    593a:	2000      	movs	r0, #0
    593c:	bd10      	pop	{r4, pc}
    593e:	2001      	movs	r0, #1
    5940:	bd10      	pop	{r4, pc}
    5942:	46c0      	nop			; (mov r8, r8)

00005944 <__aeabi_dcmpge>:
    5944:	b510      	push	{r4, lr}
    5946:	f000 f85f 	bl	5a08 <__gedf2>
    594a:	2800      	cmp	r0, #0
    594c:	da01      	bge.n	5952 <__aeabi_dcmpge+0xe>
    594e:	2000      	movs	r0, #0
    5950:	bd10      	pop	{r4, pc}
    5952:	2001      	movs	r0, #1
    5954:	bd10      	pop	{r4, pc}
    5956:	46c0      	nop			; (mov r8, r8)

00005958 <__clzsi2>:
    5958:	211c      	movs	r1, #28
    595a:	2301      	movs	r3, #1
    595c:	041b      	lsls	r3, r3, #16
    595e:	4298      	cmp	r0, r3
    5960:	d301      	bcc.n	5966 <__clzsi2+0xe>
    5962:	0c00      	lsrs	r0, r0, #16
    5964:	3910      	subs	r1, #16
    5966:	0a1b      	lsrs	r3, r3, #8
    5968:	4298      	cmp	r0, r3
    596a:	d301      	bcc.n	5970 <__clzsi2+0x18>
    596c:	0a00      	lsrs	r0, r0, #8
    596e:	3908      	subs	r1, #8
    5970:	091b      	lsrs	r3, r3, #4
    5972:	4298      	cmp	r0, r3
    5974:	d301      	bcc.n	597a <__clzsi2+0x22>
    5976:	0900      	lsrs	r0, r0, #4
    5978:	3904      	subs	r1, #4
    597a:	a202      	add	r2, pc, #8	; (adr r2, 5984 <__clzsi2+0x2c>)
    597c:	5c10      	ldrb	r0, [r2, r0]
    597e:	1840      	adds	r0, r0, r1
    5980:	4770      	bx	lr
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	02020304 	.word	0x02020304
    5988:	01010101 	.word	0x01010101
	...

00005994 <__eqdf2>:
    5994:	b5f0      	push	{r4, r5, r6, r7, lr}
    5996:	464f      	mov	r7, r9
    5998:	4646      	mov	r6, r8
    599a:	46d6      	mov	lr, sl
    599c:	005c      	lsls	r4, r3, #1
    599e:	b5c0      	push	{r6, r7, lr}
    59a0:	031f      	lsls	r7, r3, #12
    59a2:	0fdb      	lsrs	r3, r3, #31
    59a4:	469a      	mov	sl, r3
    59a6:	4b17      	ldr	r3, [pc, #92]	; (5a04 <__eqdf2+0x70>)
    59a8:	030e      	lsls	r6, r1, #12
    59aa:	004d      	lsls	r5, r1, #1
    59ac:	4684      	mov	ip, r0
    59ae:	4680      	mov	r8, r0
    59b0:	0b36      	lsrs	r6, r6, #12
    59b2:	0d6d      	lsrs	r5, r5, #21
    59b4:	0fc9      	lsrs	r1, r1, #31
    59b6:	4691      	mov	r9, r2
    59b8:	0b3f      	lsrs	r7, r7, #12
    59ba:	0d64      	lsrs	r4, r4, #21
    59bc:	2001      	movs	r0, #1
    59be:	429d      	cmp	r5, r3
    59c0:	d008      	beq.n	59d4 <__eqdf2+0x40>
    59c2:	429c      	cmp	r4, r3
    59c4:	d001      	beq.n	59ca <__eqdf2+0x36>
    59c6:	42a5      	cmp	r5, r4
    59c8:	d00b      	beq.n	59e2 <__eqdf2+0x4e>
    59ca:	bc1c      	pop	{r2, r3, r4}
    59cc:	4690      	mov	r8, r2
    59ce:	4699      	mov	r9, r3
    59d0:	46a2      	mov	sl, r4
    59d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59d4:	4663      	mov	r3, ip
    59d6:	4333      	orrs	r3, r6
    59d8:	d1f7      	bne.n	59ca <__eqdf2+0x36>
    59da:	42ac      	cmp	r4, r5
    59dc:	d1f5      	bne.n	59ca <__eqdf2+0x36>
    59de:	433a      	orrs	r2, r7
    59e0:	d1f3      	bne.n	59ca <__eqdf2+0x36>
    59e2:	2001      	movs	r0, #1
    59e4:	42be      	cmp	r6, r7
    59e6:	d1f0      	bne.n	59ca <__eqdf2+0x36>
    59e8:	45c8      	cmp	r8, r9
    59ea:	d1ee      	bne.n	59ca <__eqdf2+0x36>
    59ec:	4551      	cmp	r1, sl
    59ee:	d007      	beq.n	5a00 <__eqdf2+0x6c>
    59f0:	2d00      	cmp	r5, #0
    59f2:	d1ea      	bne.n	59ca <__eqdf2+0x36>
    59f4:	4663      	mov	r3, ip
    59f6:	431e      	orrs	r6, r3
    59f8:	0030      	movs	r0, r6
    59fa:	1e46      	subs	r6, r0, #1
    59fc:	41b0      	sbcs	r0, r6
    59fe:	e7e4      	b.n	59ca <__eqdf2+0x36>
    5a00:	2000      	movs	r0, #0
    5a02:	e7e2      	b.n	59ca <__eqdf2+0x36>
    5a04:	000007ff 	.word	0x000007ff

00005a08 <__gedf2>:
    5a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a0a:	4645      	mov	r5, r8
    5a0c:	46de      	mov	lr, fp
    5a0e:	4657      	mov	r7, sl
    5a10:	464e      	mov	r6, r9
    5a12:	b5e0      	push	{r5, r6, r7, lr}
    5a14:	031f      	lsls	r7, r3, #12
    5a16:	0b3d      	lsrs	r5, r7, #12
    5a18:	4f2c      	ldr	r7, [pc, #176]	; (5acc <__gedf2+0xc4>)
    5a1a:	030e      	lsls	r6, r1, #12
    5a1c:	004c      	lsls	r4, r1, #1
    5a1e:	46ab      	mov	fp, r5
    5a20:	005d      	lsls	r5, r3, #1
    5a22:	4684      	mov	ip, r0
    5a24:	0b36      	lsrs	r6, r6, #12
    5a26:	0d64      	lsrs	r4, r4, #21
    5a28:	0fc9      	lsrs	r1, r1, #31
    5a2a:	4690      	mov	r8, r2
    5a2c:	0d6d      	lsrs	r5, r5, #21
    5a2e:	0fdb      	lsrs	r3, r3, #31
    5a30:	42bc      	cmp	r4, r7
    5a32:	d02a      	beq.n	5a8a <__gedf2+0x82>
    5a34:	4f25      	ldr	r7, [pc, #148]	; (5acc <__gedf2+0xc4>)
    5a36:	42bd      	cmp	r5, r7
    5a38:	d02d      	beq.n	5a96 <__gedf2+0x8e>
    5a3a:	2c00      	cmp	r4, #0
    5a3c:	d10f      	bne.n	5a5e <__gedf2+0x56>
    5a3e:	4330      	orrs	r0, r6
    5a40:	0007      	movs	r7, r0
    5a42:	4681      	mov	r9, r0
    5a44:	4278      	negs	r0, r7
    5a46:	4178      	adcs	r0, r7
    5a48:	b2c0      	uxtb	r0, r0
    5a4a:	2d00      	cmp	r5, #0
    5a4c:	d117      	bne.n	5a7e <__gedf2+0x76>
    5a4e:	465f      	mov	r7, fp
    5a50:	433a      	orrs	r2, r7
    5a52:	d114      	bne.n	5a7e <__gedf2+0x76>
    5a54:	464b      	mov	r3, r9
    5a56:	2000      	movs	r0, #0
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d00a      	beq.n	5a72 <__gedf2+0x6a>
    5a5c:	e006      	b.n	5a6c <__gedf2+0x64>
    5a5e:	2d00      	cmp	r5, #0
    5a60:	d102      	bne.n	5a68 <__gedf2+0x60>
    5a62:	4658      	mov	r0, fp
    5a64:	4302      	orrs	r2, r0
    5a66:	d001      	beq.n	5a6c <__gedf2+0x64>
    5a68:	4299      	cmp	r1, r3
    5a6a:	d018      	beq.n	5a9e <__gedf2+0x96>
    5a6c:	4248      	negs	r0, r1
    5a6e:	2101      	movs	r1, #1
    5a70:	4308      	orrs	r0, r1
    5a72:	bc3c      	pop	{r2, r3, r4, r5}
    5a74:	4690      	mov	r8, r2
    5a76:	4699      	mov	r9, r3
    5a78:	46a2      	mov	sl, r4
    5a7a:	46ab      	mov	fp, r5
    5a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a7e:	2800      	cmp	r0, #0
    5a80:	d0f2      	beq.n	5a68 <__gedf2+0x60>
    5a82:	2001      	movs	r0, #1
    5a84:	3b01      	subs	r3, #1
    5a86:	4318      	orrs	r0, r3
    5a88:	e7f3      	b.n	5a72 <__gedf2+0x6a>
    5a8a:	0037      	movs	r7, r6
    5a8c:	4307      	orrs	r7, r0
    5a8e:	d0d1      	beq.n	5a34 <__gedf2+0x2c>
    5a90:	2002      	movs	r0, #2
    5a92:	4240      	negs	r0, r0
    5a94:	e7ed      	b.n	5a72 <__gedf2+0x6a>
    5a96:	465f      	mov	r7, fp
    5a98:	4317      	orrs	r7, r2
    5a9a:	d0ce      	beq.n	5a3a <__gedf2+0x32>
    5a9c:	e7f8      	b.n	5a90 <__gedf2+0x88>
    5a9e:	42ac      	cmp	r4, r5
    5aa0:	dce4      	bgt.n	5a6c <__gedf2+0x64>
    5aa2:	da03      	bge.n	5aac <__gedf2+0xa4>
    5aa4:	1e48      	subs	r0, r1, #1
    5aa6:	2101      	movs	r1, #1
    5aa8:	4308      	orrs	r0, r1
    5aaa:	e7e2      	b.n	5a72 <__gedf2+0x6a>
    5aac:	455e      	cmp	r6, fp
    5aae:	d8dd      	bhi.n	5a6c <__gedf2+0x64>
    5ab0:	d006      	beq.n	5ac0 <__gedf2+0xb8>
    5ab2:	2000      	movs	r0, #0
    5ab4:	455e      	cmp	r6, fp
    5ab6:	d2dc      	bcs.n	5a72 <__gedf2+0x6a>
    5ab8:	2301      	movs	r3, #1
    5aba:	1e48      	subs	r0, r1, #1
    5abc:	4318      	orrs	r0, r3
    5abe:	e7d8      	b.n	5a72 <__gedf2+0x6a>
    5ac0:	45c4      	cmp	ip, r8
    5ac2:	d8d3      	bhi.n	5a6c <__gedf2+0x64>
    5ac4:	2000      	movs	r0, #0
    5ac6:	45c4      	cmp	ip, r8
    5ac8:	d3f6      	bcc.n	5ab8 <__gedf2+0xb0>
    5aca:	e7d2      	b.n	5a72 <__gedf2+0x6a>
    5acc:	000007ff 	.word	0x000007ff

00005ad0 <__ledf2>:
    5ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ad2:	464e      	mov	r6, r9
    5ad4:	4645      	mov	r5, r8
    5ad6:	46de      	mov	lr, fp
    5ad8:	4657      	mov	r7, sl
    5ada:	005c      	lsls	r4, r3, #1
    5adc:	b5e0      	push	{r5, r6, r7, lr}
    5ade:	031f      	lsls	r7, r3, #12
    5ae0:	0fdb      	lsrs	r3, r3, #31
    5ae2:	4699      	mov	r9, r3
    5ae4:	4b2a      	ldr	r3, [pc, #168]	; (5b90 <__ledf2+0xc0>)
    5ae6:	030e      	lsls	r6, r1, #12
    5ae8:	004d      	lsls	r5, r1, #1
    5aea:	0fc9      	lsrs	r1, r1, #31
    5aec:	4684      	mov	ip, r0
    5aee:	0b36      	lsrs	r6, r6, #12
    5af0:	0d6d      	lsrs	r5, r5, #21
    5af2:	468b      	mov	fp, r1
    5af4:	4690      	mov	r8, r2
    5af6:	0b3f      	lsrs	r7, r7, #12
    5af8:	0d64      	lsrs	r4, r4, #21
    5afa:	429d      	cmp	r5, r3
    5afc:	d020      	beq.n	5b40 <__ledf2+0x70>
    5afe:	4b24      	ldr	r3, [pc, #144]	; (5b90 <__ledf2+0xc0>)
    5b00:	429c      	cmp	r4, r3
    5b02:	d022      	beq.n	5b4a <__ledf2+0x7a>
    5b04:	2d00      	cmp	r5, #0
    5b06:	d112      	bne.n	5b2e <__ledf2+0x5e>
    5b08:	4330      	orrs	r0, r6
    5b0a:	4243      	negs	r3, r0
    5b0c:	4143      	adcs	r3, r0
    5b0e:	b2db      	uxtb	r3, r3
    5b10:	2c00      	cmp	r4, #0
    5b12:	d01f      	beq.n	5b54 <__ledf2+0x84>
    5b14:	2b00      	cmp	r3, #0
    5b16:	d00c      	beq.n	5b32 <__ledf2+0x62>
    5b18:	464b      	mov	r3, r9
    5b1a:	2001      	movs	r0, #1
    5b1c:	3b01      	subs	r3, #1
    5b1e:	4303      	orrs	r3, r0
    5b20:	0018      	movs	r0, r3
    5b22:	bc3c      	pop	{r2, r3, r4, r5}
    5b24:	4690      	mov	r8, r2
    5b26:	4699      	mov	r9, r3
    5b28:	46a2      	mov	sl, r4
    5b2a:	46ab      	mov	fp, r5
    5b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b2e:	2c00      	cmp	r4, #0
    5b30:	d016      	beq.n	5b60 <__ledf2+0x90>
    5b32:	45cb      	cmp	fp, r9
    5b34:	d017      	beq.n	5b66 <__ledf2+0x96>
    5b36:	465b      	mov	r3, fp
    5b38:	4259      	negs	r1, r3
    5b3a:	2301      	movs	r3, #1
    5b3c:	430b      	orrs	r3, r1
    5b3e:	e7ef      	b.n	5b20 <__ledf2+0x50>
    5b40:	0031      	movs	r1, r6
    5b42:	2302      	movs	r3, #2
    5b44:	4301      	orrs	r1, r0
    5b46:	d1eb      	bne.n	5b20 <__ledf2+0x50>
    5b48:	e7d9      	b.n	5afe <__ledf2+0x2e>
    5b4a:	0039      	movs	r1, r7
    5b4c:	2302      	movs	r3, #2
    5b4e:	4311      	orrs	r1, r2
    5b50:	d1e6      	bne.n	5b20 <__ledf2+0x50>
    5b52:	e7d7      	b.n	5b04 <__ledf2+0x34>
    5b54:	433a      	orrs	r2, r7
    5b56:	d1dd      	bne.n	5b14 <__ledf2+0x44>
    5b58:	2300      	movs	r3, #0
    5b5a:	2800      	cmp	r0, #0
    5b5c:	d0e0      	beq.n	5b20 <__ledf2+0x50>
    5b5e:	e7ea      	b.n	5b36 <__ledf2+0x66>
    5b60:	433a      	orrs	r2, r7
    5b62:	d1e6      	bne.n	5b32 <__ledf2+0x62>
    5b64:	e7e7      	b.n	5b36 <__ledf2+0x66>
    5b66:	42a5      	cmp	r5, r4
    5b68:	dce5      	bgt.n	5b36 <__ledf2+0x66>
    5b6a:	db05      	blt.n	5b78 <__ledf2+0xa8>
    5b6c:	42be      	cmp	r6, r7
    5b6e:	d8e2      	bhi.n	5b36 <__ledf2+0x66>
    5b70:	d007      	beq.n	5b82 <__ledf2+0xb2>
    5b72:	2300      	movs	r3, #0
    5b74:	42be      	cmp	r6, r7
    5b76:	d2d3      	bcs.n	5b20 <__ledf2+0x50>
    5b78:	4659      	mov	r1, fp
    5b7a:	2301      	movs	r3, #1
    5b7c:	3901      	subs	r1, #1
    5b7e:	430b      	orrs	r3, r1
    5b80:	e7ce      	b.n	5b20 <__ledf2+0x50>
    5b82:	45c4      	cmp	ip, r8
    5b84:	d8d7      	bhi.n	5b36 <__ledf2+0x66>
    5b86:	2300      	movs	r3, #0
    5b88:	45c4      	cmp	ip, r8
    5b8a:	d3f5      	bcc.n	5b78 <__ledf2+0xa8>
    5b8c:	e7c8      	b.n	5b20 <__ledf2+0x50>
    5b8e:	46c0      	nop			; (mov r8, r8)
    5b90:	000007ff 	.word	0x000007ff

00005b94 <__errno>:
    5b94:	4b01      	ldr	r3, [pc, #4]	; (5b9c <__errno+0x8>)
    5b96:	6818      	ldr	r0, [r3, #0]
    5b98:	4770      	bx	lr
    5b9a:	46c0      	nop			; (mov r8, r8)
    5b9c:	2000000c 	.word	0x2000000c

00005ba0 <__libc_init_array>:
    5ba0:	b570      	push	{r4, r5, r6, lr}
    5ba2:	4e0d      	ldr	r6, [pc, #52]	; (5bd8 <__libc_init_array+0x38>)
    5ba4:	4d0d      	ldr	r5, [pc, #52]	; (5bdc <__libc_init_array+0x3c>)
    5ba6:	2400      	movs	r4, #0
    5ba8:	1bad      	subs	r5, r5, r6
    5baa:	10ad      	asrs	r5, r5, #2
    5bac:	d005      	beq.n	5bba <__libc_init_array+0x1a>
    5bae:	00a3      	lsls	r3, r4, #2
    5bb0:	58f3      	ldr	r3, [r6, r3]
    5bb2:	3401      	adds	r4, #1
    5bb4:	4798      	blx	r3
    5bb6:	42a5      	cmp	r5, r4
    5bb8:	d1f9      	bne.n	5bae <__libc_init_array+0xe>
    5bba:	f000 fa13 	bl	5fe4 <_init>
    5bbe:	4e08      	ldr	r6, [pc, #32]	; (5be0 <__libc_init_array+0x40>)
    5bc0:	4d08      	ldr	r5, [pc, #32]	; (5be4 <__libc_init_array+0x44>)
    5bc2:	2400      	movs	r4, #0
    5bc4:	1bad      	subs	r5, r5, r6
    5bc6:	10ad      	asrs	r5, r5, #2
    5bc8:	d005      	beq.n	5bd6 <__libc_init_array+0x36>
    5bca:	00a3      	lsls	r3, r4, #2
    5bcc:	58f3      	ldr	r3, [r6, r3]
    5bce:	3401      	adds	r4, #1
    5bd0:	4798      	blx	r3
    5bd2:	42a5      	cmp	r5, r4
    5bd4:	d1f9      	bne.n	5bca <__libc_init_array+0x2a>
    5bd6:	bd70      	pop	{r4, r5, r6, pc}
    5bd8:	00005ff0 	.word	0x00005ff0
    5bdc:	00005ff0 	.word	0x00005ff0
    5be0:	00005ff0 	.word	0x00005ff0
    5be4:	00005ff8 	.word	0x00005ff8

00005be8 <strlen>:
    5be8:	b510      	push	{r4, lr}
    5bea:	0783      	lsls	r3, r0, #30
    5bec:	d025      	beq.n	5c3a <strlen+0x52>
    5bee:	7803      	ldrb	r3, [r0, #0]
    5bf0:	2b00      	cmp	r3, #0
    5bf2:	d024      	beq.n	5c3e <strlen+0x56>
    5bf4:	0003      	movs	r3, r0
    5bf6:	2103      	movs	r1, #3
    5bf8:	e002      	b.n	5c00 <strlen+0x18>
    5bfa:	781a      	ldrb	r2, [r3, #0]
    5bfc:	2a00      	cmp	r2, #0
    5bfe:	d01a      	beq.n	5c36 <strlen+0x4e>
    5c00:	3301      	adds	r3, #1
    5c02:	420b      	tst	r3, r1
    5c04:	d1f9      	bne.n	5bfa <strlen+0x12>
    5c06:	6819      	ldr	r1, [r3, #0]
    5c08:	4a0e      	ldr	r2, [pc, #56]	; (5c44 <strlen+0x5c>)
    5c0a:	4c0f      	ldr	r4, [pc, #60]	; (5c48 <strlen+0x60>)
    5c0c:	188a      	adds	r2, r1, r2
    5c0e:	438a      	bics	r2, r1
    5c10:	4222      	tst	r2, r4
    5c12:	d106      	bne.n	5c22 <strlen+0x3a>
    5c14:	3304      	adds	r3, #4
    5c16:	6819      	ldr	r1, [r3, #0]
    5c18:	4a0a      	ldr	r2, [pc, #40]	; (5c44 <strlen+0x5c>)
    5c1a:	188a      	adds	r2, r1, r2
    5c1c:	438a      	bics	r2, r1
    5c1e:	4222      	tst	r2, r4
    5c20:	d0f8      	beq.n	5c14 <strlen+0x2c>
    5c22:	001a      	movs	r2, r3
    5c24:	781b      	ldrb	r3, [r3, #0]
    5c26:	2b00      	cmp	r3, #0
    5c28:	d003      	beq.n	5c32 <strlen+0x4a>
    5c2a:	3201      	adds	r2, #1
    5c2c:	7811      	ldrb	r1, [r2, #0]
    5c2e:	2900      	cmp	r1, #0
    5c30:	d1fb      	bne.n	5c2a <strlen+0x42>
    5c32:	1a10      	subs	r0, r2, r0
    5c34:	bd10      	pop	{r4, pc}
    5c36:	1a18      	subs	r0, r3, r0
    5c38:	e7fc      	b.n	5c34 <strlen+0x4c>
    5c3a:	0003      	movs	r3, r0
    5c3c:	e7e3      	b.n	5c06 <strlen+0x1e>
    5c3e:	2000      	movs	r0, #0
    5c40:	e7f8      	b.n	5c34 <strlen+0x4c>
    5c42:	46c0      	nop			; (mov r8, r8)
    5c44:	fefefeff 	.word	0xfefefeff
    5c48:	80808080 	.word	0x80808080

00005c4c <register_fini>:
    5c4c:	4b03      	ldr	r3, [pc, #12]	; (5c5c <register_fini+0x10>)
    5c4e:	b510      	push	{r4, lr}
    5c50:	2b00      	cmp	r3, #0
    5c52:	d002      	beq.n	5c5a <register_fini+0xe>
    5c54:	4802      	ldr	r0, [pc, #8]	; (5c60 <register_fini+0x14>)
    5c56:	f000 f805 	bl	5c64 <atexit>
    5c5a:	bd10      	pop	{r4, pc}
    5c5c:	00000000 	.word	0x00000000
    5c60:	00005c75 	.word	0x00005c75

00005c64 <atexit>:
    5c64:	b510      	push	{r4, lr}
    5c66:	0001      	movs	r1, r0
    5c68:	2300      	movs	r3, #0
    5c6a:	2200      	movs	r2, #0
    5c6c:	2000      	movs	r0, #0
    5c6e:	f000 f81f 	bl	5cb0 <__register_exitproc>
    5c72:	bd10      	pop	{r4, pc}

00005c74 <__libc_fini_array>:
    5c74:	b570      	push	{r4, r5, r6, lr}
    5c76:	4b09      	ldr	r3, [pc, #36]	; (5c9c <__libc_fini_array+0x28>)
    5c78:	4c09      	ldr	r4, [pc, #36]	; (5ca0 <__libc_fini_array+0x2c>)
    5c7a:	1ae4      	subs	r4, r4, r3
    5c7c:	10a4      	asrs	r4, r4, #2
    5c7e:	d009      	beq.n	5c94 <__libc_fini_array+0x20>
    5c80:	4a08      	ldr	r2, [pc, #32]	; (5ca4 <__libc_fini_array+0x30>)
    5c82:	18a5      	adds	r5, r4, r2
    5c84:	00ad      	lsls	r5, r5, #2
    5c86:	18ed      	adds	r5, r5, r3
    5c88:	682b      	ldr	r3, [r5, #0]
    5c8a:	3c01      	subs	r4, #1
    5c8c:	4798      	blx	r3
    5c8e:	3d04      	subs	r5, #4
    5c90:	2c00      	cmp	r4, #0
    5c92:	d1f9      	bne.n	5c88 <__libc_fini_array+0x14>
    5c94:	f000 f9b0 	bl	5ff8 <_fini>
    5c98:	bd70      	pop	{r4, r5, r6, pc}
    5c9a:	46c0      	nop			; (mov r8, r8)
    5c9c:	00006004 	.word	0x00006004
    5ca0:	00006008 	.word	0x00006008
    5ca4:	3fffffff 	.word	0x3fffffff

00005ca8 <__retarget_lock_acquire_recursive>:
    5ca8:	4770      	bx	lr
    5caa:	46c0      	nop			; (mov r8, r8)

00005cac <__retarget_lock_release_recursive>:
    5cac:	4770      	bx	lr
    5cae:	46c0      	nop			; (mov r8, r8)

00005cb0 <__register_exitproc>:
    5cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cb2:	464e      	mov	r6, r9
    5cb4:	4645      	mov	r5, r8
    5cb6:	46de      	mov	lr, fp
    5cb8:	4657      	mov	r7, sl
    5cba:	b5e0      	push	{r5, r6, r7, lr}
    5cbc:	4d36      	ldr	r5, [pc, #216]	; (5d98 <__register_exitproc+0xe8>)
    5cbe:	b083      	sub	sp, #12
    5cc0:	0006      	movs	r6, r0
    5cc2:	6828      	ldr	r0, [r5, #0]
    5cc4:	4698      	mov	r8, r3
    5cc6:	000f      	movs	r7, r1
    5cc8:	4691      	mov	r9, r2
    5cca:	f7ff ffed 	bl	5ca8 <__retarget_lock_acquire_recursive>
    5cce:	4b33      	ldr	r3, [pc, #204]	; (5d9c <__register_exitproc+0xec>)
    5cd0:	681c      	ldr	r4, [r3, #0]
    5cd2:	23a4      	movs	r3, #164	; 0xa4
    5cd4:	005b      	lsls	r3, r3, #1
    5cd6:	58e0      	ldr	r0, [r4, r3]
    5cd8:	2800      	cmp	r0, #0
    5cda:	d052      	beq.n	5d82 <__register_exitproc+0xd2>
    5cdc:	6843      	ldr	r3, [r0, #4]
    5cde:	2b1f      	cmp	r3, #31
    5ce0:	dc13      	bgt.n	5d0a <__register_exitproc+0x5a>
    5ce2:	1c5a      	adds	r2, r3, #1
    5ce4:	9201      	str	r2, [sp, #4]
    5ce6:	2e00      	cmp	r6, #0
    5ce8:	d128      	bne.n	5d3c <__register_exitproc+0x8c>
    5cea:	9a01      	ldr	r2, [sp, #4]
    5cec:	3302      	adds	r3, #2
    5cee:	009b      	lsls	r3, r3, #2
    5cf0:	6042      	str	r2, [r0, #4]
    5cf2:	501f      	str	r7, [r3, r0]
    5cf4:	6828      	ldr	r0, [r5, #0]
    5cf6:	f7ff ffd9 	bl	5cac <__retarget_lock_release_recursive>
    5cfa:	2000      	movs	r0, #0
    5cfc:	b003      	add	sp, #12
    5cfe:	bc3c      	pop	{r2, r3, r4, r5}
    5d00:	4690      	mov	r8, r2
    5d02:	4699      	mov	r9, r3
    5d04:	46a2      	mov	sl, r4
    5d06:	46ab      	mov	fp, r5
    5d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d0a:	4b25      	ldr	r3, [pc, #148]	; (5da0 <__register_exitproc+0xf0>)
    5d0c:	2b00      	cmp	r3, #0
    5d0e:	d03d      	beq.n	5d8c <__register_exitproc+0xdc>
    5d10:	20c8      	movs	r0, #200	; 0xc8
    5d12:	0040      	lsls	r0, r0, #1
    5d14:	e000      	b.n	5d18 <__register_exitproc+0x68>
    5d16:	bf00      	nop
    5d18:	2800      	cmp	r0, #0
    5d1a:	d037      	beq.n	5d8c <__register_exitproc+0xdc>
    5d1c:	22a4      	movs	r2, #164	; 0xa4
    5d1e:	2300      	movs	r3, #0
    5d20:	0052      	lsls	r2, r2, #1
    5d22:	58a1      	ldr	r1, [r4, r2]
    5d24:	6043      	str	r3, [r0, #4]
    5d26:	6001      	str	r1, [r0, #0]
    5d28:	50a0      	str	r0, [r4, r2]
    5d2a:	3240      	adds	r2, #64	; 0x40
    5d2c:	5083      	str	r3, [r0, r2]
    5d2e:	3204      	adds	r2, #4
    5d30:	5083      	str	r3, [r0, r2]
    5d32:	3301      	adds	r3, #1
    5d34:	9301      	str	r3, [sp, #4]
    5d36:	2300      	movs	r3, #0
    5d38:	2e00      	cmp	r6, #0
    5d3a:	d0d6      	beq.n	5cea <__register_exitproc+0x3a>
    5d3c:	009a      	lsls	r2, r3, #2
    5d3e:	4692      	mov	sl, r2
    5d40:	4482      	add	sl, r0
    5d42:	464a      	mov	r2, r9
    5d44:	2188      	movs	r1, #136	; 0x88
    5d46:	4654      	mov	r4, sl
    5d48:	5062      	str	r2, [r4, r1]
    5d4a:	22c4      	movs	r2, #196	; 0xc4
    5d4c:	0052      	lsls	r2, r2, #1
    5d4e:	4691      	mov	r9, r2
    5d50:	4481      	add	r9, r0
    5d52:	464a      	mov	r2, r9
    5d54:	3987      	subs	r1, #135	; 0x87
    5d56:	4099      	lsls	r1, r3
    5d58:	6812      	ldr	r2, [r2, #0]
    5d5a:	468b      	mov	fp, r1
    5d5c:	430a      	orrs	r2, r1
    5d5e:	4694      	mov	ip, r2
    5d60:	464a      	mov	r2, r9
    5d62:	4661      	mov	r1, ip
    5d64:	6011      	str	r1, [r2, #0]
    5d66:	2284      	movs	r2, #132	; 0x84
    5d68:	4641      	mov	r1, r8
    5d6a:	0052      	lsls	r2, r2, #1
    5d6c:	50a1      	str	r1, [r4, r2]
    5d6e:	2e02      	cmp	r6, #2
    5d70:	d1bb      	bne.n	5cea <__register_exitproc+0x3a>
    5d72:	0002      	movs	r2, r0
    5d74:	465c      	mov	r4, fp
    5d76:	328d      	adds	r2, #141	; 0x8d
    5d78:	32ff      	adds	r2, #255	; 0xff
    5d7a:	6811      	ldr	r1, [r2, #0]
    5d7c:	430c      	orrs	r4, r1
    5d7e:	6014      	str	r4, [r2, #0]
    5d80:	e7b3      	b.n	5cea <__register_exitproc+0x3a>
    5d82:	0020      	movs	r0, r4
    5d84:	304d      	adds	r0, #77	; 0x4d
    5d86:	30ff      	adds	r0, #255	; 0xff
    5d88:	50e0      	str	r0, [r4, r3]
    5d8a:	e7a7      	b.n	5cdc <__register_exitproc+0x2c>
    5d8c:	6828      	ldr	r0, [r5, #0]
    5d8e:	f7ff ff8d 	bl	5cac <__retarget_lock_release_recursive>
    5d92:	2001      	movs	r0, #1
    5d94:	4240      	negs	r0, r0
    5d96:	e7b1      	b.n	5cfc <__register_exitproc+0x4c>
    5d98:	20000438 	.word	0x20000438
    5d9c:	00005fe0 	.word	0x00005fe0
    5da0:	00000000 	.word	0x00000000
    5da4:	00000b04 	.word	0x00000b04
    5da8:	00000b0e 	.word	0x00000b0e
    5dac:	00000b1c 	.word	0x00000b1c
    5db0:	00000b2c 	.word	0x00000b2c
    5db4:	00000b36 	.word	0x00000b36
    5db8:	00000b46 	.word	0x00000b46
    5dbc:	00000b56 	.word	0x00000b56
    5dc0:	00000b60 	.word	0x00000b60
    5dc4:	00000b70 	.word	0x00000b70
    5dc8:	00000b80 	.word	0x00000b80
    5dcc:	00000b8a 	.word	0x00000b8a
    5dd0:	00000b9a 	.word	0x00000b9a
    5dd4:	00000baa 	.word	0x00000baa
    5dd8:	00000bb4 	.word	0x00000bb4
    5ddc:	00000bc4 	.word	0x00000bc4
    5de0:	00000bd4 	.word	0x00000bd4
    5de4:	00000bde 	.word	0x00000bde
    5de8:	00000bee 	.word	0x00000bee
    5dec:	00000bfe 	.word	0x00000bfe
    5df0:	00000c08 	.word	0x00000c08
    5df4:	00000c18 	.word	0x00000c18
    5df8:	00000c28 	.word	0x00000c28
    5dfc:	00000c32 	.word	0x00000c32
    5e00:	00000c42 	.word	0x00000c42
    5e04:	00000c52 	.word	0x00000c52
    5e08:	00001250 	.word	0x00001250
    5e0c:	000011a4 	.word	0x000011a4
    5e10:	0000118a 	.word	0x0000118a
    5e14:	000011ba 	.word	0x000011ba
    5e18:	000011d4 	.word	0x000011d4
    5e1c:	00001218 	.word	0x00001218
    5e20:	69676562 	.word	0x69676562
    5e24:	6e696e6e 	.word	0x6e696e6e
    5e28:	6f732067 	.word	0x6f732067
    5e2c:	6f206f6c 	.word	0x6f206f6c
    5e30:	61726570 	.word	0x61726570
    5e34:	6e6f6974 	.word	0x6e6f6974
    5e38:	00000000 	.word	0x00000000
    5e3c:	69676562 	.word	0x69676562
    5e40:	6e696e6e 	.word	0x6e696e6e
    5e44:	61682067 	.word	0x61682067
    5e48:	6320646e 	.word	0x6320646e
    5e4c:	72746e6f 	.word	0x72746e6f
    5e50:	656c6c6f 	.word	0x656c6c6f
    5e54:	00000072 	.word	0x00000072
    5e58:	69676562 	.word	0x69676562
    5e5c:	6e696e6e 	.word	0x6e696e6e
    5e60:	61682067 	.word	0x61682067
    5e64:	6d20646e 	.word	0x6d20646e
    5e68:	6f727269 	.word	0x6f727269
    5e6c:	00000072 	.word	0x00000072
    5e70:	69676562 	.word	0x69676562
    5e74:	6e696e6e 	.word	0x6e696e6e
    5e78:	61642067 	.word	0x61642067
    5e7c:	63206174 	.word	0x63206174
    5e80:	656c6c6f 	.word	0x656c6c6f
    5e84:	6f697463 	.word	0x6f697463
    5e88:	0000006e 	.word	0x0000006e
    5e8c:	00002e1a 	.word	0x00002e1a
    5e90:	00002e46 	.word	0x00002e46
    5e94:	00002e72 	.word	0x00002e72
    5e98:	00002efc 	.word	0x00002efc
    5e9c:	00002ece 	.word	0x00002ece
    5ea0:	00002ea0 	.word	0x00002ea0
    5ea4:	00002f2a 	.word	0x00002f2a
    5ea8:	00002f58 	.word	0x00002f58
    5eac:	00002f86 	.word	0x00002f86
    5eb0:	00003010 	.word	0x00003010
    5eb4:	00002fe2 	.word	0x00002fe2
    5eb8:	00002fb4 	.word	0x00002fb4
    5ebc:	0000309a 	.word	0x0000309a
    5ec0:	0000306c 	.word	0x0000306c
    5ec4:	0000303e 	.word	0x0000303e
    5ec8:	000030c8 	.word	0x000030c8
    5ecc:	736f6361 	.word	0x736f6361
    5ed0:	00000066 	.word	0x00000066
    5ed4:	00000000 	.word	0x00000000
    5ed8:	74727173 	.word	0x74727173
    5edc:	00000066 	.word	0x00000066
    5ee0:	0000411c 	.word	0x0000411c
    5ee4:	000040ec 	.word	0x000040ec
    5ee8:	000040fe 	.word	0x000040fe
    5eec:	00004040 	.word	0x00004040
    5ef0:	000040fe 	.word	0x000040fe
    5ef4:	000040e2 	.word	0x000040e2
    5ef8:	000040fe 	.word	0x000040fe
    5efc:	00004040 	.word	0x00004040
    5f00:	000040ec 	.word	0x000040ec
    5f04:	000040ec 	.word	0x000040ec
    5f08:	000040e2 	.word	0x000040e2
    5f0c:	00004040 	.word	0x00004040
    5f10:	00004048 	.word	0x00004048
    5f14:	00004048 	.word	0x00004048
    5f18:	00004048 	.word	0x00004048
    5f1c:	00004104 	.word	0x00004104
    5f20:	000040ec 	.word	0x000040ec
    5f24:	000040ec 	.word	0x000040ec
    5f28:	000040c0 	.word	0x000040c0
    5f2c:	000041a4 	.word	0x000041a4
    5f30:	000040c0 	.word	0x000040c0
    5f34:	000040e2 	.word	0x000040e2
    5f38:	000040c0 	.word	0x000040c0
    5f3c:	000041a4 	.word	0x000041a4
    5f40:	000040ec 	.word	0x000040ec
    5f44:	000040ec 	.word	0x000040ec
    5f48:	000040e2 	.word	0x000040e2
    5f4c:	000041a4 	.word	0x000041a4
    5f50:	00004048 	.word	0x00004048
    5f54:	00004048 	.word	0x00004048
    5f58:	00004048 	.word	0x00004048
    5f5c:	000041ae 	.word	0x000041ae
    5f60:	0000449c 	.word	0x0000449c
    5f64:	000043ec 	.word	0x000043ec
    5f68:	000043ec 	.word	0x000043ec
    5f6c:	000043ea 	.word	0x000043ea
    5f70:	0000448e 	.word	0x0000448e
    5f74:	0000448e 	.word	0x0000448e
    5f78:	00004484 	.word	0x00004484
    5f7c:	000043ea 	.word	0x000043ea
    5f80:	0000448e 	.word	0x0000448e
    5f84:	00004484 	.word	0x00004484
    5f88:	0000448e 	.word	0x0000448e
    5f8c:	000043ea 	.word	0x000043ea
    5f90:	00004494 	.word	0x00004494
    5f94:	00004494 	.word	0x00004494
    5f98:	00004494 	.word	0x00004494
    5f9c:	00004524 	.word	0x00004524
    5fa0:	00004bb0 	.word	0x00004bb0
    5fa4:	00004b92 	.word	0x00004b92
    5fa8:	00004b4c 	.word	0x00004b4c
    5fac:	00004a6a 	.word	0x00004a6a
    5fb0:	00004b4c 	.word	0x00004b4c
    5fb4:	00004b84 	.word	0x00004b84
    5fb8:	00004b4c 	.word	0x00004b4c
    5fbc:	00004a6a 	.word	0x00004a6a
    5fc0:	00004b92 	.word	0x00004b92
    5fc4:	00004b92 	.word	0x00004b92
    5fc8:	00004b84 	.word	0x00004b84
    5fcc:	00004a6a 	.word	0x00004a6a
    5fd0:	00004a62 	.word	0x00004a62
    5fd4:	00004a62 	.word	0x00004a62
    5fd8:	00004a62 	.word	0x00004a62
    5fdc:	00004dc8 	.word	0x00004dc8

00005fe0 <_global_impure_ptr>:
    5fe0:	20000010                                ... 

00005fe4 <_init>:
    5fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fe6:	46c0      	nop			; (mov r8, r8)
    5fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fea:	bc08      	pop	{r3}
    5fec:	469e      	mov	lr, r3
    5fee:	4770      	bx	lr

00005ff0 <__init_array_start>:
    5ff0:	00005c4d 	.word	0x00005c4d

00005ff4 <__frame_dummy_init_array_entry>:
    5ff4:	000000dd                                ....

00005ff8 <_fini>:
    5ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ffa:	46c0      	nop			; (mov r8, r8)
    5ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5ffe:	bc08      	pop	{r3}
    6000:	469e      	mov	lr, r3
    6002:	4770      	bx	lr

00006004 <__fini_array_start>:
    6004:	000000b5 	.word	0x000000b5
